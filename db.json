{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"8ca07c6d7b4ff1dd8ab4f14fde521ea3ce4eb84a","modified":1559399176306},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1559399176328},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1559399176328},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1559399176328},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1559399176329},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1559399176329},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1559399176329},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1559399176329},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1559399176329},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1559399176330},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1559399176330},{"_id":"themes/next/README.cn.md","hash":"58ffe752bc4b7f0069fcd6304bbc2d5ff7b80f89","modified":1559399176330},{"_id":"themes/next/README.md","hash":"898213e66d34a46c3cf8446bf693bd50db0d3269","modified":1559399176330},{"_id":"themes/next/_config.yml","hash":"86cec1604a18bf1e79c59f1b74568a7ea69a8876","modified":1559399176330},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1559399176330},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1559399176331},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1559399176345},{"_id":"source/_posts/client-go_informer.md","hash":"7786ad595bb56505c26763708da3a93d68e60283","modified":1559399176306},{"_id":"source/_posts/docker-introduces.md","hash":"1499579f0d3f70c3ec41c4828fcc4e51cab6396c","modified":1559399176307},{"_id":"source/_posts/etcd-backup.md","hash":"07bb8e8ddcfaac251a5b7fe3613044445de08dff","modified":1559399176307},{"_id":"source/_posts/etcd-enable-https.md","hash":"b6d41d23d296a277615372f297f498e808fbf53f","modified":1559399176307},{"_id":"source/_posts/golang_modules.md","hash":"2c618e9dcbcf34e08088f67e4188ddd00bc9014d","modified":1561207774781},{"_id":"source/_posts/k8s-audit-webhook.md","hash":"a5ea8f5a7299c010c2e46cc07d3557bf8f79b48e","modified":1559399176307},{"_id":"source/_posts/k8s-crontab.md","hash":"0d883567cac92795a73d88e54ba87608f5bae5be","modified":1559399176307},{"_id":"source/_posts/k8s_components_ha.md","hash":"25cde1ab797f28cc67b873fdb9ae15a1e71095f0","modified":1562921781988},{"_id":"source/_posts/k8s_crd_verify.md","hash":"d2ed33b146fd20e2b168d537abc01383dc0cbbf9","modified":1562036821313},{"_id":"source/_posts/k8s_dashboard_prometheus.md","hash":"6ff65831c4edc87dbf94926b24555ff3ff838937","modified":1559399176308},{"_id":"source/_posts/k8s_events.md","hash":"60b45270ab92599beb3613de8dbc023f90b45854","modified":1559399176308},{"_id":"source/_posts/k8s_leader_election.md","hash":"1296698ad8fdcfe8936d03b74ae2f9c62f0ca7b6","modified":1563694862864},{"_id":"source/_posts/k8s_metrics_server.md","hash":"247f3694017e47ff7b08724fa95c35998360bca2","modified":1559399176308},{"_id":"source/_posts/k8s_v1.12.md","hash":"5aa00b0807a14ca1d52fba344ce7653b4292ba39","modified":1559399176308},{"_id":"source/_posts/kubeadm.md","hash":"31a7c68204a348f17927bc649a6b2bbefbf0b647","modified":1559399176308},{"_id":"source/_posts/kubeconfig.md","hash":"8dff92301fa78234d0a28bacb4a5fdac7ae746e6","modified":1559399176309},{"_id":"source/_posts/kubectl_plugin.md","hash":"d0114f6edffa61e76e5a463f0f862b97156e9093","modified":1559399176309},{"_id":"source/_posts/kubelet-modules.md","hash":"29d34b26a70044302f50d8251405ff92a43bd3eb","modified":1559399176309},{"_id":"source/_posts/kubelet_create_pod.md","hash":"f913ad3c691bd70ecaae8582684e15c8cfb7553d","modified":1559399176309},{"_id":"source/_posts/kubelet_init.md","hash":"9860aeea547d740d78962e99e4eb33f647a02f39","modified":1559399176309},{"_id":"source/_posts/kubernetes-api.md","hash":"c491c2945893e1dd5865eda08bc7e5a91de85a70","modified":1559399176310},{"_id":"source/_posts/kubernetes-learn.md","hash":"c834d1dea6ccbd81fbf9b23048b8fce2ad471d32","modified":1559399176310},{"_id":"source/_posts/node_status.md","hash":"481eeb4dbf2d98af31cb374998d2a549f544f39f","modified":1560084558948},{"_id":"source/categories/index.md","hash":"812daa9e1c97a2c72ee357ad92f4de335db3c177","modified":1559399176310},{"_id":"source/about/index.md","hash":"7994a74983a24343c6b5991bcf80d81436fbcba8","modified":1559399176310},{"_id":"source/tags/index.md","hash":"5118f5301c54915b86d4e92b56a2fa9a9395abfc","modified":1559399176311},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1559399176328},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"352093a1b210c72136687fd2eee649244cee402c","modified":1559399176328},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1559399176329},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1559399176329},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1559399176331},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1559399176331},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1559399176331},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1559399176331},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1559399176331},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1559399176331},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1559399176331},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1559399176332},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1559399176332},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1559399176332},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1559399176332},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1559399176332},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1559399176332},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1559399176332},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1559399176332},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1559399176333},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1559399176333},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1559399176344},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1559399176344},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1559399176344},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1559399176344},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1559399176344},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1559399176345},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1559399176345},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1559399176345},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1559399176346},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1559399176389},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1559399176390},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1559399176390},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559399176361},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1559399176333},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1559399176333},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1559399176334},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1559399176334},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1559399176334},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1559399176334},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1559399176334},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1559399176334},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1559399176335},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1559399176335},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1559399176335},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1559399176335},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1559399176335},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1559399176336},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1559399176336},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1559399176337},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1559399176337},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1559399176338},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1559399176342},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1559399176342},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1559399176342},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1559399176342},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1559399176342},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1559399176342},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1559399176342},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1559399176346},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1559399176346},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1559399176346},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1559399176346},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1559399176346},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1559399176347},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1559399176347},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1559399176347},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1559399176347},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1559399176361},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1559399176361},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1559399176362},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1559399176362},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1559399176362},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1559399176362},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1559399176362},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1559399176362},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1559399176362},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1559399176362},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1559399176363},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1559399176363},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1559399176363},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1559399176363},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1559399176363},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1559399176363},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1559399176363},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1559399176364},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1559399176364},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559399176338},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559399176338},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559399176357},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559399176357},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559399176357},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559399176361},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559399176361},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1559399176335},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1559399176335},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1559399176336},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1559399176336},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1559399176336},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1559399176336},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1559399176336},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1559399176337},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1559399176337},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1559399176337},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1559399176338},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1559399176337},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1559399176338},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1559399176339},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1559399176339},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1559399176339},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1559399176339},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1559399176339},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1559399176339},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1559399176340},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1559399176340},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1559399176340},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1559399176340},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1559399176340},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1559399176340},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1559399176340},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1559399176341},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1559399176341},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1559399176341},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1559399176341},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1559399176341},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1559399176341},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1559399176341},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1559399176341},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1559399176343},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1559399176344},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1559399176344},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1559399176344},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1559399176357},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1559399176357},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1559399176357},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1559399176357},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1559399176360},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1559399176361},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1559399176361},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1559399176361},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1559399176364},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1559399176365},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1559399176365},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1559399176365},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1559399176366},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1559399176366},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1559399176366},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1559399176366},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1559399176367},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1559399176368},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1559399176368},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1559399176370},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1559399176372},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1559399176372},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1559399176374},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1559399176375},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1559399176375},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1559399176375},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1559399176376},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1559399176376},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1559399176376},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1559399176376},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1559399176376},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1559399176380},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1559399176381},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1559399176381},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1559399176381},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1559399176381},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1559399176381},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1559399176382},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1559399176382},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1559399176382},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1559399176382},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1559399176382},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1559399176383},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1559399176383},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1559399176383},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1559399176383},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1559399176383},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1559399176383},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1559399176383},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1559399176383},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1559399176383},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1559399176384},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1559399176384},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1559399176384},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1559399176384},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1559399176384},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1559399176384},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1559399176385},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1559399176387},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1559399176388},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1559399176389},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1559399176389},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1559399176389},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1559399176381},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1559399176343},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1559399176343},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1559399176347},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1559399176347},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1559399176347},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1559399176348},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1559399176348},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1559399176350},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1559399176353},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1559399176356},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1559399176356},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1559399176356},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1559399176356},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1559399176356},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1559399176356},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1559399176357},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1559399176358},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1559399176358},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1559399176358},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1559399176358},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1559399176358},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1559399176358},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1559399176358},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1559399176358},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1559399176359},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1559399176359},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"02fb8fa6b6c252b6bed469539cd057716606a787","modified":1559399176359},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1559399176359},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1559399176359},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1559399176360},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1559399176360},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1559399176360},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1559399176360},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1559399176360},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1559399176360},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1559399176369},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1559399176370},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1559399176367},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1559399176372},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1559399176372},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1559399176373},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1559399176373},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1559399176373},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1559399176373},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1559399176374},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1559399176374},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1559399176374},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1559399176375},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1559399176375},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1559399176377},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1559399176377},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1559399176377},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1559399176387},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1559399176387},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1559399176369},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1559399176370},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1559399176380},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1559399176380},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1559399176389},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1559399176348},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1559399176348},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1559399176348},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1559399176348},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1559399176348},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1559399176348},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1559399176349},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1559399176349},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1559399176349},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1559399176349},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1559399176349},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1559399176349},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1559399176349},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1559399176350},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1559399176350},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1559399176350},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1559399176350},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1559399176350},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1559399176350},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1559399176351},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1559399176351},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1559399176351},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1559399176351},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1559399176351},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1559399176351},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1559399176351},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1559399176351},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1559399176352},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1559399176352},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1559399176352},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1559399176352},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1559399176352},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1559399176352},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1559399176352},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1559399176353},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1559399176353},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1559399176353},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1559399176353},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1559399176353},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1559399176354},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1559399176354},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1559399176354},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1559399176354},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1559399176354},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1559399176354},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1559399176354},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1559399176355},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1559399176355},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1559399176355},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1559399176355},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1559399176355},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1559399176355},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1559399176355},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1559399176355},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1559399176355},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1559399176356},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1559399176356},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1559399176356},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1559399176359},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1559399176359},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1559399176360},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1559399176368},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1559399176368},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1559399176368},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1559399176369},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1559399176369},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1559399176373},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1559399176373},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1559399176373},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1559399176374},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1559399176374},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1559399176374},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1559399176377},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1559399176378},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1559399176380},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1559399176372},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1559399176387},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1559399176379},{"_id":"public/search.xml","hash":"8518acbf6c8cb38b4d6603fe1182884f0f485c44","modified":1563694763502},{"_id":"public/categories/index.html","hash":"4128c8f5cde7bf4c550afced301a5c0e3251e7b8","modified":1563694763534},{"_id":"public/about/index.html","hash":"b29833d135cb39ca4c919dcf077d0a384d8f7c74","modified":1563694763534},{"_id":"public/tags/index.html","hash":"d9e8327a10857d9dd78f169ff0761c9fab326d09","modified":1563694763534},{"_id":"public/2019/07/12/k8s_components_ha/index.html","hash":"c5ae77fce69bcc789c60f1b92c450a2acf4bb20d","modified":1563694763534},{"_id":"public/2019/07/02/k8s_crd_verify/index.html","hash":"f83837c8cf70721869de77ec7f7689a1ed7a928f","modified":1563694763534},{"_id":"public/2019/06/22/golang_modules/index.html","hash":"6d178ca524bd8df4e1595289d13a1e655ed96dc1","modified":1563694763534},{"_id":"public/2019/06/09/node_status/index.html","hash":"6eb960ca062b519dd42490a8d7f21314b12b8e2e","modified":1563694763534},{"_id":"public/2019/05/17/client-go_informer/index.html","hash":"6dfd8ec2229460de1eb1ff26641a854e0804602e","modified":1563694763534},{"_id":"public/2019/05/16/kubectl_plugin/index.html","hash":"92d36ec4b2e74e5d4d262c7cf2993174bebbf7e1","modified":1563694763534},{"_id":"public/2019/04/22/k8s_dashboard_prometheus/index.html","hash":"b57fcccaf69962fe23d5f331906e2626a82e9a56","modified":1563694763535},{"_id":"public/2019/04/14/k8s_metrics_server/index.html","hash":"45f149d0f619451e97f7fee8ff5a9bb947dc0736","modified":1563694763535},{"_id":"public/2019/03/13/k8s_leader_election/index.html","hash":"7e20c4ee298b3064877346b53dc2288a82f0c3fb","modified":1563694763535},{"_id":"public/2019/03/05/k8s_v1.12/index.html","hash":"65bcf16570c55c7a9113e90faa67b95ee9b2c51b","modified":1563694763535},{"_id":"public/2019/02/26/k8s_events/index.html","hash":"bbbef6a50b0ce91315f4979c9d5c6b67e8c5bd29","modified":1563694763535},{"_id":"public/2019/02/16/k8s-crontab/index.html","hash":"4c1c0131e0d8dfbd581e24cb29d94d9e09fcf11a","modified":1563694763535},{"_id":"public/2019/01/30/k8s-audit-webhook/index.html","hash":"7de5a3d5693b6fdb225d60e193f6fcb56c1b73c3","modified":1563694763535},{"_id":"public/2019/01/17/kubeadm/index.html","hash":"f21f02a67840544b22e68524182e1040fe5d7914","modified":1563694763535},{"_id":"public/2019/01/09/kubeconfig/index.html","hash":"dca6ee30b5f699e07ef07aabfb4caf6d4820bfce","modified":1563694763535},{"_id":"public/2019/01/03/kubelet_create_pod/index.html","hash":"c016a97dcdd342d5a0561008be4721e67f08ca21","modified":1563694763535},{"_id":"public/2018/12/23/kubelet_init/index.html","hash":"a59981157fb8ce1f2accacdad3bae56cfc9af8e0","modified":1563694763535},{"_id":"public/2018/12/16/kubelet-modules/index.html","hash":"3f5ce1746ceae6008c669e3585d80c45c2e4a664","modified":1563694763535},{"_id":"public/2018/12/05/docker-introduces/index.html","hash":"708bfb5c337db35e1909a3ae8d6dbd46a1ac8ed2","modified":1563694763535},{"_id":"public/2018/09/02/kubernetes-api/index.html","hash":"9fa95f9104c63c234aa1bb3290f84e990bea20d9","modified":1563694763535},{"_id":"public/2017/03/15/etcd-enable-https/index.html","hash":"919805c4d0ee1f34500cd2b19fd796dd2971ee3d","modified":1563694763535},{"_id":"public/2017/03/02/etcd-backup/index.html","hash":"2053576ad7ca0c405325ee69d78629a401786f6e","modified":1563694763536},{"_id":"public/2017/02/12/kubernetes-learn/index.html","hash":"95b930f82f65b12edafb726047746adbb0ff66b0","modified":1563694763536},{"_id":"public/tags/client-go/index.html","hash":"f81292b1ec7682710f665533246982f743d47c5d","modified":1563694763536},{"_id":"public/tags/informer/index.html","hash":"4eab6a6fa90cf463e01f805a8e7c619c5f467bbe","modified":1563694763536},{"_id":"public/tags/go-module/index.html","hash":"83ccf2c5ca69ebef0b1a5ecb9bcac8abb039683f","modified":1563694763536},{"_id":"public/tags/audit/index.html","hash":"df1d553d1150ec1ecd405613c3594883be405787","modified":1563694763536},{"_id":"public/tags/log/index.html","hash":"fc3849ece6e6c34715d46798d48d34e648b78e89","modified":1563694763536},{"_id":"public/tags/crontab/index.html","hash":"1ede1e889e0c7aff2924b3a8fdf2df21116ff360","modified":1563694763536},{"_id":"public/tags/wait/index.html","hash":"77a969bcf1b25a8e893b54782dcfd5110e814245","modified":1563694763536},{"_id":"public/tags/k8s/index.html","hash":"ac501617fbee6cc480768f45687766bbd48f9d31","modified":1563694763536},{"_id":"public/tags/kubernetes/index.html","hash":"f3a1890df8284b041b69cc569d4cddc35c95adf6","modified":1563694763536},{"_id":"public/tags/HA/index.html","hash":"c2aedb662cb284b1805ec94559796110b7b67538","modified":1563694763536},{"_id":"public/tags/crd/index.html","hash":"35ceed9c275e61524d5a7407aa6a2bc61d94a0f2","modified":1563694763536},{"_id":"public/tags/admission-control/index.html","hash":"fd63952e14f46c6d066a5e877d3d908611b4a46d","modified":1563694763536},{"_id":"public/tags/kube-dashboard/index.html","hash":"9354934b88c197ebd5e0448eaaee810e182a2030","modified":1563694763536},{"_id":"public/tags/prometheus/index.html","hash":"7fbfb6cc743c9e1e8b72e60044e97013a2623863","modified":1563694763537},{"_id":"public/tags/events/index.html","hash":"9489458b45a411a658cf872afeb317eb8cdc4669","modified":1563694763537},{"_id":"public/tags/kubelet/index.html","hash":"168cc208062e72b96cd7a4d5a1ae149d67a0ac42","modified":1563694763537},{"_id":"public/tags/leader-election/index.html","hash":"929fd608db446fd745b4bd50f21b1baacdaed849","modified":1563694763537},{"_id":"public/tags/component/index.html","hash":"0f41af962d3ff3593c90d8f4d0b327174362d232","modified":1563694763537},{"_id":"public/tags/metrics-server/index.html","hash":"94a6e22c3f734a819a25ff7d220b2ec7f36e8634","modified":1563694763537},{"_id":"public/tags/kubernetes-v1-12/index.html","hash":"635351f30290fb13b0a427a14b90f6a2bd8b7896","modified":1563694763537},{"_id":"public/tags/kubeadm/index.html","hash":"8e2d7b5f926ee3886b033511e9f7beae71f21d37","modified":1563694763537},{"_id":"public/tags/kubeconfig/index.html","hash":"39f81838689374679d7f955b21ae06bf8b89a7e8","modified":1563694763537},{"_id":"public/tags/kubectl-plugin/index.html","hash":"a6d951b1f06127a4209232d36c1047ebec529e76","modified":1563694763537},{"_id":"public/tags/node-status/index.html","hash":"6aa67ab978319d64235eabd1c06637c90efeb0b1","modified":1563694763537},{"_id":"public/archives/index.html","hash":"14b1ad37f63685e372673bda9db786ac925103eb","modified":1563694763537},{"_id":"public/archives/page/2/index.html","hash":"5f00bd601dad81600ff1a47454b37caa4a5fecb8","modified":1563694763537},{"_id":"public/archives/page/3/index.html","hash":"636b85a54e46383ddc1faa17e5324b3bc1d75f95","modified":1563694763537},{"_id":"public/archives/2017/index.html","hash":"d227a456399151e45c673adaa1d9774c44639182","modified":1563694763537},{"_id":"public/archives/2017/02/index.html","hash":"e91ad1dc1292e2cf4f9342e2c5fa154b07b0c997","modified":1563694763537},{"_id":"public/archives/2017/03/index.html","hash":"136f7ea08f8ea9bc8412c99fbb5de2c72f514e83","modified":1563694763538},{"_id":"public/archives/2018/index.html","hash":"74c829e52653c240ceaac7ab47244708c64516d8","modified":1563694763538},{"_id":"public/archives/2018/09/index.html","hash":"b64e91b633abc68860a9dac6b7cbebf81f7c21a8","modified":1563694763538},{"_id":"public/archives/2018/12/index.html","hash":"cb654cd959d87a5d7424f5d5ee91b6556dd5d4e4","modified":1563694763538},{"_id":"public/archives/2019/index.html","hash":"6a341e7f55e5bf7a825bc9026ba7d81d878aafa0","modified":1563694763538},{"_id":"public/archives/2019/page/2/index.html","hash":"bc778f0214ca6b0a4e310dca2cfa108ea4f9363a","modified":1563694763538},{"_id":"public/archives/2019/01/index.html","hash":"99aab19d6a0bce0b48f5240ab5fa493d1dbf038c","modified":1563694763538},{"_id":"public/archives/2019/02/index.html","hash":"276bf3070c41c5fe4742bc0f92c11db39d2ad421","modified":1563694763538},{"_id":"public/archives/2019/03/index.html","hash":"190357b03c751c655e2037aca56d7b0dffd27f77","modified":1563694763538},{"_id":"public/archives/2019/04/index.html","hash":"60c71b2ab8a9dfb3cc926ff97de603ca468c239f","modified":1563694763538},{"_id":"public/archives/2019/05/index.html","hash":"227e0559b55a7b36fa442fd8a87f0b17b3cb8883","modified":1563694763538},{"_id":"public/archives/2019/06/index.html","hash":"76cafc8a25b91bc659cff20bb0c5ef4550aead9c","modified":1563694763538},{"_id":"public/archives/2019/07/index.html","hash":"4c82bde9b573a074772c5b332516650d1b90f271","modified":1563694763538},{"_id":"public/index.html","hash":"631212c96758fe1849f925504ccc513d4756bd80","modified":1563694763538},{"_id":"public/page/2/index.html","hash":"20e996398dd04f5b2cb3d72a23a99fc224221094","modified":1563694763538},{"_id":"public/page/3/index.html","hash":"8adb4569051657e322c51031c725bb5ab8b6db0e","modified":1563694763539},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1563694763552},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1563694763552},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1563694763552},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1563694763552},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1563694763552},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1563694763552},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1563694763552},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1563694763552},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1563694763552},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1563694763552},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1563694763552},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1563694763552},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1563694763553},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1563694763553},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1563694763553},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1563694763553},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1563694763553},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1563694763553},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1563694763553},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1563694763553},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1563694763553},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1563694763553},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1563694763553},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1563694763553},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1563694763553},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1563694763553},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1563694763553},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1563694763553},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1563694763553},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1563694763553},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1563694763553},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1563694763553},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1563694763553},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1563694763903},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1563694763921},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1563694763921},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1563694763921},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1563694763921},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1563694763921},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1563694763921},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1563694763921},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1563694763921},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1563694763922},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1563694763922},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1563694763922},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1563694763922},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1563694763922},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1563694763922},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1563694763922},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1563694763922},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1563694763922},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1563694763922},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1563694763922},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1563694763922},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1563694763922},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1563694763922},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1563694763922},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1563694763923},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1563694763923},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1563694763923},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1563694763923},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1563694763923},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1563694763923},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1563694763923},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1563694763923},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1563694763923},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1563694763923},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1563694763923},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1563694763923},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1563694763923},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1563694763923},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1563694763923},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1563694763923},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1563694763924},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1563694763924},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1563694763924},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1563694763924},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1563694763924},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1563694763924},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1563694763924},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1563694763924},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1563694763924},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1563694763924},{"_id":"public/css/main.css","hash":"4c7c7711ea37f3c6d4ae93d8568dc1448616c1e4","modified":1563694763924},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1563694763924},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1563694763924},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1563694763924},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1563694763925},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1563694763925},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1563694763925},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1563694763925},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1563694763925},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1563694763925},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1563694763925},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1563694763925},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1563694763925},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1563694763925},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1563694763925},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1563694763925},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1563694763925},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1563694763925},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1563694763925},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1563694763926},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1563694763926},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1563694763926},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1563694763926},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1563694763926},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1563694763927},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1563694763943}],"Category":[],"Data":[],"Page":[{"title":"categories","date":"2018-12-08T08:52:49.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-12-08 16:52:49\n---\n","updated":"2019-06-01T14:26:16.310Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjycnhjlo00015vwnmlqk5nez","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"About","date":"2018-12-08T08:46:18.000Z","_content":"\n###  专注容器生态圈，喜欢钻研 Kubernetes、Docker、Istio 等技术\n\n<!--欢迎关注我的公众号：\n\n![kubeCon.jpg](https://upload-images.jianshu.io/upload_images/1262158-92e245b5b1b41335.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/600) -->\n","source":"about/index.md","raw":"---\ntitle: About\ndate: 2018-12-08 16:46:18\n---\n\n###  专注容器生态圈，喜欢钻研 Kubernetes、Docker、Istio 等技术\n\n<!--欢迎关注我的公众号：\n\n![kubeCon.jpg](https://upload-images.jianshu.io/upload_images/1262158-92e245b5b1b41335.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/600) -->\n","updated":"2019-06-01T14:26:16.310Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjycnhjlp00035vwnwhqinx3i","content":"<h3 id=\"专注容器生态圈，喜欢钻研-Kubernetes、Docker、Istio-等技术\"><a href=\"#专注容器生态圈，喜欢钻研-Kubernetes、Docker、Istio-等技术\" class=\"headerlink\" title=\"专注容器生态圈，喜欢钻研 Kubernetes、Docker、Istio 等技术\"></a>专注容器生态圈，喜欢钻研 Kubernetes、Docker、Istio 等技术</h3><!--欢迎关注我的公众号：\n\n![kubeCon.jpg](https://upload-images.jianshu.io/upload_images/1262158-92e245b5b1b41335.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/600) -->\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"专注容器生态圈，喜欢钻研-Kubernetes、Docker、Istio-等技术\"><a href=\"#专注容器生态圈，喜欢钻研-Kubernetes、Docker、Istio-等技术\" class=\"headerlink\" title=\"专注容器生态圈，喜欢钻研 Kubernetes、Docker、Istio 等技术\"></a>专注容器生态圈，喜欢钻研 Kubernetes、Docker、Istio 等技术</h3><!--欢迎关注我的公众号：\n\n![kubeCon.jpg](https://upload-images.jianshu.io/upload_images/1262158-92e245b5b1b41335.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/600) -->\n"},{"title":"tags","date":"2018-12-08T08:46:27.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-12-08 16:46:27\n---\n","updated":"2019-06-01T14:26:16.311Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjycnhjls00065vwn2dhi7npl","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"kubernetes 中 informer 的使用","date":"2019-05-17T03:00:30.000Z","type":"client-go","_content":"\n#### 一、kubernetes 集群的几种访问方式\n\n在实际开发过程中，若想要获取 kubernetes 中某个资源（比如 pod）的所有对象，可以使用 kubectl、k8s REST API、client-go(ClientSet、Dynamic Client、RESTClient 三种方式) 等多种方式访问 k8s 集群获取资源。在笔者的开发过程中，最初都是直接调用 k8s 的 REST API 来获取的，使用 `kubectl get pod -v=9` 可以直接看到调用 k8s 的接口，然后在程序中直接访问还是比较方便的。但是随着集群规模的增长或者从国内获取海外 k8s 集群的数据，直接调用 k8s 接口获取所有 pod 还是比较耗时，这个问题有多种解决方法，最初是直接使用 k8s 原生的 watch 接口来获取的，下面是一个伪代码：\n\n```\nconst (\n\tADDED    string = \"ADDED\"\n\tMODIFIED string = \"MODIFIED\"\n\tDELETED  string = \"DELETED\"\n\tERROR    string = \"ERROR\"\n)\n\ntype Event struct {\n\tType   string          `json:\"type\"`\n\tObject json.RawMessage `json:\"object\"`\n}\n\nfunc main() {\n\tresp, err := http.Get(\"http://apiserver:8080/api/v1/watch/pods?watch=yes\")\n\tif err != nil {\n\t\t// ...\n\t}\n\tdecoder := json.NewDecoder(resp.Body)\n\tfor {\n\t\tvar event Event\n\t\terr = decoder.Decode(&event)\n\t\tif err != nil {\n\t\t\t// ...\n\t\t}\n\t\tswitch event.Type {\n\t\tcase ADDED, MODIFIED:\n\t\t\t// ...\n\t\tcase DELETED:\n\t\t\t// ...\n\t\tcase ERROR:\n\t\t\t// ...\n\t\t}\n\t}\n}\n```\n\n\n调用 watch 接口后会先将所有的对象 list 一次，然后 apiserver 会将变化的数据推送到 client 端，可以看到每次对于 watch 到的事件都需要判断后进行处理，然后将处理后的结果写入到本地的缓存中，原生的 watch 操作还是非常麻烦的。后来了解到官方推出一个客户端工具 client-go ，client-go 中的 Informer 对 watch 操作做了封装，使用起来非常方便，下面会主要介绍一下 client-go 的使用。\n\n#### 二、Informer 的机制\n\ncient-go 是从 k8s 代码中抽出来的一个客户端工具，Informer 是 client-go 中的核心工具包，已经被 kubernetes 中众多组件所使用。所谓 Informer，其实就是一个带有本地缓存和索引机制的、可以注册 EventHandler 的 client，本地缓存被称为 Store，索引被称为 Index。使用 informer 的目的是为了减轻 apiserver 数据交互的压力而抽象出来的一个 cache 层, 客户端对 apiserver 数据的 \"读取\" 和 \"监听\" 操作都通过本地 informer 进行。Informer 实例的`Lister()`方法可以直接查找缓存在本地内存中的数据。\n\nInformer 的主要功能：\n\n- 同步数据到本地缓存\n- 根据对应的事件类型，触发事先注册好的 ResourceEventHandler\n\n##### 1、Informer 中几个组件的作用\nInformer 中主要有 Reflector、Delta FIFO Queue、Local Store、WorkQueue 几个组件。以下是 Informer 的工作流程图。\n\n![Informer 组件](http://cdn.tianfeiyu.com/informer-1.png)\n\n\n\n根据流程图来解释一下 Informer 中几个组件的作用：\n\n- Reflector：称之为反射器，实现对 apiserver 指定类型对象的监控(ListAndWatch)，其中反射实现的就是把监控的结果实例化成具体的对象，最终也是调用 Kubernetes 的 List/Watch API；\n\n- DeltaIFIFO Queue：一个增量队列，将 Reflector 监控变化的对象形成一个 FIFO 队列，此处的 Delta 就是变化；\n\n- LocalStore：就是 informer 的 cache，这里面缓存的是 apiserver 中的对象(其中有一部分可能还在DeltaFIFO 中)，此时使用者再查询对象的时候就直接从 cache 中查找，减少了 apiserver 的压力，LocalStore 只会被 Lister 的 List/Get 方法访问。\n\n- WorkQueue：DeltaIFIFO 收到时间后会先将时间存储在自己的数据结构中，然后直接操作 Store 中存储的数据，更新完 store 后 DeltaIFIFO 会将该事件 pop 到 WorkQueue 中，Controller 收到 WorkQueue  中的事件会根据对应的类型触发对应的回调函数。\n\n\n##### 2、Informer 的工作流程\n\n- Informer 首先会 list/watch apiserver，Informer 所使用的 Reflector 包负责与 apiserver 建立连接，Reflector 使用 ListAndWatch 的方法，会先从 apiserver 中 list 该资源的所有实例，list 会拿到该对象最新的 resourceVersion，然后使用 watch 方法监听该 resourceVersion 之后的所有变化，若中途出现异常，reflector 则会从断开的 resourceVersion 处重现尝试监听所有变化，一旦该对象的实例有创建、删除、更新动作，Reflector 都会收到\"事件通知\"，这时，该事件及它对应的 API 对象这个组合，被称为增量（Delta），它会被放进 DeltaFIFO 中。\n- Informer 会不断地从这个 DeltaFIFO 中读取增量，每拿出一个对象，Informer 就会判断这个增量的时间类型，然后创建或更新本地的缓存，也就是 store。\n- 如果事件类型是 Added（添加对象），那么 Informer 会通过 Indexer 的库把这个增量里的 API 对象保存到本地的缓存中，并为它创建索引，若为删除操作，则在本地缓存中删除该对象。\n- DeltaFIFO 再 pop 这个事件到 controller 中，controller 会调用事先注册的 ResourceEventHandler 回调函数进行处理。\n- 在 ResourceEventHandler 回调函数中，其实只是做了一些很简单的过滤，然后将关心变更的 Object 放到 workqueue 里面。\n- Controller 从 workqueue 里面取出 Object，启动一个 worker 来执行自己的业务逻辑，业务逻辑通常是计算目前集群的状态和用户希望达到的状态有多大的区别，然后孜孜不倦地让 apiserver 将状态演化到用户希望达到的状态，比如为 deployment 创建新的 pods，或者是扩容/缩容 deployment。\n- 在worker中就可以使用 lister 来获取 resource，而不用频繁的访问 apiserver，因为 apiserver 中 resource 的变更都会反映到本地的 cache 中。\n\n  \nInformer 在使用时需要先初始化一个 InformerFactory，目前主要推荐使用的是 SharedInformerFactory，Shared 指的是在多个 Informer 中共享一个本地 cache。\n\nInformer 中的 ResourceEventHandler  函数有三种：\n\n```\n// ResourceEventHandlerFuncs is an adaptor to let you easily specify as many or\n// as few of the notification functions as you want while still implementing\n// ResourceEventHandler.\ntype ResourceEventHandlerFuncs struct {\n    AddFunc    func(obj interface{})\n    UpdateFunc func(oldObj, newObj interface{})\n    DeleteFunc func(obj interface{})\n}\n```\n\n这三种函数的处理逻辑是用户自定义的，在初始化 controller 时注册完 ResourceEventHandler 后，一旦该对象的实例有创建、删除、更新三中操作后就会触发对应的 ResourceEventHandler。\n\n\n#### 三、Informer 使用示例\n\n在实际的开发工作中，Informer 主要用在两处：\n- 在访问 k8s apiserver 的客户端作为一个 client 缓存对象使用；\n- 在一些自定义 controller 中使用，比如 operator 的开发；\n\n\n#### 1、下面是一个作为 client 的使用示例：\n\n\n```\npackage main\n\nimport (\n\t\"flag\"\n\t\"fmt\"\n\t\"log\"\n\t\"path/filepath\"\n\n\tcorev1 \"k8s.io/api/core/v1\"\n\t\"k8s.io/apimachinery/pkg/labels\"\n\t\"k8s.io/apimachinery/pkg/util/runtime\"\n\n\t\"k8s.io/client-go/informers\"\n\t\"k8s.io/client-go/kubernetes\"\n\t\"k8s.io/client-go/tools/cache\"\n\t\"k8s.io/client-go/tools/clientcmd\"\n\t\"k8s.io/client-go/util/homedir\"\n)\n\nfunc main() {\n\tvar kubeconfig *string\n\tif home := homedir.HomeDir(); home != \"\" {\n\t\tkubeconfig = flag.String(\"kubeconfig\", filepath.Join(home, \".kube\", \"config\"), \"(optional) absolute path to the kubeconfig file\")\n\t} else {\n\t\tkubeconfig = flag.String(\"kubeconfig\", \"\", \"absolute path to the kubeconfig file\")\n\t}\n\tflag.Parse()\n\n\tconfig, err := clientcmd.BuildConfigFromFlags(\"\", *kubeconfig)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\t// 初始化 client\n\tclientset, err := kubernetes.NewForConfig(config)\n\tif err != nil {\n\t\tlog.Panic(err.Error())\n\t}\n\n\tstopper := make(chan struct{})\n\tdefer close(stopper)\n\t\n\t// 初始化 informer\n\tfactory := informers.NewSharedInformerFactory(clientset, 0)\n\tnodeInformer := factory.Core().V1().Nodes()\n\tinformer := nodeInformer.Informer()\n\tdefer runtime.HandleCrash()\n\t\n\t// 启动 informer，list & watch\n\tgo factory.Start(stopper)\n\t\n\t// 从 apiserver 同步资源，即 list \n\tif !cache.WaitForCacheSync(stopper, informer.HasSynced) {\n\t\truntime.HandleError(fmt.Errorf(\"Timed out waiting for caches to sync\"))\n\t\treturn\n\t}\n\n\t// 使用自定义 handler\n\tinformer.AddEventHandler(cache.ResourceEventHandlerFuncs{\n\t\tAddFunc:    onAdd,\n\t\tUpdateFunc: func(interface{}, interface{}) { fmt.Println(\"update not implemented\") }, // 此处省略 workqueue 的使用\n\t\tDeleteFunc: func(interface{}) { fmt.Println(\"delete not implemented\") },\n\t})\n\t\n\t// 创建 lister\n\tnodeLister := nodeInformer.Lister()\n\t// 从 lister 中获取所有 items\n\tnodeList, err := nodeLister.List(labels.Everything())\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\tfmt.Println(\"nodelist:\", nodeList)\n\t<-stopper\n}\n\nfunc onAdd(obj interface{}) {\n\tnode := obj.(*corev1.Node)\n\tfmt.Println(\"add a node:\", node.Name)\n}\n```\n\nShared指的是多个 lister 共享同一个cache，而且资源的变化会同时通知到cache和 listers。这个解释和上面图所展示的内容的是一致的，cache我们在Indexer的介绍中已经分析过了，lister 指的就是OnAdd、OnUpdate、OnDelete 这些回调函数背后的对象。\n\n\n\n#### 2、以下是作为 controller 使用的一个整体工作流程\n\n(1) 创建一个控制器\n- 为控制器创建 workqueue\n- 创建 informer, 为 informer 添加 callback 函数，创建 lister\n\n(2) 启动控制器\n- 启动 informer\n- 等待本地 cache sync 完成后， 启动 workers\n\n(3) 当收到变更事件后，执行 callback \n- 等待事件触发\n- 从事件中获取变更的 Object\n- 做一些必要的检查\n- 生成 object key，一般是 namespace/name 的形式\n- 将 key 放入 workqueue 中\n\n(4) worker loop\n- 等待从 workqueue 中获取到 item，一般为 object key\n- 用 object key 通过 lister 从本地 cache 中获取到真正的 object 对象\n- 做一些检查\n- 执行真正的业务逻辑\n- 处理下一个 item\n\n\n下面是自定义 controller 使用的一个参考：\n\n```\nvar (\n    masterURL  string\n    kubeconfig string\n)\n\nfunc init() {\n    flag.StringVar(&kubeconfig, \"kubeconfig\", \"\", \"Path to a kubeconfig. Only required if out-of-cluster.\")\n    flag.StringVar(&masterURL, \"master\", \"\", \"The address of the Kubernetes API server. Overrides any value in kubeconfig. Only required if out-of-cluster.\")\n}\n\nfunc main() {\n    flag.Parse()\n\n    stopCh := signals.SetupSignalHandler()\n\n    cfg, err := clientcmd.BuildConfigFromFlags(masterURL, kubeconfig)\n    if err != nil {\n        glog.Fatalf(\"Error building kubeconfig: %s\", err.Error())\n    }\n\n    kubeClient, err := kubernetes.NewForConfig(cfg)\n    if err != nil {\n        glog.Fatalf(\"Error building kubernetes clientset: %s\", err.Error())\n    }\n\n    // 所谓 Informer，其实就是一个带有本地缓存和索引机制的、可以注册 EventHandler 的 client\n    // informer watch apiserver,每隔 30 秒 resync 一次(list)\n    kubeInformerFactory := informers.NewSharedInformerFactory(kubeClient, time.Second*30)\n\n    controller := controller.NewController(kubeClient, kubeInformerFactory.Core().V1().Nodes())\n\n    //  启动 informer\n    go kubeInformerFactory.Start(stopCh)\n\n\t // start controller \n    if err = controller.Run(2, stopCh); err != nil {\n        glog.Fatalf(\"Error running controller: %s\", err.Error())\n    }\n}\n\n\n// NewController returns a new network controller\nfunc NewController(\n    kubeclientset kubernetes.Interface,\n    networkclientset clientset.Interface,\n    networkInformer informers.NetworkInformer) *Controller {\n\n    // Create event broadcaster\n    // Add sample-controller types to the default Kubernetes Scheme so Events can be\n    // logged for sample-controller types.\n    utilruntime.Must(networkscheme.AddToScheme(scheme.Scheme))\n    glog.V(4).Info(\"Creating event broadcaster\")\n    eventBroadcaster := record.NewBroadcaster()\n    eventBroadcaster.StartLogging(glog.Infof)\n    eventBroadcaster.StartRecordingToSink(&typedcorev1.EventSinkImpl{Interface: kubeclientset.CoreV1().Events(\"\")})\n    recorder := eventBroadcaster.NewRecorder(scheme.Scheme, corev1.EventSource{Component: controllerAgentName})\n\n    controller := &Controller{\n        kubeclientset:    kubeclientset,\n        networkclientset: networkclientset,\n        networksLister:   networkInformer.Lister(),\n        networksSynced:   networkInformer.Informer().HasSynced,\n        workqueue:        workqueue.NewNamedRateLimitingQueue(workqueue.DefaultControllerRateLimiter(), \"Networks\"),\n        recorder:         recorder,\n    }\n\n    glog.Info(\"Setting up event handlers\")\n    // Set up an event handler for when Network resources change\n    networkInformer.Informer().AddEventHandler(cache.ResourceEventHandlerFuncs{\n        AddFunc: controller.enqueueNetwork,\n        UpdateFunc: func(old, new interface{}) {\n            oldNetwork := old.(*samplecrdv1.Network)\n            newNetwork := new.(*samplecrdv1.Network)\n            if oldNetwork.ResourceVersion == newNetwork.ResourceVersion {\n                // Periodic resync will send update events for all known Networks.\n                // Two different versions of the same Network will always have different RVs.\n                return\n            }\n            controller.enqueueNetwork(new)\n        },\n        DeleteFunc: controller.enqueueNetworkForDelete,\n    })\n\n    return controller\n}\n\n```\n自定义 controller 的详细使用方法可以参考：[k8s-controller-custom-resource](https://github.com/resouer/k8s-controller-custom-resource)\n\n\n\n#### 四、使用中的一些问题\n\n##### 1、Informer 二级缓存中的同步问题\n\n虽然 Informer 和 Kubernetes 之间没有 resync 机制，但 Informer 内部的这两级缓存 DeltaIFIFO 和 LocalStore 之间会存在 resync 机制，k8s 中 kube-controller-manager 的 StatefulSetController 中使用了两级缓存的 resync 机制（如下图所示），我们在生产环境中发现 sts 创建后过了很久 pod 才会创建，主要是由于 StatefulSetController 的两级缓存之间 30s 会同步一次，由于  StatefulSetController watch 到变化后就会把对应的 sts 放入 DeltaIFIFO 中，且每隔30s会把 LocalStore 中全部的 sts 重新入一遍 DeltaIFIFO，入队时会做一些处理，过滤掉一些不需要重复入队列的 sts，若间隔的 30s 内没有处理完队列中所有的 sts，则待处理队列中始终存在未处理完的 sts，并且在同步过程中产生的 sts 会加的队列的尾部，新加入队尾的 sts 只能等到前面的 sts 处理完成（也就是 resync 完成）才会被处理，所以导致的现象就是 sts 创建后过了很久 pod 才会创建。\n\n优化的方法就是去掉二级缓存的同步策略（将 setInformer.Informer().AddEventHandlerWithResyncPeriod() 改为 informer.AddEventHandler()）或者调大同步周期，但是在研究 kube-controller-manager 其他 controller 时发现并不是所有的 controller 都有同步策略，社区也有相关的 issue 反馈了这一问题，[Remove resync period for sset controller](https://github.com/kubernetes/kubernetes/pull/75622)，社区也会在以后的版本中去掉两级缓存之间的 resync 策略。\n\n`k8s.io/kubernetes/pkg/controller/statefulset/stateful_set.go`\n\n![kube-controller-manager sts controller](http://cdn.tianfeiyu.com/informer-2.png)\n\n\n\n##### 2、使用 Informer 如何监听所有资源对象？\n\n一个 Informer 实例只能监听一种 resource，每个 resource 需要创建对应的 Informer 实例。\n\n\n\n##### 3、为什么不是使用 workqueue？\n\n建议使用 RateLimitingQueue，它相比普通的 workqueue 多了以下的功能: \n\n- 限流：可以限制一个 item 被 reenqueued 的次数。\n- 防止 hot loop：它保证了一个 item 被 reenqueued 后，不会马上被处理。\n\n\n\n#### 五、总结\n\n本文介绍了 client-go 包中核心组件 Informer 的原理以及使用方法，Informer 主要功能是缓存对象到本地以及根据对应的事件类型触发已注册好的 ResourceEventHandler，其主要用在访问 k8s apiserver 的客户端和 operator 中。\n\n\n\n\n参考：\n\n[如何用 client-go 拓展 Kubernetes 的 API](https://mp.weixin.qq.com/s?__biz=MzU1OTAzNzc5MQ==&mid=2247484052&idx=1&sn=cec9f4a1ee0d21c5b2c51bd147b8af59&chksm=fc1c2ea4cb6ba7b283eef5ac4a45985437c648361831bc3e6dd5f38053be1968b3389386e415&scene=21#wechat_redirect)\n\nhttps://www.kubernetes.org.cn/2693.html\n\n[Kubernetes 大咖秀徐超《使用 client-go 控制原生及拓展的 Kubernetes API》](https://studygolang.com/articles/9270)\n\n[Use prometheus conventions for workqueue metrics](https://github.com/kubernetes/kubernetes/issues/71165)\n\n[深入浅出kubernetes之client-go的workqueue](https://blog.csdn.net/weixin_42663840/article/details/81482553#%E9%99%90%E9%80%9F%E9%98%9F%E5%88%97)\n\n<https://gianarb.it/blog/kubernetes-shared-informer>\n\n[理解 K8S 的设计精髓之 List-Watch机制和Informer模块](https://zhuanlan.zhihu.com/p/59660536)\n\n<https://ranler.org/notes/file/528>\n\n[Kubernetes Client-go Informer 源码分析](https://yq.aliyun.com/articles/688485)\n","source":"_posts/client-go_informer.md","raw":"---\ntitle: kubernetes 中 informer 的使用\ndate: 2019-05-17 11:00:30\ntags: [\"client-go\",\"informer\"]\ntype: \"client-go\"\n---\n\n#### 一、kubernetes 集群的几种访问方式\n\n在实际开发过程中，若想要获取 kubernetes 中某个资源（比如 pod）的所有对象，可以使用 kubectl、k8s REST API、client-go(ClientSet、Dynamic Client、RESTClient 三种方式) 等多种方式访问 k8s 集群获取资源。在笔者的开发过程中，最初都是直接调用 k8s 的 REST API 来获取的，使用 `kubectl get pod -v=9` 可以直接看到调用 k8s 的接口，然后在程序中直接访问还是比较方便的。但是随着集群规模的增长或者从国内获取海外 k8s 集群的数据，直接调用 k8s 接口获取所有 pod 还是比较耗时，这个问题有多种解决方法，最初是直接使用 k8s 原生的 watch 接口来获取的，下面是一个伪代码：\n\n```\nconst (\n\tADDED    string = \"ADDED\"\n\tMODIFIED string = \"MODIFIED\"\n\tDELETED  string = \"DELETED\"\n\tERROR    string = \"ERROR\"\n)\n\ntype Event struct {\n\tType   string          `json:\"type\"`\n\tObject json.RawMessage `json:\"object\"`\n}\n\nfunc main() {\n\tresp, err := http.Get(\"http://apiserver:8080/api/v1/watch/pods?watch=yes\")\n\tif err != nil {\n\t\t// ...\n\t}\n\tdecoder := json.NewDecoder(resp.Body)\n\tfor {\n\t\tvar event Event\n\t\terr = decoder.Decode(&event)\n\t\tif err != nil {\n\t\t\t// ...\n\t\t}\n\t\tswitch event.Type {\n\t\tcase ADDED, MODIFIED:\n\t\t\t// ...\n\t\tcase DELETED:\n\t\t\t// ...\n\t\tcase ERROR:\n\t\t\t// ...\n\t\t}\n\t}\n}\n```\n\n\n调用 watch 接口后会先将所有的对象 list 一次，然后 apiserver 会将变化的数据推送到 client 端，可以看到每次对于 watch 到的事件都需要判断后进行处理，然后将处理后的结果写入到本地的缓存中，原生的 watch 操作还是非常麻烦的。后来了解到官方推出一个客户端工具 client-go ，client-go 中的 Informer 对 watch 操作做了封装，使用起来非常方便，下面会主要介绍一下 client-go 的使用。\n\n#### 二、Informer 的机制\n\ncient-go 是从 k8s 代码中抽出来的一个客户端工具，Informer 是 client-go 中的核心工具包，已经被 kubernetes 中众多组件所使用。所谓 Informer，其实就是一个带有本地缓存和索引机制的、可以注册 EventHandler 的 client，本地缓存被称为 Store，索引被称为 Index。使用 informer 的目的是为了减轻 apiserver 数据交互的压力而抽象出来的一个 cache 层, 客户端对 apiserver 数据的 \"读取\" 和 \"监听\" 操作都通过本地 informer 进行。Informer 实例的`Lister()`方法可以直接查找缓存在本地内存中的数据。\n\nInformer 的主要功能：\n\n- 同步数据到本地缓存\n- 根据对应的事件类型，触发事先注册好的 ResourceEventHandler\n\n##### 1、Informer 中几个组件的作用\nInformer 中主要有 Reflector、Delta FIFO Queue、Local Store、WorkQueue 几个组件。以下是 Informer 的工作流程图。\n\n![Informer 组件](http://cdn.tianfeiyu.com/informer-1.png)\n\n\n\n根据流程图来解释一下 Informer 中几个组件的作用：\n\n- Reflector：称之为反射器，实现对 apiserver 指定类型对象的监控(ListAndWatch)，其中反射实现的就是把监控的结果实例化成具体的对象，最终也是调用 Kubernetes 的 List/Watch API；\n\n- DeltaIFIFO Queue：一个增量队列，将 Reflector 监控变化的对象形成一个 FIFO 队列，此处的 Delta 就是变化；\n\n- LocalStore：就是 informer 的 cache，这里面缓存的是 apiserver 中的对象(其中有一部分可能还在DeltaFIFO 中)，此时使用者再查询对象的时候就直接从 cache 中查找，减少了 apiserver 的压力，LocalStore 只会被 Lister 的 List/Get 方法访问。\n\n- WorkQueue：DeltaIFIFO 收到时间后会先将时间存储在自己的数据结构中，然后直接操作 Store 中存储的数据，更新完 store 后 DeltaIFIFO 会将该事件 pop 到 WorkQueue 中，Controller 收到 WorkQueue  中的事件会根据对应的类型触发对应的回调函数。\n\n\n##### 2、Informer 的工作流程\n\n- Informer 首先会 list/watch apiserver，Informer 所使用的 Reflector 包负责与 apiserver 建立连接，Reflector 使用 ListAndWatch 的方法，会先从 apiserver 中 list 该资源的所有实例，list 会拿到该对象最新的 resourceVersion，然后使用 watch 方法监听该 resourceVersion 之后的所有变化，若中途出现异常，reflector 则会从断开的 resourceVersion 处重现尝试监听所有变化，一旦该对象的实例有创建、删除、更新动作，Reflector 都会收到\"事件通知\"，这时，该事件及它对应的 API 对象这个组合，被称为增量（Delta），它会被放进 DeltaFIFO 中。\n- Informer 会不断地从这个 DeltaFIFO 中读取增量，每拿出一个对象，Informer 就会判断这个增量的时间类型，然后创建或更新本地的缓存，也就是 store。\n- 如果事件类型是 Added（添加对象），那么 Informer 会通过 Indexer 的库把这个增量里的 API 对象保存到本地的缓存中，并为它创建索引，若为删除操作，则在本地缓存中删除该对象。\n- DeltaFIFO 再 pop 这个事件到 controller 中，controller 会调用事先注册的 ResourceEventHandler 回调函数进行处理。\n- 在 ResourceEventHandler 回调函数中，其实只是做了一些很简单的过滤，然后将关心变更的 Object 放到 workqueue 里面。\n- Controller 从 workqueue 里面取出 Object，启动一个 worker 来执行自己的业务逻辑，业务逻辑通常是计算目前集群的状态和用户希望达到的状态有多大的区别，然后孜孜不倦地让 apiserver 将状态演化到用户希望达到的状态，比如为 deployment 创建新的 pods，或者是扩容/缩容 deployment。\n- 在worker中就可以使用 lister 来获取 resource，而不用频繁的访问 apiserver，因为 apiserver 中 resource 的变更都会反映到本地的 cache 中。\n\n  \nInformer 在使用时需要先初始化一个 InformerFactory，目前主要推荐使用的是 SharedInformerFactory，Shared 指的是在多个 Informer 中共享一个本地 cache。\n\nInformer 中的 ResourceEventHandler  函数有三种：\n\n```\n// ResourceEventHandlerFuncs is an adaptor to let you easily specify as many or\n// as few of the notification functions as you want while still implementing\n// ResourceEventHandler.\ntype ResourceEventHandlerFuncs struct {\n    AddFunc    func(obj interface{})\n    UpdateFunc func(oldObj, newObj interface{})\n    DeleteFunc func(obj interface{})\n}\n```\n\n这三种函数的处理逻辑是用户自定义的，在初始化 controller 时注册完 ResourceEventHandler 后，一旦该对象的实例有创建、删除、更新三中操作后就会触发对应的 ResourceEventHandler。\n\n\n#### 三、Informer 使用示例\n\n在实际的开发工作中，Informer 主要用在两处：\n- 在访问 k8s apiserver 的客户端作为一个 client 缓存对象使用；\n- 在一些自定义 controller 中使用，比如 operator 的开发；\n\n\n#### 1、下面是一个作为 client 的使用示例：\n\n\n```\npackage main\n\nimport (\n\t\"flag\"\n\t\"fmt\"\n\t\"log\"\n\t\"path/filepath\"\n\n\tcorev1 \"k8s.io/api/core/v1\"\n\t\"k8s.io/apimachinery/pkg/labels\"\n\t\"k8s.io/apimachinery/pkg/util/runtime\"\n\n\t\"k8s.io/client-go/informers\"\n\t\"k8s.io/client-go/kubernetes\"\n\t\"k8s.io/client-go/tools/cache\"\n\t\"k8s.io/client-go/tools/clientcmd\"\n\t\"k8s.io/client-go/util/homedir\"\n)\n\nfunc main() {\n\tvar kubeconfig *string\n\tif home := homedir.HomeDir(); home != \"\" {\n\t\tkubeconfig = flag.String(\"kubeconfig\", filepath.Join(home, \".kube\", \"config\"), \"(optional) absolute path to the kubeconfig file\")\n\t} else {\n\t\tkubeconfig = flag.String(\"kubeconfig\", \"\", \"absolute path to the kubeconfig file\")\n\t}\n\tflag.Parse()\n\n\tconfig, err := clientcmd.BuildConfigFromFlags(\"\", *kubeconfig)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\t// 初始化 client\n\tclientset, err := kubernetes.NewForConfig(config)\n\tif err != nil {\n\t\tlog.Panic(err.Error())\n\t}\n\n\tstopper := make(chan struct{})\n\tdefer close(stopper)\n\t\n\t// 初始化 informer\n\tfactory := informers.NewSharedInformerFactory(clientset, 0)\n\tnodeInformer := factory.Core().V1().Nodes()\n\tinformer := nodeInformer.Informer()\n\tdefer runtime.HandleCrash()\n\t\n\t// 启动 informer，list & watch\n\tgo factory.Start(stopper)\n\t\n\t// 从 apiserver 同步资源，即 list \n\tif !cache.WaitForCacheSync(stopper, informer.HasSynced) {\n\t\truntime.HandleError(fmt.Errorf(\"Timed out waiting for caches to sync\"))\n\t\treturn\n\t}\n\n\t// 使用自定义 handler\n\tinformer.AddEventHandler(cache.ResourceEventHandlerFuncs{\n\t\tAddFunc:    onAdd,\n\t\tUpdateFunc: func(interface{}, interface{}) { fmt.Println(\"update not implemented\") }, // 此处省略 workqueue 的使用\n\t\tDeleteFunc: func(interface{}) { fmt.Println(\"delete not implemented\") },\n\t})\n\t\n\t// 创建 lister\n\tnodeLister := nodeInformer.Lister()\n\t// 从 lister 中获取所有 items\n\tnodeList, err := nodeLister.List(labels.Everything())\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\tfmt.Println(\"nodelist:\", nodeList)\n\t<-stopper\n}\n\nfunc onAdd(obj interface{}) {\n\tnode := obj.(*corev1.Node)\n\tfmt.Println(\"add a node:\", node.Name)\n}\n```\n\nShared指的是多个 lister 共享同一个cache，而且资源的变化会同时通知到cache和 listers。这个解释和上面图所展示的内容的是一致的，cache我们在Indexer的介绍中已经分析过了，lister 指的就是OnAdd、OnUpdate、OnDelete 这些回调函数背后的对象。\n\n\n\n#### 2、以下是作为 controller 使用的一个整体工作流程\n\n(1) 创建一个控制器\n- 为控制器创建 workqueue\n- 创建 informer, 为 informer 添加 callback 函数，创建 lister\n\n(2) 启动控制器\n- 启动 informer\n- 等待本地 cache sync 完成后， 启动 workers\n\n(3) 当收到变更事件后，执行 callback \n- 等待事件触发\n- 从事件中获取变更的 Object\n- 做一些必要的检查\n- 生成 object key，一般是 namespace/name 的形式\n- 将 key 放入 workqueue 中\n\n(4) worker loop\n- 等待从 workqueue 中获取到 item，一般为 object key\n- 用 object key 通过 lister 从本地 cache 中获取到真正的 object 对象\n- 做一些检查\n- 执行真正的业务逻辑\n- 处理下一个 item\n\n\n下面是自定义 controller 使用的一个参考：\n\n```\nvar (\n    masterURL  string\n    kubeconfig string\n)\n\nfunc init() {\n    flag.StringVar(&kubeconfig, \"kubeconfig\", \"\", \"Path to a kubeconfig. Only required if out-of-cluster.\")\n    flag.StringVar(&masterURL, \"master\", \"\", \"The address of the Kubernetes API server. Overrides any value in kubeconfig. Only required if out-of-cluster.\")\n}\n\nfunc main() {\n    flag.Parse()\n\n    stopCh := signals.SetupSignalHandler()\n\n    cfg, err := clientcmd.BuildConfigFromFlags(masterURL, kubeconfig)\n    if err != nil {\n        glog.Fatalf(\"Error building kubeconfig: %s\", err.Error())\n    }\n\n    kubeClient, err := kubernetes.NewForConfig(cfg)\n    if err != nil {\n        glog.Fatalf(\"Error building kubernetes clientset: %s\", err.Error())\n    }\n\n    // 所谓 Informer，其实就是一个带有本地缓存和索引机制的、可以注册 EventHandler 的 client\n    // informer watch apiserver,每隔 30 秒 resync 一次(list)\n    kubeInformerFactory := informers.NewSharedInformerFactory(kubeClient, time.Second*30)\n\n    controller := controller.NewController(kubeClient, kubeInformerFactory.Core().V1().Nodes())\n\n    //  启动 informer\n    go kubeInformerFactory.Start(stopCh)\n\n\t // start controller \n    if err = controller.Run(2, stopCh); err != nil {\n        glog.Fatalf(\"Error running controller: %s\", err.Error())\n    }\n}\n\n\n// NewController returns a new network controller\nfunc NewController(\n    kubeclientset kubernetes.Interface,\n    networkclientset clientset.Interface,\n    networkInformer informers.NetworkInformer) *Controller {\n\n    // Create event broadcaster\n    // Add sample-controller types to the default Kubernetes Scheme so Events can be\n    // logged for sample-controller types.\n    utilruntime.Must(networkscheme.AddToScheme(scheme.Scheme))\n    glog.V(4).Info(\"Creating event broadcaster\")\n    eventBroadcaster := record.NewBroadcaster()\n    eventBroadcaster.StartLogging(glog.Infof)\n    eventBroadcaster.StartRecordingToSink(&typedcorev1.EventSinkImpl{Interface: kubeclientset.CoreV1().Events(\"\")})\n    recorder := eventBroadcaster.NewRecorder(scheme.Scheme, corev1.EventSource{Component: controllerAgentName})\n\n    controller := &Controller{\n        kubeclientset:    kubeclientset,\n        networkclientset: networkclientset,\n        networksLister:   networkInformer.Lister(),\n        networksSynced:   networkInformer.Informer().HasSynced,\n        workqueue:        workqueue.NewNamedRateLimitingQueue(workqueue.DefaultControllerRateLimiter(), \"Networks\"),\n        recorder:         recorder,\n    }\n\n    glog.Info(\"Setting up event handlers\")\n    // Set up an event handler for when Network resources change\n    networkInformer.Informer().AddEventHandler(cache.ResourceEventHandlerFuncs{\n        AddFunc: controller.enqueueNetwork,\n        UpdateFunc: func(old, new interface{}) {\n            oldNetwork := old.(*samplecrdv1.Network)\n            newNetwork := new.(*samplecrdv1.Network)\n            if oldNetwork.ResourceVersion == newNetwork.ResourceVersion {\n                // Periodic resync will send update events for all known Networks.\n                // Two different versions of the same Network will always have different RVs.\n                return\n            }\n            controller.enqueueNetwork(new)\n        },\n        DeleteFunc: controller.enqueueNetworkForDelete,\n    })\n\n    return controller\n}\n\n```\n自定义 controller 的详细使用方法可以参考：[k8s-controller-custom-resource](https://github.com/resouer/k8s-controller-custom-resource)\n\n\n\n#### 四、使用中的一些问题\n\n##### 1、Informer 二级缓存中的同步问题\n\n虽然 Informer 和 Kubernetes 之间没有 resync 机制，但 Informer 内部的这两级缓存 DeltaIFIFO 和 LocalStore 之间会存在 resync 机制，k8s 中 kube-controller-manager 的 StatefulSetController 中使用了两级缓存的 resync 机制（如下图所示），我们在生产环境中发现 sts 创建后过了很久 pod 才会创建，主要是由于 StatefulSetController 的两级缓存之间 30s 会同步一次，由于  StatefulSetController watch 到变化后就会把对应的 sts 放入 DeltaIFIFO 中，且每隔30s会把 LocalStore 中全部的 sts 重新入一遍 DeltaIFIFO，入队时会做一些处理，过滤掉一些不需要重复入队列的 sts，若间隔的 30s 内没有处理完队列中所有的 sts，则待处理队列中始终存在未处理完的 sts，并且在同步过程中产生的 sts 会加的队列的尾部，新加入队尾的 sts 只能等到前面的 sts 处理完成（也就是 resync 完成）才会被处理，所以导致的现象就是 sts 创建后过了很久 pod 才会创建。\n\n优化的方法就是去掉二级缓存的同步策略（将 setInformer.Informer().AddEventHandlerWithResyncPeriod() 改为 informer.AddEventHandler()）或者调大同步周期，但是在研究 kube-controller-manager 其他 controller 时发现并不是所有的 controller 都有同步策略，社区也有相关的 issue 反馈了这一问题，[Remove resync period for sset controller](https://github.com/kubernetes/kubernetes/pull/75622)，社区也会在以后的版本中去掉两级缓存之间的 resync 策略。\n\n`k8s.io/kubernetes/pkg/controller/statefulset/stateful_set.go`\n\n![kube-controller-manager sts controller](http://cdn.tianfeiyu.com/informer-2.png)\n\n\n\n##### 2、使用 Informer 如何监听所有资源对象？\n\n一个 Informer 实例只能监听一种 resource，每个 resource 需要创建对应的 Informer 实例。\n\n\n\n##### 3、为什么不是使用 workqueue？\n\n建议使用 RateLimitingQueue，它相比普通的 workqueue 多了以下的功能: \n\n- 限流：可以限制一个 item 被 reenqueued 的次数。\n- 防止 hot loop：它保证了一个 item 被 reenqueued 后，不会马上被处理。\n\n\n\n#### 五、总结\n\n本文介绍了 client-go 包中核心组件 Informer 的原理以及使用方法，Informer 主要功能是缓存对象到本地以及根据对应的事件类型触发已注册好的 ResourceEventHandler，其主要用在访问 k8s apiserver 的客户端和 operator 中。\n\n\n\n\n参考：\n\n[如何用 client-go 拓展 Kubernetes 的 API](https://mp.weixin.qq.com/s?__biz=MzU1OTAzNzc5MQ==&mid=2247484052&idx=1&sn=cec9f4a1ee0d21c5b2c51bd147b8af59&chksm=fc1c2ea4cb6ba7b283eef5ac4a45985437c648361831bc3e6dd5f38053be1968b3389386e415&scene=21#wechat_redirect)\n\nhttps://www.kubernetes.org.cn/2693.html\n\n[Kubernetes 大咖秀徐超《使用 client-go 控制原生及拓展的 Kubernetes API》](https://studygolang.com/articles/9270)\n\n[Use prometheus conventions for workqueue metrics](https://github.com/kubernetes/kubernetes/issues/71165)\n\n[深入浅出kubernetes之client-go的workqueue](https://blog.csdn.net/weixin_42663840/article/details/81482553#%E9%99%90%E9%80%9F%E9%98%9F%E5%88%97)\n\n<https://gianarb.it/blog/kubernetes-shared-informer>\n\n[理解 K8S 的设计精髓之 List-Watch机制和Informer模块](https://zhuanlan.zhihu.com/p/59660536)\n\n<https://ranler.org/notes/file/528>\n\n[Kubernetes Client-go Informer 源码分析](https://yq.aliyun.com/articles/688485)\n","slug":"client-go_informer","published":1,"updated":"2019-07-21T10:07:57.293Z","_id":"cjycnhjll00005vwnkgorubj8","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"一、kubernetes-集群的几种访问方式\"><a href=\"#一、kubernetes-集群的几种访问方式\" class=\"headerlink\" title=\"一、kubernetes 集群的几种访问方式\"></a>一、kubernetes 集群的几种访问方式</h4><p>在实际开发过程中，若想要获取 kubernetes 中某个资源（比如 pod）的所有对象，可以使用 kubectl、k8s REST API、client-go(ClientSet、Dynamic Client、RESTClient 三种方式) 等多种方式访问 k8s 集群获取资源。在笔者的开发过程中，最初都是直接调用 k8s 的 REST API 来获取的，使用 <code>kubectl get pod -v=9</code> 可以直接看到调用 k8s 的接口，然后在程序中直接访问还是比较方便的。但是随着集群规模的增长或者从国内获取海外 k8s 集群的数据，直接调用 k8s 接口获取所有 pod 还是比较耗时，这个问题有多种解决方法，最初是直接使用 k8s 原生的 watch 接口来获取的，下面是一个伪代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const (</span><br><span class=\"line\">\tADDED    string = &quot;ADDED&quot;</span><br><span class=\"line\">\tMODIFIED string = &quot;MODIFIED&quot;</span><br><span class=\"line\">\tDELETED  string = &quot;DELETED&quot;</span><br><span class=\"line\">\tERROR    string = &quot;ERROR&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">type Event struct &#123;</span><br><span class=\"line\">\tType   string          `json:&quot;type&quot;`</span><br><span class=\"line\">\tObject json.RawMessage `json:&quot;object&quot;`</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\tresp, err := http.Get(&quot;http://apiserver:8080/api/v1/watch/pods?watch=yes&quot;)</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\t// ...</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tdecoder := json.NewDecoder(resp.Body)</span><br><span class=\"line\">\tfor &#123;</span><br><span class=\"line\">\t\tvar event Event</span><br><span class=\"line\">\t\terr = decoder.Decode(&amp;event)</span><br><span class=\"line\">\t\tif err != nil &#123;</span><br><span class=\"line\">\t\t\t// ...</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tswitch event.Type &#123;</span><br><span class=\"line\">\t\tcase ADDED, MODIFIED:</span><br><span class=\"line\">\t\t\t// ...</span><br><span class=\"line\">\t\tcase DELETED:</span><br><span class=\"line\">\t\t\t// ...</span><br><span class=\"line\">\t\tcase ERROR:</span><br><span class=\"line\">\t\t\t// ...</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>调用 watch 接口后会先将所有的对象 list 一次，然后 apiserver 会将变化的数据推送到 client 端，可以看到每次对于 watch 到的事件都需要判断后进行处理，然后将处理后的结果写入到本地的缓存中，原生的 watch 操作还是非常麻烦的。后来了解到官方推出一个客户端工具 client-go ，client-go 中的 Informer 对 watch 操作做了封装，使用起来非常方便，下面会主要介绍一下 client-go 的使用。</p>\n<h4 id=\"二、Informer-的机制\"><a href=\"#二、Informer-的机制\" class=\"headerlink\" title=\"二、Informer 的机制\"></a>二、Informer 的机制</h4><p>cient-go 是从 k8s 代码中抽出来的一个客户端工具，Informer 是 client-go 中的核心工具包，已经被 kubernetes 中众多组件所使用。所谓 Informer，其实就是一个带有本地缓存和索引机制的、可以注册 EventHandler 的 client，本地缓存被称为 Store，索引被称为 Index。使用 informer 的目的是为了减轻 apiserver 数据交互的压力而抽象出来的一个 cache 层, 客户端对 apiserver 数据的 “读取” 和 “监听” 操作都通过本地 informer 进行。Informer 实例的<code>Lister()</code>方法可以直接查找缓存在本地内存中的数据。</p>\n<p>Informer 的主要功能：</p>\n<ul>\n<li>同步数据到本地缓存</li>\n<li>根据对应的事件类型，触发事先注册好的 ResourceEventHandler</li>\n</ul>\n<h5 id=\"1、Informer-中几个组件的作用\"><a href=\"#1、Informer-中几个组件的作用\" class=\"headerlink\" title=\"1、Informer 中几个组件的作用\"></a>1、Informer 中几个组件的作用</h5><p>Informer 中主要有 Reflector、Delta FIFO Queue、Local Store、WorkQueue 几个组件。以下是 Informer 的工作流程图。</p>\n<p><img src=\"http://cdn.tianfeiyu.com/informer-1.png\" alt=\"Informer 组件\"></p>\n<p>根据流程图来解释一下 Informer 中几个组件的作用：</p>\n<ul>\n<li><p>Reflector：称之为反射器，实现对 apiserver 指定类型对象的监控(ListAndWatch)，其中反射实现的就是把监控的结果实例化成具体的对象，最终也是调用 Kubernetes 的 List/Watch API；</p>\n</li>\n<li><p>DeltaIFIFO Queue：一个增量队列，将 Reflector 监控变化的对象形成一个 FIFO 队列，此处的 Delta 就是变化；</p>\n</li>\n<li><p>LocalStore：就是 informer 的 cache，这里面缓存的是 apiserver 中的对象(其中有一部分可能还在DeltaFIFO 中)，此时使用者再查询对象的时候就直接从 cache 中查找，减少了 apiserver 的压力，LocalStore 只会被 Lister 的 List/Get 方法访问。</p>\n</li>\n<li><p>WorkQueue：DeltaIFIFO 收到时间后会先将时间存储在自己的数据结构中，然后直接操作 Store 中存储的数据，更新完 store 后 DeltaIFIFO 会将该事件 pop 到 WorkQueue 中，Controller 收到 WorkQueue  中的事件会根据对应的类型触发对应的回调函数。</p>\n</li>\n</ul>\n<h5 id=\"2、Informer-的工作流程\"><a href=\"#2、Informer-的工作流程\" class=\"headerlink\" title=\"2、Informer 的工作流程\"></a>2、Informer 的工作流程</h5><ul>\n<li>Informer 首先会 list/watch apiserver，Informer 所使用的 Reflector 包负责与 apiserver 建立连接，Reflector 使用 ListAndWatch 的方法，会先从 apiserver 中 list 该资源的所有实例，list 会拿到该对象最新的 resourceVersion，然后使用 watch 方法监听该 resourceVersion 之后的所有变化，若中途出现异常，reflector 则会从断开的 resourceVersion 处重现尝试监听所有变化，一旦该对象的实例有创建、删除、更新动作，Reflector 都会收到”事件通知”，这时，该事件及它对应的 API 对象这个组合，被称为增量（Delta），它会被放进 DeltaFIFO 中。</li>\n<li>Informer 会不断地从这个 DeltaFIFO 中读取增量，每拿出一个对象，Informer 就会判断这个增量的时间类型，然后创建或更新本地的缓存，也就是 store。</li>\n<li>如果事件类型是 Added（添加对象），那么 Informer 会通过 Indexer 的库把这个增量里的 API 对象保存到本地的缓存中，并为它创建索引，若为删除操作，则在本地缓存中删除该对象。</li>\n<li>DeltaFIFO 再 pop 这个事件到 controller 中，controller 会调用事先注册的 ResourceEventHandler 回调函数进行处理。</li>\n<li>在 ResourceEventHandler 回调函数中，其实只是做了一些很简单的过滤，然后将关心变更的 Object 放到 workqueue 里面。</li>\n<li>Controller 从 workqueue 里面取出 Object，启动一个 worker 来执行自己的业务逻辑，业务逻辑通常是计算目前集群的状态和用户希望达到的状态有多大的区别，然后孜孜不倦地让 apiserver 将状态演化到用户希望达到的状态，比如为 deployment 创建新的 pods，或者是扩容/缩容 deployment。</li>\n<li>在worker中就可以使用 lister 来获取 resource，而不用频繁的访问 apiserver，因为 apiserver 中 resource 的变更都会反映到本地的 cache 中。</li>\n</ul>\n<p>Informer 在使用时需要先初始化一个 InformerFactory，目前主要推荐使用的是 SharedInformerFactory，Shared 指的是在多个 Informer 中共享一个本地 cache。</p>\n<p>Informer 中的 ResourceEventHandler  函数有三种：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ResourceEventHandlerFuncs is an adaptor to let you easily specify as many or</span><br><span class=\"line\">// as few of the notification functions as you want while still implementing</span><br><span class=\"line\">// ResourceEventHandler.</span><br><span class=\"line\">type ResourceEventHandlerFuncs struct &#123;</span><br><span class=\"line\">    AddFunc    func(obj interface&#123;&#125;)</span><br><span class=\"line\">    UpdateFunc func(oldObj, newObj interface&#123;&#125;)</span><br><span class=\"line\">    DeleteFunc func(obj interface&#123;&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这三种函数的处理逻辑是用户自定义的，在初始化 controller 时注册完 ResourceEventHandler 后，一旦该对象的实例有创建、删除、更新三中操作后就会触发对应的 ResourceEventHandler。</p>\n<h4 id=\"三、Informer-使用示例\"><a href=\"#三、Informer-使用示例\" class=\"headerlink\" title=\"三、Informer 使用示例\"></a>三、Informer 使用示例</h4><p>在实际的开发工作中，Informer 主要用在两处：</p>\n<ul>\n<li>在访问 k8s apiserver 的客户端作为一个 client 缓存对象使用；</li>\n<li>在一些自定义 controller 中使用，比如 operator 的开发；</li>\n</ul>\n<h4 id=\"1、下面是一个作为-client-的使用示例：\"><a href=\"#1、下面是一个作为-client-的使用示例：\" class=\"headerlink\" title=\"1、下面是一个作为 client 的使用示例：\"></a>1、下面是一个作为 client 的使用示例：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;flag&quot;</span><br><span class=\"line\">\t&quot;fmt&quot;</span><br><span class=\"line\">\t&quot;log&quot;</span><br><span class=\"line\">\t&quot;path/filepath&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcorev1 &quot;k8s.io/api/core/v1&quot;</span><br><span class=\"line\">\t&quot;k8s.io/apimachinery/pkg/labels&quot;</span><br><span class=\"line\">\t&quot;k8s.io/apimachinery/pkg/util/runtime&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&quot;k8s.io/client-go/informers&quot;</span><br><span class=\"line\">\t&quot;k8s.io/client-go/kubernetes&quot;</span><br><span class=\"line\">\t&quot;k8s.io/client-go/tools/cache&quot;</span><br><span class=\"line\">\t&quot;k8s.io/client-go/tools/clientcmd&quot;</span><br><span class=\"line\">\t&quot;k8s.io/client-go/util/homedir&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\tvar kubeconfig *string</span><br><span class=\"line\">\tif home := homedir.HomeDir(); home != &quot;&quot; &#123;</span><br><span class=\"line\">\t\tkubeconfig = flag.String(&quot;kubeconfig&quot;, filepath.Join(home, &quot;.kube&quot;, &quot;config&quot;), &quot;(optional) absolute path to the kubeconfig file&quot;)</span><br><span class=\"line\">\t&#125; else &#123;</span><br><span class=\"line\">\t\tkubeconfig = flag.String(&quot;kubeconfig&quot;, &quot;&quot;, &quot;absolute path to the kubeconfig file&quot;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tflag.Parse()</span><br><span class=\"line\"></span><br><span class=\"line\">\tconfig, err := clientcmd.BuildConfigFromFlags(&quot;&quot;, *kubeconfig)</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\tpanic(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 初始化 client</span><br><span class=\"line\">\tclientset, err := kubernetes.NewForConfig(config)</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\tlog.Panic(err.Error())</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tstopper := make(chan struct&#123;&#125;)</span><br><span class=\"line\">\tdefer close(stopper)</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// 初始化 informer</span><br><span class=\"line\">\tfactory := informers.NewSharedInformerFactory(clientset, 0)</span><br><span class=\"line\">\tnodeInformer := factory.Core().V1().Nodes()</span><br><span class=\"line\">\tinformer := nodeInformer.Informer()</span><br><span class=\"line\">\tdefer runtime.HandleCrash()</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// 启动 informer，list &amp; watch</span><br><span class=\"line\">\tgo factory.Start(stopper)</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// 从 apiserver 同步资源，即 list </span><br><span class=\"line\">\tif !cache.WaitForCacheSync(stopper, informer.HasSynced) &#123;</span><br><span class=\"line\">\t\truntime.HandleError(fmt.Errorf(&quot;Timed out waiting for caches to sync&quot;))</span><br><span class=\"line\">\t\treturn</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 使用自定义 handler</span><br><span class=\"line\">\tinformer.AddEventHandler(cache.ResourceEventHandlerFuncs&#123;</span><br><span class=\"line\">\t\tAddFunc:    onAdd,</span><br><span class=\"line\">\t\tUpdateFunc: func(interface&#123;&#125;, interface&#123;&#125;) &#123; fmt.Println(&quot;update not implemented&quot;) &#125;, // 此处省略 workqueue 的使用</span><br><span class=\"line\">\t\tDeleteFunc: func(interface&#123;&#125;) &#123; fmt.Println(&quot;delete not implemented&quot;) &#125;,</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// 创建 lister</span><br><span class=\"line\">\tnodeLister := nodeInformer.Lister()</span><br><span class=\"line\">\t// 从 lister 中获取所有 items</span><br><span class=\"line\">\tnodeList, err := nodeLister.List(labels.Everything())</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(&quot;nodelist:&quot;, nodeList)</span><br><span class=\"line\">\t&lt;-stopper</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func onAdd(obj interface&#123;&#125;) &#123;</span><br><span class=\"line\">\tnode := obj.(*corev1.Node)</span><br><span class=\"line\">\tfmt.Println(&quot;add a node:&quot;, node.Name)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Shared指的是多个 lister 共享同一个cache，而且资源的变化会同时通知到cache和 listers。这个解释和上面图所展示的内容的是一致的，cache我们在Indexer的介绍中已经分析过了，lister 指的就是OnAdd、OnUpdate、OnDelete 这些回调函数背后的对象。</p>\n<h4 id=\"2、以下是作为-controller-使用的一个整体工作流程\"><a href=\"#2、以下是作为-controller-使用的一个整体工作流程\" class=\"headerlink\" title=\"2、以下是作为 controller 使用的一个整体工作流程\"></a>2、以下是作为 controller 使用的一个整体工作流程</h4><p>(1) 创建一个控制器</p>\n<ul>\n<li>为控制器创建 workqueue</li>\n<li>创建 informer, 为 informer 添加 callback 函数，创建 lister</li>\n</ul>\n<p>(2) 启动控制器</p>\n<ul>\n<li>启动 informer</li>\n<li>等待本地 cache sync 完成后， 启动 workers</li>\n</ul>\n<p>(3) 当收到变更事件后，执行 callback </p>\n<ul>\n<li>等待事件触发</li>\n<li>从事件中获取变更的 Object</li>\n<li>做一些必要的检查</li>\n<li>生成 object key，一般是 namespace/name 的形式</li>\n<li>将 key 放入 workqueue 中</li>\n</ul>\n<p>(4) worker loop</p>\n<ul>\n<li>等待从 workqueue 中获取到 item，一般为 object key</li>\n<li>用 object key 通过 lister 从本地 cache 中获取到真正的 object 对象</li>\n<li>做一些检查</li>\n<li>执行真正的业务逻辑</li>\n<li>处理下一个 item</li>\n</ul>\n<p>下面是自定义 controller 使用的一个参考：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var (</span><br><span class=\"line\">    masterURL  string</span><br><span class=\"line\">    kubeconfig string</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func init() &#123;</span><br><span class=\"line\">    flag.StringVar(&amp;kubeconfig, &quot;kubeconfig&quot;, &quot;&quot;, &quot;Path to a kubeconfig. Only required if out-of-cluster.&quot;)</span><br><span class=\"line\">    flag.StringVar(&amp;masterURL, &quot;master&quot;, &quot;&quot;, &quot;The address of the Kubernetes API server. Overrides any value in kubeconfig. Only required if out-of-cluster.&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    flag.Parse()</span><br><span class=\"line\"></span><br><span class=\"line\">    stopCh := signals.SetupSignalHandler()</span><br><span class=\"line\"></span><br><span class=\"line\">    cfg, err := clientcmd.BuildConfigFromFlags(masterURL, kubeconfig)</span><br><span class=\"line\">    if err != nil &#123;</span><br><span class=\"line\">        glog.Fatalf(&quot;Error building kubeconfig: %s&quot;, err.Error())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    kubeClient, err := kubernetes.NewForConfig(cfg)</span><br><span class=\"line\">    if err != nil &#123;</span><br><span class=\"line\">        glog.Fatalf(&quot;Error building kubernetes clientset: %s&quot;, err.Error())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 所谓 Informer，其实就是一个带有本地缓存和索引机制的、可以注册 EventHandler 的 client</span><br><span class=\"line\">    // informer watch apiserver,每隔 30 秒 resync 一次(list)</span><br><span class=\"line\">    kubeInformerFactory := informers.NewSharedInformerFactory(kubeClient, time.Second*30)</span><br><span class=\"line\"></span><br><span class=\"line\">    controller := controller.NewController(kubeClient, kubeInformerFactory.Core().V1().Nodes())</span><br><span class=\"line\"></span><br><span class=\"line\">    //  启动 informer</span><br><span class=\"line\">    go kubeInformerFactory.Start(stopCh)</span><br><span class=\"line\"></span><br><span class=\"line\">\t // start controller </span><br><span class=\"line\">    if err = controller.Run(2, stopCh); err != nil &#123;</span><br><span class=\"line\">        glog.Fatalf(&quot;Error running controller: %s&quot;, err.Error())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// NewController returns a new network controller</span><br><span class=\"line\">func NewController(</span><br><span class=\"line\">    kubeclientset kubernetes.Interface,</span><br><span class=\"line\">    networkclientset clientset.Interface,</span><br><span class=\"line\">    networkInformer informers.NetworkInformer) *Controller &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    // Create event broadcaster</span><br><span class=\"line\">    // Add sample-controller types to the default Kubernetes Scheme so Events can be</span><br><span class=\"line\">    // logged for sample-controller types.</span><br><span class=\"line\">    utilruntime.Must(networkscheme.AddToScheme(scheme.Scheme))</span><br><span class=\"line\">    glog.V(4).Info(&quot;Creating event broadcaster&quot;)</span><br><span class=\"line\">    eventBroadcaster := record.NewBroadcaster()</span><br><span class=\"line\">    eventBroadcaster.StartLogging(glog.Infof)</span><br><span class=\"line\">    eventBroadcaster.StartRecordingToSink(&amp;typedcorev1.EventSinkImpl&#123;Interface: kubeclientset.CoreV1().Events(&quot;&quot;)&#125;)</span><br><span class=\"line\">    recorder := eventBroadcaster.NewRecorder(scheme.Scheme, corev1.EventSource&#123;Component: controllerAgentName&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    controller := &amp;Controller&#123;</span><br><span class=\"line\">        kubeclientset:    kubeclientset,</span><br><span class=\"line\">        networkclientset: networkclientset,</span><br><span class=\"line\">        networksLister:   networkInformer.Lister(),</span><br><span class=\"line\">        networksSynced:   networkInformer.Informer().HasSynced,</span><br><span class=\"line\">        workqueue:        workqueue.NewNamedRateLimitingQueue(workqueue.DefaultControllerRateLimiter(), &quot;Networks&quot;),</span><br><span class=\"line\">        recorder:         recorder,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    glog.Info(&quot;Setting up event handlers&quot;)</span><br><span class=\"line\">    // Set up an event handler for when Network resources change</span><br><span class=\"line\">    networkInformer.Informer().AddEventHandler(cache.ResourceEventHandlerFuncs&#123;</span><br><span class=\"line\">        AddFunc: controller.enqueueNetwork,</span><br><span class=\"line\">        UpdateFunc: func(old, new interface&#123;&#125;) &#123;</span><br><span class=\"line\">            oldNetwork := old.(*samplecrdv1.Network)</span><br><span class=\"line\">            newNetwork := new.(*samplecrdv1.Network)</span><br><span class=\"line\">            if oldNetwork.ResourceVersion == newNetwork.ResourceVersion &#123;</span><br><span class=\"line\">                // Periodic resync will send update events for all known Networks.</span><br><span class=\"line\">                // Two different versions of the same Network will always have different RVs.</span><br><span class=\"line\">                return</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            controller.enqueueNetwork(new)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        DeleteFunc: controller.enqueueNetworkForDelete,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    return controller</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>自定义 controller 的详细使用方法可以参考：<a href=\"https://github.com/resouer/k8s-controller-custom-resource\" target=\"_blank\" rel=\"noopener\">k8s-controller-custom-resource</a></p>\n<h4 id=\"四、使用中的一些问题\"><a href=\"#四、使用中的一些问题\" class=\"headerlink\" title=\"四、使用中的一些问题\"></a>四、使用中的一些问题</h4><h5 id=\"1、Informer-二级缓存中的同步问题\"><a href=\"#1、Informer-二级缓存中的同步问题\" class=\"headerlink\" title=\"1、Informer 二级缓存中的同步问题\"></a>1、Informer 二级缓存中的同步问题</h5><p>虽然 Informer 和 Kubernetes 之间没有 resync 机制，但 Informer 内部的这两级缓存 DeltaIFIFO 和 LocalStore 之间会存在 resync 机制，k8s 中 kube-controller-manager 的 StatefulSetController 中使用了两级缓存的 resync 机制（如下图所示），我们在生产环境中发现 sts 创建后过了很久 pod 才会创建，主要是由于 StatefulSetController 的两级缓存之间 30s 会同步一次，由于  StatefulSetController watch 到变化后就会把对应的 sts 放入 DeltaIFIFO 中，且每隔30s会把 LocalStore 中全部的 sts 重新入一遍 DeltaIFIFO，入队时会做一些处理，过滤掉一些不需要重复入队列的 sts，若间隔的 30s 内没有处理完队列中所有的 sts，则待处理队列中始终存在未处理完的 sts，并且在同步过程中产生的 sts 会加的队列的尾部，新加入队尾的 sts 只能等到前面的 sts 处理完成（也就是 resync 完成）才会被处理，所以导致的现象就是 sts 创建后过了很久 pod 才会创建。</p>\n<p>优化的方法就是去掉二级缓存的同步策略（将 setInformer.Informer().AddEventHandlerWithResyncPeriod() 改为 informer.AddEventHandler()）或者调大同步周期，但是在研究 kube-controller-manager 其他 controller 时发现并不是所有的 controller 都有同步策略，社区也有相关的 issue 反馈了这一问题，<a href=\"https://github.com/kubernetes/kubernetes/pull/75622\" target=\"_blank\" rel=\"noopener\">Remove resync period for sset controller</a>，社区也会在以后的版本中去掉两级缓存之间的 resync 策略。</p>\n<p><code>k8s.io/kubernetes/pkg/controller/statefulset/stateful_set.go</code></p>\n<p><img src=\"http://cdn.tianfeiyu.com/informer-2.png\" alt=\"kube-controller-manager sts controller\"></p>\n<h5 id=\"2、使用-Informer-如何监听所有资源对象？\"><a href=\"#2、使用-Informer-如何监听所有资源对象？\" class=\"headerlink\" title=\"2、使用 Informer 如何监听所有资源对象？\"></a>2、使用 Informer 如何监听所有资源对象？</h5><p>一个 Informer 实例只能监听一种 resource，每个 resource 需要创建对应的 Informer 实例。</p>\n<h5 id=\"3、为什么不是使用-workqueue？\"><a href=\"#3、为什么不是使用-workqueue？\" class=\"headerlink\" title=\"3、为什么不是使用 workqueue？\"></a>3、为什么不是使用 workqueue？</h5><p>建议使用 RateLimitingQueue，它相比普通的 workqueue 多了以下的功能: </p>\n<ul>\n<li>限流：可以限制一个 item 被 reenqueued 的次数。</li>\n<li>防止 hot loop：它保证了一个 item 被 reenqueued 后，不会马上被处理。</li>\n</ul>\n<h4 id=\"五、总结\"><a href=\"#五、总结\" class=\"headerlink\" title=\"五、总结\"></a>五、总结</h4><p>本文介绍了 client-go 包中核心组件 Informer 的原理以及使用方法，Informer 主要功能是缓存对象到本地以及根据对应的事件类型触发已注册好的 ResourceEventHandler，其主要用在访问 k8s apiserver 的客户端和 operator 中。</p>\n<p>参考：</p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzU1OTAzNzc5MQ==&amp;mid=2247484052&amp;idx=1&amp;sn=cec9f4a1ee0d21c5b2c51bd147b8af59&amp;chksm=fc1c2ea4cb6ba7b283eef5ac4a45985437c648361831bc3e6dd5f38053be1968b3389386e415&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener\">如何用 client-go 拓展 Kubernetes 的 API</a></p>\n<p><a href=\"https://www.kubernetes.org.cn/2693.html\" target=\"_blank\" rel=\"noopener\">https://www.kubernetes.org.cn/2693.html</a></p>\n<p><a href=\"https://studygolang.com/articles/9270\" target=\"_blank\" rel=\"noopener\">Kubernetes 大咖秀徐超《使用 client-go 控制原生及拓展的 Kubernetes API》</a></p>\n<p><a href=\"https://github.com/kubernetes/kubernetes/issues/71165\" target=\"_blank\" rel=\"noopener\">Use prometheus conventions for workqueue metrics</a></p>\n<p><a href=\"https://blog.csdn.net/weixin_42663840/article/details/81482553#%E9%99%90%E9%80%9F%E9%98%9F%E5%88%97\" target=\"_blank\" rel=\"noopener\">深入浅出kubernetes之client-go的workqueue</a></p>\n<p><a href=\"https://gianarb.it/blog/kubernetes-shared-informer\" target=\"_blank\" rel=\"noopener\">https://gianarb.it/blog/kubernetes-shared-informer</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/59660536\" target=\"_blank\" rel=\"noopener\">理解 K8S 的设计精髓之 List-Watch机制和Informer模块</a></p>\n<p><a href=\"https://ranler.org/notes/file/528\" target=\"_blank\" rel=\"noopener\">https://ranler.org/notes/file/528</a></p>\n<p><a href=\"https://yq.aliyun.com/articles/688485\" target=\"_blank\" rel=\"noopener\">Kubernetes Client-go Informer 源码分析</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"一、kubernetes-集群的几种访问方式\"><a href=\"#一、kubernetes-集群的几种访问方式\" class=\"headerlink\" title=\"一、kubernetes 集群的几种访问方式\"></a>一、kubernetes 集群的几种访问方式</h4><p>在实际开发过程中，若想要获取 kubernetes 中某个资源（比如 pod）的所有对象，可以使用 kubectl、k8s REST API、client-go(ClientSet、Dynamic Client、RESTClient 三种方式) 等多种方式访问 k8s 集群获取资源。在笔者的开发过程中，最初都是直接调用 k8s 的 REST API 来获取的，使用 <code>kubectl get pod -v=9</code> 可以直接看到调用 k8s 的接口，然后在程序中直接访问还是比较方便的。但是随着集群规模的增长或者从国内获取海外 k8s 集群的数据，直接调用 k8s 接口获取所有 pod 还是比较耗时，这个问题有多种解决方法，最初是直接使用 k8s 原生的 watch 接口来获取的，下面是一个伪代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const (</span><br><span class=\"line\">\tADDED    string = &quot;ADDED&quot;</span><br><span class=\"line\">\tMODIFIED string = &quot;MODIFIED&quot;</span><br><span class=\"line\">\tDELETED  string = &quot;DELETED&quot;</span><br><span class=\"line\">\tERROR    string = &quot;ERROR&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">type Event struct &#123;</span><br><span class=\"line\">\tType   string          `json:&quot;type&quot;`</span><br><span class=\"line\">\tObject json.RawMessage `json:&quot;object&quot;`</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\tresp, err := http.Get(&quot;http://apiserver:8080/api/v1/watch/pods?watch=yes&quot;)</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\t// ...</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tdecoder := json.NewDecoder(resp.Body)</span><br><span class=\"line\">\tfor &#123;</span><br><span class=\"line\">\t\tvar event Event</span><br><span class=\"line\">\t\terr = decoder.Decode(&amp;event)</span><br><span class=\"line\">\t\tif err != nil &#123;</span><br><span class=\"line\">\t\t\t// ...</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tswitch event.Type &#123;</span><br><span class=\"line\">\t\tcase ADDED, MODIFIED:</span><br><span class=\"line\">\t\t\t// ...</span><br><span class=\"line\">\t\tcase DELETED:</span><br><span class=\"line\">\t\t\t// ...</span><br><span class=\"line\">\t\tcase ERROR:</span><br><span class=\"line\">\t\t\t// ...</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>调用 watch 接口后会先将所有的对象 list 一次，然后 apiserver 会将变化的数据推送到 client 端，可以看到每次对于 watch 到的事件都需要判断后进行处理，然后将处理后的结果写入到本地的缓存中，原生的 watch 操作还是非常麻烦的。后来了解到官方推出一个客户端工具 client-go ，client-go 中的 Informer 对 watch 操作做了封装，使用起来非常方便，下面会主要介绍一下 client-go 的使用。</p>\n<h4 id=\"二、Informer-的机制\"><a href=\"#二、Informer-的机制\" class=\"headerlink\" title=\"二、Informer 的机制\"></a>二、Informer 的机制</h4><p>cient-go 是从 k8s 代码中抽出来的一个客户端工具，Informer 是 client-go 中的核心工具包，已经被 kubernetes 中众多组件所使用。所谓 Informer，其实就是一个带有本地缓存和索引机制的、可以注册 EventHandler 的 client，本地缓存被称为 Store，索引被称为 Index。使用 informer 的目的是为了减轻 apiserver 数据交互的压力而抽象出来的一个 cache 层, 客户端对 apiserver 数据的 “读取” 和 “监听” 操作都通过本地 informer 进行。Informer 实例的<code>Lister()</code>方法可以直接查找缓存在本地内存中的数据。</p>\n<p>Informer 的主要功能：</p>\n<ul>\n<li>同步数据到本地缓存</li>\n<li>根据对应的事件类型，触发事先注册好的 ResourceEventHandler</li>\n</ul>\n<h5 id=\"1、Informer-中几个组件的作用\"><a href=\"#1、Informer-中几个组件的作用\" class=\"headerlink\" title=\"1、Informer 中几个组件的作用\"></a>1、Informer 中几个组件的作用</h5><p>Informer 中主要有 Reflector、Delta FIFO Queue、Local Store、WorkQueue 几个组件。以下是 Informer 的工作流程图。</p>\n<p><img src=\"http://cdn.tianfeiyu.com/informer-1.png\" alt=\"Informer 组件\"></p>\n<p>根据流程图来解释一下 Informer 中几个组件的作用：</p>\n<ul>\n<li><p>Reflector：称之为反射器，实现对 apiserver 指定类型对象的监控(ListAndWatch)，其中反射实现的就是把监控的结果实例化成具体的对象，最终也是调用 Kubernetes 的 List/Watch API；</p>\n</li>\n<li><p>DeltaIFIFO Queue：一个增量队列，将 Reflector 监控变化的对象形成一个 FIFO 队列，此处的 Delta 就是变化；</p>\n</li>\n<li><p>LocalStore：就是 informer 的 cache，这里面缓存的是 apiserver 中的对象(其中有一部分可能还在DeltaFIFO 中)，此时使用者再查询对象的时候就直接从 cache 中查找，减少了 apiserver 的压力，LocalStore 只会被 Lister 的 List/Get 方法访问。</p>\n</li>\n<li><p>WorkQueue：DeltaIFIFO 收到时间后会先将时间存储在自己的数据结构中，然后直接操作 Store 中存储的数据，更新完 store 后 DeltaIFIFO 会将该事件 pop 到 WorkQueue 中，Controller 收到 WorkQueue  中的事件会根据对应的类型触发对应的回调函数。</p>\n</li>\n</ul>\n<h5 id=\"2、Informer-的工作流程\"><a href=\"#2、Informer-的工作流程\" class=\"headerlink\" title=\"2、Informer 的工作流程\"></a>2、Informer 的工作流程</h5><ul>\n<li>Informer 首先会 list/watch apiserver，Informer 所使用的 Reflector 包负责与 apiserver 建立连接，Reflector 使用 ListAndWatch 的方法，会先从 apiserver 中 list 该资源的所有实例，list 会拿到该对象最新的 resourceVersion，然后使用 watch 方法监听该 resourceVersion 之后的所有变化，若中途出现异常，reflector 则会从断开的 resourceVersion 处重现尝试监听所有变化，一旦该对象的实例有创建、删除、更新动作，Reflector 都会收到”事件通知”，这时，该事件及它对应的 API 对象这个组合，被称为增量（Delta），它会被放进 DeltaFIFO 中。</li>\n<li>Informer 会不断地从这个 DeltaFIFO 中读取增量，每拿出一个对象，Informer 就会判断这个增量的时间类型，然后创建或更新本地的缓存，也就是 store。</li>\n<li>如果事件类型是 Added（添加对象），那么 Informer 会通过 Indexer 的库把这个增量里的 API 对象保存到本地的缓存中，并为它创建索引，若为删除操作，则在本地缓存中删除该对象。</li>\n<li>DeltaFIFO 再 pop 这个事件到 controller 中，controller 会调用事先注册的 ResourceEventHandler 回调函数进行处理。</li>\n<li>在 ResourceEventHandler 回调函数中，其实只是做了一些很简单的过滤，然后将关心变更的 Object 放到 workqueue 里面。</li>\n<li>Controller 从 workqueue 里面取出 Object，启动一个 worker 来执行自己的业务逻辑，业务逻辑通常是计算目前集群的状态和用户希望达到的状态有多大的区别，然后孜孜不倦地让 apiserver 将状态演化到用户希望达到的状态，比如为 deployment 创建新的 pods，或者是扩容/缩容 deployment。</li>\n<li>在worker中就可以使用 lister 来获取 resource，而不用频繁的访问 apiserver，因为 apiserver 中 resource 的变更都会反映到本地的 cache 中。</li>\n</ul>\n<p>Informer 在使用时需要先初始化一个 InformerFactory，目前主要推荐使用的是 SharedInformerFactory，Shared 指的是在多个 Informer 中共享一个本地 cache。</p>\n<p>Informer 中的 ResourceEventHandler  函数有三种：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ResourceEventHandlerFuncs is an adaptor to let you easily specify as many or</span><br><span class=\"line\">// as few of the notification functions as you want while still implementing</span><br><span class=\"line\">// ResourceEventHandler.</span><br><span class=\"line\">type ResourceEventHandlerFuncs struct &#123;</span><br><span class=\"line\">    AddFunc    func(obj interface&#123;&#125;)</span><br><span class=\"line\">    UpdateFunc func(oldObj, newObj interface&#123;&#125;)</span><br><span class=\"line\">    DeleteFunc func(obj interface&#123;&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这三种函数的处理逻辑是用户自定义的，在初始化 controller 时注册完 ResourceEventHandler 后，一旦该对象的实例有创建、删除、更新三中操作后就会触发对应的 ResourceEventHandler。</p>\n<h4 id=\"三、Informer-使用示例\"><a href=\"#三、Informer-使用示例\" class=\"headerlink\" title=\"三、Informer 使用示例\"></a>三、Informer 使用示例</h4><p>在实际的开发工作中，Informer 主要用在两处：</p>\n<ul>\n<li>在访问 k8s apiserver 的客户端作为一个 client 缓存对象使用；</li>\n<li>在一些自定义 controller 中使用，比如 operator 的开发；</li>\n</ul>\n<h4 id=\"1、下面是一个作为-client-的使用示例：\"><a href=\"#1、下面是一个作为-client-的使用示例：\" class=\"headerlink\" title=\"1、下面是一个作为 client 的使用示例：\"></a>1、下面是一个作为 client 的使用示例：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;flag&quot;</span><br><span class=\"line\">\t&quot;fmt&quot;</span><br><span class=\"line\">\t&quot;log&quot;</span><br><span class=\"line\">\t&quot;path/filepath&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcorev1 &quot;k8s.io/api/core/v1&quot;</span><br><span class=\"line\">\t&quot;k8s.io/apimachinery/pkg/labels&quot;</span><br><span class=\"line\">\t&quot;k8s.io/apimachinery/pkg/util/runtime&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&quot;k8s.io/client-go/informers&quot;</span><br><span class=\"line\">\t&quot;k8s.io/client-go/kubernetes&quot;</span><br><span class=\"line\">\t&quot;k8s.io/client-go/tools/cache&quot;</span><br><span class=\"line\">\t&quot;k8s.io/client-go/tools/clientcmd&quot;</span><br><span class=\"line\">\t&quot;k8s.io/client-go/util/homedir&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\tvar kubeconfig *string</span><br><span class=\"line\">\tif home := homedir.HomeDir(); home != &quot;&quot; &#123;</span><br><span class=\"line\">\t\tkubeconfig = flag.String(&quot;kubeconfig&quot;, filepath.Join(home, &quot;.kube&quot;, &quot;config&quot;), &quot;(optional) absolute path to the kubeconfig file&quot;)</span><br><span class=\"line\">\t&#125; else &#123;</span><br><span class=\"line\">\t\tkubeconfig = flag.String(&quot;kubeconfig&quot;, &quot;&quot;, &quot;absolute path to the kubeconfig file&quot;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tflag.Parse()</span><br><span class=\"line\"></span><br><span class=\"line\">\tconfig, err := clientcmd.BuildConfigFromFlags(&quot;&quot;, *kubeconfig)</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\tpanic(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 初始化 client</span><br><span class=\"line\">\tclientset, err := kubernetes.NewForConfig(config)</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\tlog.Panic(err.Error())</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tstopper := make(chan struct&#123;&#125;)</span><br><span class=\"line\">\tdefer close(stopper)</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// 初始化 informer</span><br><span class=\"line\">\tfactory := informers.NewSharedInformerFactory(clientset, 0)</span><br><span class=\"line\">\tnodeInformer := factory.Core().V1().Nodes()</span><br><span class=\"line\">\tinformer := nodeInformer.Informer()</span><br><span class=\"line\">\tdefer runtime.HandleCrash()</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// 启动 informer，list &amp; watch</span><br><span class=\"line\">\tgo factory.Start(stopper)</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// 从 apiserver 同步资源，即 list </span><br><span class=\"line\">\tif !cache.WaitForCacheSync(stopper, informer.HasSynced) &#123;</span><br><span class=\"line\">\t\truntime.HandleError(fmt.Errorf(&quot;Timed out waiting for caches to sync&quot;))</span><br><span class=\"line\">\t\treturn</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 使用自定义 handler</span><br><span class=\"line\">\tinformer.AddEventHandler(cache.ResourceEventHandlerFuncs&#123;</span><br><span class=\"line\">\t\tAddFunc:    onAdd,</span><br><span class=\"line\">\t\tUpdateFunc: func(interface&#123;&#125;, interface&#123;&#125;) &#123; fmt.Println(&quot;update not implemented&quot;) &#125;, // 此处省略 workqueue 的使用</span><br><span class=\"line\">\t\tDeleteFunc: func(interface&#123;&#125;) &#123; fmt.Println(&quot;delete not implemented&quot;) &#125;,</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// 创建 lister</span><br><span class=\"line\">\tnodeLister := nodeInformer.Lister()</span><br><span class=\"line\">\t// 从 lister 中获取所有 items</span><br><span class=\"line\">\tnodeList, err := nodeLister.List(labels.Everything())</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(&quot;nodelist:&quot;, nodeList)</span><br><span class=\"line\">\t&lt;-stopper</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func onAdd(obj interface&#123;&#125;) &#123;</span><br><span class=\"line\">\tnode := obj.(*corev1.Node)</span><br><span class=\"line\">\tfmt.Println(&quot;add a node:&quot;, node.Name)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Shared指的是多个 lister 共享同一个cache，而且资源的变化会同时通知到cache和 listers。这个解释和上面图所展示的内容的是一致的，cache我们在Indexer的介绍中已经分析过了，lister 指的就是OnAdd、OnUpdate、OnDelete 这些回调函数背后的对象。</p>\n<h4 id=\"2、以下是作为-controller-使用的一个整体工作流程\"><a href=\"#2、以下是作为-controller-使用的一个整体工作流程\" class=\"headerlink\" title=\"2、以下是作为 controller 使用的一个整体工作流程\"></a>2、以下是作为 controller 使用的一个整体工作流程</h4><p>(1) 创建一个控制器</p>\n<ul>\n<li>为控制器创建 workqueue</li>\n<li>创建 informer, 为 informer 添加 callback 函数，创建 lister</li>\n</ul>\n<p>(2) 启动控制器</p>\n<ul>\n<li>启动 informer</li>\n<li>等待本地 cache sync 完成后， 启动 workers</li>\n</ul>\n<p>(3) 当收到变更事件后，执行 callback </p>\n<ul>\n<li>等待事件触发</li>\n<li>从事件中获取变更的 Object</li>\n<li>做一些必要的检查</li>\n<li>生成 object key，一般是 namespace/name 的形式</li>\n<li>将 key 放入 workqueue 中</li>\n</ul>\n<p>(4) worker loop</p>\n<ul>\n<li>等待从 workqueue 中获取到 item，一般为 object key</li>\n<li>用 object key 通过 lister 从本地 cache 中获取到真正的 object 对象</li>\n<li>做一些检查</li>\n<li>执行真正的业务逻辑</li>\n<li>处理下一个 item</li>\n</ul>\n<p>下面是自定义 controller 使用的一个参考：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var (</span><br><span class=\"line\">    masterURL  string</span><br><span class=\"line\">    kubeconfig string</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func init() &#123;</span><br><span class=\"line\">    flag.StringVar(&amp;kubeconfig, &quot;kubeconfig&quot;, &quot;&quot;, &quot;Path to a kubeconfig. Only required if out-of-cluster.&quot;)</span><br><span class=\"line\">    flag.StringVar(&amp;masterURL, &quot;master&quot;, &quot;&quot;, &quot;The address of the Kubernetes API server. Overrides any value in kubeconfig. Only required if out-of-cluster.&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    flag.Parse()</span><br><span class=\"line\"></span><br><span class=\"line\">    stopCh := signals.SetupSignalHandler()</span><br><span class=\"line\"></span><br><span class=\"line\">    cfg, err := clientcmd.BuildConfigFromFlags(masterURL, kubeconfig)</span><br><span class=\"line\">    if err != nil &#123;</span><br><span class=\"line\">        glog.Fatalf(&quot;Error building kubeconfig: %s&quot;, err.Error())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    kubeClient, err := kubernetes.NewForConfig(cfg)</span><br><span class=\"line\">    if err != nil &#123;</span><br><span class=\"line\">        glog.Fatalf(&quot;Error building kubernetes clientset: %s&quot;, err.Error())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 所谓 Informer，其实就是一个带有本地缓存和索引机制的、可以注册 EventHandler 的 client</span><br><span class=\"line\">    // informer watch apiserver,每隔 30 秒 resync 一次(list)</span><br><span class=\"line\">    kubeInformerFactory := informers.NewSharedInformerFactory(kubeClient, time.Second*30)</span><br><span class=\"line\"></span><br><span class=\"line\">    controller := controller.NewController(kubeClient, kubeInformerFactory.Core().V1().Nodes())</span><br><span class=\"line\"></span><br><span class=\"line\">    //  启动 informer</span><br><span class=\"line\">    go kubeInformerFactory.Start(stopCh)</span><br><span class=\"line\"></span><br><span class=\"line\">\t // start controller </span><br><span class=\"line\">    if err = controller.Run(2, stopCh); err != nil &#123;</span><br><span class=\"line\">        glog.Fatalf(&quot;Error running controller: %s&quot;, err.Error())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// NewController returns a new network controller</span><br><span class=\"line\">func NewController(</span><br><span class=\"line\">    kubeclientset kubernetes.Interface,</span><br><span class=\"line\">    networkclientset clientset.Interface,</span><br><span class=\"line\">    networkInformer informers.NetworkInformer) *Controller &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    // Create event broadcaster</span><br><span class=\"line\">    // Add sample-controller types to the default Kubernetes Scheme so Events can be</span><br><span class=\"line\">    // logged for sample-controller types.</span><br><span class=\"line\">    utilruntime.Must(networkscheme.AddToScheme(scheme.Scheme))</span><br><span class=\"line\">    glog.V(4).Info(&quot;Creating event broadcaster&quot;)</span><br><span class=\"line\">    eventBroadcaster := record.NewBroadcaster()</span><br><span class=\"line\">    eventBroadcaster.StartLogging(glog.Infof)</span><br><span class=\"line\">    eventBroadcaster.StartRecordingToSink(&amp;typedcorev1.EventSinkImpl&#123;Interface: kubeclientset.CoreV1().Events(&quot;&quot;)&#125;)</span><br><span class=\"line\">    recorder := eventBroadcaster.NewRecorder(scheme.Scheme, corev1.EventSource&#123;Component: controllerAgentName&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    controller := &amp;Controller&#123;</span><br><span class=\"line\">        kubeclientset:    kubeclientset,</span><br><span class=\"line\">        networkclientset: networkclientset,</span><br><span class=\"line\">        networksLister:   networkInformer.Lister(),</span><br><span class=\"line\">        networksSynced:   networkInformer.Informer().HasSynced,</span><br><span class=\"line\">        workqueue:        workqueue.NewNamedRateLimitingQueue(workqueue.DefaultControllerRateLimiter(), &quot;Networks&quot;),</span><br><span class=\"line\">        recorder:         recorder,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    glog.Info(&quot;Setting up event handlers&quot;)</span><br><span class=\"line\">    // Set up an event handler for when Network resources change</span><br><span class=\"line\">    networkInformer.Informer().AddEventHandler(cache.ResourceEventHandlerFuncs&#123;</span><br><span class=\"line\">        AddFunc: controller.enqueueNetwork,</span><br><span class=\"line\">        UpdateFunc: func(old, new interface&#123;&#125;) &#123;</span><br><span class=\"line\">            oldNetwork := old.(*samplecrdv1.Network)</span><br><span class=\"line\">            newNetwork := new.(*samplecrdv1.Network)</span><br><span class=\"line\">            if oldNetwork.ResourceVersion == newNetwork.ResourceVersion &#123;</span><br><span class=\"line\">                // Periodic resync will send update events for all known Networks.</span><br><span class=\"line\">                // Two different versions of the same Network will always have different RVs.</span><br><span class=\"line\">                return</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            controller.enqueueNetwork(new)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        DeleteFunc: controller.enqueueNetworkForDelete,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    return controller</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>自定义 controller 的详细使用方法可以参考：<a href=\"https://github.com/resouer/k8s-controller-custom-resource\" target=\"_blank\" rel=\"noopener\">k8s-controller-custom-resource</a></p>\n<h4 id=\"四、使用中的一些问题\"><a href=\"#四、使用中的一些问题\" class=\"headerlink\" title=\"四、使用中的一些问题\"></a>四、使用中的一些问题</h4><h5 id=\"1、Informer-二级缓存中的同步问题\"><a href=\"#1、Informer-二级缓存中的同步问题\" class=\"headerlink\" title=\"1、Informer 二级缓存中的同步问题\"></a>1、Informer 二级缓存中的同步问题</h5><p>虽然 Informer 和 Kubernetes 之间没有 resync 机制，但 Informer 内部的这两级缓存 DeltaIFIFO 和 LocalStore 之间会存在 resync 机制，k8s 中 kube-controller-manager 的 StatefulSetController 中使用了两级缓存的 resync 机制（如下图所示），我们在生产环境中发现 sts 创建后过了很久 pod 才会创建，主要是由于 StatefulSetController 的两级缓存之间 30s 会同步一次，由于  StatefulSetController watch 到变化后就会把对应的 sts 放入 DeltaIFIFO 中，且每隔30s会把 LocalStore 中全部的 sts 重新入一遍 DeltaIFIFO，入队时会做一些处理，过滤掉一些不需要重复入队列的 sts，若间隔的 30s 内没有处理完队列中所有的 sts，则待处理队列中始终存在未处理完的 sts，并且在同步过程中产生的 sts 会加的队列的尾部，新加入队尾的 sts 只能等到前面的 sts 处理完成（也就是 resync 完成）才会被处理，所以导致的现象就是 sts 创建后过了很久 pod 才会创建。</p>\n<p>优化的方法就是去掉二级缓存的同步策略（将 setInformer.Informer().AddEventHandlerWithResyncPeriod() 改为 informer.AddEventHandler()）或者调大同步周期，但是在研究 kube-controller-manager 其他 controller 时发现并不是所有的 controller 都有同步策略，社区也有相关的 issue 反馈了这一问题，<a href=\"https://github.com/kubernetes/kubernetes/pull/75622\" target=\"_blank\" rel=\"noopener\">Remove resync period for sset controller</a>，社区也会在以后的版本中去掉两级缓存之间的 resync 策略。</p>\n<p><code>k8s.io/kubernetes/pkg/controller/statefulset/stateful_set.go</code></p>\n<p><img src=\"http://cdn.tianfeiyu.com/informer-2.png\" alt=\"kube-controller-manager sts controller\"></p>\n<h5 id=\"2、使用-Informer-如何监听所有资源对象？\"><a href=\"#2、使用-Informer-如何监听所有资源对象？\" class=\"headerlink\" title=\"2、使用 Informer 如何监听所有资源对象？\"></a>2、使用 Informer 如何监听所有资源对象？</h5><p>一个 Informer 实例只能监听一种 resource，每个 resource 需要创建对应的 Informer 实例。</p>\n<h5 id=\"3、为什么不是使用-workqueue？\"><a href=\"#3、为什么不是使用-workqueue？\" class=\"headerlink\" title=\"3、为什么不是使用 workqueue？\"></a>3、为什么不是使用 workqueue？</h5><p>建议使用 RateLimitingQueue，它相比普通的 workqueue 多了以下的功能: </p>\n<ul>\n<li>限流：可以限制一个 item 被 reenqueued 的次数。</li>\n<li>防止 hot loop：它保证了一个 item 被 reenqueued 后，不会马上被处理。</li>\n</ul>\n<h4 id=\"五、总结\"><a href=\"#五、总结\" class=\"headerlink\" title=\"五、总结\"></a>五、总结</h4><p>本文介绍了 client-go 包中核心组件 Informer 的原理以及使用方法，Informer 主要功能是缓存对象到本地以及根据对应的事件类型触发已注册好的 ResourceEventHandler，其主要用在访问 k8s apiserver 的客户端和 operator 中。</p>\n<p>参考：</p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzU1OTAzNzc5MQ==&amp;mid=2247484052&amp;idx=1&amp;sn=cec9f4a1ee0d21c5b2c51bd147b8af59&amp;chksm=fc1c2ea4cb6ba7b283eef5ac4a45985437c648361831bc3e6dd5f38053be1968b3389386e415&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener\">如何用 client-go 拓展 Kubernetes 的 API</a></p>\n<p><a href=\"https://www.kubernetes.org.cn/2693.html\" target=\"_blank\" rel=\"noopener\">https://www.kubernetes.org.cn/2693.html</a></p>\n<p><a href=\"https://studygolang.com/articles/9270\" target=\"_blank\" rel=\"noopener\">Kubernetes 大咖秀徐超《使用 client-go 控制原生及拓展的 Kubernetes API》</a></p>\n<p><a href=\"https://github.com/kubernetes/kubernetes/issues/71165\" target=\"_blank\" rel=\"noopener\">Use prometheus conventions for workqueue metrics</a></p>\n<p><a href=\"https://blog.csdn.net/weixin_42663840/article/details/81482553#%E9%99%90%E9%80%9F%E9%98%9F%E5%88%97\" target=\"_blank\" rel=\"noopener\">深入浅出kubernetes之client-go的workqueue</a></p>\n<p><a href=\"https://gianarb.it/blog/kubernetes-shared-informer\" target=\"_blank\" rel=\"noopener\">https://gianarb.it/blog/kubernetes-shared-informer</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/59660536\" target=\"_blank\" rel=\"noopener\">理解 K8S 的设计精髓之 List-Watch机制和Informer模块</a></p>\n<p><a href=\"https://ranler.org/notes/file/528\" target=\"_blank\" rel=\"noopener\">https://ranler.org/notes/file/528</a></p>\n<p><a href=\"https://yq.aliyun.com/articles/688485\" target=\"_blank\" rel=\"noopener\">Kubernetes Client-go Informer 源码分析</a></p>\n"},{"title":"Docker 架构中的几个核心概念","date":"2018-12-05T12:57:00.000Z","type":"docker","_content":"\n\n## 一、Docker 开源之路\n\n2015 年 6 月 ，docker 公司将 libcontainer 捐出并改名为 runC 项目，交由一个完全中立的基金会管理，然后以 runC 为依据，大家共同制定一套容器和镜像的标准和规范 OCI。\n\n2016 年 4 月，docker 1.11 版本之后开始引入了 containerd 和 runC，Docker 开始依赖于 containerd 和 runC 来管理容器，containerd 也可以操作满足 OCI 标准规范的其他容器工具，之后只要是按照 OCI 标准规范开发的容器工具，都可以被 containerd 使用起来。\n\n从 2017 年开始，Docker 公司先是将 Docker项目的容器运行时部分 Containerd 捐赠给CNCF 社区，紧接着，Docker 公司宣布将 Docker 项目改名为 Moby。\n\n\n## 二、Docker 架构\n\n![docker 架构](http://cdn.tianfeiyu.com/docker-1.png)\n\n\n![docker 进程关系](http://cdn.tianfeiyu.com/docker-2.png)\n\n\n### 三、核心概念\n\ndocker 1.13 版本中包含以下几个二进制文件。\n```\n$ docker --version\nDocker version 1.13.1, build 092cba3\n\n$ docker\ndocker             docker-containerd-ctr   dockerd      docker-proxy\ndocker-containerd  docker-containerd-shim  docker-init  docker-runc\n```\n\n#### 1、docker \ndocker 的命令行工具，是给用户和 docker daemon 建立通信的客户端。\n\n#### 2、dockerd \ndockerd 是 docker 架构中一个常驻在后台的系统进程，称为 docker daemon，dockerd 实际调用的还是 containerd 的 api 接口（rpc 方式实现）,docker daemon 的作用主要有以下两方面：\n\n- 接收并处理 docker client 发送的请求\n- 管理所有的 docker 容器\n\n有了 containerd 之后，dockerd 可以独立升级，以此避免之前 dockerd 升级会导致所有容器不可用的问题。\n\n#### 3、containerd\n\ncontainerd 是 dockerd 和 runc 之间的一个中间交流组件，docker 对容器的管理和操作基本都是通过 containerd 完成的。containerd 的主要功能有：\n- 容器生命周期管理\n- 日志管理\n- 镜像管理\n- 存储管理\n- 容器网络接口及网络管理\n\n#### 4、containerd-shim\n\ncontainerd-shim 是一个真实运行容器的载体，每启动一个容器都会起一个新的containerd-shim的一个进程， 它直接通过指定的三个参数：容器id，boundle目录（containerd 对应某个容器生成的目录，一般位于：/var/run/docker/libcontainerd/containerID，其中包括了容器配置和标准输入、标准输出、标准错误三个管道文件），运行时二进制（默认为runC）来调用 runc 的 api 创建一个容器，上面的 docker 进程图中可以直观的显示。其主要作用是：\n\n- 它允许容器运行时(即 runC)在启动容器之后退出，简单说就是不必为每个容器一直运行一个容器运行时(runC)\n- 即使在 containerd 和 dockerd 都挂掉的情况下，容器的标准 IO 和其它的文件描述符也都是可用的\n- 向 containerd 报告容器的退出状态\n\n有了它就可以在不中断容器运行的情况下升级或重启 dockerd，对于生产环境来说意义重大。\n\n#### 5、runC\nrunC 是 Docker 公司按照 OCI 标准规范编写的一个操作容器的命令行工具，其前身是 libcontainer 项目演化而来，runC 实际上就是 libcontainer 配上了一个轻型的客户端，是一个命令行工具端，根据 OCI（开放容器组织）的标准来创建和运行容器，实现了容器启停、资源隔离等功能。\n\n一个例子，使用 runC 运行 busybox 容器:\n```\n# mkdir /container\n# cd /container/\n# mkdir rootfs\n\n准备容器镜像的文件系统,从 busybox 镜像中提取\n# docker export $(docker create busybox) | tar -C rootfs -xvf -    \n# ls rootfs/\nbin  dev  etc  home  proc  root  sys  tmp  usr  var\n\n有了rootfs之后，我们还要按照 OCI 标准有一个配置文件 config.json 说明如何运行容器，\n包括要运行的命令、权限、环境变量等等内容，runc 提供了一个命令可以自动帮我们生成\n# docker-runc spec\n# ls\nconfig.json  rootfs\n# docker-runc run simplebusybox    #启动容器\n/ # ls\nbin   dev   etc   home  proc  root  sys   tmp   usr   var\n/ # hostname\nrunc\n```\n---\n参考：\n[Use of containerd-shim in docker-architecture](https://groups.google.com/forum/#!topic/docker-dev/zaZFlvIx1_k)\n[从 docker 到 runC](https://www.cnblogs.com/sparkdev/p/9129334.html)\n[OCI 和 runc：容器标准化和 docker](http://cizixs.com/2017/11/05/oci-and-runc/)\n[Open Container Initiative](https://github.com/opencontainers)\n","source":"_posts/docker-introduces.md","raw":"---\ntitle: Docker 架构中的几个核心概念\ndate: 2018-12-05 20:57:00\ntype: \"docker\"\n\n---\n\n\n## 一、Docker 开源之路\n\n2015 年 6 月 ，docker 公司将 libcontainer 捐出并改名为 runC 项目，交由一个完全中立的基金会管理，然后以 runC 为依据，大家共同制定一套容器和镜像的标准和规范 OCI。\n\n2016 年 4 月，docker 1.11 版本之后开始引入了 containerd 和 runC，Docker 开始依赖于 containerd 和 runC 来管理容器，containerd 也可以操作满足 OCI 标准规范的其他容器工具，之后只要是按照 OCI 标准规范开发的容器工具，都可以被 containerd 使用起来。\n\n从 2017 年开始，Docker 公司先是将 Docker项目的容器运行时部分 Containerd 捐赠给CNCF 社区，紧接着，Docker 公司宣布将 Docker 项目改名为 Moby。\n\n\n## 二、Docker 架构\n\n![docker 架构](http://cdn.tianfeiyu.com/docker-1.png)\n\n\n![docker 进程关系](http://cdn.tianfeiyu.com/docker-2.png)\n\n\n### 三、核心概念\n\ndocker 1.13 版本中包含以下几个二进制文件。\n```\n$ docker --version\nDocker version 1.13.1, build 092cba3\n\n$ docker\ndocker             docker-containerd-ctr   dockerd      docker-proxy\ndocker-containerd  docker-containerd-shim  docker-init  docker-runc\n```\n\n#### 1、docker \ndocker 的命令行工具，是给用户和 docker daemon 建立通信的客户端。\n\n#### 2、dockerd \ndockerd 是 docker 架构中一个常驻在后台的系统进程，称为 docker daemon，dockerd 实际调用的还是 containerd 的 api 接口（rpc 方式实现）,docker daemon 的作用主要有以下两方面：\n\n- 接收并处理 docker client 发送的请求\n- 管理所有的 docker 容器\n\n有了 containerd 之后，dockerd 可以独立升级，以此避免之前 dockerd 升级会导致所有容器不可用的问题。\n\n#### 3、containerd\n\ncontainerd 是 dockerd 和 runc 之间的一个中间交流组件，docker 对容器的管理和操作基本都是通过 containerd 完成的。containerd 的主要功能有：\n- 容器生命周期管理\n- 日志管理\n- 镜像管理\n- 存储管理\n- 容器网络接口及网络管理\n\n#### 4、containerd-shim\n\ncontainerd-shim 是一个真实运行容器的载体，每启动一个容器都会起一个新的containerd-shim的一个进程， 它直接通过指定的三个参数：容器id，boundle目录（containerd 对应某个容器生成的目录，一般位于：/var/run/docker/libcontainerd/containerID，其中包括了容器配置和标准输入、标准输出、标准错误三个管道文件），运行时二进制（默认为runC）来调用 runc 的 api 创建一个容器，上面的 docker 进程图中可以直观的显示。其主要作用是：\n\n- 它允许容器运行时(即 runC)在启动容器之后退出，简单说就是不必为每个容器一直运行一个容器运行时(runC)\n- 即使在 containerd 和 dockerd 都挂掉的情况下，容器的标准 IO 和其它的文件描述符也都是可用的\n- 向 containerd 报告容器的退出状态\n\n有了它就可以在不中断容器运行的情况下升级或重启 dockerd，对于生产环境来说意义重大。\n\n#### 5、runC\nrunC 是 Docker 公司按照 OCI 标准规范编写的一个操作容器的命令行工具，其前身是 libcontainer 项目演化而来，runC 实际上就是 libcontainer 配上了一个轻型的客户端，是一个命令行工具端，根据 OCI（开放容器组织）的标准来创建和运行容器，实现了容器启停、资源隔离等功能。\n\n一个例子，使用 runC 运行 busybox 容器:\n```\n# mkdir /container\n# cd /container/\n# mkdir rootfs\n\n准备容器镜像的文件系统,从 busybox 镜像中提取\n# docker export $(docker create busybox) | tar -C rootfs -xvf -    \n# ls rootfs/\nbin  dev  etc  home  proc  root  sys  tmp  usr  var\n\n有了rootfs之后，我们还要按照 OCI 标准有一个配置文件 config.json 说明如何运行容器，\n包括要运行的命令、权限、环境变量等等内容，runc 提供了一个命令可以自动帮我们生成\n# docker-runc spec\n# ls\nconfig.json  rootfs\n# docker-runc run simplebusybox    #启动容器\n/ # ls\nbin   dev   etc   home  proc  root  sys   tmp   usr   var\n/ # hostname\nrunc\n```\n---\n参考：\n[Use of containerd-shim in docker-architecture](https://groups.google.com/forum/#!topic/docker-dev/zaZFlvIx1_k)\n[从 docker 到 runC](https://www.cnblogs.com/sparkdev/p/9129334.html)\n[OCI 和 runc：容器标准化和 docker](http://cizixs.com/2017/11/05/oci-and-runc/)\n[Open Container Initiative](https://github.com/opencontainers)\n","slug":"docker-introduces","published":1,"updated":"2019-07-21T09:50:55.384Z","_id":"cjycnhjlo00025vwnub7pj5xk","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"一、Docker-开源之路\"><a href=\"#一、Docker-开源之路\" class=\"headerlink\" title=\"一、Docker 开源之路\"></a>一、Docker 开源之路</h2><p>2015 年 6 月 ，docker 公司将 libcontainer 捐出并改名为 runC 项目，交由一个完全中立的基金会管理，然后以 runC 为依据，大家共同制定一套容器和镜像的标准和规范 OCI。</p>\n<p>2016 年 4 月，docker 1.11 版本之后开始引入了 containerd 和 runC，Docker 开始依赖于 containerd 和 runC 来管理容器，containerd 也可以操作满足 OCI 标准规范的其他容器工具，之后只要是按照 OCI 标准规范开发的容器工具，都可以被 containerd 使用起来。</p>\n<p>从 2017 年开始，Docker 公司先是将 Docker项目的容器运行时部分 Containerd 捐赠给CNCF 社区，紧接着，Docker 公司宣布将 Docker 项目改名为 Moby。</p>\n<h2 id=\"二、Docker-架构\"><a href=\"#二、Docker-架构\" class=\"headerlink\" title=\"二、Docker 架构\"></a>二、Docker 架构</h2><p><img src=\"http://cdn.tianfeiyu.com/docker-1.png\" alt=\"docker 架构\"></p>\n<p><img src=\"http://cdn.tianfeiyu.com/docker-2.png\" alt=\"docker 进程关系\"></p>\n<h3 id=\"三、核心概念\"><a href=\"#三、核心概念\" class=\"headerlink\" title=\"三、核心概念\"></a>三、核心概念</h3><p>docker 1.13 版本中包含以下几个二进制文件。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker --version</span><br><span class=\"line\">Docker version 1.13.1, build 092cba3</span><br><span class=\"line\"></span><br><span class=\"line\">$ docker</span><br><span class=\"line\">docker             docker-containerd-ctr   dockerd      docker-proxy</span><br><span class=\"line\">docker-containerd  docker-containerd-shim  docker-init  docker-runc</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"1、docker\"><a href=\"#1、docker\" class=\"headerlink\" title=\"1、docker\"></a>1、docker</h4><p>docker 的命令行工具，是给用户和 docker daemon 建立通信的客户端。</p>\n<h4 id=\"2、dockerd\"><a href=\"#2、dockerd\" class=\"headerlink\" title=\"2、dockerd\"></a>2、dockerd</h4><p>dockerd 是 docker 架构中一个常驻在后台的系统进程，称为 docker daemon，dockerd 实际调用的还是 containerd 的 api 接口（rpc 方式实现）,docker daemon 的作用主要有以下两方面：</p>\n<ul>\n<li>接收并处理 docker client 发送的请求</li>\n<li>管理所有的 docker 容器</li>\n</ul>\n<p>有了 containerd 之后，dockerd 可以独立升级，以此避免之前 dockerd 升级会导致所有容器不可用的问题。</p>\n<h4 id=\"3、containerd\"><a href=\"#3、containerd\" class=\"headerlink\" title=\"3、containerd\"></a>3、containerd</h4><p>containerd 是 dockerd 和 runc 之间的一个中间交流组件，docker 对容器的管理和操作基本都是通过 containerd 完成的。containerd 的主要功能有：</p>\n<ul>\n<li>容器生命周期管理</li>\n<li>日志管理</li>\n<li>镜像管理</li>\n<li>存储管理</li>\n<li>容器网络接口及网络管理</li>\n</ul>\n<h4 id=\"4、containerd-shim\"><a href=\"#4、containerd-shim\" class=\"headerlink\" title=\"4、containerd-shim\"></a>4、containerd-shim</h4><p>containerd-shim 是一个真实运行容器的载体，每启动一个容器都会起一个新的containerd-shim的一个进程， 它直接通过指定的三个参数：容器id，boundle目录（containerd 对应某个容器生成的目录，一般位于：/var/run/docker/libcontainerd/containerID，其中包括了容器配置和标准输入、标准输出、标准错误三个管道文件），运行时二进制（默认为runC）来调用 runc 的 api 创建一个容器，上面的 docker 进程图中可以直观的显示。其主要作用是：</p>\n<ul>\n<li>它允许容器运行时(即 runC)在启动容器之后退出，简单说就是不必为每个容器一直运行一个容器运行时(runC)</li>\n<li>即使在 containerd 和 dockerd 都挂掉的情况下，容器的标准 IO 和其它的文件描述符也都是可用的</li>\n<li>向 containerd 报告容器的退出状态</li>\n</ul>\n<p>有了它就可以在不中断容器运行的情况下升级或重启 dockerd，对于生产环境来说意义重大。</p>\n<h4 id=\"5、runC\"><a href=\"#5、runC\" class=\"headerlink\" title=\"5、runC\"></a>5、runC</h4><p>runC 是 Docker 公司按照 OCI 标准规范编写的一个操作容器的命令行工具，其前身是 libcontainer 项目演化而来，runC 实际上就是 libcontainer 配上了一个轻型的客户端，是一个命令行工具端，根据 OCI（开放容器组织）的标准来创建和运行容器，实现了容器启停、资源隔离等功能。</p>\n<p>一个例子，使用 runC 运行 busybox 容器:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># mkdir /container</span><br><span class=\"line\"># cd /container/</span><br><span class=\"line\"># mkdir rootfs</span><br><span class=\"line\"></span><br><span class=\"line\">准备容器镜像的文件系统,从 busybox 镜像中提取</span><br><span class=\"line\"># docker export $(docker create busybox) | tar -C rootfs -xvf -    </span><br><span class=\"line\"># ls rootfs/</span><br><span class=\"line\">bin  dev  etc  home  proc  root  sys  tmp  usr  var</span><br><span class=\"line\"></span><br><span class=\"line\">有了rootfs之后，我们还要按照 OCI 标准有一个配置文件 config.json 说明如何运行容器，</span><br><span class=\"line\">包括要运行的命令、权限、环境变量等等内容，runc 提供了一个命令可以自动帮我们生成</span><br><span class=\"line\"># docker-runc spec</span><br><span class=\"line\"># ls</span><br><span class=\"line\">config.json  rootfs</span><br><span class=\"line\"># docker-runc run simplebusybox    #启动容器</span><br><span class=\"line\">/ # ls</span><br><span class=\"line\">bin   dev   etc   home  proc  root  sys   tmp   usr   var</span><br><span class=\"line\">/ # hostname</span><br><span class=\"line\">runc</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>参考：<br><a href=\"https://groups.google.com/forum/#!topic/docker-dev/zaZFlvIx1_k\" target=\"_blank\" rel=\"noopener\">Use of containerd-shim in docker-architecture</a><br><a href=\"https://www.cnblogs.com/sparkdev/p/9129334.html\" target=\"_blank\" rel=\"noopener\">从 docker 到 runC</a><br><a href=\"http://cizixs.com/2017/11/05/oci-and-runc/\" target=\"_blank\" rel=\"noopener\">OCI 和 runc：容器标准化和 docker</a><br><a href=\"https://github.com/opencontainers\" target=\"_blank\" rel=\"noopener\">Open Container Initiative</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、Docker-开源之路\"><a href=\"#一、Docker-开源之路\" class=\"headerlink\" title=\"一、Docker 开源之路\"></a>一、Docker 开源之路</h2><p>2015 年 6 月 ，docker 公司将 libcontainer 捐出并改名为 runC 项目，交由一个完全中立的基金会管理，然后以 runC 为依据，大家共同制定一套容器和镜像的标准和规范 OCI。</p>\n<p>2016 年 4 月，docker 1.11 版本之后开始引入了 containerd 和 runC，Docker 开始依赖于 containerd 和 runC 来管理容器，containerd 也可以操作满足 OCI 标准规范的其他容器工具，之后只要是按照 OCI 标准规范开发的容器工具，都可以被 containerd 使用起来。</p>\n<p>从 2017 年开始，Docker 公司先是将 Docker项目的容器运行时部分 Containerd 捐赠给CNCF 社区，紧接着，Docker 公司宣布将 Docker 项目改名为 Moby。</p>\n<h2 id=\"二、Docker-架构\"><a href=\"#二、Docker-架构\" class=\"headerlink\" title=\"二、Docker 架构\"></a>二、Docker 架构</h2><p><img src=\"http://cdn.tianfeiyu.com/docker-1.png\" alt=\"docker 架构\"></p>\n<p><img src=\"http://cdn.tianfeiyu.com/docker-2.png\" alt=\"docker 进程关系\"></p>\n<h3 id=\"三、核心概念\"><a href=\"#三、核心概念\" class=\"headerlink\" title=\"三、核心概念\"></a>三、核心概念</h3><p>docker 1.13 版本中包含以下几个二进制文件。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker --version</span><br><span class=\"line\">Docker version 1.13.1, build 092cba3</span><br><span class=\"line\"></span><br><span class=\"line\">$ docker</span><br><span class=\"line\">docker             docker-containerd-ctr   dockerd      docker-proxy</span><br><span class=\"line\">docker-containerd  docker-containerd-shim  docker-init  docker-runc</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"1、docker\"><a href=\"#1、docker\" class=\"headerlink\" title=\"1、docker\"></a>1、docker</h4><p>docker 的命令行工具，是给用户和 docker daemon 建立通信的客户端。</p>\n<h4 id=\"2、dockerd\"><a href=\"#2、dockerd\" class=\"headerlink\" title=\"2、dockerd\"></a>2、dockerd</h4><p>dockerd 是 docker 架构中一个常驻在后台的系统进程，称为 docker daemon，dockerd 实际调用的还是 containerd 的 api 接口（rpc 方式实现）,docker daemon 的作用主要有以下两方面：</p>\n<ul>\n<li>接收并处理 docker client 发送的请求</li>\n<li>管理所有的 docker 容器</li>\n</ul>\n<p>有了 containerd 之后，dockerd 可以独立升级，以此避免之前 dockerd 升级会导致所有容器不可用的问题。</p>\n<h4 id=\"3、containerd\"><a href=\"#3、containerd\" class=\"headerlink\" title=\"3、containerd\"></a>3、containerd</h4><p>containerd 是 dockerd 和 runc 之间的一个中间交流组件，docker 对容器的管理和操作基本都是通过 containerd 完成的。containerd 的主要功能有：</p>\n<ul>\n<li>容器生命周期管理</li>\n<li>日志管理</li>\n<li>镜像管理</li>\n<li>存储管理</li>\n<li>容器网络接口及网络管理</li>\n</ul>\n<h4 id=\"4、containerd-shim\"><a href=\"#4、containerd-shim\" class=\"headerlink\" title=\"4、containerd-shim\"></a>4、containerd-shim</h4><p>containerd-shim 是一个真实运行容器的载体，每启动一个容器都会起一个新的containerd-shim的一个进程， 它直接通过指定的三个参数：容器id，boundle目录（containerd 对应某个容器生成的目录，一般位于：/var/run/docker/libcontainerd/containerID，其中包括了容器配置和标准输入、标准输出、标准错误三个管道文件），运行时二进制（默认为runC）来调用 runc 的 api 创建一个容器，上面的 docker 进程图中可以直观的显示。其主要作用是：</p>\n<ul>\n<li>它允许容器运行时(即 runC)在启动容器之后退出，简单说就是不必为每个容器一直运行一个容器运行时(runC)</li>\n<li>即使在 containerd 和 dockerd 都挂掉的情况下，容器的标准 IO 和其它的文件描述符也都是可用的</li>\n<li>向 containerd 报告容器的退出状态</li>\n</ul>\n<p>有了它就可以在不中断容器运行的情况下升级或重启 dockerd，对于生产环境来说意义重大。</p>\n<h4 id=\"5、runC\"><a href=\"#5、runC\" class=\"headerlink\" title=\"5、runC\"></a>5、runC</h4><p>runC 是 Docker 公司按照 OCI 标准规范编写的一个操作容器的命令行工具，其前身是 libcontainer 项目演化而来，runC 实际上就是 libcontainer 配上了一个轻型的客户端，是一个命令行工具端，根据 OCI（开放容器组织）的标准来创建和运行容器，实现了容器启停、资源隔离等功能。</p>\n<p>一个例子，使用 runC 运行 busybox 容器:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># mkdir /container</span><br><span class=\"line\"># cd /container/</span><br><span class=\"line\"># mkdir rootfs</span><br><span class=\"line\"></span><br><span class=\"line\">准备容器镜像的文件系统,从 busybox 镜像中提取</span><br><span class=\"line\"># docker export $(docker create busybox) | tar -C rootfs -xvf -    </span><br><span class=\"line\"># ls rootfs/</span><br><span class=\"line\">bin  dev  etc  home  proc  root  sys  tmp  usr  var</span><br><span class=\"line\"></span><br><span class=\"line\">有了rootfs之后，我们还要按照 OCI 标准有一个配置文件 config.json 说明如何运行容器，</span><br><span class=\"line\">包括要运行的命令、权限、环境变量等等内容，runc 提供了一个命令可以自动帮我们生成</span><br><span class=\"line\"># docker-runc spec</span><br><span class=\"line\"># ls</span><br><span class=\"line\">config.json  rootfs</span><br><span class=\"line\"># docker-runc run simplebusybox    #启动容器</span><br><span class=\"line\">/ # ls</span><br><span class=\"line\">bin   dev   etc   home  proc  root  sys   tmp   usr   var</span><br><span class=\"line\">/ # hostname</span><br><span class=\"line\">runc</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>参考：<br><a href=\"https://groups.google.com/forum/#!topic/docker-dev/zaZFlvIx1_k\" target=\"_blank\" rel=\"noopener\">Use of containerd-shim in docker-architecture</a><br><a href=\"https://www.cnblogs.com/sparkdev/p/9129334.html\" target=\"_blank\" rel=\"noopener\">从 docker 到 runC</a><br><a href=\"http://cizixs.com/2017/11/05/oci-and-runc/\" target=\"_blank\" rel=\"noopener\">OCI 和 runc：容器标准化和 docker</a><br><a href=\"https://github.com/opencontainers\" target=\"_blank\" rel=\"noopener\">Open Container Initiative</a></p>\n"},{"title":"etcd 备份与恢复","date":"2017-03-02T10:04:00.000Z","type":"etcd","_content":"\n**[etcd](https://github.com/coreos/etcd)** 是一款开源的分布式一致性键值存储,由 CoreOS 公司进行维护，详细的介绍请参考官方文档。\n\netcd 目前最新的版本的 v3.1.1，但它的 API 又有 v3 和 v2 之分，社区通常所说的 v3 与 v2 都是指 API 的版本号。从 etcd 2.3 版本开始推出了一个实验性的全新 v3 版本 API 的实现，v2 与 v3 API 使用了不同的存储引擎，所以客户端命令也完全不同。\n\n    # etcdctl --version\n    etcdctl version: 3.0.4\n    API version: 2\n\n\n官方指出 etcd v2 和 v3 的数据不能混合存放，[support backup of v2 and v3 stores](https://github.com/coreos/etcd/issues/7002) 。\n\n\n**特别提醒：若使用 v3 备份数据时存在 v2 的数据则不影响恢复\n若使用 v2 备份数据时存在 v3 的数据则恢复失败**\n\n### 对于 API 2 备份与恢复方法   \n[官方 v2 admin guide](https://github.com/coreos/etcd/blob/master/Documentation/v2/admin_guide.md#disaster-recovery)\n\n\netcd的数据默认会存放在我们的命令工作目录中，我们发现数据所在的目录，会被分为两个文件夹中：\n* snap: 存放快照数据,etcd防止WAL文件过多而设置的快照，存储etcd数据状态。\n\n* wal: 存放预写式日志,最大的作用是记录了整个数据变化的全部历程。在etcd中，所有数据的修改在提交前，都要先写入到WAL中。\n\n\n    # etcdctl backup --data-dir /home/etcd/ --backup-dir /home/etcd_backup\n\n    # etcd -data-dir=/home/etcd_backup/  -force-new-cluster\n\n\n恢复时会覆盖 snapshot 的元数据(member ID 和 cluster ID)，所以需要启动一个新的集群。\n\n### 对于 API 3 备份与恢复方法  \n[官方 v3 admin guide](https://github.com/coreos/etcd/blob/master/Documentation/op-guide/recovery.md)\n\n在使用 API 3 时需要使用环境变量 ETCDCTL_API 明确指定。\n\n在命令行设置：\n\n\t# export ETCDCTL_API=3\n\t\n备份数据：\n\n\t# etcdctl --endpoints localhost:2379 snapshot save snapshot.db\n\n恢复：\n\n\t# etcdctl snapshot restore snapshot.db --name m3 --data-dir=/home/etcd_data\n\n> 恢复后的文件需要修改权限为 etcd:etcd\n> --name:重新指定一个数据目录，可以不指定，默认为 default.etcd\n> --data-dir：指定数据目录\n> 建议使用时不指定 name 但指定 data-dir，并将 data-dir 对应于 etcd 服务中配置的 data-dir\n\netcd 集群都是至少 3 台机器，官方也说明了集群容错为 (N-1)/2，所以备份数据一般都是用不到，但是鉴上次 gitlab 出现的问题，对于备份数据也要非常重视。 \n\n[官方文档翻译](https://skyao.gitbooks.io/leaning-etcd3/content/documentation/op-guide/recovery.html)\n","source":"_posts/etcd-backup.md","raw":"---\ntitle: etcd 备份与恢复\ndate: 2017-03-02 18:04:00\ntype: \"etcd\"\n\n---\n\n**[etcd](https://github.com/coreos/etcd)** 是一款开源的分布式一致性键值存储,由 CoreOS 公司进行维护，详细的介绍请参考官方文档。\n\netcd 目前最新的版本的 v3.1.1，但它的 API 又有 v3 和 v2 之分，社区通常所说的 v3 与 v2 都是指 API 的版本号。从 etcd 2.3 版本开始推出了一个实验性的全新 v3 版本 API 的实现，v2 与 v3 API 使用了不同的存储引擎，所以客户端命令也完全不同。\n\n    # etcdctl --version\n    etcdctl version: 3.0.4\n    API version: 2\n\n\n官方指出 etcd v2 和 v3 的数据不能混合存放，[support backup of v2 and v3 stores](https://github.com/coreos/etcd/issues/7002) 。\n\n\n**特别提醒：若使用 v3 备份数据时存在 v2 的数据则不影响恢复\n若使用 v2 备份数据时存在 v3 的数据则恢复失败**\n\n### 对于 API 2 备份与恢复方法   \n[官方 v2 admin guide](https://github.com/coreos/etcd/blob/master/Documentation/v2/admin_guide.md#disaster-recovery)\n\n\netcd的数据默认会存放在我们的命令工作目录中，我们发现数据所在的目录，会被分为两个文件夹中：\n* snap: 存放快照数据,etcd防止WAL文件过多而设置的快照，存储etcd数据状态。\n\n* wal: 存放预写式日志,最大的作用是记录了整个数据变化的全部历程。在etcd中，所有数据的修改在提交前，都要先写入到WAL中。\n\n\n    # etcdctl backup --data-dir /home/etcd/ --backup-dir /home/etcd_backup\n\n    # etcd -data-dir=/home/etcd_backup/  -force-new-cluster\n\n\n恢复时会覆盖 snapshot 的元数据(member ID 和 cluster ID)，所以需要启动一个新的集群。\n\n### 对于 API 3 备份与恢复方法  \n[官方 v3 admin guide](https://github.com/coreos/etcd/blob/master/Documentation/op-guide/recovery.md)\n\n在使用 API 3 时需要使用环境变量 ETCDCTL_API 明确指定。\n\n在命令行设置：\n\n\t# export ETCDCTL_API=3\n\t\n备份数据：\n\n\t# etcdctl --endpoints localhost:2379 snapshot save snapshot.db\n\n恢复：\n\n\t# etcdctl snapshot restore snapshot.db --name m3 --data-dir=/home/etcd_data\n\n> 恢复后的文件需要修改权限为 etcd:etcd\n> --name:重新指定一个数据目录，可以不指定，默认为 default.etcd\n> --data-dir：指定数据目录\n> 建议使用时不指定 name 但指定 data-dir，并将 data-dir 对应于 etcd 服务中配置的 data-dir\n\netcd 集群都是至少 3 台机器，官方也说明了集群容错为 (N-1)/2，所以备份数据一般都是用不到，但是鉴上次 gitlab 出现的问题，对于备份数据也要非常重视。 \n\n[官方文档翻译](https://skyao.gitbooks.io/leaning-etcd3/content/documentation/op-guide/recovery.html)\n","slug":"etcd-backup","published":1,"updated":"2019-06-01T14:26:16.307Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjycnhjlr00055vwnwlf6199v","content":"<p><strong><a href=\"https://github.com/coreos/etcd\" target=\"_blank\" rel=\"noopener\">etcd</a></strong> 是一款开源的分布式一致性键值存储,由 CoreOS 公司进行维护，详细的介绍请参考官方文档。</p>\n<p>etcd 目前最新的版本的 v3.1.1，但它的 API 又有 v3 和 v2 之分，社区通常所说的 v3 与 v2 都是指 API 的版本号。从 etcd 2.3 版本开始推出了一个实验性的全新 v3 版本 API 的实现，v2 与 v3 API 使用了不同的存储引擎，所以客户端命令也完全不同。</p>\n<pre><code># etcdctl --version\netcdctl version: 3.0.4\nAPI version: 2\n</code></pre><p>官方指出 etcd v2 和 v3 的数据不能混合存放，<a href=\"https://github.com/coreos/etcd/issues/7002\" target=\"_blank\" rel=\"noopener\">support backup of v2 and v3 stores</a> 。</p>\n<p><strong>特别提醒：若使用 v3 备份数据时存在 v2 的数据则不影响恢复<br>若使用 v2 备份数据时存在 v3 的数据则恢复失败</strong></p>\n<h3 id=\"对于-API-2-备份与恢复方法\"><a href=\"#对于-API-2-备份与恢复方法\" class=\"headerlink\" title=\"对于 API 2 备份与恢复方法\"></a>对于 API 2 备份与恢复方法</h3><p><a href=\"https://github.com/coreos/etcd/blob/master/Documentation/v2/admin_guide.md#disaster-recovery\" target=\"_blank\" rel=\"noopener\">官方 v2 admin guide</a></p>\n<p>etcd的数据默认会存放在我们的命令工作目录中，我们发现数据所在的目录，会被分为两个文件夹中：</p>\n<ul>\n<li><p>snap: 存放快照数据,etcd防止WAL文件过多而设置的快照，存储etcd数据状态。</p>\n</li>\n<li><p>wal: 存放预写式日志,最大的作用是记录了整个数据变化的全部历程。在etcd中，所有数据的修改在提交前，都要先写入到WAL中。</p>\n</li>\n</ul>\n<pre><code># etcdctl backup --data-dir /home/etcd/ --backup-dir /home/etcd_backup\n\n# etcd -data-dir=/home/etcd_backup/  -force-new-cluster\n</code></pre><p>恢复时会覆盖 snapshot 的元数据(member ID 和 cluster ID)，所以需要启动一个新的集群。</p>\n<h3 id=\"对于-API-3-备份与恢复方法\"><a href=\"#对于-API-3-备份与恢复方法\" class=\"headerlink\" title=\"对于 API 3 备份与恢复方法\"></a>对于 API 3 备份与恢复方法</h3><p><a href=\"https://github.com/coreos/etcd/blob/master/Documentation/op-guide/recovery.md\" target=\"_blank\" rel=\"noopener\">官方 v3 admin guide</a></p>\n<p>在使用 API 3 时需要使用环境变量 ETCDCTL_API 明确指定。</p>\n<p>在命令行设置：</p>\n<pre><code># export ETCDCTL_API=3\n</code></pre><p>备份数据：</p>\n<pre><code># etcdctl --endpoints localhost:2379 snapshot save snapshot.db\n</code></pre><p>恢复：</p>\n<pre><code># etcdctl snapshot restore snapshot.db --name m3 --data-dir=/home/etcd_data\n</code></pre><blockquote>\n<p>恢复后的文件需要修改权限为 etcd:etcd<br>–name:重新指定一个数据目录，可以不指定，默认为 default.etcd<br>–data-dir：指定数据目录<br>建议使用时不指定 name 但指定 data-dir，并将 data-dir 对应于 etcd 服务中配置的 data-dir</p>\n</blockquote>\n<p>etcd 集群都是至少 3 台机器，官方也说明了集群容错为 (N-1)/2，所以备份数据一般都是用不到，但是鉴上次 gitlab 出现的问题，对于备份数据也要非常重视。 </p>\n<p><a href=\"https://skyao.gitbooks.io/leaning-etcd3/content/documentation/op-guide/recovery.html\" target=\"_blank\" rel=\"noopener\">官方文档翻译</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong><a href=\"https://github.com/coreos/etcd\" target=\"_blank\" rel=\"noopener\">etcd</a></strong> 是一款开源的分布式一致性键值存储,由 CoreOS 公司进行维护，详细的介绍请参考官方文档。</p>\n<p>etcd 目前最新的版本的 v3.1.1，但它的 API 又有 v3 和 v2 之分，社区通常所说的 v3 与 v2 都是指 API 的版本号。从 etcd 2.3 版本开始推出了一个实验性的全新 v3 版本 API 的实现，v2 与 v3 API 使用了不同的存储引擎，所以客户端命令也完全不同。</p>\n<pre><code># etcdctl --version\netcdctl version: 3.0.4\nAPI version: 2\n</code></pre><p>官方指出 etcd v2 和 v3 的数据不能混合存放，<a href=\"https://github.com/coreos/etcd/issues/7002\" target=\"_blank\" rel=\"noopener\">support backup of v2 and v3 stores</a> 。</p>\n<p><strong>特别提醒：若使用 v3 备份数据时存在 v2 的数据则不影响恢复<br>若使用 v2 备份数据时存在 v3 的数据则恢复失败</strong></p>\n<h3 id=\"对于-API-2-备份与恢复方法\"><a href=\"#对于-API-2-备份与恢复方法\" class=\"headerlink\" title=\"对于 API 2 备份与恢复方法\"></a>对于 API 2 备份与恢复方法</h3><p><a href=\"https://github.com/coreos/etcd/blob/master/Documentation/v2/admin_guide.md#disaster-recovery\" target=\"_blank\" rel=\"noopener\">官方 v2 admin guide</a></p>\n<p>etcd的数据默认会存放在我们的命令工作目录中，我们发现数据所在的目录，会被分为两个文件夹中：</p>\n<ul>\n<li><p>snap: 存放快照数据,etcd防止WAL文件过多而设置的快照，存储etcd数据状态。</p>\n</li>\n<li><p>wal: 存放预写式日志,最大的作用是记录了整个数据变化的全部历程。在etcd中，所有数据的修改在提交前，都要先写入到WAL中。</p>\n</li>\n</ul>\n<pre><code># etcdctl backup --data-dir /home/etcd/ --backup-dir /home/etcd_backup\n\n# etcd -data-dir=/home/etcd_backup/  -force-new-cluster\n</code></pre><p>恢复时会覆盖 snapshot 的元数据(member ID 和 cluster ID)，所以需要启动一个新的集群。</p>\n<h3 id=\"对于-API-3-备份与恢复方法\"><a href=\"#对于-API-3-备份与恢复方法\" class=\"headerlink\" title=\"对于 API 3 备份与恢复方法\"></a>对于 API 3 备份与恢复方法</h3><p><a href=\"https://github.com/coreos/etcd/blob/master/Documentation/op-guide/recovery.md\" target=\"_blank\" rel=\"noopener\">官方 v3 admin guide</a></p>\n<p>在使用 API 3 时需要使用环境变量 ETCDCTL_API 明确指定。</p>\n<p>在命令行设置：</p>\n<pre><code># export ETCDCTL_API=3\n</code></pre><p>备份数据：</p>\n<pre><code># etcdctl --endpoints localhost:2379 snapshot save snapshot.db\n</code></pre><p>恢复：</p>\n<pre><code># etcdctl snapshot restore snapshot.db --name m3 --data-dir=/home/etcd_data\n</code></pre><blockquote>\n<p>恢复后的文件需要修改权限为 etcd:etcd<br>–name:重新指定一个数据目录，可以不指定，默认为 default.etcd<br>–data-dir：指定数据目录<br>建议使用时不指定 name 但指定 data-dir，并将 data-dir 对应于 etcd 服务中配置的 data-dir</p>\n</blockquote>\n<p>etcd 集群都是至少 3 台机器，官方也说明了集群容错为 (N-1)/2，所以备份数据一般都是用不到，但是鉴上次 gitlab 出现的问题，对于备份数据也要非常重视。 </p>\n<p><a href=\"https://skyao.gitbooks.io/leaning-etcd3/content/documentation/op-guide/recovery.html\" target=\"_blank\" rel=\"noopener\">官方文档翻译</a></p>\n"},{"title":"etcd 启用 https","date":"2017-03-15T13:32:00.000Z","type":"etcd","_content":"* 1， 生成 TLS 秘钥对\n* 2，拷贝密钥对到所有节点\n* 3，配置 etcd 使用证书\n* 4，测试 etcd 是否正常\n* 5，配置 kube-apiserver 使用 CA 连接 etcd\n* 6，测试 kube-apiserver\n* 7，未解决的问题\n\nSSL/TSL 认证分单向认证和双向认证两种方式。简单说就是单向认证只是客户端对服务端的身份进行验证，双向认证是客户端和服务端互相进行身份认证。就比如，我们登录淘宝买东西，为了防止我们登录的是假淘宝网站，此时我们通过浏览器打开淘宝买东西时，浏览器会验证我们登录的网站是否是真的淘宝的网站，而淘宝网站不关心我们是否“合法”，这就是单向认证。而双向认证是服务端也需要对客户端做出认证。\n\n因为大部分 kubernetes 基于内网部署，而内网应该都会采用私有 IP 地址通讯，权威 CA 好像只能签署域名证书，对于签署到 IP 可能无法实现。所以我们需要预先自建 CA 签发证书。\n\n[Generate self-signed certificates 官方参考文档](https://coreos.com/os/docs/latest/generate-self-signed-certificates.html)\n\n官方推荐使用 cfssl 来自建 CA 签发证书，当然你也可以用众人熟知的 OpenSSL 或者 [easy-rsa](https://github.com/OpenVPN/easy-rsa)。以下步骤遵循官方文档：\n\n## 1， 生成 TLS 秘钥对\n\n生成步骤：\n\n* 1，下载 cfssl\n* 2，初始化证书颁发机构\n* 3，配置 CA 选项\n* 4，生成服务器端证书\n* 5，生成对等证书\n* 6，生成客户端证书\n\n想深入了解 HTTPS 的看这里：\n\n* [聊聊HTTPS和SSL/TLS协议](http://www.techug.com/post/https-ssl-tls.html)\n* [数字证书CA及扫盲](http://blog.jobbole.com/104919/)\n* [互联网加密及OpenSSL介绍和简单使用](https://mritd.me/2016/07/02/%E4%BA%92%E8%81%94%E7%BD%91%E5%8A%A0%E5%AF%86%E5%8F%8AOpenSSL%E4%BB%8B%E7%BB%8D%E5%92%8C%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8)\n* [SSL双向认证和单向认证的区别](http://www.cnblogs.com/Michael-Kong/archive/2012/08/16/SSL%E8%AF%81%E4%B9%A6%E5%8E%9F%E7%90%86.html)\n\n##### 1，下载 cfssl\n\n    mkdir ~/bin\n    curl -s -L -o ~/bin/cfssl https://pkg.cfssl.org/R1.2/cfssl_linux-amd64\n    curl -s -L -o ~/bin/cfssljson https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64\n    chmod +x ~/bin/{cfssl,cfssljson}\n    export PATH=$PATH:~/bin\n\n##### 2，初始化证书颁发机构\n\n```\nmkdir ~/cfssl\ncd ~/cfssl\ncfssl print-defaults config > ca-config.json\ncfssl print-defaults csr > ca-csr.json\n```\n\n证书类型介绍：\n\n* client certificate  用于通过服务器验证客户端。例如etcdctl，etcd proxy，fleetctl或docker客户端。\n* server certificate 由服务器使用，并由客户端验证服务器身份。例如docker服务器或kube-apiserver。\n* peer certificate 由 etcd 集群成员使用，供它们彼此之间通信使用。\n\n##### 3，配置 CA 选项\n\n```\n$ cat << EOF > ca-config.json\n\n{\n    \"signing\": {\n        \"default\": {\n            \"expiry\": \"43800h\"\n        },\n        \"profiles\": {\n            \"server\": {\n                \"expiry\": \"43800h\",\n                \"usages\": [\n                    \"signing\",\n                    \"key encipherment\",\n                    \"server auth\"\n                ]\n            },\n            \"client\": {\n                \"expiry\": \"43800h\",\n                \"usages\": [\n                    \"signing\",\n                    \"key encipherment\",\n                    \"client auth\"\n                ]\n            },\n            \"peer\": {\n                \"expiry\": \"43800h\",\n                \"usages\": [\n                    \"signing\",\n                    \"key encipherment\",\n                    \"server auth\",\n                    \"client auth\"\n                ]\n            }\n        }\n    }\n}\n\n$ cat << EOF > ca-csr.json\n\n{\n    \"CN\": \"My own CA\",\n    \"key\": {\n        \"algo\": \"rsa\",\n        \"size\": 2048\n    },\n    \"names\": [\n        {\n            \"C\": \"US\",\n            \"L\": \"CA\",\n            \"O\": \"My Company Name\",\n            \"ST\": \"San Francisco\",\n            \"OU\": \"Org Unit 1\",\n            \"OU\": \"Org Unit 2\"\n        }\n    ]\n}\n\n生成 CA 证书：\n\n$ cfssl gencert -initca ca-csr.json | cfssljson -bare ca -\n\n将会生成以下几个文件：\n\nca-key.pem\nca.csr\nca.pem\n\n```\n> 请务必保证 ca-key.pem 文件的安全，*.csr 文件在整个过程中不会使用。\n\n##### 4，生成服务器端证书\n```\n$ echo '{\"CN\":\"coreos1\",\"hosts\":[\"10.93.81.17\",\"127.0.0.1\"],\"key\":{\"algo\":\"rsa\",\"size\":2048}}' | cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=server -hostname=\"10.93.81.17,127.0.0.1,server\" - | cfssljson -bare server\n\nhosts 字段需要自定义。\n\n然后将得到以下几个文件：\nserver-key.pem\nserver.csr\nserver.pem\n```\n\n##### 5，生成对等证书\n```\n$ echo '{\"CN\":\"member1\",\"hosts\":[\"10.93.81.17\",\"127.0.0.1\"],\"key\":{\"algo\":\"rsa\",\"size\":2048}}' | cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=peer -hostname=\"10.93.81.17,127.0.0.1,server,member1\" - | cfssljson -bare member1\n\nhosts 字段需要自定义。\n\n然后将得到以下几个文件：\n\nmember1-key.pem\nmember1.csr\nmember1.pem\n\n如果有多个 etcd 成员，重复此步为每个成员生成对等证书。\n\n```\n\n##### 6，生成客户端证书\n\n```\n$ echo '{\"CN\":\"client\",\"hosts\":[\"10.93.81.17\",\"127.0.0.1\"],\"key\":{\"algo\":\"rsa\",\"size\":2048}}' | cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=client - | cfssljson -bare client\n\nhosts 字段需要自定义。\n\n然后将得到以下几个文件：\n\nclient-key.pem\nclient.csr\nclient.pem\n\n```\n至此，所有证书都已生成完毕。\n\n\n## 2，拷贝密钥对到所有节点\n* 1，拷贝密钥对到所有节点\n* 2，更新系统证书库\n\n##### 1，拷贝密钥对到所有节点\n\n\n```\n$ mkdir -pv /etc/ssl/etcd/\n$ cp ~/cfssl/* /etc/ssl/etcd/\n$ chown -R etcd:etcd /etc/ssl/etcd\n$ chmod 600 /etc/ssl/etcd/*-key.pem\n$ cp ~/cfssl/ca.pem /etc/ssl/certs/\n```\n\n##### 2，更新系统证书库\n\n```\n$ yum install ca-certificates -y\n     \n$ update-ca-trust\n        \n```\n\n## 3，配置 etcd 使用证书\n\n```\n$ etcdctl version\netcdctl version: 3.1.3\nAPI version: 3.1\n\n$ cat  /etc/etcd/etcd.conf\n\nETCD_DATA_DIR=\"/var/lib/etcd/default.etcd\"\n#监听URL，用于与其他节点通讯\nETCD_LISTEN_PEER_URLS=\"https://10.93.81.17:2380\"\n\n#告知客户端的URL, 也就是服务的URL\nETCD_LISTEN_CLIENT_URLS=\"https://10.93.81.17:2379,https://10.93.81.17:4001\"\n\n#表示监听其他节点同步信号的地址\nETCD_INITIAL_ADVERTISE_PEER_URLS=\"https://10.93.81.17:2380\"\n\n#–advertise-client-urls 告知客户端的URL, 也就是服务的URL，tcp2379端口用于监听客户端请求\nETCD_ADVERTISE_CLIENT_URLS=\"https://10.93.81.17:2379\"\n\n#启动参数配置\nETCD_NAME=\"node1\"\nETCD_INITIAL_CLUSTER=\"node1=https://10.93.81.17:2380\"\nETCD_INITIAL_CLUSTER_STATE=\"new\"\n\n#[security]\n\nETCD_CERT_FILE=\"/etc/ssl/etcd/server.pem\"\nETCD_KEY_FILE=\"/etc/ssl/etcd/server-key.pem\"\nETCD_TRUSTED_CA_FILE=\"/etc/ssl/etcd/ca.pem\"\nETCD_CLIENT_CERT_AUTH=\"true\"\nETCD_PEER_CERT_FILE=\"/etc/ssl/etcd/member1.pem\"\nETCD_PEER_KEY_FILE=\"/etc/ssl/etcd/member1-key.pem\"\nETCD_PEER_TRUSTED_CA_FILE=\"/etc/ssl/etcd/ca.pem\"\nETCD_PEER_CLIENT_CERT_AUTH=\"true\"\n#[logging]\nETCD_DEBUG=\"true\"\nETCD_LOG_PACKAGE_LEVELS=\"etcdserver=WARNING,security=DEBUG\"\n```\n\n\n## 4，测试 etcd 是否正常\n\n```\n$ systemctl restart  etcd\n\n如果报错，使用 journalctl -f -t etcd 和 journalctl -u etcd 来定位问题。\n\n$ curl --cacert /etc/ssl/etcd/ca.pem --cert /etc/ssl/etcd/client.pem --key /etc/ssl/etcd/client-key.pem https://10.93.81.17:2379/health\n{\"health\": \"true\"}\n\n$ etcdctl --endpoints=[10.93.81.17:2379] --cacert=/etc/ssl/etcd/ca.pem --cert=/etc/ssl/etcd/client.pem --key=/etc/ssl/etcd/client-key.pem member list\n     \n$ etcdctl --endpoints=[10.93.81.17:2379] --cacert=/etc/ssl/etcd/ca.pem --cert=/etc/ssl/etcd/client.pem --key=/etc/ssl/etcd/client-key.pem put /foo/bar  \"hello world\"\n     \n$ etcdctl --endpoints=[10.93.81.17:2379] --cacert=/etc/ssl/etcd/ca.pem --cert=/etc/ssl/etcd/client.pem --key=/etc/ssl/etcd/client-key.pem get /foo/bar\n```\n\n## 5，配置 kube-apiserver 使用 CA 连接 etcd\n\n```\n$ cp /etc/ssl/etcd/*  /var/run/kubernetes/\n    \n$ chown  -R kube.kube /var/run/kubernetes/\n\n在 /etc/kubernetes/apiserver 中 KUBE_API_ARGS 新加一下几个参数：\n\n--cert-dir='/var/run/kubernetes/' --etcd-cafile='/var/run/kubernetes/ca.pem' --etcd-certfile='/var/run/kubernetes/client.pem' --etcd-keyfile='/var/run/kubernetes/client-key.pem'\n\n\n```\n\n## 6，测试 kube-apiserver \n\n```\n$ systemctl restart kube-apiserver kube-controller-manager kube-scheduler kubelet kube-proxy\n\n$ systemctl status -l kube-apiserver kube-controller-manager kube-scheduler kubelet kube-proxy\n\n$ kubectl get node\n\n$ kubectl get cs\nNAME                 STATUS      MESSAGE                                                                   ERROR\nscheduler            Healthy     ok\ncontroller-manager   Healthy     ok\netcd-0               Unhealthy   Get https://10.93.81.17:2379/health: remote error: tls: bad certificate\n\n$ ./version.sh\netcdctl version: 3.1.3\nAPI version: 3.1\nKubernetes v1.6.0-beta.1\n\n```\n\n## 7，未解决的问题\n\n##### 1，使用  `kubectl get cs ` 查看会出现如上面所示的报错： \n```\netcd-0 Unhealthy Get https://10.93.81.17:2379/health: remote error: tls: bad certificate\n```\n此问题有人提交 pr 但尚未被 merge，[etcd component status check should include credentials](https://github.com/kubernetes/kubernetes/pull/39716)\n\n##### 2，使用以下命令查看到的 2380 端口是未加密的\n```\n$ etcdctl --endpoints=[10.93.81.17:2379] --cacert=/etc/ssl/etcd/ca.pem --cert=/etc/ssl/etcd/client.pem --key=/etc/ssl/etcd/client-key.pem member list  \n\n2017-03-15 15:02:05.611564 I | warning: ignoring ServerName for user-provided CA for backwards compatibility is deprecated\n145b401ad8709f51, started, node1, http://10.93.81.17:2380, https://10.93.81.17:2379\n```\n\n参考文档：\n\n* [kubernetes + etcd ssl 支持](https://www.addops.cn/post/tls-for-kubernetes-etcd.html)\n* [Security model](https://coreos.com/etcd/docs/latest/op-guide/security.html)\n* [Enabling HTTPS in an existing etcd cluster](https://coreos.com/etcd/docs/latest/etcd-live-http-to-https-migration.html)\n","source":"_posts/etcd-enable-https.md","raw":"---\ntitle: etcd 启用 https\ndate: 2017-03-15 21:32:00\ntype: \"etcd\"\n\n---\n* 1， 生成 TLS 秘钥对\n* 2，拷贝密钥对到所有节点\n* 3，配置 etcd 使用证书\n* 4，测试 etcd 是否正常\n* 5，配置 kube-apiserver 使用 CA 连接 etcd\n* 6，测试 kube-apiserver\n* 7，未解决的问题\n\nSSL/TSL 认证分单向认证和双向认证两种方式。简单说就是单向认证只是客户端对服务端的身份进行验证，双向认证是客户端和服务端互相进行身份认证。就比如，我们登录淘宝买东西，为了防止我们登录的是假淘宝网站，此时我们通过浏览器打开淘宝买东西时，浏览器会验证我们登录的网站是否是真的淘宝的网站，而淘宝网站不关心我们是否“合法”，这就是单向认证。而双向认证是服务端也需要对客户端做出认证。\n\n因为大部分 kubernetes 基于内网部署，而内网应该都会采用私有 IP 地址通讯，权威 CA 好像只能签署域名证书，对于签署到 IP 可能无法实现。所以我们需要预先自建 CA 签发证书。\n\n[Generate self-signed certificates 官方参考文档](https://coreos.com/os/docs/latest/generate-self-signed-certificates.html)\n\n官方推荐使用 cfssl 来自建 CA 签发证书，当然你也可以用众人熟知的 OpenSSL 或者 [easy-rsa](https://github.com/OpenVPN/easy-rsa)。以下步骤遵循官方文档：\n\n## 1， 生成 TLS 秘钥对\n\n生成步骤：\n\n* 1，下载 cfssl\n* 2，初始化证书颁发机构\n* 3，配置 CA 选项\n* 4，生成服务器端证书\n* 5，生成对等证书\n* 6，生成客户端证书\n\n想深入了解 HTTPS 的看这里：\n\n* [聊聊HTTPS和SSL/TLS协议](http://www.techug.com/post/https-ssl-tls.html)\n* [数字证书CA及扫盲](http://blog.jobbole.com/104919/)\n* [互联网加密及OpenSSL介绍和简单使用](https://mritd.me/2016/07/02/%E4%BA%92%E8%81%94%E7%BD%91%E5%8A%A0%E5%AF%86%E5%8F%8AOpenSSL%E4%BB%8B%E7%BB%8D%E5%92%8C%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8)\n* [SSL双向认证和单向认证的区别](http://www.cnblogs.com/Michael-Kong/archive/2012/08/16/SSL%E8%AF%81%E4%B9%A6%E5%8E%9F%E7%90%86.html)\n\n##### 1，下载 cfssl\n\n    mkdir ~/bin\n    curl -s -L -o ~/bin/cfssl https://pkg.cfssl.org/R1.2/cfssl_linux-amd64\n    curl -s -L -o ~/bin/cfssljson https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64\n    chmod +x ~/bin/{cfssl,cfssljson}\n    export PATH=$PATH:~/bin\n\n##### 2，初始化证书颁发机构\n\n```\nmkdir ~/cfssl\ncd ~/cfssl\ncfssl print-defaults config > ca-config.json\ncfssl print-defaults csr > ca-csr.json\n```\n\n证书类型介绍：\n\n* client certificate  用于通过服务器验证客户端。例如etcdctl，etcd proxy，fleetctl或docker客户端。\n* server certificate 由服务器使用，并由客户端验证服务器身份。例如docker服务器或kube-apiserver。\n* peer certificate 由 etcd 集群成员使用，供它们彼此之间通信使用。\n\n##### 3，配置 CA 选项\n\n```\n$ cat << EOF > ca-config.json\n\n{\n    \"signing\": {\n        \"default\": {\n            \"expiry\": \"43800h\"\n        },\n        \"profiles\": {\n            \"server\": {\n                \"expiry\": \"43800h\",\n                \"usages\": [\n                    \"signing\",\n                    \"key encipherment\",\n                    \"server auth\"\n                ]\n            },\n            \"client\": {\n                \"expiry\": \"43800h\",\n                \"usages\": [\n                    \"signing\",\n                    \"key encipherment\",\n                    \"client auth\"\n                ]\n            },\n            \"peer\": {\n                \"expiry\": \"43800h\",\n                \"usages\": [\n                    \"signing\",\n                    \"key encipherment\",\n                    \"server auth\",\n                    \"client auth\"\n                ]\n            }\n        }\n    }\n}\n\n$ cat << EOF > ca-csr.json\n\n{\n    \"CN\": \"My own CA\",\n    \"key\": {\n        \"algo\": \"rsa\",\n        \"size\": 2048\n    },\n    \"names\": [\n        {\n            \"C\": \"US\",\n            \"L\": \"CA\",\n            \"O\": \"My Company Name\",\n            \"ST\": \"San Francisco\",\n            \"OU\": \"Org Unit 1\",\n            \"OU\": \"Org Unit 2\"\n        }\n    ]\n}\n\n生成 CA 证书：\n\n$ cfssl gencert -initca ca-csr.json | cfssljson -bare ca -\n\n将会生成以下几个文件：\n\nca-key.pem\nca.csr\nca.pem\n\n```\n> 请务必保证 ca-key.pem 文件的安全，*.csr 文件在整个过程中不会使用。\n\n##### 4，生成服务器端证书\n```\n$ echo '{\"CN\":\"coreos1\",\"hosts\":[\"10.93.81.17\",\"127.0.0.1\"],\"key\":{\"algo\":\"rsa\",\"size\":2048}}' | cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=server -hostname=\"10.93.81.17,127.0.0.1,server\" - | cfssljson -bare server\n\nhosts 字段需要自定义。\n\n然后将得到以下几个文件：\nserver-key.pem\nserver.csr\nserver.pem\n```\n\n##### 5，生成对等证书\n```\n$ echo '{\"CN\":\"member1\",\"hosts\":[\"10.93.81.17\",\"127.0.0.1\"],\"key\":{\"algo\":\"rsa\",\"size\":2048}}' | cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=peer -hostname=\"10.93.81.17,127.0.0.1,server,member1\" - | cfssljson -bare member1\n\nhosts 字段需要自定义。\n\n然后将得到以下几个文件：\n\nmember1-key.pem\nmember1.csr\nmember1.pem\n\n如果有多个 etcd 成员，重复此步为每个成员生成对等证书。\n\n```\n\n##### 6，生成客户端证书\n\n```\n$ echo '{\"CN\":\"client\",\"hosts\":[\"10.93.81.17\",\"127.0.0.1\"],\"key\":{\"algo\":\"rsa\",\"size\":2048}}' | cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=client - | cfssljson -bare client\n\nhosts 字段需要自定义。\n\n然后将得到以下几个文件：\n\nclient-key.pem\nclient.csr\nclient.pem\n\n```\n至此，所有证书都已生成完毕。\n\n\n## 2，拷贝密钥对到所有节点\n* 1，拷贝密钥对到所有节点\n* 2，更新系统证书库\n\n##### 1，拷贝密钥对到所有节点\n\n\n```\n$ mkdir -pv /etc/ssl/etcd/\n$ cp ~/cfssl/* /etc/ssl/etcd/\n$ chown -R etcd:etcd /etc/ssl/etcd\n$ chmod 600 /etc/ssl/etcd/*-key.pem\n$ cp ~/cfssl/ca.pem /etc/ssl/certs/\n```\n\n##### 2，更新系统证书库\n\n```\n$ yum install ca-certificates -y\n     \n$ update-ca-trust\n        \n```\n\n## 3，配置 etcd 使用证书\n\n```\n$ etcdctl version\netcdctl version: 3.1.3\nAPI version: 3.1\n\n$ cat  /etc/etcd/etcd.conf\n\nETCD_DATA_DIR=\"/var/lib/etcd/default.etcd\"\n#监听URL，用于与其他节点通讯\nETCD_LISTEN_PEER_URLS=\"https://10.93.81.17:2380\"\n\n#告知客户端的URL, 也就是服务的URL\nETCD_LISTEN_CLIENT_URLS=\"https://10.93.81.17:2379,https://10.93.81.17:4001\"\n\n#表示监听其他节点同步信号的地址\nETCD_INITIAL_ADVERTISE_PEER_URLS=\"https://10.93.81.17:2380\"\n\n#–advertise-client-urls 告知客户端的URL, 也就是服务的URL，tcp2379端口用于监听客户端请求\nETCD_ADVERTISE_CLIENT_URLS=\"https://10.93.81.17:2379\"\n\n#启动参数配置\nETCD_NAME=\"node1\"\nETCD_INITIAL_CLUSTER=\"node1=https://10.93.81.17:2380\"\nETCD_INITIAL_CLUSTER_STATE=\"new\"\n\n#[security]\n\nETCD_CERT_FILE=\"/etc/ssl/etcd/server.pem\"\nETCD_KEY_FILE=\"/etc/ssl/etcd/server-key.pem\"\nETCD_TRUSTED_CA_FILE=\"/etc/ssl/etcd/ca.pem\"\nETCD_CLIENT_CERT_AUTH=\"true\"\nETCD_PEER_CERT_FILE=\"/etc/ssl/etcd/member1.pem\"\nETCD_PEER_KEY_FILE=\"/etc/ssl/etcd/member1-key.pem\"\nETCD_PEER_TRUSTED_CA_FILE=\"/etc/ssl/etcd/ca.pem\"\nETCD_PEER_CLIENT_CERT_AUTH=\"true\"\n#[logging]\nETCD_DEBUG=\"true\"\nETCD_LOG_PACKAGE_LEVELS=\"etcdserver=WARNING,security=DEBUG\"\n```\n\n\n## 4，测试 etcd 是否正常\n\n```\n$ systemctl restart  etcd\n\n如果报错，使用 journalctl -f -t etcd 和 journalctl -u etcd 来定位问题。\n\n$ curl --cacert /etc/ssl/etcd/ca.pem --cert /etc/ssl/etcd/client.pem --key /etc/ssl/etcd/client-key.pem https://10.93.81.17:2379/health\n{\"health\": \"true\"}\n\n$ etcdctl --endpoints=[10.93.81.17:2379] --cacert=/etc/ssl/etcd/ca.pem --cert=/etc/ssl/etcd/client.pem --key=/etc/ssl/etcd/client-key.pem member list\n     \n$ etcdctl --endpoints=[10.93.81.17:2379] --cacert=/etc/ssl/etcd/ca.pem --cert=/etc/ssl/etcd/client.pem --key=/etc/ssl/etcd/client-key.pem put /foo/bar  \"hello world\"\n     \n$ etcdctl --endpoints=[10.93.81.17:2379] --cacert=/etc/ssl/etcd/ca.pem --cert=/etc/ssl/etcd/client.pem --key=/etc/ssl/etcd/client-key.pem get /foo/bar\n```\n\n## 5，配置 kube-apiserver 使用 CA 连接 etcd\n\n```\n$ cp /etc/ssl/etcd/*  /var/run/kubernetes/\n    \n$ chown  -R kube.kube /var/run/kubernetes/\n\n在 /etc/kubernetes/apiserver 中 KUBE_API_ARGS 新加一下几个参数：\n\n--cert-dir='/var/run/kubernetes/' --etcd-cafile='/var/run/kubernetes/ca.pem' --etcd-certfile='/var/run/kubernetes/client.pem' --etcd-keyfile='/var/run/kubernetes/client-key.pem'\n\n\n```\n\n## 6，测试 kube-apiserver \n\n```\n$ systemctl restart kube-apiserver kube-controller-manager kube-scheduler kubelet kube-proxy\n\n$ systemctl status -l kube-apiserver kube-controller-manager kube-scheduler kubelet kube-proxy\n\n$ kubectl get node\n\n$ kubectl get cs\nNAME                 STATUS      MESSAGE                                                                   ERROR\nscheduler            Healthy     ok\ncontroller-manager   Healthy     ok\netcd-0               Unhealthy   Get https://10.93.81.17:2379/health: remote error: tls: bad certificate\n\n$ ./version.sh\netcdctl version: 3.1.3\nAPI version: 3.1\nKubernetes v1.6.0-beta.1\n\n```\n\n## 7，未解决的问题\n\n##### 1，使用  `kubectl get cs ` 查看会出现如上面所示的报错： \n```\netcd-0 Unhealthy Get https://10.93.81.17:2379/health: remote error: tls: bad certificate\n```\n此问题有人提交 pr 但尚未被 merge，[etcd component status check should include credentials](https://github.com/kubernetes/kubernetes/pull/39716)\n\n##### 2，使用以下命令查看到的 2380 端口是未加密的\n```\n$ etcdctl --endpoints=[10.93.81.17:2379] --cacert=/etc/ssl/etcd/ca.pem --cert=/etc/ssl/etcd/client.pem --key=/etc/ssl/etcd/client-key.pem member list  \n\n2017-03-15 15:02:05.611564 I | warning: ignoring ServerName for user-provided CA for backwards compatibility is deprecated\n145b401ad8709f51, started, node1, http://10.93.81.17:2380, https://10.93.81.17:2379\n```\n\n参考文档：\n\n* [kubernetes + etcd ssl 支持](https://www.addops.cn/post/tls-for-kubernetes-etcd.html)\n* [Security model](https://coreos.com/etcd/docs/latest/op-guide/security.html)\n* [Enabling HTTPS in an existing etcd cluster](https://coreos.com/etcd/docs/latest/etcd-live-http-to-https-migration.html)\n","slug":"etcd-enable-https","published":1,"updated":"2019-06-01T14:26:16.307Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjycnhjlt00075vwnvi3jwow0","content":"<ul>\n<li>1， 生成 TLS 秘钥对</li>\n<li>2，拷贝密钥对到所有节点</li>\n<li>3，配置 etcd 使用证书</li>\n<li>4，测试 etcd 是否正常</li>\n<li>5，配置 kube-apiserver 使用 CA 连接 etcd</li>\n<li>6，测试 kube-apiserver</li>\n<li>7，未解决的问题</li>\n</ul>\n<p>SSL/TSL 认证分单向认证和双向认证两种方式。简单说就是单向认证只是客户端对服务端的身份进行验证，双向认证是客户端和服务端互相进行身份认证。就比如，我们登录淘宝买东西，为了防止我们登录的是假淘宝网站，此时我们通过浏览器打开淘宝买东西时，浏览器会验证我们登录的网站是否是真的淘宝的网站，而淘宝网站不关心我们是否“合法”，这就是单向认证。而双向认证是服务端也需要对客户端做出认证。</p>\n<p>因为大部分 kubernetes 基于内网部署，而内网应该都会采用私有 IP 地址通讯，权威 CA 好像只能签署域名证书，对于签署到 IP 可能无法实现。所以我们需要预先自建 CA 签发证书。</p>\n<p><a href=\"https://coreos.com/os/docs/latest/generate-self-signed-certificates.html\" target=\"_blank\" rel=\"noopener\">Generate self-signed certificates 官方参考文档</a></p>\n<p>官方推荐使用 cfssl 来自建 CA 签发证书，当然你也可以用众人熟知的 OpenSSL 或者 <a href=\"https://github.com/OpenVPN/easy-rsa\" target=\"_blank\" rel=\"noopener\">easy-rsa</a>。以下步骤遵循官方文档：</p>\n<h2 id=\"1，-生成-TLS-秘钥对\"><a href=\"#1，-生成-TLS-秘钥对\" class=\"headerlink\" title=\"1， 生成 TLS 秘钥对\"></a>1， 生成 TLS 秘钥对</h2><p>生成步骤：</p>\n<ul>\n<li>1，下载 cfssl</li>\n<li>2，初始化证书颁发机构</li>\n<li>3，配置 CA 选项</li>\n<li>4，生成服务器端证书</li>\n<li>5，生成对等证书</li>\n<li>6，生成客户端证书</li>\n</ul>\n<p>想深入了解 HTTPS 的看这里：</p>\n<ul>\n<li><a href=\"http://www.techug.com/post/https-ssl-tls.html\" target=\"_blank\" rel=\"noopener\">聊聊HTTPS和SSL/TLS协议</a></li>\n<li><a href=\"http://blog.jobbole.com/104919/\" target=\"_blank\" rel=\"noopener\">数字证书CA及扫盲</a></li>\n<li><a href=\"https://mritd.me/2016/07/02/%E4%BA%92%E8%81%94%E7%BD%91%E5%8A%A0%E5%AF%86%E5%8F%8AOpenSSL%E4%BB%8B%E7%BB%8D%E5%92%8C%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8\" target=\"_blank\" rel=\"noopener\">互联网加密及OpenSSL介绍和简单使用</a></li>\n<li><a href=\"http://www.cnblogs.com/Michael-Kong/archive/2012/08/16/SSL%E8%AF%81%E4%B9%A6%E5%8E%9F%E7%90%86.html\" target=\"_blank\" rel=\"noopener\">SSL双向认证和单向认证的区别</a></li>\n</ul>\n<h5 id=\"1，下载-cfssl\"><a href=\"#1，下载-cfssl\" class=\"headerlink\" title=\"1，下载 cfssl\"></a>1，下载 cfssl</h5><pre><code>mkdir ~/bin\ncurl -s -L -o ~/bin/cfssl https://pkg.cfssl.org/R1.2/cfssl_linux-amd64\ncurl -s -L -o ~/bin/cfssljson https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64\nchmod +x ~/bin/{cfssl,cfssljson}\nexport PATH=$PATH:~/bin\n</code></pre><h5 id=\"2，初始化证书颁发机构\"><a href=\"#2，初始化证书颁发机构\" class=\"headerlink\" title=\"2，初始化证书颁发机构\"></a>2，初始化证书颁发机构</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir ~/cfssl</span><br><span class=\"line\">cd ~/cfssl</span><br><span class=\"line\">cfssl print-defaults config &gt; ca-config.json</span><br><span class=\"line\">cfssl print-defaults csr &gt; ca-csr.json</span><br></pre></td></tr></table></figure>\n<p>证书类型介绍：</p>\n<ul>\n<li>client certificate  用于通过服务器验证客户端。例如etcdctl，etcd proxy，fleetctl或docker客户端。</li>\n<li>server certificate 由服务器使用，并由客户端验证服务器身份。例如docker服务器或kube-apiserver。</li>\n<li>peer certificate 由 etcd 集群成员使用，供它们彼此之间通信使用。</li>\n</ul>\n<h5 id=\"3，配置-CA-选项\"><a href=\"#3，配置-CA-选项\" class=\"headerlink\" title=\"3，配置 CA 选项\"></a>3，配置 CA 选项</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat &lt;&lt; EOF &gt; ca-config.json</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;signing&quot;: &#123;</span><br><span class=\"line\">        &quot;default&quot;: &#123;</span><br><span class=\"line\">            &quot;expiry&quot;: &quot;43800h&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;profiles&quot;: &#123;</span><br><span class=\"line\">            &quot;server&quot;: &#123;</span><br><span class=\"line\">                &quot;expiry&quot;: &quot;43800h&quot;,</span><br><span class=\"line\">                &quot;usages&quot;: [</span><br><span class=\"line\">                    &quot;signing&quot;,</span><br><span class=\"line\">                    &quot;key encipherment&quot;,</span><br><span class=\"line\">                    &quot;server auth&quot;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &quot;client&quot;: &#123;</span><br><span class=\"line\">                &quot;expiry&quot;: &quot;43800h&quot;,</span><br><span class=\"line\">                &quot;usages&quot;: [</span><br><span class=\"line\">                    &quot;signing&quot;,</span><br><span class=\"line\">                    &quot;key encipherment&quot;,</span><br><span class=\"line\">                    &quot;client auth&quot;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &quot;peer&quot;: &#123;</span><br><span class=\"line\">                &quot;expiry&quot;: &quot;43800h&quot;,</span><br><span class=\"line\">                &quot;usages&quot;: [</span><br><span class=\"line\">                    &quot;signing&quot;,</span><br><span class=\"line\">                    &quot;key encipherment&quot;,</span><br><span class=\"line\">                    &quot;server auth&quot;,</span><br><span class=\"line\">                    &quot;client auth&quot;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$ cat &lt;&lt; EOF &gt; ca-csr.json</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;CN&quot;: &quot;My own CA&quot;,</span><br><span class=\"line\">    &quot;key&quot;: &#123;</span><br><span class=\"line\">        &quot;algo&quot;: &quot;rsa&quot;,</span><br><span class=\"line\">        &quot;size&quot;: 2048</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;names&quot;: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;C&quot;: &quot;US&quot;,</span><br><span class=\"line\">            &quot;L&quot;: &quot;CA&quot;,</span><br><span class=\"line\">            &quot;O&quot;: &quot;My Company Name&quot;,</span><br><span class=\"line\">            &quot;ST&quot;: &quot;San Francisco&quot;,</span><br><span class=\"line\">            &quot;OU&quot;: &quot;Org Unit 1&quot;,</span><br><span class=\"line\">            &quot;OU&quot;: &quot;Org Unit 2&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">生成 CA 证书：</span><br><span class=\"line\"></span><br><span class=\"line\">$ cfssl gencert -initca ca-csr.json | cfssljson -bare ca -</span><br><span class=\"line\"></span><br><span class=\"line\">将会生成以下几个文件：</span><br><span class=\"line\"></span><br><span class=\"line\">ca-key.pem</span><br><span class=\"line\">ca.csr</span><br><span class=\"line\">ca.pem</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>请务必保证 ca-key.pem 文件的安全，*.csr 文件在整个过程中不会使用。</p>\n</blockquote>\n<h5 id=\"4，生成服务器端证书\"><a href=\"#4，生成服务器端证书\" class=\"headerlink\" title=\"4，生成服务器端证书\"></a>4，生成服务器端证书</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ echo &apos;&#123;&quot;CN&quot;:&quot;coreos1&quot;,&quot;hosts&quot;:[&quot;10.93.81.17&quot;,&quot;127.0.0.1&quot;],&quot;key&quot;:&#123;&quot;algo&quot;:&quot;rsa&quot;,&quot;size&quot;:2048&#125;&#125;&apos; | cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=server -hostname=&quot;10.93.81.17,127.0.0.1,server&quot; - | cfssljson -bare server</span><br><span class=\"line\"></span><br><span class=\"line\">hosts 字段需要自定义。</span><br><span class=\"line\"></span><br><span class=\"line\">然后将得到以下几个文件：</span><br><span class=\"line\">server-key.pem</span><br><span class=\"line\">server.csr</span><br><span class=\"line\">server.pem</span><br></pre></td></tr></table></figure>\n<h5 id=\"5，生成对等证书\"><a href=\"#5，生成对等证书\" class=\"headerlink\" title=\"5，生成对等证书\"></a>5，生成对等证书</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ echo &apos;&#123;&quot;CN&quot;:&quot;member1&quot;,&quot;hosts&quot;:[&quot;10.93.81.17&quot;,&quot;127.0.0.1&quot;],&quot;key&quot;:&#123;&quot;algo&quot;:&quot;rsa&quot;,&quot;size&quot;:2048&#125;&#125;&apos; | cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=peer -hostname=&quot;10.93.81.17,127.0.0.1,server,member1&quot; - | cfssljson -bare member1</span><br><span class=\"line\"></span><br><span class=\"line\">hosts 字段需要自定义。</span><br><span class=\"line\"></span><br><span class=\"line\">然后将得到以下几个文件：</span><br><span class=\"line\"></span><br><span class=\"line\">member1-key.pem</span><br><span class=\"line\">member1.csr</span><br><span class=\"line\">member1.pem</span><br><span class=\"line\"></span><br><span class=\"line\">如果有多个 etcd 成员，重复此步为每个成员生成对等证书。</span><br></pre></td></tr></table></figure>\n<h5 id=\"6，生成客户端证书\"><a href=\"#6，生成客户端证书\" class=\"headerlink\" title=\"6，生成客户端证书\"></a>6，生成客户端证书</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ echo &apos;&#123;&quot;CN&quot;:&quot;client&quot;,&quot;hosts&quot;:[&quot;10.93.81.17&quot;,&quot;127.0.0.1&quot;],&quot;key&quot;:&#123;&quot;algo&quot;:&quot;rsa&quot;,&quot;size&quot;:2048&#125;&#125;&apos; | cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=client - | cfssljson -bare client</span><br><span class=\"line\"></span><br><span class=\"line\">hosts 字段需要自定义。</span><br><span class=\"line\"></span><br><span class=\"line\">然后将得到以下几个文件：</span><br><span class=\"line\"></span><br><span class=\"line\">client-key.pem</span><br><span class=\"line\">client.csr</span><br><span class=\"line\">client.pem</span><br></pre></td></tr></table></figure>\n<p>至此，所有证书都已生成完毕。</p>\n<h2 id=\"2，拷贝密钥对到所有节点\"><a href=\"#2，拷贝密钥对到所有节点\" class=\"headerlink\" title=\"2，拷贝密钥对到所有节点\"></a>2，拷贝密钥对到所有节点</h2><ul>\n<li>1，拷贝密钥对到所有节点</li>\n<li>2，更新系统证书库</li>\n</ul>\n<h5 id=\"1，拷贝密钥对到所有节点\"><a href=\"#1，拷贝密钥对到所有节点\" class=\"headerlink\" title=\"1，拷贝密钥对到所有节点\"></a>1，拷贝密钥对到所有节点</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir -pv /etc/ssl/etcd/</span><br><span class=\"line\">$ cp ~/cfssl/* /etc/ssl/etcd/</span><br><span class=\"line\">$ chown -R etcd:etcd /etc/ssl/etcd</span><br><span class=\"line\">$ chmod 600 /etc/ssl/etcd/*-key.pem</span><br><span class=\"line\">$ cp ~/cfssl/ca.pem /etc/ssl/certs/</span><br></pre></td></tr></table></figure>\n<h5 id=\"2，更新系统证书库\"><a href=\"#2，更新系统证书库\" class=\"headerlink\" title=\"2，更新系统证书库\"></a>2，更新系统证书库</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install ca-certificates -y</span><br><span class=\"line\">     </span><br><span class=\"line\">$ update-ca-trust</span><br></pre></td></tr></table></figure>\n<h2 id=\"3，配置-etcd-使用证书\"><a href=\"#3，配置-etcd-使用证书\" class=\"headerlink\" title=\"3，配置 etcd 使用证书\"></a>3，配置 etcd 使用证书</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ etcdctl version</span><br><span class=\"line\">etcdctl version: 3.1.3</span><br><span class=\"line\">API version: 3.1</span><br><span class=\"line\"></span><br><span class=\"line\">$ cat  /etc/etcd/etcd.conf</span><br><span class=\"line\"></span><br><span class=\"line\">ETCD_DATA_DIR=&quot;/var/lib/etcd/default.etcd&quot;</span><br><span class=\"line\">#监听URL，用于与其他节点通讯</span><br><span class=\"line\">ETCD_LISTEN_PEER_URLS=&quot;https://10.93.81.17:2380&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#告知客户端的URL, 也就是服务的URL</span><br><span class=\"line\">ETCD_LISTEN_CLIENT_URLS=&quot;https://10.93.81.17:2379,https://10.93.81.17:4001&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#表示监听其他节点同步信号的地址</span><br><span class=\"line\">ETCD_INITIAL_ADVERTISE_PEER_URLS=&quot;https://10.93.81.17:2380&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#–advertise-client-urls 告知客户端的URL, 也就是服务的URL，tcp2379端口用于监听客户端请求</span><br><span class=\"line\">ETCD_ADVERTISE_CLIENT_URLS=&quot;https://10.93.81.17:2379&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#启动参数配置</span><br><span class=\"line\">ETCD_NAME=&quot;node1&quot;</span><br><span class=\"line\">ETCD_INITIAL_CLUSTER=&quot;node1=https://10.93.81.17:2380&quot;</span><br><span class=\"line\">ETCD_INITIAL_CLUSTER_STATE=&quot;new&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#[security]</span><br><span class=\"line\"></span><br><span class=\"line\">ETCD_CERT_FILE=&quot;/etc/ssl/etcd/server.pem&quot;</span><br><span class=\"line\">ETCD_KEY_FILE=&quot;/etc/ssl/etcd/server-key.pem&quot;</span><br><span class=\"line\">ETCD_TRUSTED_CA_FILE=&quot;/etc/ssl/etcd/ca.pem&quot;</span><br><span class=\"line\">ETCD_CLIENT_CERT_AUTH=&quot;true&quot;</span><br><span class=\"line\">ETCD_PEER_CERT_FILE=&quot;/etc/ssl/etcd/member1.pem&quot;</span><br><span class=\"line\">ETCD_PEER_KEY_FILE=&quot;/etc/ssl/etcd/member1-key.pem&quot;</span><br><span class=\"line\">ETCD_PEER_TRUSTED_CA_FILE=&quot;/etc/ssl/etcd/ca.pem&quot;</span><br><span class=\"line\">ETCD_PEER_CLIENT_CERT_AUTH=&quot;true&quot;</span><br><span class=\"line\">#[logging]</span><br><span class=\"line\">ETCD_DEBUG=&quot;true&quot;</span><br><span class=\"line\">ETCD_LOG_PACKAGE_LEVELS=&quot;etcdserver=WARNING,security=DEBUG&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4，测试-etcd-是否正常\"><a href=\"#4，测试-etcd-是否正常\" class=\"headerlink\" title=\"4，测试 etcd 是否正常\"></a>4，测试 etcd 是否正常</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl restart  etcd</span><br><span class=\"line\"></span><br><span class=\"line\">如果报错，使用 journalctl -f -t etcd 和 journalctl -u etcd 来定位问题。</span><br><span class=\"line\"></span><br><span class=\"line\">$ curl --cacert /etc/ssl/etcd/ca.pem --cert /etc/ssl/etcd/client.pem --key /etc/ssl/etcd/client-key.pem https://10.93.81.17:2379/health</span><br><span class=\"line\">&#123;&quot;health&quot;: &quot;true&quot;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$ etcdctl --endpoints=[10.93.81.17:2379] --cacert=/etc/ssl/etcd/ca.pem --cert=/etc/ssl/etcd/client.pem --key=/etc/ssl/etcd/client-key.pem member list</span><br><span class=\"line\">     </span><br><span class=\"line\">$ etcdctl --endpoints=[10.93.81.17:2379] --cacert=/etc/ssl/etcd/ca.pem --cert=/etc/ssl/etcd/client.pem --key=/etc/ssl/etcd/client-key.pem put /foo/bar  &quot;hello world&quot;</span><br><span class=\"line\">     </span><br><span class=\"line\">$ etcdctl --endpoints=[10.93.81.17:2379] --cacert=/etc/ssl/etcd/ca.pem --cert=/etc/ssl/etcd/client.pem --key=/etc/ssl/etcd/client-key.pem get /foo/bar</span><br></pre></td></tr></table></figure>\n<h2 id=\"5，配置-kube-apiserver-使用-CA-连接-etcd\"><a href=\"#5，配置-kube-apiserver-使用-CA-连接-etcd\" class=\"headerlink\" title=\"5，配置 kube-apiserver 使用 CA 连接 etcd\"></a>5，配置 kube-apiserver 使用 CA 连接 etcd</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cp /etc/ssl/etcd/*  /var/run/kubernetes/</span><br><span class=\"line\">    </span><br><span class=\"line\">$ chown  -R kube.kube /var/run/kubernetes/</span><br><span class=\"line\"></span><br><span class=\"line\">在 /etc/kubernetes/apiserver 中 KUBE_API_ARGS 新加一下几个参数：</span><br><span class=\"line\"></span><br><span class=\"line\">--cert-dir=&apos;/var/run/kubernetes/&apos; --etcd-cafile=&apos;/var/run/kubernetes/ca.pem&apos; --etcd-certfile=&apos;/var/run/kubernetes/client.pem&apos; --etcd-keyfile=&apos;/var/run/kubernetes/client-key.pem&apos;</span><br></pre></td></tr></table></figure>\n<h2 id=\"6，测试-kube-apiserver\"><a href=\"#6，测试-kube-apiserver\" class=\"headerlink\" title=\"6，测试 kube-apiserver\"></a>6，测试 kube-apiserver</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl restart kube-apiserver kube-controller-manager kube-scheduler kubelet kube-proxy</span><br><span class=\"line\"></span><br><span class=\"line\">$ systemctl status -l kube-apiserver kube-controller-manager kube-scheduler kubelet kube-proxy</span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl get node</span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl get cs</span><br><span class=\"line\">NAME                 STATUS      MESSAGE                                                                   ERROR</span><br><span class=\"line\">scheduler            Healthy     ok</span><br><span class=\"line\">controller-manager   Healthy     ok</span><br><span class=\"line\">etcd-0               Unhealthy   Get https://10.93.81.17:2379/health: remote error: tls: bad certificate</span><br><span class=\"line\"></span><br><span class=\"line\">$ ./version.sh</span><br><span class=\"line\">etcdctl version: 3.1.3</span><br><span class=\"line\">API version: 3.1</span><br><span class=\"line\">Kubernetes v1.6.0-beta.1</span><br></pre></td></tr></table></figure>\n<h2 id=\"7，未解决的问题\"><a href=\"#7，未解决的问题\" class=\"headerlink\" title=\"7，未解决的问题\"></a>7，未解决的问题</h2><h5 id=\"1，使用-kubectl-get-cs-查看会出现如上面所示的报错：\"><a href=\"#1，使用-kubectl-get-cs-查看会出现如上面所示的报错：\" class=\"headerlink\" title=\"1，使用  kubectl get cs 查看会出现如上面所示的报错：\"></a>1，使用  <code>kubectl get cs</code> 查看会出现如上面所示的报错：</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">etcd-0 Unhealthy Get https://10.93.81.17:2379/health: remote error: tls: bad certificate</span><br></pre></td></tr></table></figure>\n<p>此问题有人提交 pr 但尚未被 merge，<a href=\"https://github.com/kubernetes/kubernetes/pull/39716\" target=\"_blank\" rel=\"noopener\">etcd component status check should include credentials</a></p>\n<h5 id=\"2，使用以下命令查看到的-2380-端口是未加密的\"><a href=\"#2，使用以下命令查看到的-2380-端口是未加密的\" class=\"headerlink\" title=\"2，使用以下命令查看到的 2380 端口是未加密的\"></a>2，使用以下命令查看到的 2380 端口是未加密的</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ etcdctl --endpoints=[10.93.81.17:2379] --cacert=/etc/ssl/etcd/ca.pem --cert=/etc/ssl/etcd/client.pem --key=/etc/ssl/etcd/client-key.pem member list  </span><br><span class=\"line\"></span><br><span class=\"line\">2017-03-15 15:02:05.611564 I | warning: ignoring ServerName for user-provided CA for backwards compatibility is deprecated</span><br><span class=\"line\">145b401ad8709f51, started, node1, http://10.93.81.17:2380, https://10.93.81.17:2379</span><br></pre></td></tr></table></figure>\n<p>参考文档：</p>\n<ul>\n<li><a href=\"https://www.addops.cn/post/tls-for-kubernetes-etcd.html\" target=\"_blank\" rel=\"noopener\">kubernetes + etcd ssl 支持</a></li>\n<li><a href=\"https://coreos.com/etcd/docs/latest/op-guide/security.html\" target=\"_blank\" rel=\"noopener\">Security model</a></li>\n<li><a href=\"https://coreos.com/etcd/docs/latest/etcd-live-http-to-https-migration.html\" target=\"_blank\" rel=\"noopener\">Enabling HTTPS in an existing etcd cluster</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>1， 生成 TLS 秘钥对</li>\n<li>2，拷贝密钥对到所有节点</li>\n<li>3，配置 etcd 使用证书</li>\n<li>4，测试 etcd 是否正常</li>\n<li>5，配置 kube-apiserver 使用 CA 连接 etcd</li>\n<li>6，测试 kube-apiserver</li>\n<li>7，未解决的问题</li>\n</ul>\n<p>SSL/TSL 认证分单向认证和双向认证两种方式。简单说就是单向认证只是客户端对服务端的身份进行验证，双向认证是客户端和服务端互相进行身份认证。就比如，我们登录淘宝买东西，为了防止我们登录的是假淘宝网站，此时我们通过浏览器打开淘宝买东西时，浏览器会验证我们登录的网站是否是真的淘宝的网站，而淘宝网站不关心我们是否“合法”，这就是单向认证。而双向认证是服务端也需要对客户端做出认证。</p>\n<p>因为大部分 kubernetes 基于内网部署，而内网应该都会采用私有 IP 地址通讯，权威 CA 好像只能签署域名证书，对于签署到 IP 可能无法实现。所以我们需要预先自建 CA 签发证书。</p>\n<p><a href=\"https://coreos.com/os/docs/latest/generate-self-signed-certificates.html\" target=\"_blank\" rel=\"noopener\">Generate self-signed certificates 官方参考文档</a></p>\n<p>官方推荐使用 cfssl 来自建 CA 签发证书，当然你也可以用众人熟知的 OpenSSL 或者 <a href=\"https://github.com/OpenVPN/easy-rsa\" target=\"_blank\" rel=\"noopener\">easy-rsa</a>。以下步骤遵循官方文档：</p>\n<h2 id=\"1，-生成-TLS-秘钥对\"><a href=\"#1，-生成-TLS-秘钥对\" class=\"headerlink\" title=\"1， 生成 TLS 秘钥对\"></a>1， 生成 TLS 秘钥对</h2><p>生成步骤：</p>\n<ul>\n<li>1，下载 cfssl</li>\n<li>2，初始化证书颁发机构</li>\n<li>3，配置 CA 选项</li>\n<li>4，生成服务器端证书</li>\n<li>5，生成对等证书</li>\n<li>6，生成客户端证书</li>\n</ul>\n<p>想深入了解 HTTPS 的看这里：</p>\n<ul>\n<li><a href=\"http://www.techug.com/post/https-ssl-tls.html\" target=\"_blank\" rel=\"noopener\">聊聊HTTPS和SSL/TLS协议</a></li>\n<li><a href=\"http://blog.jobbole.com/104919/\" target=\"_blank\" rel=\"noopener\">数字证书CA及扫盲</a></li>\n<li><a href=\"https://mritd.me/2016/07/02/%E4%BA%92%E8%81%94%E7%BD%91%E5%8A%A0%E5%AF%86%E5%8F%8AOpenSSL%E4%BB%8B%E7%BB%8D%E5%92%8C%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8\" target=\"_blank\" rel=\"noopener\">互联网加密及OpenSSL介绍和简单使用</a></li>\n<li><a href=\"http://www.cnblogs.com/Michael-Kong/archive/2012/08/16/SSL%E8%AF%81%E4%B9%A6%E5%8E%9F%E7%90%86.html\" target=\"_blank\" rel=\"noopener\">SSL双向认证和单向认证的区别</a></li>\n</ul>\n<h5 id=\"1，下载-cfssl\"><a href=\"#1，下载-cfssl\" class=\"headerlink\" title=\"1，下载 cfssl\"></a>1，下载 cfssl</h5><pre><code>mkdir ~/bin\ncurl -s -L -o ~/bin/cfssl https://pkg.cfssl.org/R1.2/cfssl_linux-amd64\ncurl -s -L -o ~/bin/cfssljson https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64\nchmod +x ~/bin/{cfssl,cfssljson}\nexport PATH=$PATH:~/bin\n</code></pre><h5 id=\"2，初始化证书颁发机构\"><a href=\"#2，初始化证书颁发机构\" class=\"headerlink\" title=\"2，初始化证书颁发机构\"></a>2，初始化证书颁发机构</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir ~/cfssl</span><br><span class=\"line\">cd ~/cfssl</span><br><span class=\"line\">cfssl print-defaults config &gt; ca-config.json</span><br><span class=\"line\">cfssl print-defaults csr &gt; ca-csr.json</span><br></pre></td></tr></table></figure>\n<p>证书类型介绍：</p>\n<ul>\n<li>client certificate  用于通过服务器验证客户端。例如etcdctl，etcd proxy，fleetctl或docker客户端。</li>\n<li>server certificate 由服务器使用，并由客户端验证服务器身份。例如docker服务器或kube-apiserver。</li>\n<li>peer certificate 由 etcd 集群成员使用，供它们彼此之间通信使用。</li>\n</ul>\n<h5 id=\"3，配置-CA-选项\"><a href=\"#3，配置-CA-选项\" class=\"headerlink\" title=\"3，配置 CA 选项\"></a>3，配置 CA 选项</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat &lt;&lt; EOF &gt; ca-config.json</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;signing&quot;: &#123;</span><br><span class=\"line\">        &quot;default&quot;: &#123;</span><br><span class=\"line\">            &quot;expiry&quot;: &quot;43800h&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;profiles&quot;: &#123;</span><br><span class=\"line\">            &quot;server&quot;: &#123;</span><br><span class=\"line\">                &quot;expiry&quot;: &quot;43800h&quot;,</span><br><span class=\"line\">                &quot;usages&quot;: [</span><br><span class=\"line\">                    &quot;signing&quot;,</span><br><span class=\"line\">                    &quot;key encipherment&quot;,</span><br><span class=\"line\">                    &quot;server auth&quot;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &quot;client&quot;: &#123;</span><br><span class=\"line\">                &quot;expiry&quot;: &quot;43800h&quot;,</span><br><span class=\"line\">                &quot;usages&quot;: [</span><br><span class=\"line\">                    &quot;signing&quot;,</span><br><span class=\"line\">                    &quot;key encipherment&quot;,</span><br><span class=\"line\">                    &quot;client auth&quot;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &quot;peer&quot;: &#123;</span><br><span class=\"line\">                &quot;expiry&quot;: &quot;43800h&quot;,</span><br><span class=\"line\">                &quot;usages&quot;: [</span><br><span class=\"line\">                    &quot;signing&quot;,</span><br><span class=\"line\">                    &quot;key encipherment&quot;,</span><br><span class=\"line\">                    &quot;server auth&quot;,</span><br><span class=\"line\">                    &quot;client auth&quot;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$ cat &lt;&lt; EOF &gt; ca-csr.json</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;CN&quot;: &quot;My own CA&quot;,</span><br><span class=\"line\">    &quot;key&quot;: &#123;</span><br><span class=\"line\">        &quot;algo&quot;: &quot;rsa&quot;,</span><br><span class=\"line\">        &quot;size&quot;: 2048</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;names&quot;: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;C&quot;: &quot;US&quot;,</span><br><span class=\"line\">            &quot;L&quot;: &quot;CA&quot;,</span><br><span class=\"line\">            &quot;O&quot;: &quot;My Company Name&quot;,</span><br><span class=\"line\">            &quot;ST&quot;: &quot;San Francisco&quot;,</span><br><span class=\"line\">            &quot;OU&quot;: &quot;Org Unit 1&quot;,</span><br><span class=\"line\">            &quot;OU&quot;: &quot;Org Unit 2&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">生成 CA 证书：</span><br><span class=\"line\"></span><br><span class=\"line\">$ cfssl gencert -initca ca-csr.json | cfssljson -bare ca -</span><br><span class=\"line\"></span><br><span class=\"line\">将会生成以下几个文件：</span><br><span class=\"line\"></span><br><span class=\"line\">ca-key.pem</span><br><span class=\"line\">ca.csr</span><br><span class=\"line\">ca.pem</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>请务必保证 ca-key.pem 文件的安全，*.csr 文件在整个过程中不会使用。</p>\n</blockquote>\n<h5 id=\"4，生成服务器端证书\"><a href=\"#4，生成服务器端证书\" class=\"headerlink\" title=\"4，生成服务器端证书\"></a>4，生成服务器端证书</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ echo &apos;&#123;&quot;CN&quot;:&quot;coreos1&quot;,&quot;hosts&quot;:[&quot;10.93.81.17&quot;,&quot;127.0.0.1&quot;],&quot;key&quot;:&#123;&quot;algo&quot;:&quot;rsa&quot;,&quot;size&quot;:2048&#125;&#125;&apos; | cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=server -hostname=&quot;10.93.81.17,127.0.0.1,server&quot; - | cfssljson -bare server</span><br><span class=\"line\"></span><br><span class=\"line\">hosts 字段需要自定义。</span><br><span class=\"line\"></span><br><span class=\"line\">然后将得到以下几个文件：</span><br><span class=\"line\">server-key.pem</span><br><span class=\"line\">server.csr</span><br><span class=\"line\">server.pem</span><br></pre></td></tr></table></figure>\n<h5 id=\"5，生成对等证书\"><a href=\"#5，生成对等证书\" class=\"headerlink\" title=\"5，生成对等证书\"></a>5，生成对等证书</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ echo &apos;&#123;&quot;CN&quot;:&quot;member1&quot;,&quot;hosts&quot;:[&quot;10.93.81.17&quot;,&quot;127.0.0.1&quot;],&quot;key&quot;:&#123;&quot;algo&quot;:&quot;rsa&quot;,&quot;size&quot;:2048&#125;&#125;&apos; | cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=peer -hostname=&quot;10.93.81.17,127.0.0.1,server,member1&quot; - | cfssljson -bare member1</span><br><span class=\"line\"></span><br><span class=\"line\">hosts 字段需要自定义。</span><br><span class=\"line\"></span><br><span class=\"line\">然后将得到以下几个文件：</span><br><span class=\"line\"></span><br><span class=\"line\">member1-key.pem</span><br><span class=\"line\">member1.csr</span><br><span class=\"line\">member1.pem</span><br><span class=\"line\"></span><br><span class=\"line\">如果有多个 etcd 成员，重复此步为每个成员生成对等证书。</span><br></pre></td></tr></table></figure>\n<h5 id=\"6，生成客户端证书\"><a href=\"#6，生成客户端证书\" class=\"headerlink\" title=\"6，生成客户端证书\"></a>6，生成客户端证书</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ echo &apos;&#123;&quot;CN&quot;:&quot;client&quot;,&quot;hosts&quot;:[&quot;10.93.81.17&quot;,&quot;127.0.0.1&quot;],&quot;key&quot;:&#123;&quot;algo&quot;:&quot;rsa&quot;,&quot;size&quot;:2048&#125;&#125;&apos; | cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=client - | cfssljson -bare client</span><br><span class=\"line\"></span><br><span class=\"line\">hosts 字段需要自定义。</span><br><span class=\"line\"></span><br><span class=\"line\">然后将得到以下几个文件：</span><br><span class=\"line\"></span><br><span class=\"line\">client-key.pem</span><br><span class=\"line\">client.csr</span><br><span class=\"line\">client.pem</span><br></pre></td></tr></table></figure>\n<p>至此，所有证书都已生成完毕。</p>\n<h2 id=\"2，拷贝密钥对到所有节点\"><a href=\"#2，拷贝密钥对到所有节点\" class=\"headerlink\" title=\"2，拷贝密钥对到所有节点\"></a>2，拷贝密钥对到所有节点</h2><ul>\n<li>1，拷贝密钥对到所有节点</li>\n<li>2，更新系统证书库</li>\n</ul>\n<h5 id=\"1，拷贝密钥对到所有节点\"><a href=\"#1，拷贝密钥对到所有节点\" class=\"headerlink\" title=\"1，拷贝密钥对到所有节点\"></a>1，拷贝密钥对到所有节点</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir -pv /etc/ssl/etcd/</span><br><span class=\"line\">$ cp ~/cfssl/* /etc/ssl/etcd/</span><br><span class=\"line\">$ chown -R etcd:etcd /etc/ssl/etcd</span><br><span class=\"line\">$ chmod 600 /etc/ssl/etcd/*-key.pem</span><br><span class=\"line\">$ cp ~/cfssl/ca.pem /etc/ssl/certs/</span><br></pre></td></tr></table></figure>\n<h5 id=\"2，更新系统证书库\"><a href=\"#2，更新系统证书库\" class=\"headerlink\" title=\"2，更新系统证书库\"></a>2，更新系统证书库</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install ca-certificates -y</span><br><span class=\"line\">     </span><br><span class=\"line\">$ update-ca-trust</span><br></pre></td></tr></table></figure>\n<h2 id=\"3，配置-etcd-使用证书\"><a href=\"#3，配置-etcd-使用证书\" class=\"headerlink\" title=\"3，配置 etcd 使用证书\"></a>3，配置 etcd 使用证书</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ etcdctl version</span><br><span class=\"line\">etcdctl version: 3.1.3</span><br><span class=\"line\">API version: 3.1</span><br><span class=\"line\"></span><br><span class=\"line\">$ cat  /etc/etcd/etcd.conf</span><br><span class=\"line\"></span><br><span class=\"line\">ETCD_DATA_DIR=&quot;/var/lib/etcd/default.etcd&quot;</span><br><span class=\"line\">#监听URL，用于与其他节点通讯</span><br><span class=\"line\">ETCD_LISTEN_PEER_URLS=&quot;https://10.93.81.17:2380&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#告知客户端的URL, 也就是服务的URL</span><br><span class=\"line\">ETCD_LISTEN_CLIENT_URLS=&quot;https://10.93.81.17:2379,https://10.93.81.17:4001&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#表示监听其他节点同步信号的地址</span><br><span class=\"line\">ETCD_INITIAL_ADVERTISE_PEER_URLS=&quot;https://10.93.81.17:2380&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#–advertise-client-urls 告知客户端的URL, 也就是服务的URL，tcp2379端口用于监听客户端请求</span><br><span class=\"line\">ETCD_ADVERTISE_CLIENT_URLS=&quot;https://10.93.81.17:2379&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#启动参数配置</span><br><span class=\"line\">ETCD_NAME=&quot;node1&quot;</span><br><span class=\"line\">ETCD_INITIAL_CLUSTER=&quot;node1=https://10.93.81.17:2380&quot;</span><br><span class=\"line\">ETCD_INITIAL_CLUSTER_STATE=&quot;new&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#[security]</span><br><span class=\"line\"></span><br><span class=\"line\">ETCD_CERT_FILE=&quot;/etc/ssl/etcd/server.pem&quot;</span><br><span class=\"line\">ETCD_KEY_FILE=&quot;/etc/ssl/etcd/server-key.pem&quot;</span><br><span class=\"line\">ETCD_TRUSTED_CA_FILE=&quot;/etc/ssl/etcd/ca.pem&quot;</span><br><span class=\"line\">ETCD_CLIENT_CERT_AUTH=&quot;true&quot;</span><br><span class=\"line\">ETCD_PEER_CERT_FILE=&quot;/etc/ssl/etcd/member1.pem&quot;</span><br><span class=\"line\">ETCD_PEER_KEY_FILE=&quot;/etc/ssl/etcd/member1-key.pem&quot;</span><br><span class=\"line\">ETCD_PEER_TRUSTED_CA_FILE=&quot;/etc/ssl/etcd/ca.pem&quot;</span><br><span class=\"line\">ETCD_PEER_CLIENT_CERT_AUTH=&quot;true&quot;</span><br><span class=\"line\">#[logging]</span><br><span class=\"line\">ETCD_DEBUG=&quot;true&quot;</span><br><span class=\"line\">ETCD_LOG_PACKAGE_LEVELS=&quot;etcdserver=WARNING,security=DEBUG&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4，测试-etcd-是否正常\"><a href=\"#4，测试-etcd-是否正常\" class=\"headerlink\" title=\"4，测试 etcd 是否正常\"></a>4，测试 etcd 是否正常</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl restart  etcd</span><br><span class=\"line\"></span><br><span class=\"line\">如果报错，使用 journalctl -f -t etcd 和 journalctl -u etcd 来定位问题。</span><br><span class=\"line\"></span><br><span class=\"line\">$ curl --cacert /etc/ssl/etcd/ca.pem --cert /etc/ssl/etcd/client.pem --key /etc/ssl/etcd/client-key.pem https://10.93.81.17:2379/health</span><br><span class=\"line\">&#123;&quot;health&quot;: &quot;true&quot;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$ etcdctl --endpoints=[10.93.81.17:2379] --cacert=/etc/ssl/etcd/ca.pem --cert=/etc/ssl/etcd/client.pem --key=/etc/ssl/etcd/client-key.pem member list</span><br><span class=\"line\">     </span><br><span class=\"line\">$ etcdctl --endpoints=[10.93.81.17:2379] --cacert=/etc/ssl/etcd/ca.pem --cert=/etc/ssl/etcd/client.pem --key=/etc/ssl/etcd/client-key.pem put /foo/bar  &quot;hello world&quot;</span><br><span class=\"line\">     </span><br><span class=\"line\">$ etcdctl --endpoints=[10.93.81.17:2379] --cacert=/etc/ssl/etcd/ca.pem --cert=/etc/ssl/etcd/client.pem --key=/etc/ssl/etcd/client-key.pem get /foo/bar</span><br></pre></td></tr></table></figure>\n<h2 id=\"5，配置-kube-apiserver-使用-CA-连接-etcd\"><a href=\"#5，配置-kube-apiserver-使用-CA-连接-etcd\" class=\"headerlink\" title=\"5，配置 kube-apiserver 使用 CA 连接 etcd\"></a>5，配置 kube-apiserver 使用 CA 连接 etcd</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cp /etc/ssl/etcd/*  /var/run/kubernetes/</span><br><span class=\"line\">    </span><br><span class=\"line\">$ chown  -R kube.kube /var/run/kubernetes/</span><br><span class=\"line\"></span><br><span class=\"line\">在 /etc/kubernetes/apiserver 中 KUBE_API_ARGS 新加一下几个参数：</span><br><span class=\"line\"></span><br><span class=\"line\">--cert-dir=&apos;/var/run/kubernetes/&apos; --etcd-cafile=&apos;/var/run/kubernetes/ca.pem&apos; --etcd-certfile=&apos;/var/run/kubernetes/client.pem&apos; --etcd-keyfile=&apos;/var/run/kubernetes/client-key.pem&apos;</span><br></pre></td></tr></table></figure>\n<h2 id=\"6，测试-kube-apiserver\"><a href=\"#6，测试-kube-apiserver\" class=\"headerlink\" title=\"6，测试 kube-apiserver\"></a>6，测试 kube-apiserver</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl restart kube-apiserver kube-controller-manager kube-scheduler kubelet kube-proxy</span><br><span class=\"line\"></span><br><span class=\"line\">$ systemctl status -l kube-apiserver kube-controller-manager kube-scheduler kubelet kube-proxy</span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl get node</span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl get cs</span><br><span class=\"line\">NAME                 STATUS      MESSAGE                                                                   ERROR</span><br><span class=\"line\">scheduler            Healthy     ok</span><br><span class=\"line\">controller-manager   Healthy     ok</span><br><span class=\"line\">etcd-0               Unhealthy   Get https://10.93.81.17:2379/health: remote error: tls: bad certificate</span><br><span class=\"line\"></span><br><span class=\"line\">$ ./version.sh</span><br><span class=\"line\">etcdctl version: 3.1.3</span><br><span class=\"line\">API version: 3.1</span><br><span class=\"line\">Kubernetes v1.6.0-beta.1</span><br></pre></td></tr></table></figure>\n<h2 id=\"7，未解决的问题\"><a href=\"#7，未解决的问题\" class=\"headerlink\" title=\"7，未解决的问题\"></a>7，未解决的问题</h2><h5 id=\"1，使用-kubectl-get-cs-查看会出现如上面所示的报错：\"><a href=\"#1，使用-kubectl-get-cs-查看会出现如上面所示的报错：\" class=\"headerlink\" title=\"1，使用  kubectl get cs 查看会出现如上面所示的报错：\"></a>1，使用  <code>kubectl get cs</code> 查看会出现如上面所示的报错：</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">etcd-0 Unhealthy Get https://10.93.81.17:2379/health: remote error: tls: bad certificate</span><br></pre></td></tr></table></figure>\n<p>此问题有人提交 pr 但尚未被 merge，<a href=\"https://github.com/kubernetes/kubernetes/pull/39716\" target=\"_blank\" rel=\"noopener\">etcd component status check should include credentials</a></p>\n<h5 id=\"2，使用以下命令查看到的-2380-端口是未加密的\"><a href=\"#2，使用以下命令查看到的-2380-端口是未加密的\" class=\"headerlink\" title=\"2，使用以下命令查看到的 2380 端口是未加密的\"></a>2，使用以下命令查看到的 2380 端口是未加密的</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ etcdctl --endpoints=[10.93.81.17:2379] --cacert=/etc/ssl/etcd/ca.pem --cert=/etc/ssl/etcd/client.pem --key=/etc/ssl/etcd/client-key.pem member list  </span><br><span class=\"line\"></span><br><span class=\"line\">2017-03-15 15:02:05.611564 I | warning: ignoring ServerName for user-provided CA for backwards compatibility is deprecated</span><br><span class=\"line\">145b401ad8709f51, started, node1, http://10.93.81.17:2380, https://10.93.81.17:2379</span><br></pre></td></tr></table></figure>\n<p>参考文档：</p>\n<ul>\n<li><a href=\"https://www.addops.cn/post/tls-for-kubernetes-etcd.html\" target=\"_blank\" rel=\"noopener\">kubernetes + etcd ssl 支持</a></li>\n<li><a href=\"https://coreos.com/etcd/docs/latest/op-guide/security.html\" target=\"_blank\" rel=\"noopener\">Security model</a></li>\n<li><a href=\"https://coreos.com/etcd/docs/latest/etcd-live-http-to-https-migration.html\" target=\"_blank\" rel=\"noopener\">Enabling HTTPS in an existing etcd cluster</a></li>\n</ul>\n"},{"title":"使用 Go Modules 管理依赖","date":"2019-06-22T12:49:30.000Z","type":"go module","_content":"Go Modules 是 Go 语言的一种依赖管理方式，该  feature 是在 Go 1.11 版本中出现的，由于最近在做的项目中，团队都开始使用 go module 来替代以前的 Godep，Kubernetes 也从 v1.15 开始采用 go module 来进行包管理，所以有必要了解一下 go module。go module 相比于原来的 Godep，go module 在打包、编译等多个环节上有着明显的速度优势，并且能够在任意操作系统上方便的复现依赖包，更重要的是 go module 本身的设计使得自身被其他项目引用变得更加容易，这也是 Kubernetes 项目向框架化演进的又一个重要体现。\n\n使用 go module 管理依赖后会在项目根目录下生成两个文件  go.mod 和 go.sum。\n\n`go.mod` 中会记录当前项目的所依赖，文件格式如下所示：\n\n```\nmodule github.com/gosoon/audit-webhook\n\ngo 1.12\n\nrequire (\n\tgithub.com/elastic/go-elasticsearch v0.0.0\n\tgithub.com/gorilla/mux v1.7.2\n\tgithub.com/gosoon/glog v0.0.0-20180521124921-a5fbfb162a81\n)\n```\n\n`go.sum`记录每个依赖库的版本和哈希值，文件格式如下所示：\n\n```\ngithub.com/elastic/go-elasticsearch v0.0.0 h1:Pd5fqOuBxKxv83b0+xOAJDAkziWYwFinWnBO0y+TZaA=\ngithub.com/elastic/go-elasticsearch v0.0.0/go.mod h1:TkBSJBuTyFdBnrNqoPc54FN0vKf5c04IdM4zuStJ7xg=\ngithub.com/gorilla/mux v1.7.2 h1:zoNxOV7WjqXptQOVngLmcSQgXmgk4NMz1HibBchjl/I=\ngithub.com/gorilla/mux v1.7.2/go.mod h1:1lud6UwP+6orDFRuTfBEV8e9/aOM/c4fVVCaMa2zaAs=\ngithub.com/gosoon/glog v0.0.0-20180521124921-a5fbfb162a81 h1:JP0LU0ajeawW2xySrbhDqtSUfVWohZ505Q4LXo+hCmg=\ngithub.com/gosoon/glog v0.0.0-20180521124921-a5fbfb162a81/go.mod h1:1e0N9vBl2wPF6qYa+JCRNIZnhxSkXkOJfD2iFw3eOfg=\n```\n\n#### 一、如何启用 go module 功能\n\n(1) go 版本 >= v1.11\n\n(2) 设置`GO111MODULE`环境变量\n\n要使用`go module` 首先要设置`GO111MODULE=on`，`GO111MODULE` 有三个值，off、on、auto，off 和 on 即关闭和开启，auto 则会根据当前目录下是否有 go.mod 文件来判断是否使用 modules 功能。无论使用哪种模式，module 功能默认不在 GOPATH 目录下查找依赖文件，所以使用 modules 功能时请设置好代理。\n\n在使用 go module 时，将 `GO111MODULE` 全局环境变量设置为 off，在需要使用的时候再开启，避免在已有项目中意外引入  go module。\n\n```\n$ echo export GO111MODULE=off >> ~/.zshrc\nor\n$ echo export GO111MODULE=off >> ~/.bashrc\n```\n\ngo mod 命令的使用：\n\n```\ndownload    download modules to local cache (下载依赖的module到本地cache))\nedit        edit go.mod from tools or scripts (编辑go.mod文件)\ngraph       print module requirement graph (打印模块依赖图))\ninit        initialize new module in current directory (在当前文件夹下初始化一个新的module, 创建go.mod文件))\ntidy        add missing and remove unused modules (增加丢失的module，去掉未使用的module)\nvendor      make vendored copy of dependencies (将依赖复制到vendor下)\nverify      verify dependencies have expected content (校验依赖)\nwhy         explain why packages or modules are needed (解释为什么需要依赖)\n```\n\n#### 二、使用 go module 功能\n\n对于新建项目使用 go module：\n\n```\n$ export GO111MODULE=on\n\t\n$ go mod init github.com/you/hello\n\t\n...\n// go build 会将项目的依赖添加到 go.mod 中\n$ go build \n```\n\n\n\n对于已有项目要改为使用 go module：\n\n```\n$ export GO111MODULE=on\n\n// 创建一个空的 go.mod 文件\n$ go mod init .\n\n// 查找依赖并记录在 go.mod 文件中\n$ go get ./...\n\n```\n\n> go.mod 文件必须要提交到 git 仓库，但 go.sum 文件可以不用提交到 git 仓库(gi t忽略文件 .gitignore 中设置一下)。\n\n\n#### 三、项目的打包\n\n首先需要使用 `go mod vendor` 将项目所有的依赖下载到本地 vendor 目录中然后进行编译，下面是一个参考： \n\n```\n#!/bin/bash\n\nexport GO111MODULE=\"on\"\nexport GOPROXY=\"https://goproxy.io\"\nexport CGO_ENABLED=\"0\"\nexport GOOS=\"linux\"\nexport GOARCH=amd64\n\ngo mod vendor\ngo build -ldflags \"-s -w\" -a -installsuffix cgo -o audit-webhook .\n```\n\n\n\n#### 四、注意事项\n\n1、依赖下载\n\ngo module 默认不在 GOPATH 目录下查找依赖文件，其首先会在`$GOPATH/pkg/mod`中查找有没有所需要的依赖，没有的直接会进行下载。可以使用 `go mod download`下载好所需要的依赖，依赖默认会下载到`$GOPATH/pkg/mod`中，其他项目也会使用缓存的 module。\n\n2、国内无法访问的依赖\n\n使用 Go 的其他包管理工具 godep、govendor、glide、dep 等都避免不了翻墙的问题，Go Modules 也是一样，但在`go.mod`中可以使用`replace`将特定的库替换成其他库：\n\n```\nreplace (\n\tgolang.org/x/text v0.3.0 => github.com/golang/text v0.3.0\n)\n```\n\n或者也可以在其他机器上使用 `go mod download`下载好所需要的依赖，然后再传输到本机。\n\n\n参考：\n\nhttps://github.com/kubernetes/enhancements/blob/master/keps/sig-architecture/2019-03-19-go-modules.md\n\nhttps://blog.golang.org/using-go-modules\n","source":"_posts/golang_modules.md","raw":"---\ntitle: 使用 Go Modules 管理依赖\ndate: 2019-06-22 20:49:30\ntags: [\"go module\"]\ntype: \"go module\"\n\n---\nGo Modules 是 Go 语言的一种依赖管理方式，该  feature 是在 Go 1.11 版本中出现的，由于最近在做的项目中，团队都开始使用 go module 来替代以前的 Godep，Kubernetes 也从 v1.15 开始采用 go module 来进行包管理，所以有必要了解一下 go module。go module 相比于原来的 Godep，go module 在打包、编译等多个环节上有着明显的速度优势，并且能够在任意操作系统上方便的复现依赖包，更重要的是 go module 本身的设计使得自身被其他项目引用变得更加容易，这也是 Kubernetes 项目向框架化演进的又一个重要体现。\n\n使用 go module 管理依赖后会在项目根目录下生成两个文件  go.mod 和 go.sum。\n\n`go.mod` 中会记录当前项目的所依赖，文件格式如下所示：\n\n```\nmodule github.com/gosoon/audit-webhook\n\ngo 1.12\n\nrequire (\n\tgithub.com/elastic/go-elasticsearch v0.0.0\n\tgithub.com/gorilla/mux v1.7.2\n\tgithub.com/gosoon/glog v0.0.0-20180521124921-a5fbfb162a81\n)\n```\n\n`go.sum`记录每个依赖库的版本和哈希值，文件格式如下所示：\n\n```\ngithub.com/elastic/go-elasticsearch v0.0.0 h1:Pd5fqOuBxKxv83b0+xOAJDAkziWYwFinWnBO0y+TZaA=\ngithub.com/elastic/go-elasticsearch v0.0.0/go.mod h1:TkBSJBuTyFdBnrNqoPc54FN0vKf5c04IdM4zuStJ7xg=\ngithub.com/gorilla/mux v1.7.2 h1:zoNxOV7WjqXptQOVngLmcSQgXmgk4NMz1HibBchjl/I=\ngithub.com/gorilla/mux v1.7.2/go.mod h1:1lud6UwP+6orDFRuTfBEV8e9/aOM/c4fVVCaMa2zaAs=\ngithub.com/gosoon/glog v0.0.0-20180521124921-a5fbfb162a81 h1:JP0LU0ajeawW2xySrbhDqtSUfVWohZ505Q4LXo+hCmg=\ngithub.com/gosoon/glog v0.0.0-20180521124921-a5fbfb162a81/go.mod h1:1e0N9vBl2wPF6qYa+JCRNIZnhxSkXkOJfD2iFw3eOfg=\n```\n\n#### 一、如何启用 go module 功能\n\n(1) go 版本 >= v1.11\n\n(2) 设置`GO111MODULE`环境变量\n\n要使用`go module` 首先要设置`GO111MODULE=on`，`GO111MODULE` 有三个值，off、on、auto，off 和 on 即关闭和开启，auto 则会根据当前目录下是否有 go.mod 文件来判断是否使用 modules 功能。无论使用哪种模式，module 功能默认不在 GOPATH 目录下查找依赖文件，所以使用 modules 功能时请设置好代理。\n\n在使用 go module 时，将 `GO111MODULE` 全局环境变量设置为 off，在需要使用的时候再开启，避免在已有项目中意外引入  go module。\n\n```\n$ echo export GO111MODULE=off >> ~/.zshrc\nor\n$ echo export GO111MODULE=off >> ~/.bashrc\n```\n\ngo mod 命令的使用：\n\n```\ndownload    download modules to local cache (下载依赖的module到本地cache))\nedit        edit go.mod from tools or scripts (编辑go.mod文件)\ngraph       print module requirement graph (打印模块依赖图))\ninit        initialize new module in current directory (在当前文件夹下初始化一个新的module, 创建go.mod文件))\ntidy        add missing and remove unused modules (增加丢失的module，去掉未使用的module)\nvendor      make vendored copy of dependencies (将依赖复制到vendor下)\nverify      verify dependencies have expected content (校验依赖)\nwhy         explain why packages or modules are needed (解释为什么需要依赖)\n```\n\n#### 二、使用 go module 功能\n\n对于新建项目使用 go module：\n\n```\n$ export GO111MODULE=on\n\t\n$ go mod init github.com/you/hello\n\t\n...\n// go build 会将项目的依赖添加到 go.mod 中\n$ go build \n```\n\n\n\n对于已有项目要改为使用 go module：\n\n```\n$ export GO111MODULE=on\n\n// 创建一个空的 go.mod 文件\n$ go mod init .\n\n// 查找依赖并记录在 go.mod 文件中\n$ go get ./...\n\n```\n\n> go.mod 文件必须要提交到 git 仓库，但 go.sum 文件可以不用提交到 git 仓库(gi t忽略文件 .gitignore 中设置一下)。\n\n\n#### 三、项目的打包\n\n首先需要使用 `go mod vendor` 将项目所有的依赖下载到本地 vendor 目录中然后进行编译，下面是一个参考： \n\n```\n#!/bin/bash\n\nexport GO111MODULE=\"on\"\nexport GOPROXY=\"https://goproxy.io\"\nexport CGO_ENABLED=\"0\"\nexport GOOS=\"linux\"\nexport GOARCH=amd64\n\ngo mod vendor\ngo build -ldflags \"-s -w\" -a -installsuffix cgo -o audit-webhook .\n```\n\n\n\n#### 四、注意事项\n\n1、依赖下载\n\ngo module 默认不在 GOPATH 目录下查找依赖文件，其首先会在`$GOPATH/pkg/mod`中查找有没有所需要的依赖，没有的直接会进行下载。可以使用 `go mod download`下载好所需要的依赖，依赖默认会下载到`$GOPATH/pkg/mod`中，其他项目也会使用缓存的 module。\n\n2、国内无法访问的依赖\n\n使用 Go 的其他包管理工具 godep、govendor、glide、dep 等都避免不了翻墙的问题，Go Modules 也是一样，但在`go.mod`中可以使用`replace`将特定的库替换成其他库：\n\n```\nreplace (\n\tgolang.org/x/text v0.3.0 => github.com/golang/text v0.3.0\n)\n```\n\n或者也可以在其他机器上使用 `go mod download`下载好所需要的依赖，然后再传输到本机。\n\n\n参考：\n\nhttps://github.com/kubernetes/enhancements/blob/master/keps/sig-architecture/2019-03-19-go-modules.md\n\nhttps://blog.golang.org/using-go-modules\n","slug":"golang_modules","published":1,"updated":"2019-06-22T12:49:34.781Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjycnhjlt00085vwnxrx39hen","content":"<p>Go Modules 是 Go 语言的一种依赖管理方式，该  feature 是在 Go 1.11 版本中出现的，由于最近在做的项目中，团队都开始使用 go module 来替代以前的 Godep，Kubernetes 也从 v1.15 开始采用 go module 来进行包管理，所以有必要了解一下 go module。go module 相比于原来的 Godep，go module 在打包、编译等多个环节上有着明显的速度优势，并且能够在任意操作系统上方便的复现依赖包，更重要的是 go module 本身的设计使得自身被其他项目引用变得更加容易，这也是 Kubernetes 项目向框架化演进的又一个重要体现。</p>\n<p>使用 go module 管理依赖后会在项目根目录下生成两个文件  go.mod 和 go.sum。</p>\n<p><code>go.mod</code> 中会记录当前项目的所依赖，文件格式如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module github.com/gosoon/audit-webhook</span><br><span class=\"line\"></span><br><span class=\"line\">go 1.12</span><br><span class=\"line\"></span><br><span class=\"line\">require (</span><br><span class=\"line\">\tgithub.com/elastic/go-elasticsearch v0.0.0</span><br><span class=\"line\">\tgithub.com/gorilla/mux v1.7.2</span><br><span class=\"line\">\tgithub.com/gosoon/glog v0.0.0-20180521124921-a5fbfb162a81</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p><code>go.sum</code>记录每个依赖库的版本和哈希值，文件格式如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">github.com/elastic/go-elasticsearch v0.0.0 h1:Pd5fqOuBxKxv83b0+xOAJDAkziWYwFinWnBO0y+TZaA=</span><br><span class=\"line\">github.com/elastic/go-elasticsearch v0.0.0/go.mod h1:TkBSJBuTyFdBnrNqoPc54FN0vKf5c04IdM4zuStJ7xg=</span><br><span class=\"line\">github.com/gorilla/mux v1.7.2 h1:zoNxOV7WjqXptQOVngLmcSQgXmgk4NMz1HibBchjl/I=</span><br><span class=\"line\">github.com/gorilla/mux v1.7.2/go.mod h1:1lud6UwP+6orDFRuTfBEV8e9/aOM/c4fVVCaMa2zaAs=</span><br><span class=\"line\">github.com/gosoon/glog v0.0.0-20180521124921-a5fbfb162a81 h1:JP0LU0ajeawW2xySrbhDqtSUfVWohZ505Q4LXo+hCmg=</span><br><span class=\"line\">github.com/gosoon/glog v0.0.0-20180521124921-a5fbfb162a81/go.mod h1:1e0N9vBl2wPF6qYa+JCRNIZnhxSkXkOJfD2iFw3eOfg=</span><br></pre></td></tr></table></figure>\n<h4 id=\"一、如何启用-go-module-功能\"><a href=\"#一、如何启用-go-module-功能\" class=\"headerlink\" title=\"一、如何启用 go module 功能\"></a>一、如何启用 go module 功能</h4><p>(1) go 版本 &gt;= v1.11</p>\n<p>(2) 设置<code>GO111MODULE</code>环境变量</p>\n<p>要使用<code>go module</code> 首先要设置<code>GO111MODULE=on</code>，<code>GO111MODULE</code> 有三个值，off、on、auto，off 和 on 即关闭和开启，auto 则会根据当前目录下是否有 go.mod 文件来判断是否使用 modules 功能。无论使用哪种模式，module 功能默认不在 GOPATH 目录下查找依赖文件，所以使用 modules 功能时请设置好代理。</p>\n<p>在使用 go module 时，将 <code>GO111MODULE</code> 全局环境变量设置为 off，在需要使用的时候再开启，避免在已有项目中意外引入  go module。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ echo export GO111MODULE=off &gt;&gt; ~/.zshrc</span><br><span class=\"line\">or</span><br><span class=\"line\">$ echo export GO111MODULE=off &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure>\n<p>go mod 命令的使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">download    download modules to local cache (下载依赖的module到本地cache))</span><br><span class=\"line\">edit        edit go.mod from tools or scripts (编辑go.mod文件)</span><br><span class=\"line\">graph       print module requirement graph (打印模块依赖图))</span><br><span class=\"line\">init        initialize new module in current directory (在当前文件夹下初始化一个新的module, 创建go.mod文件))</span><br><span class=\"line\">tidy        add missing and remove unused modules (增加丢失的module，去掉未使用的module)</span><br><span class=\"line\">vendor      make vendored copy of dependencies (将依赖复制到vendor下)</span><br><span class=\"line\">verify      verify dependencies have expected content (校验依赖)</span><br><span class=\"line\">why         explain why packages or modules are needed (解释为什么需要依赖)</span><br></pre></td></tr></table></figure>\n<h4 id=\"二、使用-go-module-功能\"><a href=\"#二、使用-go-module-功能\" class=\"headerlink\" title=\"二、使用 go module 功能\"></a>二、使用 go module 功能</h4><p>对于新建项目使用 go module：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ export GO111MODULE=on</span><br><span class=\"line\">\t</span><br><span class=\"line\">$ go mod init github.com/you/hello</span><br><span class=\"line\">\t</span><br><span class=\"line\">...</span><br><span class=\"line\">// go build 会将项目的依赖添加到 go.mod 中</span><br><span class=\"line\">$ go build</span><br></pre></td></tr></table></figure>\n<p>对于已有项目要改为使用 go module：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ export GO111MODULE=on</span><br><span class=\"line\"></span><br><span class=\"line\">// 创建一个空的 go.mod 文件</span><br><span class=\"line\">$ go mod init .</span><br><span class=\"line\"></span><br><span class=\"line\">// 查找依赖并记录在 go.mod 文件中</span><br><span class=\"line\">$ go get ./...</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>go.mod 文件必须要提交到 git 仓库，但 go.sum 文件可以不用提交到 git 仓库(gi t忽略文件 .gitignore 中设置一下)。</p>\n</blockquote>\n<h4 id=\"三、项目的打包\"><a href=\"#三、项目的打包\" class=\"headerlink\" title=\"三、项目的打包\"></a>三、项目的打包</h4><p>首先需要使用 <code>go mod vendor</code> 将项目所有的依赖下载到本地 vendor 目录中然后进行编译，下面是一个参考： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">export GO111MODULE=&quot;on&quot;</span><br><span class=\"line\">export GOPROXY=&quot;https://goproxy.io&quot;</span><br><span class=\"line\">export CGO_ENABLED=&quot;0&quot;</span><br><span class=\"line\">export GOOS=&quot;linux&quot;</span><br><span class=\"line\">export GOARCH=amd64</span><br><span class=\"line\"></span><br><span class=\"line\">go mod vendor</span><br><span class=\"line\">go build -ldflags &quot;-s -w&quot; -a -installsuffix cgo -o audit-webhook .</span><br></pre></td></tr></table></figure>\n<h4 id=\"四、注意事项\"><a href=\"#四、注意事项\" class=\"headerlink\" title=\"四、注意事项\"></a>四、注意事项</h4><p>1、依赖下载</p>\n<p>go module 默认不在 GOPATH 目录下查找依赖文件，其首先会在<code>$GOPATH/pkg/mod</code>中查找有没有所需要的依赖，没有的直接会进行下载。可以使用 <code>go mod download</code>下载好所需要的依赖，依赖默认会下载到<code>$GOPATH/pkg/mod</code>中，其他项目也会使用缓存的 module。</p>\n<p>2、国内无法访问的依赖</p>\n<p>使用 Go 的其他包管理工具 godep、govendor、glide、dep 等都避免不了翻墙的问题，Go Modules 也是一样，但在<code>go.mod</code>中可以使用<code>replace</code>将特定的库替换成其他库：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">replace (</span><br><span class=\"line\">\tgolang.org/x/text v0.3.0 =&gt; github.com/golang/text v0.3.0</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>或者也可以在其他机器上使用 <code>go mod download</code>下载好所需要的依赖，然后再传输到本机。</p>\n<p>参考：</p>\n<p><a href=\"https://github.com/kubernetes/enhancements/blob/master/keps/sig-architecture/2019-03-19-go-modules.md\" target=\"_blank\" rel=\"noopener\">https://github.com/kubernetes/enhancements/blob/master/keps/sig-architecture/2019-03-19-go-modules.md</a></p>\n<p><a href=\"https://blog.golang.org/using-go-modules\" target=\"_blank\" rel=\"noopener\">https://blog.golang.org/using-go-modules</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Go Modules 是 Go 语言的一种依赖管理方式，该  feature 是在 Go 1.11 版本中出现的，由于最近在做的项目中，团队都开始使用 go module 来替代以前的 Godep，Kubernetes 也从 v1.15 开始采用 go module 来进行包管理，所以有必要了解一下 go module。go module 相比于原来的 Godep，go module 在打包、编译等多个环节上有着明显的速度优势，并且能够在任意操作系统上方便的复现依赖包，更重要的是 go module 本身的设计使得自身被其他项目引用变得更加容易，这也是 Kubernetes 项目向框架化演进的又一个重要体现。</p>\n<p>使用 go module 管理依赖后会在项目根目录下生成两个文件  go.mod 和 go.sum。</p>\n<p><code>go.mod</code> 中会记录当前项目的所依赖，文件格式如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module github.com/gosoon/audit-webhook</span><br><span class=\"line\"></span><br><span class=\"line\">go 1.12</span><br><span class=\"line\"></span><br><span class=\"line\">require (</span><br><span class=\"line\">\tgithub.com/elastic/go-elasticsearch v0.0.0</span><br><span class=\"line\">\tgithub.com/gorilla/mux v1.7.2</span><br><span class=\"line\">\tgithub.com/gosoon/glog v0.0.0-20180521124921-a5fbfb162a81</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p><code>go.sum</code>记录每个依赖库的版本和哈希值，文件格式如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">github.com/elastic/go-elasticsearch v0.0.0 h1:Pd5fqOuBxKxv83b0+xOAJDAkziWYwFinWnBO0y+TZaA=</span><br><span class=\"line\">github.com/elastic/go-elasticsearch v0.0.0/go.mod h1:TkBSJBuTyFdBnrNqoPc54FN0vKf5c04IdM4zuStJ7xg=</span><br><span class=\"line\">github.com/gorilla/mux v1.7.2 h1:zoNxOV7WjqXptQOVngLmcSQgXmgk4NMz1HibBchjl/I=</span><br><span class=\"line\">github.com/gorilla/mux v1.7.2/go.mod h1:1lud6UwP+6orDFRuTfBEV8e9/aOM/c4fVVCaMa2zaAs=</span><br><span class=\"line\">github.com/gosoon/glog v0.0.0-20180521124921-a5fbfb162a81 h1:JP0LU0ajeawW2xySrbhDqtSUfVWohZ505Q4LXo+hCmg=</span><br><span class=\"line\">github.com/gosoon/glog v0.0.0-20180521124921-a5fbfb162a81/go.mod h1:1e0N9vBl2wPF6qYa+JCRNIZnhxSkXkOJfD2iFw3eOfg=</span><br></pre></td></tr></table></figure>\n<h4 id=\"一、如何启用-go-module-功能\"><a href=\"#一、如何启用-go-module-功能\" class=\"headerlink\" title=\"一、如何启用 go module 功能\"></a>一、如何启用 go module 功能</h4><p>(1) go 版本 &gt;= v1.11</p>\n<p>(2) 设置<code>GO111MODULE</code>环境变量</p>\n<p>要使用<code>go module</code> 首先要设置<code>GO111MODULE=on</code>，<code>GO111MODULE</code> 有三个值，off、on、auto，off 和 on 即关闭和开启，auto 则会根据当前目录下是否有 go.mod 文件来判断是否使用 modules 功能。无论使用哪种模式，module 功能默认不在 GOPATH 目录下查找依赖文件，所以使用 modules 功能时请设置好代理。</p>\n<p>在使用 go module 时，将 <code>GO111MODULE</code> 全局环境变量设置为 off，在需要使用的时候再开启，避免在已有项目中意外引入  go module。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ echo export GO111MODULE=off &gt;&gt; ~/.zshrc</span><br><span class=\"line\">or</span><br><span class=\"line\">$ echo export GO111MODULE=off &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure>\n<p>go mod 命令的使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">download    download modules to local cache (下载依赖的module到本地cache))</span><br><span class=\"line\">edit        edit go.mod from tools or scripts (编辑go.mod文件)</span><br><span class=\"line\">graph       print module requirement graph (打印模块依赖图))</span><br><span class=\"line\">init        initialize new module in current directory (在当前文件夹下初始化一个新的module, 创建go.mod文件))</span><br><span class=\"line\">tidy        add missing and remove unused modules (增加丢失的module，去掉未使用的module)</span><br><span class=\"line\">vendor      make vendored copy of dependencies (将依赖复制到vendor下)</span><br><span class=\"line\">verify      verify dependencies have expected content (校验依赖)</span><br><span class=\"line\">why         explain why packages or modules are needed (解释为什么需要依赖)</span><br></pre></td></tr></table></figure>\n<h4 id=\"二、使用-go-module-功能\"><a href=\"#二、使用-go-module-功能\" class=\"headerlink\" title=\"二、使用 go module 功能\"></a>二、使用 go module 功能</h4><p>对于新建项目使用 go module：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ export GO111MODULE=on</span><br><span class=\"line\">\t</span><br><span class=\"line\">$ go mod init github.com/you/hello</span><br><span class=\"line\">\t</span><br><span class=\"line\">...</span><br><span class=\"line\">// go build 会将项目的依赖添加到 go.mod 中</span><br><span class=\"line\">$ go build</span><br></pre></td></tr></table></figure>\n<p>对于已有项目要改为使用 go module：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ export GO111MODULE=on</span><br><span class=\"line\"></span><br><span class=\"line\">// 创建一个空的 go.mod 文件</span><br><span class=\"line\">$ go mod init .</span><br><span class=\"line\"></span><br><span class=\"line\">// 查找依赖并记录在 go.mod 文件中</span><br><span class=\"line\">$ go get ./...</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>go.mod 文件必须要提交到 git 仓库，但 go.sum 文件可以不用提交到 git 仓库(gi t忽略文件 .gitignore 中设置一下)。</p>\n</blockquote>\n<h4 id=\"三、项目的打包\"><a href=\"#三、项目的打包\" class=\"headerlink\" title=\"三、项目的打包\"></a>三、项目的打包</h4><p>首先需要使用 <code>go mod vendor</code> 将项目所有的依赖下载到本地 vendor 目录中然后进行编译，下面是一个参考： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">export GO111MODULE=&quot;on&quot;</span><br><span class=\"line\">export GOPROXY=&quot;https://goproxy.io&quot;</span><br><span class=\"line\">export CGO_ENABLED=&quot;0&quot;</span><br><span class=\"line\">export GOOS=&quot;linux&quot;</span><br><span class=\"line\">export GOARCH=amd64</span><br><span class=\"line\"></span><br><span class=\"line\">go mod vendor</span><br><span class=\"line\">go build -ldflags &quot;-s -w&quot; -a -installsuffix cgo -o audit-webhook .</span><br></pre></td></tr></table></figure>\n<h4 id=\"四、注意事项\"><a href=\"#四、注意事项\" class=\"headerlink\" title=\"四、注意事项\"></a>四、注意事项</h4><p>1、依赖下载</p>\n<p>go module 默认不在 GOPATH 目录下查找依赖文件，其首先会在<code>$GOPATH/pkg/mod</code>中查找有没有所需要的依赖，没有的直接会进行下载。可以使用 <code>go mod download</code>下载好所需要的依赖，依赖默认会下载到<code>$GOPATH/pkg/mod</code>中，其他项目也会使用缓存的 module。</p>\n<p>2、国内无法访问的依赖</p>\n<p>使用 Go 的其他包管理工具 godep、govendor、glide、dep 等都避免不了翻墙的问题，Go Modules 也是一样，但在<code>go.mod</code>中可以使用<code>replace</code>将特定的库替换成其他库：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">replace (</span><br><span class=\"line\">\tgolang.org/x/text v0.3.0 =&gt; github.com/golang/text v0.3.0</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>或者也可以在其他机器上使用 <code>go mod download</code>下载好所需要的依赖，然后再传输到本机。</p>\n<p>参考：</p>\n<p><a href=\"https://github.com/kubernetes/enhancements/blob/master/keps/sig-architecture/2019-03-19-go-modules.md\" target=\"_blank\" rel=\"noopener\">https://github.com/kubernetes/enhancements/blob/master/keps/sig-architecture/2019-03-19-go-modules.md</a></p>\n<p><a href=\"https://blog.golang.org/using-go-modules\" target=\"_blank\" rel=\"noopener\">https://blog.golang.org/using-go-modules</a></p>\n"},{"title":"kubernetes 审计日志功能","date":"2019-01-30T08:26:30.000Z","type":"audit","_content":"审计日志可以记录所有对 apiserver 接口的调用，让我们能够非常清晰的知道集群到底发生了什么事情，通过记录的日志可以查到所发生的事件、操作的用户和时间。kubernetes 在 v1.7 中支持了日志审计功能（Alpha），在 v1.8 中为 Beta 版本，v1.12 为 GA 版本。\n\n> kubernetes feature-gates 中的功能 Alpha 版本默认为 false，到 Beta 版本时默认为 true，所以 v1.8 会默认启用审计日志的功能。\n\n\n### 一、审计日志的策略\n\n#### 1、日志记录阶段\n\nkube-apiserver 是负责接收及相应用户请求的一个组件，每一个请求都会有几个阶段，每个阶段都有对应的日志，当前支持的阶段有：\n\n- RequestReceived - apiserver 在接收到请求后且在将该请求下发之前会生成对应的审计日志。\n- ResponseStarted - 在响应 header 发送后并在响应 body 发送前生成日志。这个阶段仅为长时间运行的请求生成（例如 watch）。\n- ResponseComplete - 当响应 body 发送完并且不再发送数据。\n- Panic - 当有 panic 发生时生成。\n\n也就是说对 apiserver 的每一个请求理论上会有三个阶段的审计日志生成。\n\n#### 2、日志记录级别\n\n当前支持的日志记录级别有：\n\n- None - 不记录日志。\n- Metadata - 只记录 Request 的一些 metadata (例如 user, timestamp, resource, verb 等)，但不记录 Request 或 Response 的body。\n- Request - 记录 Request 的 metadata 和 body。\n- RequestResponse - 最全记录方式，会记录所有的 metadata、Request 和 Response 的 body。\n\n#### 3、日志记录策略\n\n在记录日志的时候尽量只记录所需要的信息，不需要的日志尽可能不记录，避免造成系统资源的浪费。\n\n- 一个请求不要重复记录，每个请求有三个阶段，只记录其中需要的阶段\n- 不要记录所有的资源，不要记录一个资源的所有子资源\n- 系统的请求不需要记录，kubelet、kube-proxy、kube-scheduler、kube-controller-manager 等对 kube-apiserver 的请求不需要记录\n- 对一些认证信息（secerts、configmaps、token 等）的 body 不记录 \n\nk8s 审计日志的一个示例：\n\n```\n{\n  \"kind\": \"EventList\",\n  \"apiVersion\": \"audit.k8s.io/v1beta1\",\n  \"Items\": [\n    {\n      \"Level\": \"Request\",\n      \"AuditID\": \"793e7ae2-5ca7-4ad3-a632-19708d2f8265\",\n      \"Stage\": \"RequestReceived\",\n      \"RequestURI\": \"/api/v1/namespaces/default/pods/test-pre-sf-de7cc-0\",\n      \"Verb\": \"get\",\n      \"User\": {\n        \"Username\": \"system:unsecured\",\n        \"UID\": \"\",\n        \"Groups\": [\n          \"system:masters\",\n          \"system:authenticated\"\n        ],\n        \"Extra\": null\n      },\n      \"ImpersonatedUser\": null,\n      \"SourceIPs\": [\n        \"192.168.1.11\"\n      ],\n      \"UserAgent\": \"kube-scheduler/v1.12.2 (linux/amd64) kubernetes/73f3294/scheduler\",\n      \"ObjectRef\": {\n        \"Resource\": \"pods\",\n        \"Namespace\": \"default\",\n        \"Name\": \"test-pre-sf-de7cc-0\",\n        \"UID\": \"\",\n        \"APIGroup\": \"\",\n        \"APIVersion\": \"v1\",\n        \"ResourceVersion\": \"\",\n        \"Subresource\": \"\"\n      },\n      \"ResponseStatus\": null,\n      \"RequestObject\": null,\n      \"ResponseObject\": null,\n      \"RequestReceivedTimestamp\": \"2019-01-11T06:51:43.528703Z\",\n      \"StageTimestamp\": \"2019-01-11T06:51:43.528703Z\",\n      \"Annotations\": null\n    }\n    ]\n}\n```\n\n### 二、启用审计日志\n\n当前的审计日志支持两种收集方式：保存为日志文件和调用自定义的 webhook，在 v1.13 中还支持动态的 webhook。\n\n#### 1、将审计日志以 json 格式保存到本地文件\n\napiserver 配置文件的 KUBE_API_ARGS 中需要添加如下参数：\n```\n--audit-policy-file=/etc/kubernetes/audit-policy.yaml --audit-log-path=/var/log/kube-audit --audit-log-format=json\n```\n\n日志保存到本地后再通过 fluentd 等其他组件进行收集。\n还有其他几个选项可以指定保留审计日志文件的最大天数、文件的最大数量、文件的大小等。\n\n#### 2、将审计日志打到后端指定的 webhook\n\n```\n--audit-policy-file=/etc/kubernetes/audit-policy.yaml --audit-webhook-config-file=/etc/kubernetes/audit-webhook-kubeconfig\n```\n\nwebhook 配置文件实际上是一个 kubeconfig，apiserver 会将审计日志发送 到指定的 webhook 后，webhook 接收到日志后可以再分发到 kafka 或其他组件进行收集。\n\n`audit-webhook-kubeconfig` 示例：\n```\napiVersion: v1\nclusters:\n- cluster:\n    server: http://127.0.0.1:8081/audit/webhook\n  name: metric\ncontexts:\n- context:\n    cluster: metric\n    user: \"\"\n  name: default-context\ncurrent-context: default-context\nkind: Config\npreferences: {}\nusers: []\n```\n\n前面提到过，apiserver 的每一个请求会记录三个阶段的审计日志，但是在实际中并不是需要所有的审计日志，官方也说明了启用审计日志会增加 apiserver 对内存的使用量。\n\n> Note: The audit logging feature increases the memory consumption of the API server because some context required for auditing is stored for each request. Additionally, memory consumption depends on the audit logging configuration.\n\n\n`audit-policy.yaml` 配置示例：\n\n```\napiVersion: audit.k8s.io/v1\nkind: Policy\n# ResponseStarted 阶段不记录\nomitStages:\n  - \"ResponseStarted\"\nrules:\n  # 记录用户对 pod 和 statefulset 的操作\n  - level: RequestResponse\n    resources:\n    - group: \"\"\n      resources: [\"pods\",\"pods/status\"]\n    - group: \"apps\"\n      resources: [\"statefulsets\",\"statefulsets/scale\"]\n  # kube-controller-manager、kube-scheduler 等已经认证过身份的请求不需要记录\n  - level: None\n    userGroups: [\"system:authenticated\"]\n    nonResourceURLs:\n    - \"/api*\"\n    - \"/version\"\n  # 对 config、secret、token 等认证信息不记录请求体和返回体\n  - level: Metadata\n    resources:\n    - group: \"\" # core API group\n      resources: [\"secrets\", \"configmaps\"]\n```\n\n官方提供两个参考示例：\n\n- [Use fluentd to collect and distribute audit events from log file](https://kubernetes.io/zh/docs/tasks/debug-application-cluster/audit/#%E6%97%A5%E5%BF%97%E9%80%89%E6%8B%A9%E5%99%A8%E7%A4%BA%E4%BE%8B)\n- [Use logstash to collect and distribute audit events from webhook backend](https://kubernetes.io/docs/tasks/debug-application-cluster/audit/#use-logstash-to-collect-and-distribute-audit-events-from-webhook-backend)\n\n#### 3、subresource 说明\n\n\nkubernetes 每个资源对象都有 subresource,通过调用 master 的 api 可以获取 kubernetes 中所有的 resource 以及对应的 subresource,比如 pod 有 logs、exec 等 subresource。\n\n\n![](https://upload-images.jianshu.io/upload_images/1262158-4450a01f65b3f76d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n```\n获取所有 resource（ 1.10 之后使用）：\n$ curl  127.0.0.1:8080/openapi/v2\n```\n\n参考：[https://kubernetes.io/docs/concepts/overview/kubernetes-api/](https://kubernetes.io/docs/concepts/overview/kubernetes-api/)\n\n### 三、webhook 的一个简单示例\n\n```\npackage main\n\nimport (\n\t\"encoding/json\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\n\t\"github.com/emicklei/go-restful\"\n\t\"github.com/gosoon/glog\"\n\t\"k8s.io/apiserver/pkg/apis/audit\"\n)\n\nfunc main() {\n\t// NewContainer creates a new Container using a new ServeMux and default router (CurlyRouter)\n\tcontainer := restful.NewContainer()\n\tws := new(restful.WebService)\n\tws.Path(\"/audit\").\n\t\tConsumes(restful.MIME_JSON).\n\t\tProduces(restful.MIME_JSON)\n\tws.Route(ws.POST(\"/webhook\").To(AuditWebhook))\n\n\t//WebService ws2被添加到container2中\n\tcontainer.Add(ws)\n\tserver := &http.Server{\n\t\tAddr:    \":8081\",\n\t\tHandler: container,\n\t}\n\t//go consumer()\n\tlog.Fatal(server.ListenAndServe())\n}\n\nfunc AuditWebhook(req *restful.Request, resp *restful.Response) {\n\tbody, err := ioutil.ReadAll(req.Request.Body)\n\tif err != nil {\n\t\tglog.Errorf(\"read body err is: %v\", err)\n\t}\n\tvar eventList audit.EventList\n\terr = json.Unmarshal(body, &eventList)\n\tif err != nil {\n\t\tglog.Errorf(\"unmarshal failed with:%v,body is :\\n\", err, string(body))\n\t\treturn\n\t}\n\tfor _, event := range eventList.Items {\n\t\tjsonBytes, err := json.Marshal(event)\n\t\tif err != nil {\n\t\t\tglog.Infof(\"marshal failed with:%v,event is \\n %+v\", err, event)\n\t\t}\n\t\t// 消费日志\n\t\tasyncProducer(string(jsonBytes))\n\t}\n\tresp.AddHeader(\"Content-Type\", \"application/json\")\n\tresp.WriteEntity(\"success\")\n}\n```\n\n> 完整代码请参考：[https://github.com/gosoon/k8s-audit-webhook](https://github.com/gosoon/k8s-audit-webhook)\n\n\n### 四、总结\n\n本文主要介绍了 kubernetes 的日志审计功能，kubernetes 最近也被爆出多个安全漏洞，安全问题是每个团队不可忽视的，kubernetes 虽然被多数公司用作私有云，但日志审计也是不可或缺的。\n\n\n----\n\n参考：\n[https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/](https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/)\n[ttps://kubernetes.io/docs/tasks/debug-application-cluster/audit/](https://kubernetes.io/docs/tasks/debug-application-cluster/audit/)\n[阿里云 Kubernetes 审计日志方案](https://yq.aliyun.com/articles/686982?utm_content=g_1000040449)\n\n","source":"_posts/k8s-audit-webhook.md","raw":"---\ntitle: kubernetes 审计日志功能\ndate: 2019-01-30 16:26:30\ntags: [\"audit\",\"log\"]\ntype: \"audit\"\n\n---\n审计日志可以记录所有对 apiserver 接口的调用，让我们能够非常清晰的知道集群到底发生了什么事情，通过记录的日志可以查到所发生的事件、操作的用户和时间。kubernetes 在 v1.7 中支持了日志审计功能（Alpha），在 v1.8 中为 Beta 版本，v1.12 为 GA 版本。\n\n> kubernetes feature-gates 中的功能 Alpha 版本默认为 false，到 Beta 版本时默认为 true，所以 v1.8 会默认启用审计日志的功能。\n\n\n### 一、审计日志的策略\n\n#### 1、日志记录阶段\n\nkube-apiserver 是负责接收及相应用户请求的一个组件，每一个请求都会有几个阶段，每个阶段都有对应的日志，当前支持的阶段有：\n\n- RequestReceived - apiserver 在接收到请求后且在将该请求下发之前会生成对应的审计日志。\n- ResponseStarted - 在响应 header 发送后并在响应 body 发送前生成日志。这个阶段仅为长时间运行的请求生成（例如 watch）。\n- ResponseComplete - 当响应 body 发送完并且不再发送数据。\n- Panic - 当有 panic 发生时生成。\n\n也就是说对 apiserver 的每一个请求理论上会有三个阶段的审计日志生成。\n\n#### 2、日志记录级别\n\n当前支持的日志记录级别有：\n\n- None - 不记录日志。\n- Metadata - 只记录 Request 的一些 metadata (例如 user, timestamp, resource, verb 等)，但不记录 Request 或 Response 的body。\n- Request - 记录 Request 的 metadata 和 body。\n- RequestResponse - 最全记录方式，会记录所有的 metadata、Request 和 Response 的 body。\n\n#### 3、日志记录策略\n\n在记录日志的时候尽量只记录所需要的信息，不需要的日志尽可能不记录，避免造成系统资源的浪费。\n\n- 一个请求不要重复记录，每个请求有三个阶段，只记录其中需要的阶段\n- 不要记录所有的资源，不要记录一个资源的所有子资源\n- 系统的请求不需要记录，kubelet、kube-proxy、kube-scheduler、kube-controller-manager 等对 kube-apiserver 的请求不需要记录\n- 对一些认证信息（secerts、configmaps、token 等）的 body 不记录 \n\nk8s 审计日志的一个示例：\n\n```\n{\n  \"kind\": \"EventList\",\n  \"apiVersion\": \"audit.k8s.io/v1beta1\",\n  \"Items\": [\n    {\n      \"Level\": \"Request\",\n      \"AuditID\": \"793e7ae2-5ca7-4ad3-a632-19708d2f8265\",\n      \"Stage\": \"RequestReceived\",\n      \"RequestURI\": \"/api/v1/namespaces/default/pods/test-pre-sf-de7cc-0\",\n      \"Verb\": \"get\",\n      \"User\": {\n        \"Username\": \"system:unsecured\",\n        \"UID\": \"\",\n        \"Groups\": [\n          \"system:masters\",\n          \"system:authenticated\"\n        ],\n        \"Extra\": null\n      },\n      \"ImpersonatedUser\": null,\n      \"SourceIPs\": [\n        \"192.168.1.11\"\n      ],\n      \"UserAgent\": \"kube-scheduler/v1.12.2 (linux/amd64) kubernetes/73f3294/scheduler\",\n      \"ObjectRef\": {\n        \"Resource\": \"pods\",\n        \"Namespace\": \"default\",\n        \"Name\": \"test-pre-sf-de7cc-0\",\n        \"UID\": \"\",\n        \"APIGroup\": \"\",\n        \"APIVersion\": \"v1\",\n        \"ResourceVersion\": \"\",\n        \"Subresource\": \"\"\n      },\n      \"ResponseStatus\": null,\n      \"RequestObject\": null,\n      \"ResponseObject\": null,\n      \"RequestReceivedTimestamp\": \"2019-01-11T06:51:43.528703Z\",\n      \"StageTimestamp\": \"2019-01-11T06:51:43.528703Z\",\n      \"Annotations\": null\n    }\n    ]\n}\n```\n\n### 二、启用审计日志\n\n当前的审计日志支持两种收集方式：保存为日志文件和调用自定义的 webhook，在 v1.13 中还支持动态的 webhook。\n\n#### 1、将审计日志以 json 格式保存到本地文件\n\napiserver 配置文件的 KUBE_API_ARGS 中需要添加如下参数：\n```\n--audit-policy-file=/etc/kubernetes/audit-policy.yaml --audit-log-path=/var/log/kube-audit --audit-log-format=json\n```\n\n日志保存到本地后再通过 fluentd 等其他组件进行收集。\n还有其他几个选项可以指定保留审计日志文件的最大天数、文件的最大数量、文件的大小等。\n\n#### 2、将审计日志打到后端指定的 webhook\n\n```\n--audit-policy-file=/etc/kubernetes/audit-policy.yaml --audit-webhook-config-file=/etc/kubernetes/audit-webhook-kubeconfig\n```\n\nwebhook 配置文件实际上是一个 kubeconfig，apiserver 会将审计日志发送 到指定的 webhook 后，webhook 接收到日志后可以再分发到 kafka 或其他组件进行收集。\n\n`audit-webhook-kubeconfig` 示例：\n```\napiVersion: v1\nclusters:\n- cluster:\n    server: http://127.0.0.1:8081/audit/webhook\n  name: metric\ncontexts:\n- context:\n    cluster: metric\n    user: \"\"\n  name: default-context\ncurrent-context: default-context\nkind: Config\npreferences: {}\nusers: []\n```\n\n前面提到过，apiserver 的每一个请求会记录三个阶段的审计日志，但是在实际中并不是需要所有的审计日志，官方也说明了启用审计日志会增加 apiserver 对内存的使用量。\n\n> Note: The audit logging feature increases the memory consumption of the API server because some context required for auditing is stored for each request. Additionally, memory consumption depends on the audit logging configuration.\n\n\n`audit-policy.yaml` 配置示例：\n\n```\napiVersion: audit.k8s.io/v1\nkind: Policy\n# ResponseStarted 阶段不记录\nomitStages:\n  - \"ResponseStarted\"\nrules:\n  # 记录用户对 pod 和 statefulset 的操作\n  - level: RequestResponse\n    resources:\n    - group: \"\"\n      resources: [\"pods\",\"pods/status\"]\n    - group: \"apps\"\n      resources: [\"statefulsets\",\"statefulsets/scale\"]\n  # kube-controller-manager、kube-scheduler 等已经认证过身份的请求不需要记录\n  - level: None\n    userGroups: [\"system:authenticated\"]\n    nonResourceURLs:\n    - \"/api*\"\n    - \"/version\"\n  # 对 config、secret、token 等认证信息不记录请求体和返回体\n  - level: Metadata\n    resources:\n    - group: \"\" # core API group\n      resources: [\"secrets\", \"configmaps\"]\n```\n\n官方提供两个参考示例：\n\n- [Use fluentd to collect and distribute audit events from log file](https://kubernetes.io/zh/docs/tasks/debug-application-cluster/audit/#%E6%97%A5%E5%BF%97%E9%80%89%E6%8B%A9%E5%99%A8%E7%A4%BA%E4%BE%8B)\n- [Use logstash to collect and distribute audit events from webhook backend](https://kubernetes.io/docs/tasks/debug-application-cluster/audit/#use-logstash-to-collect-and-distribute-audit-events-from-webhook-backend)\n\n#### 3、subresource 说明\n\n\nkubernetes 每个资源对象都有 subresource,通过调用 master 的 api 可以获取 kubernetes 中所有的 resource 以及对应的 subresource,比如 pod 有 logs、exec 等 subresource。\n\n\n![](https://upload-images.jianshu.io/upload_images/1262158-4450a01f65b3f76d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n```\n获取所有 resource（ 1.10 之后使用）：\n$ curl  127.0.0.1:8080/openapi/v2\n```\n\n参考：[https://kubernetes.io/docs/concepts/overview/kubernetes-api/](https://kubernetes.io/docs/concepts/overview/kubernetes-api/)\n\n### 三、webhook 的一个简单示例\n\n```\npackage main\n\nimport (\n\t\"encoding/json\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\n\t\"github.com/emicklei/go-restful\"\n\t\"github.com/gosoon/glog\"\n\t\"k8s.io/apiserver/pkg/apis/audit\"\n)\n\nfunc main() {\n\t// NewContainer creates a new Container using a new ServeMux and default router (CurlyRouter)\n\tcontainer := restful.NewContainer()\n\tws := new(restful.WebService)\n\tws.Path(\"/audit\").\n\t\tConsumes(restful.MIME_JSON).\n\t\tProduces(restful.MIME_JSON)\n\tws.Route(ws.POST(\"/webhook\").To(AuditWebhook))\n\n\t//WebService ws2被添加到container2中\n\tcontainer.Add(ws)\n\tserver := &http.Server{\n\t\tAddr:    \":8081\",\n\t\tHandler: container,\n\t}\n\t//go consumer()\n\tlog.Fatal(server.ListenAndServe())\n}\n\nfunc AuditWebhook(req *restful.Request, resp *restful.Response) {\n\tbody, err := ioutil.ReadAll(req.Request.Body)\n\tif err != nil {\n\t\tglog.Errorf(\"read body err is: %v\", err)\n\t}\n\tvar eventList audit.EventList\n\terr = json.Unmarshal(body, &eventList)\n\tif err != nil {\n\t\tglog.Errorf(\"unmarshal failed with:%v,body is :\\n\", err, string(body))\n\t\treturn\n\t}\n\tfor _, event := range eventList.Items {\n\t\tjsonBytes, err := json.Marshal(event)\n\t\tif err != nil {\n\t\t\tglog.Infof(\"marshal failed with:%v,event is \\n %+v\", err, event)\n\t\t}\n\t\t// 消费日志\n\t\tasyncProducer(string(jsonBytes))\n\t}\n\tresp.AddHeader(\"Content-Type\", \"application/json\")\n\tresp.WriteEntity(\"success\")\n}\n```\n\n> 完整代码请参考：[https://github.com/gosoon/k8s-audit-webhook](https://github.com/gosoon/k8s-audit-webhook)\n\n\n### 四、总结\n\n本文主要介绍了 kubernetes 的日志审计功能，kubernetes 最近也被爆出多个安全漏洞，安全问题是每个团队不可忽视的，kubernetes 虽然被多数公司用作私有云，但日志审计也是不可或缺的。\n\n\n----\n\n参考：\n[https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/](https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/)\n[ttps://kubernetes.io/docs/tasks/debug-application-cluster/audit/](https://kubernetes.io/docs/tasks/debug-application-cluster/audit/)\n[阿里云 Kubernetes 审计日志方案](https://yq.aliyun.com/articles/686982?utm_content=g_1000040449)\n\n","slug":"k8s-audit-webhook","published":1,"updated":"2019-06-01T14:26:16.307Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjycnhjlu000a5vwno59eyw8g","content":"<p>审计日志可以记录所有对 apiserver 接口的调用，让我们能够非常清晰的知道集群到底发生了什么事情，通过记录的日志可以查到所发生的事件、操作的用户和时间。kubernetes 在 v1.7 中支持了日志审计功能（Alpha），在 v1.8 中为 Beta 版本，v1.12 为 GA 版本。</p>\n<blockquote>\n<p>kubernetes feature-gates 中的功能 Alpha 版本默认为 false，到 Beta 版本时默认为 true，所以 v1.8 会默认启用审计日志的功能。</p>\n</blockquote>\n<h3 id=\"一、审计日志的策略\"><a href=\"#一、审计日志的策略\" class=\"headerlink\" title=\"一、审计日志的策略\"></a>一、审计日志的策略</h3><h4 id=\"1、日志记录阶段\"><a href=\"#1、日志记录阶段\" class=\"headerlink\" title=\"1、日志记录阶段\"></a>1、日志记录阶段</h4><p>kube-apiserver 是负责接收及相应用户请求的一个组件，每一个请求都会有几个阶段，每个阶段都有对应的日志，当前支持的阶段有：</p>\n<ul>\n<li>RequestReceived - apiserver 在接收到请求后且在将该请求下发之前会生成对应的审计日志。</li>\n<li>ResponseStarted - 在响应 header 发送后并在响应 body 发送前生成日志。这个阶段仅为长时间运行的请求生成（例如 watch）。</li>\n<li>ResponseComplete - 当响应 body 发送完并且不再发送数据。</li>\n<li>Panic - 当有 panic 发生时生成。</li>\n</ul>\n<p>也就是说对 apiserver 的每一个请求理论上会有三个阶段的审计日志生成。</p>\n<h4 id=\"2、日志记录级别\"><a href=\"#2、日志记录级别\" class=\"headerlink\" title=\"2、日志记录级别\"></a>2、日志记录级别</h4><p>当前支持的日志记录级别有：</p>\n<ul>\n<li>None - 不记录日志。</li>\n<li>Metadata - 只记录 Request 的一些 metadata (例如 user, timestamp, resource, verb 等)，但不记录 Request 或 Response 的body。</li>\n<li>Request - 记录 Request 的 metadata 和 body。</li>\n<li>RequestResponse - 最全记录方式，会记录所有的 metadata、Request 和 Response 的 body。</li>\n</ul>\n<h4 id=\"3、日志记录策略\"><a href=\"#3、日志记录策略\" class=\"headerlink\" title=\"3、日志记录策略\"></a>3、日志记录策略</h4><p>在记录日志的时候尽量只记录所需要的信息，不需要的日志尽可能不记录，避免造成系统资源的浪费。</p>\n<ul>\n<li>一个请求不要重复记录，每个请求有三个阶段，只记录其中需要的阶段</li>\n<li>不要记录所有的资源，不要记录一个资源的所有子资源</li>\n<li>系统的请求不需要记录，kubelet、kube-proxy、kube-scheduler、kube-controller-manager 等对 kube-apiserver 的请求不需要记录</li>\n<li>对一些认证信息（secerts、configmaps、token 等）的 body 不记录 </li>\n</ul>\n<p>k8s 审计日志的一个示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;kind&quot;: &quot;EventList&quot;,</span><br><span class=\"line\">  &quot;apiVersion&quot;: &quot;audit.k8s.io/v1beta1&quot;,</span><br><span class=\"line\">  &quot;Items&quot;: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;Level&quot;: &quot;Request&quot;,</span><br><span class=\"line\">      &quot;AuditID&quot;: &quot;793e7ae2-5ca7-4ad3-a632-19708d2f8265&quot;,</span><br><span class=\"line\">      &quot;Stage&quot;: &quot;RequestReceived&quot;,</span><br><span class=\"line\">      &quot;RequestURI&quot;: &quot;/api/v1/namespaces/default/pods/test-pre-sf-de7cc-0&quot;,</span><br><span class=\"line\">      &quot;Verb&quot;: &quot;get&quot;,</span><br><span class=\"line\">      &quot;User&quot;: &#123;</span><br><span class=\"line\">        &quot;Username&quot;: &quot;system:unsecured&quot;,</span><br><span class=\"line\">        &quot;UID&quot;: &quot;&quot;,</span><br><span class=\"line\">        &quot;Groups&quot;: [</span><br><span class=\"line\">          &quot;system:masters&quot;,</span><br><span class=\"line\">          &quot;system:authenticated&quot;</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        &quot;Extra&quot;: null</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &quot;ImpersonatedUser&quot;: null,</span><br><span class=\"line\">      &quot;SourceIPs&quot;: [</span><br><span class=\"line\">        &quot;192.168.1.11&quot;</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      &quot;UserAgent&quot;: &quot;kube-scheduler/v1.12.2 (linux/amd64) kubernetes/73f3294/scheduler&quot;,</span><br><span class=\"line\">      &quot;ObjectRef&quot;: &#123;</span><br><span class=\"line\">        &quot;Resource&quot;: &quot;pods&quot;,</span><br><span class=\"line\">        &quot;Namespace&quot;: &quot;default&quot;,</span><br><span class=\"line\">        &quot;Name&quot;: &quot;test-pre-sf-de7cc-0&quot;,</span><br><span class=\"line\">        &quot;UID&quot;: &quot;&quot;,</span><br><span class=\"line\">        &quot;APIGroup&quot;: &quot;&quot;,</span><br><span class=\"line\">        &quot;APIVersion&quot;: &quot;v1&quot;,</span><br><span class=\"line\">        &quot;ResourceVersion&quot;: &quot;&quot;,</span><br><span class=\"line\">        &quot;Subresource&quot;: &quot;&quot;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &quot;ResponseStatus&quot;: null,</span><br><span class=\"line\">      &quot;RequestObject&quot;: null,</span><br><span class=\"line\">      &quot;ResponseObject&quot;: null,</span><br><span class=\"line\">      &quot;RequestReceivedTimestamp&quot;: &quot;2019-01-11T06:51:43.528703Z&quot;,</span><br><span class=\"line\">      &quot;StageTimestamp&quot;: &quot;2019-01-11T06:51:43.528703Z&quot;,</span><br><span class=\"line\">      &quot;Annotations&quot;: null</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"二、启用审计日志\"><a href=\"#二、启用审计日志\" class=\"headerlink\" title=\"二、启用审计日志\"></a>二、启用审计日志</h3><p>当前的审计日志支持两种收集方式：保存为日志文件和调用自定义的 webhook，在 v1.13 中还支持动态的 webhook。</p>\n<h4 id=\"1、将审计日志以-json-格式保存到本地文件\"><a href=\"#1、将审计日志以-json-格式保存到本地文件\" class=\"headerlink\" title=\"1、将审计日志以 json 格式保存到本地文件\"></a>1、将审计日志以 json 格式保存到本地文件</h4><p>apiserver 配置文件的 KUBE_API_ARGS 中需要添加如下参数：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--audit-policy-file=/etc/kubernetes/audit-policy.yaml --audit-log-path=/var/log/kube-audit --audit-log-format=json</span><br></pre></td></tr></table></figure></p>\n<p>日志保存到本地后再通过 fluentd 等其他组件进行收集。<br>还有其他几个选项可以指定保留审计日志文件的最大天数、文件的最大数量、文件的大小等。</p>\n<h4 id=\"2、将审计日志打到后端指定的-webhook\"><a href=\"#2、将审计日志打到后端指定的-webhook\" class=\"headerlink\" title=\"2、将审计日志打到后端指定的 webhook\"></a>2、将审计日志打到后端指定的 webhook</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--audit-policy-file=/etc/kubernetes/audit-policy.yaml --audit-webhook-config-file=/etc/kubernetes/audit-webhook-kubeconfig</span><br></pre></td></tr></table></figure>\n<p>webhook 配置文件实际上是一个 kubeconfig，apiserver 会将审计日志发送 到指定的 webhook 后，webhook 接收到日志后可以再分发到 kafka 或其他组件进行收集。</p>\n<p><code>audit-webhook-kubeconfig</code> 示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">clusters:</span><br><span class=\"line\">- cluster:</span><br><span class=\"line\">    server: http://127.0.0.1:8081/audit/webhook</span><br><span class=\"line\">  name: metric</span><br><span class=\"line\">contexts:</span><br><span class=\"line\">- context:</span><br><span class=\"line\">    cluster: metric</span><br><span class=\"line\">    user: &quot;&quot;</span><br><span class=\"line\">  name: default-context</span><br><span class=\"line\">current-context: default-context</span><br><span class=\"line\">kind: Config</span><br><span class=\"line\">preferences: &#123;&#125;</span><br><span class=\"line\">users: []</span><br></pre></td></tr></table></figure></p>\n<p>前面提到过，apiserver 的每一个请求会记录三个阶段的审计日志，但是在实际中并不是需要所有的审计日志，官方也说明了启用审计日志会增加 apiserver 对内存的使用量。</p>\n<blockquote>\n<p>Note: The audit logging feature increases the memory consumption of the API server because some context required for auditing is stored for each request. Additionally, memory consumption depends on the audit logging configuration.</p>\n</blockquote>\n<p><code>audit-policy.yaml</code> 配置示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: audit.k8s.io/v1</span><br><span class=\"line\">kind: Policy</span><br><span class=\"line\"># ResponseStarted 阶段不记录</span><br><span class=\"line\">omitStages:</span><br><span class=\"line\">  - &quot;ResponseStarted&quot;</span><br><span class=\"line\">rules:</span><br><span class=\"line\">  # 记录用户对 pod 和 statefulset 的操作</span><br><span class=\"line\">  - level: RequestResponse</span><br><span class=\"line\">    resources:</span><br><span class=\"line\">    - group: &quot;&quot;</span><br><span class=\"line\">      resources: [&quot;pods&quot;,&quot;pods/status&quot;]</span><br><span class=\"line\">    - group: &quot;apps&quot;</span><br><span class=\"line\">      resources: [&quot;statefulsets&quot;,&quot;statefulsets/scale&quot;]</span><br><span class=\"line\">  # kube-controller-manager、kube-scheduler 等已经认证过身份的请求不需要记录</span><br><span class=\"line\">  - level: None</span><br><span class=\"line\">    userGroups: [&quot;system:authenticated&quot;]</span><br><span class=\"line\">    nonResourceURLs:</span><br><span class=\"line\">    - &quot;/api*&quot;</span><br><span class=\"line\">    - &quot;/version&quot;</span><br><span class=\"line\">  # 对 config、secret、token 等认证信息不记录请求体和返回体</span><br><span class=\"line\">  - level: Metadata</span><br><span class=\"line\">    resources:</span><br><span class=\"line\">    - group: &quot;&quot; # core API group</span><br><span class=\"line\">      resources: [&quot;secrets&quot;, &quot;configmaps&quot;]</span><br></pre></td></tr></table></figure>\n<p>官方提供两个参考示例：</p>\n<ul>\n<li><a href=\"https://kubernetes.io/zh/docs/tasks/debug-application-cluster/audit/#%E6%97%A5%E5%BF%97%E9%80%89%E6%8B%A9%E5%99%A8%E7%A4%BA%E4%BE%8B\" target=\"_blank\" rel=\"noopener\">Use fluentd to collect and distribute audit events from log file</a></li>\n<li><a href=\"https://kubernetes.io/docs/tasks/debug-application-cluster/audit/#use-logstash-to-collect-and-distribute-audit-events-from-webhook-backend\" target=\"_blank\" rel=\"noopener\">Use logstash to collect and distribute audit events from webhook backend</a></li>\n</ul>\n<h4 id=\"3、subresource-说明\"><a href=\"#3、subresource-说明\" class=\"headerlink\" title=\"3、subresource 说明\"></a>3、subresource 说明</h4><p>kubernetes 每个资源对象都有 subresource,通过调用 master 的 api 可以获取 kubernetes 中所有的 resource 以及对应的 subresource,比如 pod 有 logs、exec 等 subresource。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/1262158-4450a01f65b3f76d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">获取所有 resource（ 1.10 之后使用）：</span><br><span class=\"line\">$ curl  127.0.0.1:8080/openapi/v2</span><br></pre></td></tr></table></figure>\n<p>参考：<a href=\"https://kubernetes.io/docs/concepts/overview/kubernetes-api/\" target=\"_blank\" rel=\"noopener\">https://kubernetes.io/docs/concepts/overview/kubernetes-api/</a></p>\n<h3 id=\"三、webhook-的一个简单示例\"><a href=\"#三、webhook-的一个简单示例\" class=\"headerlink\" title=\"三、webhook 的一个简单示例\"></a>三、webhook 的一个简单示例</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;encoding/json&quot;</span><br><span class=\"line\">\t&quot;io/ioutil&quot;</span><br><span class=\"line\">\t&quot;log&quot;</span><br><span class=\"line\">\t&quot;net/http&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&quot;github.com/emicklei/go-restful&quot;</span><br><span class=\"line\">\t&quot;github.com/gosoon/glog&quot;</span><br><span class=\"line\">\t&quot;k8s.io/apiserver/pkg/apis/audit&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\t// NewContainer creates a new Container using a new ServeMux and default router (CurlyRouter)</span><br><span class=\"line\">\tcontainer := restful.NewContainer()</span><br><span class=\"line\">\tws := new(restful.WebService)</span><br><span class=\"line\">\tws.Path(&quot;/audit&quot;).</span><br><span class=\"line\">\t\tConsumes(restful.MIME_JSON).</span><br><span class=\"line\">\t\tProduces(restful.MIME_JSON)</span><br><span class=\"line\">\tws.Route(ws.POST(&quot;/webhook&quot;).To(AuditWebhook))</span><br><span class=\"line\"></span><br><span class=\"line\">\t//WebService ws2被添加到container2中</span><br><span class=\"line\">\tcontainer.Add(ws)</span><br><span class=\"line\">\tserver := &amp;http.Server&#123;</span><br><span class=\"line\">\t\tAddr:    &quot;:8081&quot;,</span><br><span class=\"line\">\t\tHandler: container,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t//go consumer()</span><br><span class=\"line\">\tlog.Fatal(server.ListenAndServe())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func AuditWebhook(req *restful.Request, resp *restful.Response) &#123;</span><br><span class=\"line\">\tbody, err := ioutil.ReadAll(req.Request.Body)</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\tglog.Errorf(&quot;read body err is: %v&quot;, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvar eventList audit.EventList</span><br><span class=\"line\">\terr = json.Unmarshal(body, &amp;eventList)</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\tglog.Errorf(&quot;unmarshal failed with:%v,body is :\\n&quot;, err, string(body))</span><br><span class=\"line\">\t\treturn</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfor _, event := range eventList.Items &#123;</span><br><span class=\"line\">\t\tjsonBytes, err := json.Marshal(event)</span><br><span class=\"line\">\t\tif err != nil &#123;</span><br><span class=\"line\">\t\t\tglog.Infof(&quot;marshal failed with:%v,event is \\n %+v&quot;, err, event)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t// 消费日志</span><br><span class=\"line\">\t\tasyncProducer(string(jsonBytes))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tresp.AddHeader(&quot;Content-Type&quot;, &quot;application/json&quot;)</span><br><span class=\"line\">\tresp.WriteEntity(&quot;success&quot;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>完整代码请参考：<a href=\"https://github.com/gosoon/k8s-audit-webhook\" target=\"_blank\" rel=\"noopener\">https://github.com/gosoon/k8s-audit-webhook</a></p>\n</blockquote>\n<h3 id=\"四、总结\"><a href=\"#四、总结\" class=\"headerlink\" title=\"四、总结\"></a>四、总结</h3><p>本文主要介绍了 kubernetes 的日志审计功能，kubernetes 最近也被爆出多个安全漏洞，安全问题是每个团队不可忽视的，kubernetes 虽然被多数公司用作私有云，但日志审计也是不可或缺的。</p>\n<hr>\n<p>参考：<br><a href=\"https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/\" target=\"_blank\" rel=\"noopener\">https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/</a><br><a href=\"https://kubernetes.io/docs/tasks/debug-application-cluster/audit/\" target=\"_blank\" rel=\"noopener\">ttps://kubernetes.io/docs/tasks/debug-application-cluster/audit/</a><br><a href=\"https://yq.aliyun.com/articles/686982?utm_content=g_1000040449\" target=\"_blank\" rel=\"noopener\">阿里云 Kubernetes 审计日志方案</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>审计日志可以记录所有对 apiserver 接口的调用，让我们能够非常清晰的知道集群到底发生了什么事情，通过记录的日志可以查到所发生的事件、操作的用户和时间。kubernetes 在 v1.7 中支持了日志审计功能（Alpha），在 v1.8 中为 Beta 版本，v1.12 为 GA 版本。</p>\n<blockquote>\n<p>kubernetes feature-gates 中的功能 Alpha 版本默认为 false，到 Beta 版本时默认为 true，所以 v1.8 会默认启用审计日志的功能。</p>\n</blockquote>\n<h3 id=\"一、审计日志的策略\"><a href=\"#一、审计日志的策略\" class=\"headerlink\" title=\"一、审计日志的策略\"></a>一、审计日志的策略</h3><h4 id=\"1、日志记录阶段\"><a href=\"#1、日志记录阶段\" class=\"headerlink\" title=\"1、日志记录阶段\"></a>1、日志记录阶段</h4><p>kube-apiserver 是负责接收及相应用户请求的一个组件，每一个请求都会有几个阶段，每个阶段都有对应的日志，当前支持的阶段有：</p>\n<ul>\n<li>RequestReceived - apiserver 在接收到请求后且在将该请求下发之前会生成对应的审计日志。</li>\n<li>ResponseStarted - 在响应 header 发送后并在响应 body 发送前生成日志。这个阶段仅为长时间运行的请求生成（例如 watch）。</li>\n<li>ResponseComplete - 当响应 body 发送完并且不再发送数据。</li>\n<li>Panic - 当有 panic 发生时生成。</li>\n</ul>\n<p>也就是说对 apiserver 的每一个请求理论上会有三个阶段的审计日志生成。</p>\n<h4 id=\"2、日志记录级别\"><a href=\"#2、日志记录级别\" class=\"headerlink\" title=\"2、日志记录级别\"></a>2、日志记录级别</h4><p>当前支持的日志记录级别有：</p>\n<ul>\n<li>None - 不记录日志。</li>\n<li>Metadata - 只记录 Request 的一些 metadata (例如 user, timestamp, resource, verb 等)，但不记录 Request 或 Response 的body。</li>\n<li>Request - 记录 Request 的 metadata 和 body。</li>\n<li>RequestResponse - 最全记录方式，会记录所有的 metadata、Request 和 Response 的 body。</li>\n</ul>\n<h4 id=\"3、日志记录策略\"><a href=\"#3、日志记录策略\" class=\"headerlink\" title=\"3、日志记录策略\"></a>3、日志记录策略</h4><p>在记录日志的时候尽量只记录所需要的信息，不需要的日志尽可能不记录，避免造成系统资源的浪费。</p>\n<ul>\n<li>一个请求不要重复记录，每个请求有三个阶段，只记录其中需要的阶段</li>\n<li>不要记录所有的资源，不要记录一个资源的所有子资源</li>\n<li>系统的请求不需要记录，kubelet、kube-proxy、kube-scheduler、kube-controller-manager 等对 kube-apiserver 的请求不需要记录</li>\n<li>对一些认证信息（secerts、configmaps、token 等）的 body 不记录 </li>\n</ul>\n<p>k8s 审计日志的一个示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;kind&quot;: &quot;EventList&quot;,</span><br><span class=\"line\">  &quot;apiVersion&quot;: &quot;audit.k8s.io/v1beta1&quot;,</span><br><span class=\"line\">  &quot;Items&quot;: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;Level&quot;: &quot;Request&quot;,</span><br><span class=\"line\">      &quot;AuditID&quot;: &quot;793e7ae2-5ca7-4ad3-a632-19708d2f8265&quot;,</span><br><span class=\"line\">      &quot;Stage&quot;: &quot;RequestReceived&quot;,</span><br><span class=\"line\">      &quot;RequestURI&quot;: &quot;/api/v1/namespaces/default/pods/test-pre-sf-de7cc-0&quot;,</span><br><span class=\"line\">      &quot;Verb&quot;: &quot;get&quot;,</span><br><span class=\"line\">      &quot;User&quot;: &#123;</span><br><span class=\"line\">        &quot;Username&quot;: &quot;system:unsecured&quot;,</span><br><span class=\"line\">        &quot;UID&quot;: &quot;&quot;,</span><br><span class=\"line\">        &quot;Groups&quot;: [</span><br><span class=\"line\">          &quot;system:masters&quot;,</span><br><span class=\"line\">          &quot;system:authenticated&quot;</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        &quot;Extra&quot;: null</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &quot;ImpersonatedUser&quot;: null,</span><br><span class=\"line\">      &quot;SourceIPs&quot;: [</span><br><span class=\"line\">        &quot;192.168.1.11&quot;</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      &quot;UserAgent&quot;: &quot;kube-scheduler/v1.12.2 (linux/amd64) kubernetes/73f3294/scheduler&quot;,</span><br><span class=\"line\">      &quot;ObjectRef&quot;: &#123;</span><br><span class=\"line\">        &quot;Resource&quot;: &quot;pods&quot;,</span><br><span class=\"line\">        &quot;Namespace&quot;: &quot;default&quot;,</span><br><span class=\"line\">        &quot;Name&quot;: &quot;test-pre-sf-de7cc-0&quot;,</span><br><span class=\"line\">        &quot;UID&quot;: &quot;&quot;,</span><br><span class=\"line\">        &quot;APIGroup&quot;: &quot;&quot;,</span><br><span class=\"line\">        &quot;APIVersion&quot;: &quot;v1&quot;,</span><br><span class=\"line\">        &quot;ResourceVersion&quot;: &quot;&quot;,</span><br><span class=\"line\">        &quot;Subresource&quot;: &quot;&quot;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &quot;ResponseStatus&quot;: null,</span><br><span class=\"line\">      &quot;RequestObject&quot;: null,</span><br><span class=\"line\">      &quot;ResponseObject&quot;: null,</span><br><span class=\"line\">      &quot;RequestReceivedTimestamp&quot;: &quot;2019-01-11T06:51:43.528703Z&quot;,</span><br><span class=\"line\">      &quot;StageTimestamp&quot;: &quot;2019-01-11T06:51:43.528703Z&quot;,</span><br><span class=\"line\">      &quot;Annotations&quot;: null</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"二、启用审计日志\"><a href=\"#二、启用审计日志\" class=\"headerlink\" title=\"二、启用审计日志\"></a>二、启用审计日志</h3><p>当前的审计日志支持两种收集方式：保存为日志文件和调用自定义的 webhook，在 v1.13 中还支持动态的 webhook。</p>\n<h4 id=\"1、将审计日志以-json-格式保存到本地文件\"><a href=\"#1、将审计日志以-json-格式保存到本地文件\" class=\"headerlink\" title=\"1、将审计日志以 json 格式保存到本地文件\"></a>1、将审计日志以 json 格式保存到本地文件</h4><p>apiserver 配置文件的 KUBE_API_ARGS 中需要添加如下参数：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--audit-policy-file=/etc/kubernetes/audit-policy.yaml --audit-log-path=/var/log/kube-audit --audit-log-format=json</span><br></pre></td></tr></table></figure></p>\n<p>日志保存到本地后再通过 fluentd 等其他组件进行收集。<br>还有其他几个选项可以指定保留审计日志文件的最大天数、文件的最大数量、文件的大小等。</p>\n<h4 id=\"2、将审计日志打到后端指定的-webhook\"><a href=\"#2、将审计日志打到后端指定的-webhook\" class=\"headerlink\" title=\"2、将审计日志打到后端指定的 webhook\"></a>2、将审计日志打到后端指定的 webhook</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--audit-policy-file=/etc/kubernetes/audit-policy.yaml --audit-webhook-config-file=/etc/kubernetes/audit-webhook-kubeconfig</span><br></pre></td></tr></table></figure>\n<p>webhook 配置文件实际上是一个 kubeconfig，apiserver 会将审计日志发送 到指定的 webhook 后，webhook 接收到日志后可以再分发到 kafka 或其他组件进行收集。</p>\n<p><code>audit-webhook-kubeconfig</code> 示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">clusters:</span><br><span class=\"line\">- cluster:</span><br><span class=\"line\">    server: http://127.0.0.1:8081/audit/webhook</span><br><span class=\"line\">  name: metric</span><br><span class=\"line\">contexts:</span><br><span class=\"line\">- context:</span><br><span class=\"line\">    cluster: metric</span><br><span class=\"line\">    user: &quot;&quot;</span><br><span class=\"line\">  name: default-context</span><br><span class=\"line\">current-context: default-context</span><br><span class=\"line\">kind: Config</span><br><span class=\"line\">preferences: &#123;&#125;</span><br><span class=\"line\">users: []</span><br></pre></td></tr></table></figure></p>\n<p>前面提到过，apiserver 的每一个请求会记录三个阶段的审计日志，但是在实际中并不是需要所有的审计日志，官方也说明了启用审计日志会增加 apiserver 对内存的使用量。</p>\n<blockquote>\n<p>Note: The audit logging feature increases the memory consumption of the API server because some context required for auditing is stored for each request. Additionally, memory consumption depends on the audit logging configuration.</p>\n</blockquote>\n<p><code>audit-policy.yaml</code> 配置示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: audit.k8s.io/v1</span><br><span class=\"line\">kind: Policy</span><br><span class=\"line\"># ResponseStarted 阶段不记录</span><br><span class=\"line\">omitStages:</span><br><span class=\"line\">  - &quot;ResponseStarted&quot;</span><br><span class=\"line\">rules:</span><br><span class=\"line\">  # 记录用户对 pod 和 statefulset 的操作</span><br><span class=\"line\">  - level: RequestResponse</span><br><span class=\"line\">    resources:</span><br><span class=\"line\">    - group: &quot;&quot;</span><br><span class=\"line\">      resources: [&quot;pods&quot;,&quot;pods/status&quot;]</span><br><span class=\"line\">    - group: &quot;apps&quot;</span><br><span class=\"line\">      resources: [&quot;statefulsets&quot;,&quot;statefulsets/scale&quot;]</span><br><span class=\"line\">  # kube-controller-manager、kube-scheduler 等已经认证过身份的请求不需要记录</span><br><span class=\"line\">  - level: None</span><br><span class=\"line\">    userGroups: [&quot;system:authenticated&quot;]</span><br><span class=\"line\">    nonResourceURLs:</span><br><span class=\"line\">    - &quot;/api*&quot;</span><br><span class=\"line\">    - &quot;/version&quot;</span><br><span class=\"line\">  # 对 config、secret、token 等认证信息不记录请求体和返回体</span><br><span class=\"line\">  - level: Metadata</span><br><span class=\"line\">    resources:</span><br><span class=\"line\">    - group: &quot;&quot; # core API group</span><br><span class=\"line\">      resources: [&quot;secrets&quot;, &quot;configmaps&quot;]</span><br></pre></td></tr></table></figure>\n<p>官方提供两个参考示例：</p>\n<ul>\n<li><a href=\"https://kubernetes.io/zh/docs/tasks/debug-application-cluster/audit/#%E6%97%A5%E5%BF%97%E9%80%89%E6%8B%A9%E5%99%A8%E7%A4%BA%E4%BE%8B\" target=\"_blank\" rel=\"noopener\">Use fluentd to collect and distribute audit events from log file</a></li>\n<li><a href=\"https://kubernetes.io/docs/tasks/debug-application-cluster/audit/#use-logstash-to-collect-and-distribute-audit-events-from-webhook-backend\" target=\"_blank\" rel=\"noopener\">Use logstash to collect and distribute audit events from webhook backend</a></li>\n</ul>\n<h4 id=\"3、subresource-说明\"><a href=\"#3、subresource-说明\" class=\"headerlink\" title=\"3、subresource 说明\"></a>3、subresource 说明</h4><p>kubernetes 每个资源对象都有 subresource,通过调用 master 的 api 可以获取 kubernetes 中所有的 resource 以及对应的 subresource,比如 pod 有 logs、exec 等 subresource。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/1262158-4450a01f65b3f76d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">获取所有 resource（ 1.10 之后使用）：</span><br><span class=\"line\">$ curl  127.0.0.1:8080/openapi/v2</span><br></pre></td></tr></table></figure>\n<p>参考：<a href=\"https://kubernetes.io/docs/concepts/overview/kubernetes-api/\" target=\"_blank\" rel=\"noopener\">https://kubernetes.io/docs/concepts/overview/kubernetes-api/</a></p>\n<h3 id=\"三、webhook-的一个简单示例\"><a href=\"#三、webhook-的一个简单示例\" class=\"headerlink\" title=\"三、webhook 的一个简单示例\"></a>三、webhook 的一个简单示例</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;encoding/json&quot;</span><br><span class=\"line\">\t&quot;io/ioutil&quot;</span><br><span class=\"line\">\t&quot;log&quot;</span><br><span class=\"line\">\t&quot;net/http&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&quot;github.com/emicklei/go-restful&quot;</span><br><span class=\"line\">\t&quot;github.com/gosoon/glog&quot;</span><br><span class=\"line\">\t&quot;k8s.io/apiserver/pkg/apis/audit&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\t// NewContainer creates a new Container using a new ServeMux and default router (CurlyRouter)</span><br><span class=\"line\">\tcontainer := restful.NewContainer()</span><br><span class=\"line\">\tws := new(restful.WebService)</span><br><span class=\"line\">\tws.Path(&quot;/audit&quot;).</span><br><span class=\"line\">\t\tConsumes(restful.MIME_JSON).</span><br><span class=\"line\">\t\tProduces(restful.MIME_JSON)</span><br><span class=\"line\">\tws.Route(ws.POST(&quot;/webhook&quot;).To(AuditWebhook))</span><br><span class=\"line\"></span><br><span class=\"line\">\t//WebService ws2被添加到container2中</span><br><span class=\"line\">\tcontainer.Add(ws)</span><br><span class=\"line\">\tserver := &amp;http.Server&#123;</span><br><span class=\"line\">\t\tAddr:    &quot;:8081&quot;,</span><br><span class=\"line\">\t\tHandler: container,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t//go consumer()</span><br><span class=\"line\">\tlog.Fatal(server.ListenAndServe())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func AuditWebhook(req *restful.Request, resp *restful.Response) &#123;</span><br><span class=\"line\">\tbody, err := ioutil.ReadAll(req.Request.Body)</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\tglog.Errorf(&quot;read body err is: %v&quot;, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvar eventList audit.EventList</span><br><span class=\"line\">\terr = json.Unmarshal(body, &amp;eventList)</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\tglog.Errorf(&quot;unmarshal failed with:%v,body is :\\n&quot;, err, string(body))</span><br><span class=\"line\">\t\treturn</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfor _, event := range eventList.Items &#123;</span><br><span class=\"line\">\t\tjsonBytes, err := json.Marshal(event)</span><br><span class=\"line\">\t\tif err != nil &#123;</span><br><span class=\"line\">\t\t\tglog.Infof(&quot;marshal failed with:%v,event is \\n %+v&quot;, err, event)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t// 消费日志</span><br><span class=\"line\">\t\tasyncProducer(string(jsonBytes))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tresp.AddHeader(&quot;Content-Type&quot;, &quot;application/json&quot;)</span><br><span class=\"line\">\tresp.WriteEntity(&quot;success&quot;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>完整代码请参考：<a href=\"https://github.com/gosoon/k8s-audit-webhook\" target=\"_blank\" rel=\"noopener\">https://github.com/gosoon/k8s-audit-webhook</a></p>\n</blockquote>\n<h3 id=\"四、总结\"><a href=\"#四、总结\" class=\"headerlink\" title=\"四、总结\"></a>四、总结</h3><p>本文主要介绍了 kubernetes 的日志审计功能，kubernetes 最近也被爆出多个安全漏洞，安全问题是每个团队不可忽视的，kubernetes 虽然被多数公司用作私有云，但日志审计也是不可或缺的。</p>\n<hr>\n<p>参考：<br><a href=\"https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/\" target=\"_blank\" rel=\"noopener\">https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/</a><br><a href=\"https://kubernetes.io/docs/tasks/debug-application-cluster/audit/\" target=\"_blank\" rel=\"noopener\">ttps://kubernetes.io/docs/tasks/debug-application-cluster/audit/</a><br><a href=\"https://yq.aliyun.com/articles/686982?utm_content=g_1000040449\" target=\"_blank\" rel=\"noopener\">阿里云 Kubernetes 审计日志方案</a></p>\n"},{"title":"k8s 中定时任务的实现","date":"2019-02-16T13:59:30.000Z","type":"wait","_content":"k8s 中有许多优秀的包都可以在平时的开发中借鉴与使用，比如，任务的定时轮询、高可用的实现、日志处理、缓存使用等都是独立的包，可以直接引用。本篇文章会介绍 k8s 中定时任务的实现，k8s 中定时任务都是通过 wait 包实现的，wait 包在 k8s 的多个组件中都有用到，以下是 wait 包在 kubelet 中的几处使用：\n\n\n```\t\t\nfunc run(s *options.KubeletServer, kubeDeps *kubelet.Dependencies, stopCh <-chan struct{}) (err error) {\n\t\t...\n\t\t// kubelet 每5分钟一次从 apiserver 获取证书\n\t\tcloseAllConns, err := kubeletcertificate.UpdateTransport(wait.NeverStop, clientConfig, clientCertificateManager, 5*time.Minute)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t\n\t\tcloseAllConns, err := kubeletcertificate.UpdateTransport(wait.NeverStop, clientConfig, clientCertificateManager, 5*time.Minute)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t...\n}\n\n...\n\nfunc startKubelet(k kubelet.Bootstrap, podCfg *config.PodConfig, kubeCfg *kubeletconfiginternal.KubeletConfiguration,   kubeDeps *kubelet.Dependencies, enableServer bool) {\n    // 持续监听 pod 的变化\n    go wait.Until(func() {\n        k.Run(podCfg.Updates())\n    }, 0, wait.NeverStop)\n    ...\n}\n```\n\ngolang 中可以通过 time.Ticker 实现定时任务的执行，但在 k8s 中用了更原生的方式，使用 time.Timer 实现的。time.Ticker 和 time.Timer 的使用区别如下：\n\n- ticker 只要定义完成，从此刻开始计时，不需要任何其他的操作，每隔固定时间都会自动触发。\n- timer 定时器是到了固定时间后会执行一次，仅执行一次\n- 如果 timer 定时器要每隔间隔的时间执行，实现 ticker 的效果，使用 `func (t *Timer) Reset(d Duration) bool`\n \n一个示例：\n\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"sync\"\n\t\"time\"\n)\n\nfunc main() {\n\tvar wg sync.WaitGroup\n\n\ttimer1 := time.NewTimer(2 * time.Second)\n\tticker1 := time.NewTicker(2 * time.Second)\n\n\twg.Add(1)\n\tgo func(t *time.Ticker) {\n\t\tdefer wg.Done()\n\t\tfor {\n\t\t\t<-t.C\n\t\t\tfmt.Println(\"exec ticker\", time.Now().Format(\"2006-01-02 15:04:05\"))\n\t\t}\n\t}(ticker1)\n\n\twg.Add(1)\n\tgo func(t *time.Timer) {\n\t\tdefer wg.Done()\n\t\tfor {\n\t\t\t<-t.C\n\t\t\tfmt.Println(\"exec timer\", time.Now().Format(\"2006-01-02 15:04:05\"))\n\t\t\tt.Reset(2 * time.Second)\n\t\t}\n\t}(timer1)\n\t\n\twg.Wait()\n}\n\n```\n\n### 一、wait 包中的核心代码\n\n\n核心代码（k8s.io/apimachinery/pkg/util/wait/wait.go）：\n\n\n```\nfunc JitterUntil(f func(), period time.Duration, jitterFactor float64, sliding bool, stopCh <-chan struct{}) {\n\tvar t *time.Timer\n\tvar sawTimeout bool\n\n\tfor {\n\t\tselect {\n\t\tcase <-stopCh:\n\t\t\treturn\n\t\tdefault:\n\t\t}\n\n\t\tjitteredPeriod := period\n\t\tif jitterFactor > 0.0 {\n\t\t\tjitteredPeriod = Jitter(period, jitterFactor)\n\t\t}\n\n\t\tif !sliding {\n\t\t\tt = resetOrReuseTimer(t, jitteredPeriod, sawTimeout)\n\t\t}\n\n\t\tfunc() {\n\t\t\tdefer runtime.HandleCrash()\n\t\t\tf()\n\t\t}()\n\n\t\tif sliding {\n\t\t\tt = resetOrReuseTimer(t, jitteredPeriod, sawTimeout)\n\t\t}\n\n\t\tselect {\n\t\tcase <-stopCh:\n\t\t\treturn\n\t\tcase <-t.C:\n\t\t\tsawTimeout = true\n\t\t}\n\t}\n}\n\n...\n\nfunc resetOrReuseTimer(t *time.Timer, d time.Duration, sawTimeout bool) *time.Timer {\n    if t == nil {\n        return time.NewTimer(d)\n    }\n    if !t.Stop() && !sawTimeout {\n        <-t.C\n    }\n    t.Reset(d)\n    return t\n}\n```\n\n几个关键点的说明：\n\n- 1、如果 sliding 为 true，则在 f() 运行之后计算周期。如果为 false，那么 period 包含 f() 的执行时间。\n- 2、在 golang 中 select 没有优先级选择，为了避免额外执行 f(),在每次循环开始后会先判断 stopCh chan。\n\nk8s 中 wait 包其实是对 time.Timer 做了一层封装实现。\n\n### 二、wait 包常用的方法\n\n##### 1、定期执行一个函数，永不停止，可以使用 Forever 方法：\n\nfunc Forever(f func(), period time.Duration)\n\n##### 2、在需要的时候停止循环，那么可以使用下面的方法，增加一个用于停止的 chan 即可，方法定义如下：\n\nfunc Until(f func(), period time.Duration, stopCh <-chan struct{})\n\n上面的第三个参数 stopCh 就是用于退出无限循环的标志，停止的时候我们 close 掉这个 chan 就可以了。\n\n##### 3、有时候，我们还会需要在运行前去检查先决条件，在条件满足的时候才去运行某一任务，这时候可以使用 Poll 方法：\n\nfunc Poll(interval, timeout time.Duration, condition ConditionFunc)\n\n这个函数会以 interval 为间隔，不断去检查 condition 条件是否为真，如果为真则可以继续后续处理；如果指定了 timeout 参数，则该函数也可以只常识指定的时间。\n\n##### 4、PollUntil 方法和上面的类似，但是没有 timeout 参数，多了一个 stopCh 参数，如下所示：\n\nPollUntil(interval time.Duration, condition ConditionFunc, stopCh <-chan struct{}) error\n\n此外还有 PollImmediate 、 PollInfinite 和 PollImmediateInfinite 方法。\n\n### 三、总结\n\n本篇文章主要讲了 k8s 中定时任务的实现与对应包（wait）中方法的使用。通过阅读 k8s 的源代码，可以发现 k8s 中许多功能的实现也都是我们需要在平时工作中用的，其大部分包的性能都是经过大规模考验的，通过使用其相关的工具包不仅能学到大量的编程技巧也能避免自己造轮子。\n\n","source":"_posts/k8s-crontab.md","raw":"---\ntitle: k8s 中定时任务的实现\ndate: 2019-02-16 21:59:30\ntags: [\"crontab\",\"wait\",\"k8s\"]\ntype: \"wait\"\n\n---\nk8s 中有许多优秀的包都可以在平时的开发中借鉴与使用，比如，任务的定时轮询、高可用的实现、日志处理、缓存使用等都是独立的包，可以直接引用。本篇文章会介绍 k8s 中定时任务的实现，k8s 中定时任务都是通过 wait 包实现的，wait 包在 k8s 的多个组件中都有用到，以下是 wait 包在 kubelet 中的几处使用：\n\n\n```\t\t\nfunc run(s *options.KubeletServer, kubeDeps *kubelet.Dependencies, stopCh <-chan struct{}) (err error) {\n\t\t...\n\t\t// kubelet 每5分钟一次从 apiserver 获取证书\n\t\tcloseAllConns, err := kubeletcertificate.UpdateTransport(wait.NeverStop, clientConfig, clientCertificateManager, 5*time.Minute)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t\n\t\tcloseAllConns, err := kubeletcertificate.UpdateTransport(wait.NeverStop, clientConfig, clientCertificateManager, 5*time.Minute)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t...\n}\n\n...\n\nfunc startKubelet(k kubelet.Bootstrap, podCfg *config.PodConfig, kubeCfg *kubeletconfiginternal.KubeletConfiguration,   kubeDeps *kubelet.Dependencies, enableServer bool) {\n    // 持续监听 pod 的变化\n    go wait.Until(func() {\n        k.Run(podCfg.Updates())\n    }, 0, wait.NeverStop)\n    ...\n}\n```\n\ngolang 中可以通过 time.Ticker 实现定时任务的执行，但在 k8s 中用了更原生的方式，使用 time.Timer 实现的。time.Ticker 和 time.Timer 的使用区别如下：\n\n- ticker 只要定义完成，从此刻开始计时，不需要任何其他的操作，每隔固定时间都会自动触发。\n- timer 定时器是到了固定时间后会执行一次，仅执行一次\n- 如果 timer 定时器要每隔间隔的时间执行，实现 ticker 的效果，使用 `func (t *Timer) Reset(d Duration) bool`\n \n一个示例：\n\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"sync\"\n\t\"time\"\n)\n\nfunc main() {\n\tvar wg sync.WaitGroup\n\n\ttimer1 := time.NewTimer(2 * time.Second)\n\tticker1 := time.NewTicker(2 * time.Second)\n\n\twg.Add(1)\n\tgo func(t *time.Ticker) {\n\t\tdefer wg.Done()\n\t\tfor {\n\t\t\t<-t.C\n\t\t\tfmt.Println(\"exec ticker\", time.Now().Format(\"2006-01-02 15:04:05\"))\n\t\t}\n\t}(ticker1)\n\n\twg.Add(1)\n\tgo func(t *time.Timer) {\n\t\tdefer wg.Done()\n\t\tfor {\n\t\t\t<-t.C\n\t\t\tfmt.Println(\"exec timer\", time.Now().Format(\"2006-01-02 15:04:05\"))\n\t\t\tt.Reset(2 * time.Second)\n\t\t}\n\t}(timer1)\n\t\n\twg.Wait()\n}\n\n```\n\n### 一、wait 包中的核心代码\n\n\n核心代码（k8s.io/apimachinery/pkg/util/wait/wait.go）：\n\n\n```\nfunc JitterUntil(f func(), period time.Duration, jitterFactor float64, sliding bool, stopCh <-chan struct{}) {\n\tvar t *time.Timer\n\tvar sawTimeout bool\n\n\tfor {\n\t\tselect {\n\t\tcase <-stopCh:\n\t\t\treturn\n\t\tdefault:\n\t\t}\n\n\t\tjitteredPeriod := period\n\t\tif jitterFactor > 0.0 {\n\t\t\tjitteredPeriod = Jitter(period, jitterFactor)\n\t\t}\n\n\t\tif !sliding {\n\t\t\tt = resetOrReuseTimer(t, jitteredPeriod, sawTimeout)\n\t\t}\n\n\t\tfunc() {\n\t\t\tdefer runtime.HandleCrash()\n\t\t\tf()\n\t\t}()\n\n\t\tif sliding {\n\t\t\tt = resetOrReuseTimer(t, jitteredPeriod, sawTimeout)\n\t\t}\n\n\t\tselect {\n\t\tcase <-stopCh:\n\t\t\treturn\n\t\tcase <-t.C:\n\t\t\tsawTimeout = true\n\t\t}\n\t}\n}\n\n...\n\nfunc resetOrReuseTimer(t *time.Timer, d time.Duration, sawTimeout bool) *time.Timer {\n    if t == nil {\n        return time.NewTimer(d)\n    }\n    if !t.Stop() && !sawTimeout {\n        <-t.C\n    }\n    t.Reset(d)\n    return t\n}\n```\n\n几个关键点的说明：\n\n- 1、如果 sliding 为 true，则在 f() 运行之后计算周期。如果为 false，那么 period 包含 f() 的执行时间。\n- 2、在 golang 中 select 没有优先级选择，为了避免额外执行 f(),在每次循环开始后会先判断 stopCh chan。\n\nk8s 中 wait 包其实是对 time.Timer 做了一层封装实现。\n\n### 二、wait 包常用的方法\n\n##### 1、定期执行一个函数，永不停止，可以使用 Forever 方法：\n\nfunc Forever(f func(), period time.Duration)\n\n##### 2、在需要的时候停止循环，那么可以使用下面的方法，增加一个用于停止的 chan 即可，方法定义如下：\n\nfunc Until(f func(), period time.Duration, stopCh <-chan struct{})\n\n上面的第三个参数 stopCh 就是用于退出无限循环的标志，停止的时候我们 close 掉这个 chan 就可以了。\n\n##### 3、有时候，我们还会需要在运行前去检查先决条件，在条件满足的时候才去运行某一任务，这时候可以使用 Poll 方法：\n\nfunc Poll(interval, timeout time.Duration, condition ConditionFunc)\n\n这个函数会以 interval 为间隔，不断去检查 condition 条件是否为真，如果为真则可以继续后续处理；如果指定了 timeout 参数，则该函数也可以只常识指定的时间。\n\n##### 4、PollUntil 方法和上面的类似，但是没有 timeout 参数，多了一个 stopCh 参数，如下所示：\n\nPollUntil(interval time.Duration, condition ConditionFunc, stopCh <-chan struct{}) error\n\n此外还有 PollImmediate 、 PollInfinite 和 PollImmediateInfinite 方法。\n\n### 三、总结\n\n本篇文章主要讲了 k8s 中定时任务的实现与对应包（wait）中方法的使用。通过阅读 k8s 的源代码，可以发现 k8s 中许多功能的实现也都是我们需要在平时工作中用的，其大部分包的性能都是经过大规模考验的，通过使用其相关的工具包不仅能学到大量的编程技巧也能避免自己造轮子。\n\n","slug":"k8s-crontab","published":1,"updated":"2019-06-01T14:26:16.307Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjycnhjlw000b5vwnqkxi88ju","content":"<p>k8s 中有许多优秀的包都可以在平时的开发中借鉴与使用，比如，任务的定时轮询、高可用的实现、日志处理、缓存使用等都是独立的包，可以直接引用。本篇文章会介绍 k8s 中定时任务的实现，k8s 中定时任务都是通过 wait 包实现的，wait 包在 k8s 的多个组件中都有用到，以下是 wait 包在 kubelet 中的几处使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func run(s *options.KubeletServer, kubeDeps *kubelet.Dependencies, stopCh &lt;-chan struct&#123;&#125;) (err error) &#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t\t// kubelet 每5分钟一次从 apiserver 获取证书</span><br><span class=\"line\">\t\tcloseAllConns, err := kubeletcertificate.UpdateTransport(wait.NeverStop, clientConfig, clientCertificateManager, 5*time.Minute)</span><br><span class=\"line\">\t\tif err != nil &#123;</span><br><span class=\"line\">\t\t\treturn err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tcloseAllConns, err := kubeletcertificate.UpdateTransport(wait.NeverStop, clientConfig, clientCertificateManager, 5*time.Minute)</span><br><span class=\"line\">\t\tif err != nil &#123;</span><br><span class=\"line\">\t\t\treturn err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">func startKubelet(k kubelet.Bootstrap, podCfg *config.PodConfig, kubeCfg *kubeletconfiginternal.KubeletConfiguration,   kubeDeps *kubelet.Dependencies, enableServer bool) &#123;</span><br><span class=\"line\">    // 持续监听 pod 的变化</span><br><span class=\"line\">    go wait.Until(func() &#123;</span><br><span class=\"line\">        k.Run(podCfg.Updates())</span><br><span class=\"line\">    &#125;, 0, wait.NeverStop)</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>golang 中可以通过 time.Ticker 实现定时任务的执行，但在 k8s 中用了更原生的方式，使用 time.Timer 实现的。time.Ticker 和 time.Timer 的使用区别如下：</p>\n<ul>\n<li>ticker 只要定义完成，从此刻开始计时，不需要任何其他的操作，每隔固定时间都会自动触发。</li>\n<li>timer 定时器是到了固定时间后会执行一次，仅执行一次</li>\n<li>如果 timer 定时器要每隔间隔的时间执行，实现 ticker 的效果，使用 <code>func (t *Timer) Reset(d Duration) bool</code></li>\n</ul>\n<p>一个示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;fmt&quot;</span><br><span class=\"line\">\t&quot;sync&quot;</span><br><span class=\"line\">\t&quot;time&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\tvar wg sync.WaitGroup</span><br><span class=\"line\"></span><br><span class=\"line\">\ttimer1 := time.NewTimer(2 * time.Second)</span><br><span class=\"line\">\tticker1 := time.NewTicker(2 * time.Second)</span><br><span class=\"line\"></span><br><span class=\"line\">\twg.Add(1)</span><br><span class=\"line\">\tgo func(t *time.Ticker) &#123;</span><br><span class=\"line\">\t\tdefer wg.Done()</span><br><span class=\"line\">\t\tfor &#123;</span><br><span class=\"line\">\t\t\t&lt;-t.C</span><br><span class=\"line\">\t\t\tfmt.Println(&quot;exec ticker&quot;, time.Now().Format(&quot;2006-01-02 15:04:05&quot;))</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;(ticker1)</span><br><span class=\"line\"></span><br><span class=\"line\">\twg.Add(1)</span><br><span class=\"line\">\tgo func(t *time.Timer) &#123;</span><br><span class=\"line\">\t\tdefer wg.Done()</span><br><span class=\"line\">\t\tfor &#123;</span><br><span class=\"line\">\t\t\t&lt;-t.C</span><br><span class=\"line\">\t\t\tfmt.Println(&quot;exec timer&quot;, time.Now().Format(&quot;2006-01-02 15:04:05&quot;))</span><br><span class=\"line\">\t\t\tt.Reset(2 * time.Second)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;(timer1)</span><br><span class=\"line\">\t</span><br><span class=\"line\">\twg.Wait()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"一、wait-包中的核心代码\"><a href=\"#一、wait-包中的核心代码\" class=\"headerlink\" title=\"一、wait 包中的核心代码\"></a>一、wait 包中的核心代码</h3><p>核心代码（k8s.io/apimachinery/pkg/util/wait/wait.go）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func JitterUntil(f func(), period time.Duration, jitterFactor float64, sliding bool, stopCh &lt;-chan struct&#123;&#125;) &#123;</span><br><span class=\"line\">\tvar t *time.Timer</span><br><span class=\"line\">\tvar sawTimeout bool</span><br><span class=\"line\"></span><br><span class=\"line\">\tfor &#123;</span><br><span class=\"line\">\t\tselect &#123;</span><br><span class=\"line\">\t\tcase &lt;-stopCh:</span><br><span class=\"line\">\t\t\treturn</span><br><span class=\"line\">\t\tdefault:</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tjitteredPeriod := period</span><br><span class=\"line\">\t\tif jitterFactor &gt; 0.0 &#123;</span><br><span class=\"line\">\t\t\tjitteredPeriod = Jitter(period, jitterFactor)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tif !sliding &#123;</span><br><span class=\"line\">\t\t\tt = resetOrReuseTimer(t, jitteredPeriod, sawTimeout)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tfunc() &#123;</span><br><span class=\"line\">\t\t\tdefer runtime.HandleCrash()</span><br><span class=\"line\">\t\t\tf()</span><br><span class=\"line\">\t\t&#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tif sliding &#123;</span><br><span class=\"line\">\t\t\tt = resetOrReuseTimer(t, jitteredPeriod, sawTimeout)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tselect &#123;</span><br><span class=\"line\">\t\tcase &lt;-stopCh:</span><br><span class=\"line\">\t\t\treturn</span><br><span class=\"line\">\t\tcase &lt;-t.C:</span><br><span class=\"line\">\t\t\tsawTimeout = true</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">func resetOrReuseTimer(t *time.Timer, d time.Duration, sawTimeout bool) *time.Timer &#123;</span><br><span class=\"line\">    if t == nil &#123;</span><br><span class=\"line\">        return time.NewTimer(d)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if !t.Stop() &amp;&amp; !sawTimeout &#123;</span><br><span class=\"line\">        &lt;-t.C</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    t.Reset(d)</span><br><span class=\"line\">    return t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>几个关键点的说明：</p>\n<ul>\n<li>1、如果 sliding 为 true，则在 f() 运行之后计算周期。如果为 false，那么 period 包含 f() 的执行时间。</li>\n<li>2、在 golang 中 select 没有优先级选择，为了避免额外执行 f(),在每次循环开始后会先判断 stopCh chan。</li>\n</ul>\n<p>k8s 中 wait 包其实是对 time.Timer 做了一层封装实现。</p>\n<h3 id=\"二、wait-包常用的方法\"><a href=\"#二、wait-包常用的方法\" class=\"headerlink\" title=\"二、wait 包常用的方法\"></a>二、wait 包常用的方法</h3><h5 id=\"1、定期执行一个函数，永不停止，可以使用-Forever-方法：\"><a href=\"#1、定期执行一个函数，永不停止，可以使用-Forever-方法：\" class=\"headerlink\" title=\"1、定期执行一个函数，永不停止，可以使用 Forever 方法：\"></a>1、定期执行一个函数，永不停止，可以使用 Forever 方法：</h5><p>func Forever(f func(), period time.Duration)</p>\n<h5 id=\"2、在需要的时候停止循环，那么可以使用下面的方法，增加一个用于停止的-chan-即可，方法定义如下：\"><a href=\"#2、在需要的时候停止循环，那么可以使用下面的方法，增加一个用于停止的-chan-即可，方法定义如下：\" class=\"headerlink\" title=\"2、在需要的时候停止循环，那么可以使用下面的方法，增加一个用于停止的 chan 即可，方法定义如下：\"></a>2、在需要的时候停止循环，那么可以使用下面的方法，增加一个用于停止的 chan 即可，方法定义如下：</h5><p>func Until(f func(), period time.Duration, stopCh &lt;-chan struct{})</p>\n<p>上面的第三个参数 stopCh 就是用于退出无限循环的标志，停止的时候我们 close 掉这个 chan 就可以了。</p>\n<h5 id=\"3、有时候，我们还会需要在运行前去检查先决条件，在条件满足的时候才去运行某一任务，这时候可以使用-Poll-方法：\"><a href=\"#3、有时候，我们还会需要在运行前去检查先决条件，在条件满足的时候才去运行某一任务，这时候可以使用-Poll-方法：\" class=\"headerlink\" title=\"3、有时候，我们还会需要在运行前去检查先决条件，在条件满足的时候才去运行某一任务，这时候可以使用 Poll 方法：\"></a>3、有时候，我们还会需要在运行前去检查先决条件，在条件满足的时候才去运行某一任务，这时候可以使用 Poll 方法：</h5><p>func Poll(interval, timeout time.Duration, condition ConditionFunc)</p>\n<p>这个函数会以 interval 为间隔，不断去检查 condition 条件是否为真，如果为真则可以继续后续处理；如果指定了 timeout 参数，则该函数也可以只常识指定的时间。</p>\n<h5 id=\"4、PollUntil-方法和上面的类似，但是没有-timeout-参数，多了一个-stopCh-参数，如下所示：\"><a href=\"#4、PollUntil-方法和上面的类似，但是没有-timeout-参数，多了一个-stopCh-参数，如下所示：\" class=\"headerlink\" title=\"4、PollUntil 方法和上面的类似，但是没有 timeout 参数，多了一个 stopCh 参数，如下所示：\"></a>4、PollUntil 方法和上面的类似，但是没有 timeout 参数，多了一个 stopCh 参数，如下所示：</h5><p>PollUntil(interval time.Duration, condition ConditionFunc, stopCh &lt;-chan struct{}) error</p>\n<p>此外还有 PollImmediate 、 PollInfinite 和 PollImmediateInfinite 方法。</p>\n<h3 id=\"三、总结\"><a href=\"#三、总结\" class=\"headerlink\" title=\"三、总结\"></a>三、总结</h3><p>本篇文章主要讲了 k8s 中定时任务的实现与对应包（wait）中方法的使用。通过阅读 k8s 的源代码，可以发现 k8s 中许多功能的实现也都是我们需要在平时工作中用的，其大部分包的性能都是经过大规模考验的，通过使用其相关的工具包不仅能学到大量的编程技巧也能避免自己造轮子。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>k8s 中有许多优秀的包都可以在平时的开发中借鉴与使用，比如，任务的定时轮询、高可用的实现、日志处理、缓存使用等都是独立的包，可以直接引用。本篇文章会介绍 k8s 中定时任务的实现，k8s 中定时任务都是通过 wait 包实现的，wait 包在 k8s 的多个组件中都有用到，以下是 wait 包在 kubelet 中的几处使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func run(s *options.KubeletServer, kubeDeps *kubelet.Dependencies, stopCh &lt;-chan struct&#123;&#125;) (err error) &#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t\t// kubelet 每5分钟一次从 apiserver 获取证书</span><br><span class=\"line\">\t\tcloseAllConns, err := kubeletcertificate.UpdateTransport(wait.NeverStop, clientConfig, clientCertificateManager, 5*time.Minute)</span><br><span class=\"line\">\t\tif err != nil &#123;</span><br><span class=\"line\">\t\t\treturn err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tcloseAllConns, err := kubeletcertificate.UpdateTransport(wait.NeverStop, clientConfig, clientCertificateManager, 5*time.Minute)</span><br><span class=\"line\">\t\tif err != nil &#123;</span><br><span class=\"line\">\t\t\treturn err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">func startKubelet(k kubelet.Bootstrap, podCfg *config.PodConfig, kubeCfg *kubeletconfiginternal.KubeletConfiguration,   kubeDeps *kubelet.Dependencies, enableServer bool) &#123;</span><br><span class=\"line\">    // 持续监听 pod 的变化</span><br><span class=\"line\">    go wait.Until(func() &#123;</span><br><span class=\"line\">        k.Run(podCfg.Updates())</span><br><span class=\"line\">    &#125;, 0, wait.NeverStop)</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>golang 中可以通过 time.Ticker 实现定时任务的执行，但在 k8s 中用了更原生的方式，使用 time.Timer 实现的。time.Ticker 和 time.Timer 的使用区别如下：</p>\n<ul>\n<li>ticker 只要定义完成，从此刻开始计时，不需要任何其他的操作，每隔固定时间都会自动触发。</li>\n<li>timer 定时器是到了固定时间后会执行一次，仅执行一次</li>\n<li>如果 timer 定时器要每隔间隔的时间执行，实现 ticker 的效果，使用 <code>func (t *Timer) Reset(d Duration) bool</code></li>\n</ul>\n<p>一个示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;fmt&quot;</span><br><span class=\"line\">\t&quot;sync&quot;</span><br><span class=\"line\">\t&quot;time&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\tvar wg sync.WaitGroup</span><br><span class=\"line\"></span><br><span class=\"line\">\ttimer1 := time.NewTimer(2 * time.Second)</span><br><span class=\"line\">\tticker1 := time.NewTicker(2 * time.Second)</span><br><span class=\"line\"></span><br><span class=\"line\">\twg.Add(1)</span><br><span class=\"line\">\tgo func(t *time.Ticker) &#123;</span><br><span class=\"line\">\t\tdefer wg.Done()</span><br><span class=\"line\">\t\tfor &#123;</span><br><span class=\"line\">\t\t\t&lt;-t.C</span><br><span class=\"line\">\t\t\tfmt.Println(&quot;exec ticker&quot;, time.Now().Format(&quot;2006-01-02 15:04:05&quot;))</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;(ticker1)</span><br><span class=\"line\"></span><br><span class=\"line\">\twg.Add(1)</span><br><span class=\"line\">\tgo func(t *time.Timer) &#123;</span><br><span class=\"line\">\t\tdefer wg.Done()</span><br><span class=\"line\">\t\tfor &#123;</span><br><span class=\"line\">\t\t\t&lt;-t.C</span><br><span class=\"line\">\t\t\tfmt.Println(&quot;exec timer&quot;, time.Now().Format(&quot;2006-01-02 15:04:05&quot;))</span><br><span class=\"line\">\t\t\tt.Reset(2 * time.Second)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;(timer1)</span><br><span class=\"line\">\t</span><br><span class=\"line\">\twg.Wait()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"一、wait-包中的核心代码\"><a href=\"#一、wait-包中的核心代码\" class=\"headerlink\" title=\"一、wait 包中的核心代码\"></a>一、wait 包中的核心代码</h3><p>核心代码（k8s.io/apimachinery/pkg/util/wait/wait.go）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func JitterUntil(f func(), period time.Duration, jitterFactor float64, sliding bool, stopCh &lt;-chan struct&#123;&#125;) &#123;</span><br><span class=\"line\">\tvar t *time.Timer</span><br><span class=\"line\">\tvar sawTimeout bool</span><br><span class=\"line\"></span><br><span class=\"line\">\tfor &#123;</span><br><span class=\"line\">\t\tselect &#123;</span><br><span class=\"line\">\t\tcase &lt;-stopCh:</span><br><span class=\"line\">\t\t\treturn</span><br><span class=\"line\">\t\tdefault:</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tjitteredPeriod := period</span><br><span class=\"line\">\t\tif jitterFactor &gt; 0.0 &#123;</span><br><span class=\"line\">\t\t\tjitteredPeriod = Jitter(period, jitterFactor)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tif !sliding &#123;</span><br><span class=\"line\">\t\t\tt = resetOrReuseTimer(t, jitteredPeriod, sawTimeout)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tfunc() &#123;</span><br><span class=\"line\">\t\t\tdefer runtime.HandleCrash()</span><br><span class=\"line\">\t\t\tf()</span><br><span class=\"line\">\t\t&#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tif sliding &#123;</span><br><span class=\"line\">\t\t\tt = resetOrReuseTimer(t, jitteredPeriod, sawTimeout)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tselect &#123;</span><br><span class=\"line\">\t\tcase &lt;-stopCh:</span><br><span class=\"line\">\t\t\treturn</span><br><span class=\"line\">\t\tcase &lt;-t.C:</span><br><span class=\"line\">\t\t\tsawTimeout = true</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">func resetOrReuseTimer(t *time.Timer, d time.Duration, sawTimeout bool) *time.Timer &#123;</span><br><span class=\"line\">    if t == nil &#123;</span><br><span class=\"line\">        return time.NewTimer(d)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if !t.Stop() &amp;&amp; !sawTimeout &#123;</span><br><span class=\"line\">        &lt;-t.C</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    t.Reset(d)</span><br><span class=\"line\">    return t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>几个关键点的说明：</p>\n<ul>\n<li>1、如果 sliding 为 true，则在 f() 运行之后计算周期。如果为 false，那么 period 包含 f() 的执行时间。</li>\n<li>2、在 golang 中 select 没有优先级选择，为了避免额外执行 f(),在每次循环开始后会先判断 stopCh chan。</li>\n</ul>\n<p>k8s 中 wait 包其实是对 time.Timer 做了一层封装实现。</p>\n<h3 id=\"二、wait-包常用的方法\"><a href=\"#二、wait-包常用的方法\" class=\"headerlink\" title=\"二、wait 包常用的方法\"></a>二、wait 包常用的方法</h3><h5 id=\"1、定期执行一个函数，永不停止，可以使用-Forever-方法：\"><a href=\"#1、定期执行一个函数，永不停止，可以使用-Forever-方法：\" class=\"headerlink\" title=\"1、定期执行一个函数，永不停止，可以使用 Forever 方法：\"></a>1、定期执行一个函数，永不停止，可以使用 Forever 方法：</h5><p>func Forever(f func(), period time.Duration)</p>\n<h5 id=\"2、在需要的时候停止循环，那么可以使用下面的方法，增加一个用于停止的-chan-即可，方法定义如下：\"><a href=\"#2、在需要的时候停止循环，那么可以使用下面的方法，增加一个用于停止的-chan-即可，方法定义如下：\" class=\"headerlink\" title=\"2、在需要的时候停止循环，那么可以使用下面的方法，增加一个用于停止的 chan 即可，方法定义如下：\"></a>2、在需要的时候停止循环，那么可以使用下面的方法，增加一个用于停止的 chan 即可，方法定义如下：</h5><p>func Until(f func(), period time.Duration, stopCh &lt;-chan struct{})</p>\n<p>上面的第三个参数 stopCh 就是用于退出无限循环的标志，停止的时候我们 close 掉这个 chan 就可以了。</p>\n<h5 id=\"3、有时候，我们还会需要在运行前去检查先决条件，在条件满足的时候才去运行某一任务，这时候可以使用-Poll-方法：\"><a href=\"#3、有时候，我们还会需要在运行前去检查先决条件，在条件满足的时候才去运行某一任务，这时候可以使用-Poll-方法：\" class=\"headerlink\" title=\"3、有时候，我们还会需要在运行前去检查先决条件，在条件满足的时候才去运行某一任务，这时候可以使用 Poll 方法：\"></a>3、有时候，我们还会需要在运行前去检查先决条件，在条件满足的时候才去运行某一任务，这时候可以使用 Poll 方法：</h5><p>func Poll(interval, timeout time.Duration, condition ConditionFunc)</p>\n<p>这个函数会以 interval 为间隔，不断去检查 condition 条件是否为真，如果为真则可以继续后续处理；如果指定了 timeout 参数，则该函数也可以只常识指定的时间。</p>\n<h5 id=\"4、PollUntil-方法和上面的类似，但是没有-timeout-参数，多了一个-stopCh-参数，如下所示：\"><a href=\"#4、PollUntil-方法和上面的类似，但是没有-timeout-参数，多了一个-stopCh-参数，如下所示：\" class=\"headerlink\" title=\"4、PollUntil 方法和上面的类似，但是没有 timeout 参数，多了一个 stopCh 参数，如下所示：\"></a>4、PollUntil 方法和上面的类似，但是没有 timeout 参数，多了一个 stopCh 参数，如下所示：</h5><p>PollUntil(interval time.Duration, condition ConditionFunc, stopCh &lt;-chan struct{}) error</p>\n<p>此外还有 PollImmediate 、 PollInfinite 和 PollImmediateInfinite 方法。</p>\n<h3 id=\"三、总结\"><a href=\"#三、总结\" class=\"headerlink\" title=\"三、总结\"></a>三、总结</h3><p>本篇文章主要讲了 k8s 中定时任务的实现与对应包（wait）中方法的使用。通过阅读 k8s 的源代码，可以发现 k8s 中许多功能的实现也都是我们需要在平时工作中用的，其大部分包的性能都是经过大规模考验的，通过使用其相关的工具包不仅能学到大量的编程技巧也能避免自己造轮子。</p>\n"},{"title":"部署高可用 kubernetes 集群","date":"2019-07-12T08:30:00.000Z","type":"HA","_content":"\n\nkubernetes 虽然具有故障自愈和容错能力，但某些组件的异常会导致整个集群不可用，生产环境中将其部署为高可用还是非常有必要的，本文会介绍如何构建一个高可用的 Kubernetes 集群。kuber-controller-manager 和 kube-scheduler 的高可用官方已经实现了，都是通过 etcd 全局锁进行选举实现的，etcd 是一个分布式，强一致的（满足 CAP 的 CP）KV 存储系统，其天然具备高可用。而 apiserver 作为整个系统的核心，所有对数据的修改操作都是通过 apiserver 间接操作 etcd 的，所以 apiserver 的高可用实现是比较关键的。 \n\n\n#### kube-apiserver 的高可用配置\n\napiserver 本身是无状态的，可以横向扩展，其借助外部负载均衡软件配置高可用也相对容易，实现方案比较多，但一般会采用外部组件 LVS 或 HAProxy 的方式实现，我们生产环境是通过 LVS 实现的。apiserver 的高可用可以分为集群外高可用和集群内高可用。集群外高可用指对于直接调用 k8s API 的外部用户（例如 kubectl 、kubelet），客户端需要调用 apiserver 的 VIP 以达到高可用，此处 LVS 的部署以及 VIP 的配置不再详细说明。\n\n集群内的高可用配置是指对于部署到集群中的 pod 访问 kubernetes，kubernetes 集群创建完成后默认会启动一个`kubernetes`的 service 供集群内的 pod 访问，service 的 ClusterIP 默认值为 `172.0.0.1` ，每一个 service 对象生成时，都会生成一个用于暴露该对象后端对应 pod 的对象 endpoints，endpoints 中可以看到 apiserver 的实例。访问 kubernetes 的 service，service 会将请求转发到 endpoints 中的 ip 上，此时若 service 中的 endpoints 中没有 IP，则表示 apiserver 无法访问。 \n\n```\n$ kubectl get svc kubernetes\nNAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE\nkubernetes   ClusterIP   172.0.0.1    <none>        443/TCP   21d\n\n$ kubectl get endpoints kubernetes\nNAME         ENDPOINTS                       AGE\nkubernetes   10.0.2.15:6443, 10.0.2.16:6443  21d\n```\n\nkubernetes v1.9 之前 kube-apiserver service 的高可用也就是 master ip 要加入到 kubernetes service 的 endpoints 中必须要在参数中指定 `--apiserver-count` 的值，v1.9 出现了另外一个参数 `--endpoint-reconciler-type` 要取代以前的 `--apiserver-count`，但是此时该参数默认是禁用的（Alpha 版本），v1.10 也是默认禁用的。v1.11 中 `--endpoint-reconciler-type` 参数默认开启了，默认值是 `lease`。`--apiserver-count` 参数会在 v1.13 中被移除。v1.11 和 v1.12 中还可以使用 `--apiserver-count`，但前提是需要设置 `--endpoint-reconciler-type=master-count`。也就是说在 v1.11 以及之后的版本中 apiserver 中不需要进行配置了，启用了几个 apiserver 实例默认都会加到 对应的 endpoints 中。\n\n\n\n#### kube-controller-manager 和 kube-scheduler 的高可用配置\n\nkube-controller-manager 和 kube-scheduler 是由 leader election 实现高可用的，通过向 apiserver 中的 endpoint 加锁的方式来进行 leader election， 启用 leader election 需要在组件的配置中加入以下几个参数：\n\n```\n --leader-elect=true\n --leader-elect-lease-duration=15s\n --leader-elect-renew-deadline=10s\n --leader-elect-resource-lock=endpoints\n --leader-elect-retry-period=2s \n```\n\n组件当前的 leader 会写在 endpoints 的 holderIdentity 字段中， 使用以下命令查看组件当前的 leader:\n\n```\n$ kubectl get endpoints kube-controller-manager --namespace=kube-system -o yaml \n\n$ kubectl get endpoints kube-scheduler --namespace=kube-system -o yaml\n```\n\n关于 kube-controller-manager 和 kube-scheduler 高可用的实现细节可以参考之前写的一篇文章：[kubernets 中组件高可用的实现方式](http://blog.tianfeiyu.com/2019/03/13/k8s_leader_election/)。\n\n\n#### etcd 的高可用配置\n\netcd 是一个分布式集群，也是一个有状态的服务，其天生就是高可用的架构。为了防止 etcd 脑裂，其组成 etcd 集群的个数一般为奇数个(3 或 5 个节点) 。若使用物理机搭建 k8s 集群，理论上集群的规模也会比较大，此时 etcd 也应该使用 3 个或者5 个节点部署一套独立运行的集群。若想要对 etcd 做到自动化运维，可以考虑使用 [etcd-operator](https://github.com/coreos/etcd-operator) 将 etcd 集群部署在 k8s 中。\n\n\n\n **kubernetes 中组件高可用部署的一个架构图**：\n\n![kubernetes 组件高可用部署](http://cdn.tianfeiyu.com/image-1.png)\n\n\n#### 总结\n\n本文主要介绍如何配置一个高可用 kubernetes 集群，kubernetes 新版本已经越来越趋近全面 TLS + RBAC 配置，若 kubernetes 集群还在使用 8080 端口，此时每个 master 节点上的 kube-controller-manager 和 kube-scheduler 都是通过 8080 端口连接 apiserver，若节点上的 apiserver 挂掉，则 kube-controller-manager 和 kube-scheduler 也会随之挂掉。apiserver 作为集群的核心组件，其必须高可用部署，其他组件实现高可用相对容易。\n\n\n参考：\n\nhttps://k8smeetup.github.io/docs/admin/high-availability/\n\n","source":"_posts/k8s_components_ha.md","raw":"---\ntitle: 部署高可用 kubernetes 集群\ndate: 2019-07-12 16:30:00\ntags: [\"kubernetes\",\"HA\"]\ntype: \"HA\"\n\n---\n\n\nkubernetes 虽然具有故障自愈和容错能力，但某些组件的异常会导致整个集群不可用，生产环境中将其部署为高可用还是非常有必要的，本文会介绍如何构建一个高可用的 Kubernetes 集群。kuber-controller-manager 和 kube-scheduler 的高可用官方已经实现了，都是通过 etcd 全局锁进行选举实现的，etcd 是一个分布式，强一致的（满足 CAP 的 CP）KV 存储系统，其天然具备高可用。而 apiserver 作为整个系统的核心，所有对数据的修改操作都是通过 apiserver 间接操作 etcd 的，所以 apiserver 的高可用实现是比较关键的。 \n\n\n#### kube-apiserver 的高可用配置\n\napiserver 本身是无状态的，可以横向扩展，其借助外部负载均衡软件配置高可用也相对容易，实现方案比较多，但一般会采用外部组件 LVS 或 HAProxy 的方式实现，我们生产环境是通过 LVS 实现的。apiserver 的高可用可以分为集群外高可用和集群内高可用。集群外高可用指对于直接调用 k8s API 的外部用户（例如 kubectl 、kubelet），客户端需要调用 apiserver 的 VIP 以达到高可用，此处 LVS 的部署以及 VIP 的配置不再详细说明。\n\n集群内的高可用配置是指对于部署到集群中的 pod 访问 kubernetes，kubernetes 集群创建完成后默认会启动一个`kubernetes`的 service 供集群内的 pod 访问，service 的 ClusterIP 默认值为 `172.0.0.1` ，每一个 service 对象生成时，都会生成一个用于暴露该对象后端对应 pod 的对象 endpoints，endpoints 中可以看到 apiserver 的实例。访问 kubernetes 的 service，service 会将请求转发到 endpoints 中的 ip 上，此时若 service 中的 endpoints 中没有 IP，则表示 apiserver 无法访问。 \n\n```\n$ kubectl get svc kubernetes\nNAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE\nkubernetes   ClusterIP   172.0.0.1    <none>        443/TCP   21d\n\n$ kubectl get endpoints kubernetes\nNAME         ENDPOINTS                       AGE\nkubernetes   10.0.2.15:6443, 10.0.2.16:6443  21d\n```\n\nkubernetes v1.9 之前 kube-apiserver service 的高可用也就是 master ip 要加入到 kubernetes service 的 endpoints 中必须要在参数中指定 `--apiserver-count` 的值，v1.9 出现了另外一个参数 `--endpoint-reconciler-type` 要取代以前的 `--apiserver-count`，但是此时该参数默认是禁用的（Alpha 版本），v1.10 也是默认禁用的。v1.11 中 `--endpoint-reconciler-type` 参数默认开启了，默认值是 `lease`。`--apiserver-count` 参数会在 v1.13 中被移除。v1.11 和 v1.12 中还可以使用 `--apiserver-count`，但前提是需要设置 `--endpoint-reconciler-type=master-count`。也就是说在 v1.11 以及之后的版本中 apiserver 中不需要进行配置了，启用了几个 apiserver 实例默认都会加到 对应的 endpoints 中。\n\n\n\n#### kube-controller-manager 和 kube-scheduler 的高可用配置\n\nkube-controller-manager 和 kube-scheduler 是由 leader election 实现高可用的，通过向 apiserver 中的 endpoint 加锁的方式来进行 leader election， 启用 leader election 需要在组件的配置中加入以下几个参数：\n\n```\n --leader-elect=true\n --leader-elect-lease-duration=15s\n --leader-elect-renew-deadline=10s\n --leader-elect-resource-lock=endpoints\n --leader-elect-retry-period=2s \n```\n\n组件当前的 leader 会写在 endpoints 的 holderIdentity 字段中， 使用以下命令查看组件当前的 leader:\n\n```\n$ kubectl get endpoints kube-controller-manager --namespace=kube-system -o yaml \n\n$ kubectl get endpoints kube-scheduler --namespace=kube-system -o yaml\n```\n\n关于 kube-controller-manager 和 kube-scheduler 高可用的实现细节可以参考之前写的一篇文章：[kubernets 中组件高可用的实现方式](http://blog.tianfeiyu.com/2019/03/13/k8s_leader_election/)。\n\n\n#### etcd 的高可用配置\n\netcd 是一个分布式集群，也是一个有状态的服务，其天生就是高可用的架构。为了防止 etcd 脑裂，其组成 etcd 集群的个数一般为奇数个(3 或 5 个节点) 。若使用物理机搭建 k8s 集群，理论上集群的规模也会比较大，此时 etcd 也应该使用 3 个或者5 个节点部署一套独立运行的集群。若想要对 etcd 做到自动化运维，可以考虑使用 [etcd-operator](https://github.com/coreos/etcd-operator) 将 etcd 集群部署在 k8s 中。\n\n\n\n **kubernetes 中组件高可用部署的一个架构图**：\n\n![kubernetes 组件高可用部署](http://cdn.tianfeiyu.com/image-1.png)\n\n\n#### 总结\n\n本文主要介绍如何配置一个高可用 kubernetes 集群，kubernetes 新版本已经越来越趋近全面 TLS + RBAC 配置，若 kubernetes 集群还在使用 8080 端口，此时每个 master 节点上的 kube-controller-manager 和 kube-scheduler 都是通过 8080 端口连接 apiserver，若节点上的 apiserver 挂掉，则 kube-controller-manager 和 kube-scheduler 也会随之挂掉。apiserver 作为集群的核心组件，其必须高可用部署，其他组件实现高可用相对容易。\n\n\n参考：\n\nhttps://k8smeetup.github.io/docs/admin/high-availability/\n\n","slug":"k8s_components_ha","published":1,"updated":"2019-07-12T08:56:21.988Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjycnhjlx000d5vwniitgos5n","content":"<p>kubernetes 虽然具有故障自愈和容错能力，但某些组件的异常会导致整个集群不可用，生产环境中将其部署为高可用还是非常有必要的，本文会介绍如何构建一个高可用的 Kubernetes 集群。kuber-controller-manager 和 kube-scheduler 的高可用官方已经实现了，都是通过 etcd 全局锁进行选举实现的，etcd 是一个分布式，强一致的（满足 CAP 的 CP）KV 存储系统，其天然具备高可用。而 apiserver 作为整个系统的核心，所有对数据的修改操作都是通过 apiserver 间接操作 etcd 的，所以 apiserver 的高可用实现是比较关键的。 </p>\n<h4 id=\"kube-apiserver-的高可用配置\"><a href=\"#kube-apiserver-的高可用配置\" class=\"headerlink\" title=\"kube-apiserver 的高可用配置\"></a>kube-apiserver 的高可用配置</h4><p>apiserver 本身是无状态的，可以横向扩展，其借助外部负载均衡软件配置高可用也相对容易，实现方案比较多，但一般会采用外部组件 LVS 或 HAProxy 的方式实现，我们生产环境是通过 LVS 实现的。apiserver 的高可用可以分为集群外高可用和集群内高可用。集群外高可用指对于直接调用 k8s API 的外部用户（例如 kubectl 、kubelet），客户端需要调用 apiserver 的 VIP 以达到高可用，此处 LVS 的部署以及 VIP 的配置不再详细说明。</p>\n<p>集群内的高可用配置是指对于部署到集群中的 pod 访问 kubernetes，kubernetes 集群创建完成后默认会启动一个<code>kubernetes</code>的 service 供集群内的 pod 访问，service 的 ClusterIP 默认值为 <code>172.0.0.1</code> ，每一个 service 对象生成时，都会生成一个用于暴露该对象后端对应 pod 的对象 endpoints，endpoints 中可以看到 apiserver 的实例。访问 kubernetes 的 service，service 会将请求转发到 endpoints 中的 ip 上，此时若 service 中的 endpoints 中没有 IP，则表示 apiserver 无法访问。 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get svc kubernetes</span><br><span class=\"line\">NAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE</span><br><span class=\"line\">kubernetes   ClusterIP   172.0.0.1    &lt;none&gt;        443/TCP   21d</span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl get endpoints kubernetes</span><br><span class=\"line\">NAME         ENDPOINTS                       AGE</span><br><span class=\"line\">kubernetes   10.0.2.15:6443, 10.0.2.16:6443  21d</span><br></pre></td></tr></table></figure>\n<p>kubernetes v1.9 之前 kube-apiserver service 的高可用也就是 master ip 要加入到 kubernetes service 的 endpoints 中必须要在参数中指定 <code>--apiserver-count</code> 的值，v1.9 出现了另外一个参数 <code>--endpoint-reconciler-type</code> 要取代以前的 <code>--apiserver-count</code>，但是此时该参数默认是禁用的（Alpha 版本），v1.10 也是默认禁用的。v1.11 中 <code>--endpoint-reconciler-type</code> 参数默认开启了，默认值是 <code>lease</code>。<code>--apiserver-count</code> 参数会在 v1.13 中被移除。v1.11 和 v1.12 中还可以使用 <code>--apiserver-count</code>，但前提是需要设置 <code>--endpoint-reconciler-type=master-count</code>。也就是说在 v1.11 以及之后的版本中 apiserver 中不需要进行配置了，启用了几个 apiserver 实例默认都会加到 对应的 endpoints 中。</p>\n<h4 id=\"kube-controller-manager-和-kube-scheduler-的高可用配置\"><a href=\"#kube-controller-manager-和-kube-scheduler-的高可用配置\" class=\"headerlink\" title=\"kube-controller-manager 和 kube-scheduler 的高可用配置\"></a>kube-controller-manager 和 kube-scheduler 的高可用配置</h4><p>kube-controller-manager 和 kube-scheduler 是由 leader election 实现高可用的，通过向 apiserver 中的 endpoint 加锁的方式来进行 leader election， 启用 leader election 需要在组件的配置中加入以下几个参数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--leader-elect=true</span><br><span class=\"line\">--leader-elect-lease-duration=15s</span><br><span class=\"line\">--leader-elect-renew-deadline=10s</span><br><span class=\"line\">--leader-elect-resource-lock=endpoints</span><br><span class=\"line\">--leader-elect-retry-period=2s</span><br></pre></td></tr></table></figure>\n<p>组件当前的 leader 会写在 endpoints 的 holderIdentity 字段中， 使用以下命令查看组件当前的 leader:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get endpoints kube-controller-manager --namespace=kube-system -o yaml </span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl get endpoints kube-scheduler --namespace=kube-system -o yaml</span><br></pre></td></tr></table></figure>\n<p>关于 kube-controller-manager 和 kube-scheduler 高可用的实现细节可以参考之前写的一篇文章：<a href=\"http://blog.tianfeiyu.com/2019/03/13/k8s_leader_election/\" target=\"_blank\" rel=\"noopener\">kubernets 中组件高可用的实现方式</a>。</p>\n<h4 id=\"etcd-的高可用配置\"><a href=\"#etcd-的高可用配置\" class=\"headerlink\" title=\"etcd 的高可用配置\"></a>etcd 的高可用配置</h4><p>etcd 是一个分布式集群，也是一个有状态的服务，其天生就是高可用的架构。为了防止 etcd 脑裂，其组成 etcd 集群的个数一般为奇数个(3 或 5 个节点) 。若使用物理机搭建 k8s 集群，理论上集群的规模也会比较大，此时 etcd 也应该使用 3 个或者5 个节点部署一套独立运行的集群。若想要对 etcd 做到自动化运维，可以考虑使用 <a href=\"https://github.com/coreos/etcd-operator\" target=\"_blank\" rel=\"noopener\">etcd-operator</a> 将 etcd 集群部署在 k8s 中。</p>\n<p> <strong>kubernetes 中组件高可用部署的一个架构图</strong>：</p>\n<p><img src=\"http://cdn.tianfeiyu.com/image-1.png\" alt=\"kubernetes 组件高可用部署\"></p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>本文主要介绍如何配置一个高可用 kubernetes 集群，kubernetes 新版本已经越来越趋近全面 TLS + RBAC 配置，若 kubernetes 集群还在使用 8080 端口，此时每个 master 节点上的 kube-controller-manager 和 kube-scheduler 都是通过 8080 端口连接 apiserver，若节点上的 apiserver 挂掉，则 kube-controller-manager 和 kube-scheduler 也会随之挂掉。apiserver 作为集群的核心组件，其必须高可用部署，其他组件实现高可用相对容易。</p>\n<p>参考：</p>\n<p><a href=\"https://k8smeetup.github.io/docs/admin/high-availability/\" target=\"_blank\" rel=\"noopener\">https://k8smeetup.github.io/docs/admin/high-availability/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>kubernetes 虽然具有故障自愈和容错能力，但某些组件的异常会导致整个集群不可用，生产环境中将其部署为高可用还是非常有必要的，本文会介绍如何构建一个高可用的 Kubernetes 集群。kuber-controller-manager 和 kube-scheduler 的高可用官方已经实现了，都是通过 etcd 全局锁进行选举实现的，etcd 是一个分布式，强一致的（满足 CAP 的 CP）KV 存储系统，其天然具备高可用。而 apiserver 作为整个系统的核心，所有对数据的修改操作都是通过 apiserver 间接操作 etcd 的，所以 apiserver 的高可用实现是比较关键的。 </p>\n<h4 id=\"kube-apiserver-的高可用配置\"><a href=\"#kube-apiserver-的高可用配置\" class=\"headerlink\" title=\"kube-apiserver 的高可用配置\"></a>kube-apiserver 的高可用配置</h4><p>apiserver 本身是无状态的，可以横向扩展，其借助外部负载均衡软件配置高可用也相对容易，实现方案比较多，但一般会采用外部组件 LVS 或 HAProxy 的方式实现，我们生产环境是通过 LVS 实现的。apiserver 的高可用可以分为集群外高可用和集群内高可用。集群外高可用指对于直接调用 k8s API 的外部用户（例如 kubectl 、kubelet），客户端需要调用 apiserver 的 VIP 以达到高可用，此处 LVS 的部署以及 VIP 的配置不再详细说明。</p>\n<p>集群内的高可用配置是指对于部署到集群中的 pod 访问 kubernetes，kubernetes 集群创建完成后默认会启动一个<code>kubernetes</code>的 service 供集群内的 pod 访问，service 的 ClusterIP 默认值为 <code>172.0.0.1</code> ，每一个 service 对象生成时，都会生成一个用于暴露该对象后端对应 pod 的对象 endpoints，endpoints 中可以看到 apiserver 的实例。访问 kubernetes 的 service，service 会将请求转发到 endpoints 中的 ip 上，此时若 service 中的 endpoints 中没有 IP，则表示 apiserver 无法访问。 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get svc kubernetes</span><br><span class=\"line\">NAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE</span><br><span class=\"line\">kubernetes   ClusterIP   172.0.0.1    &lt;none&gt;        443/TCP   21d</span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl get endpoints kubernetes</span><br><span class=\"line\">NAME         ENDPOINTS                       AGE</span><br><span class=\"line\">kubernetes   10.0.2.15:6443, 10.0.2.16:6443  21d</span><br></pre></td></tr></table></figure>\n<p>kubernetes v1.9 之前 kube-apiserver service 的高可用也就是 master ip 要加入到 kubernetes service 的 endpoints 中必须要在参数中指定 <code>--apiserver-count</code> 的值，v1.9 出现了另外一个参数 <code>--endpoint-reconciler-type</code> 要取代以前的 <code>--apiserver-count</code>，但是此时该参数默认是禁用的（Alpha 版本），v1.10 也是默认禁用的。v1.11 中 <code>--endpoint-reconciler-type</code> 参数默认开启了，默认值是 <code>lease</code>。<code>--apiserver-count</code> 参数会在 v1.13 中被移除。v1.11 和 v1.12 中还可以使用 <code>--apiserver-count</code>，但前提是需要设置 <code>--endpoint-reconciler-type=master-count</code>。也就是说在 v1.11 以及之后的版本中 apiserver 中不需要进行配置了，启用了几个 apiserver 实例默认都会加到 对应的 endpoints 中。</p>\n<h4 id=\"kube-controller-manager-和-kube-scheduler-的高可用配置\"><a href=\"#kube-controller-manager-和-kube-scheduler-的高可用配置\" class=\"headerlink\" title=\"kube-controller-manager 和 kube-scheduler 的高可用配置\"></a>kube-controller-manager 和 kube-scheduler 的高可用配置</h4><p>kube-controller-manager 和 kube-scheduler 是由 leader election 实现高可用的，通过向 apiserver 中的 endpoint 加锁的方式来进行 leader election， 启用 leader election 需要在组件的配置中加入以下几个参数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--leader-elect=true</span><br><span class=\"line\">--leader-elect-lease-duration=15s</span><br><span class=\"line\">--leader-elect-renew-deadline=10s</span><br><span class=\"line\">--leader-elect-resource-lock=endpoints</span><br><span class=\"line\">--leader-elect-retry-period=2s</span><br></pre></td></tr></table></figure>\n<p>组件当前的 leader 会写在 endpoints 的 holderIdentity 字段中， 使用以下命令查看组件当前的 leader:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get endpoints kube-controller-manager --namespace=kube-system -o yaml </span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl get endpoints kube-scheduler --namespace=kube-system -o yaml</span><br></pre></td></tr></table></figure>\n<p>关于 kube-controller-manager 和 kube-scheduler 高可用的实现细节可以参考之前写的一篇文章：<a href=\"http://blog.tianfeiyu.com/2019/03/13/k8s_leader_election/\" target=\"_blank\" rel=\"noopener\">kubernets 中组件高可用的实现方式</a>。</p>\n<h4 id=\"etcd-的高可用配置\"><a href=\"#etcd-的高可用配置\" class=\"headerlink\" title=\"etcd 的高可用配置\"></a>etcd 的高可用配置</h4><p>etcd 是一个分布式集群，也是一个有状态的服务，其天生就是高可用的架构。为了防止 etcd 脑裂，其组成 etcd 集群的个数一般为奇数个(3 或 5 个节点) 。若使用物理机搭建 k8s 集群，理论上集群的规模也会比较大，此时 etcd 也应该使用 3 个或者5 个节点部署一套独立运行的集群。若想要对 etcd 做到自动化运维，可以考虑使用 <a href=\"https://github.com/coreos/etcd-operator\" target=\"_blank\" rel=\"noopener\">etcd-operator</a> 将 etcd 集群部署在 k8s 中。</p>\n<p> <strong>kubernetes 中组件高可用部署的一个架构图</strong>：</p>\n<p><img src=\"http://cdn.tianfeiyu.com/image-1.png\" alt=\"kubernetes 组件高可用部署\"></p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>本文主要介绍如何配置一个高可用 kubernetes 集群，kubernetes 新版本已经越来越趋近全面 TLS + RBAC 配置，若 kubernetes 集群还在使用 8080 端口，此时每个 master 节点上的 kube-controller-manager 和 kube-scheduler 都是通过 8080 端口连接 apiserver，若节点上的 apiserver 挂掉，则 kube-controller-manager 和 kube-scheduler 也会随之挂掉。apiserver 作为集群的核心组件，其必须高可用部署，其他组件实现高可用相对容易。</p>\n<p>参考：</p>\n<p><a href=\"https://k8smeetup.github.io/docs/admin/high-availability/\" target=\"_blank\" rel=\"noopener\">https://k8smeetup.github.io/docs/admin/high-availability/</a></p>\n"},{"title":"kubernetes 自定义资源（CRD）的校验","date":"2019-07-02T03:00:00.000Z","type":"crd","_content":"\n在以前的版本若要对 apiserver 的请求做一些访问控制，必须修改 apiserver 的源代码然后重新编译部署，非常麻烦也不灵活，apiserver 也支持一些动态的准入控制器，在 apiserver 配置中看到的`ServiceAccount,NamespaceLifecycle,NamespaceExists,LimitRanger,ResourceQuota` 等都是 apiserver 的准入控制器，但这些都是 kubernetes 中默认内置的。在 v1.9 中，kubernetes 的动态准入控制器功能中支持了  Admission Webhooks，即用户可以以插件的方式对 apiserver 的请求做一些访问控制，要使用该功能需要自己写一个 admission webhook，apiserver 会在请求通过认证和授权之后、对象被持久化之前拦截该请求，然后调用 webhook 已达到准入控制，比如 Istio 中 sidecar 的注入就是通过这种方式实现的，在创建 Pod 阶段 apiserver 会回调 webhook 然后将 Sidecar 代理注入至用户 Pod。 本文主要介绍如何使用 AdmissionWebhook 对 CR 的校验，一般在开发 operator 过程中，都是通过对 CR 的操作实现某个功能的，若 CR 不规范可能会导致某些问题，所以对提交 CR 的校验是不可避免的一个步骤。\n\nkubernetes 目前提供了两种方式来对 CR 的校验，语法校验(`OpenAPI v3 schema`） 和语义校验\n(`validatingadmissionwebhook`）。\n\nCRD 的一个示例：\n\n```\napiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  # name must match the spec fields below, and be in the form: <plural>.<group>\n  name: kubernetesclusters.ecs.yun.com\nspec:\n  # group name to use for REST API: /apis/<group>/<version>\n  group: ecs.yun.com\n  # list of versions supported by this CustomResourceDefinition\n  versions:\n    - name: v1\n      # Each version can be enabled/disabled by Served flag.\n      served: true\n      # One and only one version must be marked as the storage version.\n      storage: true\n  # either Namespaced or Cluster\n  scope: Namespaced\n  names:\n    # plural name to be used in the URL: /apis/<group>/<version>/<plural>\n    plural: kubernetesclusters\n    # singular name to be used as an alias on the CLI and for display\n    singular: kubernetescluster\n    # kind is normally the CamelCased singular type. Your resource manifests use this.\n    kind: KubernetesCluster\n\t  # listKind\n    listKind: KubernetesClusterList\n    # shortNames allow shorter string to match your resource on the CLI\n    shortNames:\n    - ecs\n```\n\n\n\nCRD 的一个对象：\n\n```\napiVersion: ecs.yun.com/v1\nkind: KubernetesCluster\nmetadata:\n  name: test-cluster\nspec:\n  clusterType: kubernetes\n  serviceCIDR: ''\n  masterList:\n  - ip: 192.168.1.10\n  nodeList:\n  - ip: 192.168.1.11\n  privateSSHKey: ''\n  scaleUp: 0\n  scaleDown: 0\n```\n\n\n\n#### 一、OpenAPI v3 schema \n\n[OpenAPI](https://github.com/OAI/OpenAPI-Specification) 是针对 REST API 的 API 描述格式，也是一种规范。\n\n```\napiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: kubernetesclusters.ecs.yun.com\nspec:\n  group: ecs.yun.com\n  versions:\n    - name: v1\n      served: true\n      storage: true\n  scope: Namespaced\n  names:\n    plural: kubernetesclusters\n    singular: kubernetescluster\n    kind: KubernetesCluster\n    listKind: KubernetesClusterList\n    shortNames:\n    - ecs\n  validation:\n    openAPIV3Schema:\n      properties:\n        spec:\n\t\t      type: object\n          required:\n          - clusterType\n          - masterList\n          - nodeList\n          properties:\n            clusterType:\n              type: string\n            scaleUp:\n              type: integer\n            scaleDown:\n              type: integer\n              minimum: 0\n```\n\n上面是使用 OpenAPI v3 检验的一个例子，OpenAPI v3 仅支持一些简单的校验规则，可以校验参数的类型，参数值的类型(支持正则)，是否为必要参数等，但若要使用与、或、非等操作对多个字段同时校验还是做不到的，所以针对一些特定场景的校验需要使用 admission webhook。 \n\n\n\n#### 二、Admission Webhooks\n\nadmission control 在 apiserver 中进行配置的，使用`--enable-admission-plugins` 或 `--admission-control`进行启用，admission control 配置的控制器列表是有顺序的，越靠前的越先执行，一旦某个控制器返回的结果是reject 的，那么整个准入控制阶段立刻结束，所以这里的配置顺序是有序的，建议使用官方的顺序配置。\n\n在 v1.9 中，admission webhook 是通过在 `--admission-control` 中配置 `ValidatingAdmissionWebhook` 或 `MutatingAdmissionWebhook` 来支持使用的，两者区别如下：\n\n- MutatingAdmissionWebhook：允许在 webhook 中对 object 进行 mutate 修改，但匹配到的 webhook **串行**执行，因为每个 webhook 都可能会 mutate object。\n- ValidatingAdmissionWebhook: 不允许在 webhook 中对 Object 进行 mutate 修改，仅返回 true 或 false。\n\n启用 admission webhook 后，每次对 CR 做 CRUD 操作时，请求就会被 apiserver 拦住，至于 CRUD 中哪些请求被拦住都是提前在 WebhookConfiguration 中配置的，然后会调用 AdmissionWebhook 进行检查是否 Admit 通过。\n\n\n\n![kubernetes API request lifecycle](http://cdn.tianfeiyu.com/1562032999173.jpg)\n\n\n\n#### 三、启用 Admission Webhooks 功能\n\n> kubernetes 版本 >= v1.9\n\n1、在 apiserver 中开启 admission webhooks\n\n在 v1.9 版本中使用的是：\n\n```shell\n--admission-control=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota\n```\n\n在 v1.10 以后会弃用 `--admission-control`，取而代之的是  `--enable-admission-plugins`：\n\n```\n--enable-admission-plugins=NodeRestriction,NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota\n```\n\n启用之后在 api-resources 可以看到：\n\n```\n# kubectl api-resources | grep admissionregistration\nmutatingwebhookconfigurations                  admissionregistration.k8s.io   false        MutatingWebhookConfiguration\nvalidatingwebhookconfigurations                admissionregistration.k8s.io   false        ValidatingWebhookConfiguration\n```\n\n2、启用 `admissionregistration.k8s.io/v1alpha1` API\n\n```\n//  检查 API 是否已启用\n$ kubectl api-versions | grep admissionregistration.k8s.io\n```\n若不存在则需要在 apiserver 的配置中添加`--runtime-config=admissionregistration.k8s.io/v1alpha1`。\n\n#### 四、编写 Admission Webhook Server\n\nwebhook 其实就是一个 RESTful API 里面加上自己的一些校验逻辑。\n\n可以参考官方的示例： \n[https://github.com/kubernetes/kubernetes/blob/v1.13.0/test/images/webhook/main.go](https://github.com/kubernetes/kubernetes/blob/v1.13.0/test/images/webhook/main.go) \n或者 \n[https://github.com/kubernetes/kubernetes/blob/v1.13.0/test/e2e/apimachinery/webhook.go](https://github.com/kubernetes/kubernetes/blob/v1.13.0/test/e2e/apimachinery/webhook.go)\n\n\n\n> 完整代码参考：[https://github.com/gosoon/admission-webhook](https://github.com/gosoon/admission-webhook)\n\n#### 五、部署 Admission Webhook Service\n\n由于 apiserver 调用 webhook 时强制使用 TLS 认证，所以 WebhookConfiguration 中一定要配置 caBundle，也就是需要自己生成一套私有证书。\n\n生成证书的方式比较多，以下使用 openssl 生成，脚本如下所示：\n\n```\n#!/bin/bash\n\n# Generate the CA cert and private key\nopenssl req -nodes -new -x509 -keyout ca.key -out ca.crt -subj \"/CN=admission-webhook CA\"\n\n# Generate the private key for the webhook server\nopenssl genrsa -out admission-webhook-tls.key 2048\n\n# Generate a Certificate Signing Request (CSR) for the private key, and sign it with the private key of the CA.\nopenssl req -new -key admission-webhook-tls.key -subj \"/CN=admission-webhook.ecs-system.svc\" \\\n    | openssl x509 -req -CA ca.crt -CAkey ca.key -CAcreateserial -out admission-webhook-tls.crt\n\n# Generate pem\nopenssl base64 -A < ca.crt > ca.pem\n```\n\n生成证书后将 ca.pem 中的内容复制到 caBundle 处。\n\nValidatingWebhook yaml 文件如下：\n\n```\napiVersion: admissionregistration.k8s.io/v1beta1\nkind: ValidatingWebhookConfiguration\nmetadata:\n  name: admission-webhook\nwebhooks:\n  - name: admission-webhook.ecs-system.svc  # 必须为 <svc_name>.<svc_namespace>.svc.\n    failurePolicy: Ignore\n    clientConfig:\n      service:\n        name: admission-webhook\n        namespace: ecs-system\n        path: /ecs/operator/cluster  # webhook controller\n      caBundle: xxx\n    rules:\n      - operations:   # 需要校验的方法\n        - CREATE\n        - UPDATE\n        apiGroups:    # api group\n        - ecs.yun.com\n        apiVersions:  # version\n        - v1\n        resources:    # resource\n        - kubernetesclusters\n```\n\n注意 `failurePolicy` 可以为 `Ignore`或者`Fail`，意味着如果和 webhook 通信出现问题导致调用失败，将根据 `failurePolicy`决定忽略失败（admit）还是准入失败(reject)。\n\n最后将 webhook 部署在集群中。\n\n\n\n参考：\nhttps://github.com/gosoon/admission-webhook\nhttps://banzaicloud.com/blog/k8s-admission-webhooks/\n[http://blog.fatedier.com/2019/03/20/k8s-crd/](http://blog.fatedier.com/2019/03/20/k8s-crd/)\nhttps://my.oschina.net/jxcdwangtao/blog/1591681\nhttps://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/\nhttps://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#is-there-a-recommended-set-of-admission-controllers-to-use\nhttps://istio.io/zh/help/ops/setup/validation/\nhttps://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions/\n","source":"_posts/k8s_crd_verify.md","raw":"---\ntitle: kubernetes 自定义资源（CRD）的校验\ndate: 2019-07-02 11:00:00\ntags: [\"crd\",\"admission control\"]\ntype: \"crd\"\n\n---\n\n在以前的版本若要对 apiserver 的请求做一些访问控制，必须修改 apiserver 的源代码然后重新编译部署，非常麻烦也不灵活，apiserver 也支持一些动态的准入控制器，在 apiserver 配置中看到的`ServiceAccount,NamespaceLifecycle,NamespaceExists,LimitRanger,ResourceQuota` 等都是 apiserver 的准入控制器，但这些都是 kubernetes 中默认内置的。在 v1.9 中，kubernetes 的动态准入控制器功能中支持了  Admission Webhooks，即用户可以以插件的方式对 apiserver 的请求做一些访问控制，要使用该功能需要自己写一个 admission webhook，apiserver 会在请求通过认证和授权之后、对象被持久化之前拦截该请求，然后调用 webhook 已达到准入控制，比如 Istio 中 sidecar 的注入就是通过这种方式实现的，在创建 Pod 阶段 apiserver 会回调 webhook 然后将 Sidecar 代理注入至用户 Pod。 本文主要介绍如何使用 AdmissionWebhook 对 CR 的校验，一般在开发 operator 过程中，都是通过对 CR 的操作实现某个功能的，若 CR 不规范可能会导致某些问题，所以对提交 CR 的校验是不可避免的一个步骤。\n\nkubernetes 目前提供了两种方式来对 CR 的校验，语法校验(`OpenAPI v3 schema`） 和语义校验\n(`validatingadmissionwebhook`）。\n\nCRD 的一个示例：\n\n```\napiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  # name must match the spec fields below, and be in the form: <plural>.<group>\n  name: kubernetesclusters.ecs.yun.com\nspec:\n  # group name to use for REST API: /apis/<group>/<version>\n  group: ecs.yun.com\n  # list of versions supported by this CustomResourceDefinition\n  versions:\n    - name: v1\n      # Each version can be enabled/disabled by Served flag.\n      served: true\n      # One and only one version must be marked as the storage version.\n      storage: true\n  # either Namespaced or Cluster\n  scope: Namespaced\n  names:\n    # plural name to be used in the URL: /apis/<group>/<version>/<plural>\n    plural: kubernetesclusters\n    # singular name to be used as an alias on the CLI and for display\n    singular: kubernetescluster\n    # kind is normally the CamelCased singular type. Your resource manifests use this.\n    kind: KubernetesCluster\n\t  # listKind\n    listKind: KubernetesClusterList\n    # shortNames allow shorter string to match your resource on the CLI\n    shortNames:\n    - ecs\n```\n\n\n\nCRD 的一个对象：\n\n```\napiVersion: ecs.yun.com/v1\nkind: KubernetesCluster\nmetadata:\n  name: test-cluster\nspec:\n  clusterType: kubernetes\n  serviceCIDR: ''\n  masterList:\n  - ip: 192.168.1.10\n  nodeList:\n  - ip: 192.168.1.11\n  privateSSHKey: ''\n  scaleUp: 0\n  scaleDown: 0\n```\n\n\n\n#### 一、OpenAPI v3 schema \n\n[OpenAPI](https://github.com/OAI/OpenAPI-Specification) 是针对 REST API 的 API 描述格式，也是一种规范。\n\n```\napiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: kubernetesclusters.ecs.yun.com\nspec:\n  group: ecs.yun.com\n  versions:\n    - name: v1\n      served: true\n      storage: true\n  scope: Namespaced\n  names:\n    plural: kubernetesclusters\n    singular: kubernetescluster\n    kind: KubernetesCluster\n    listKind: KubernetesClusterList\n    shortNames:\n    - ecs\n  validation:\n    openAPIV3Schema:\n      properties:\n        spec:\n\t\t      type: object\n          required:\n          - clusterType\n          - masterList\n          - nodeList\n          properties:\n            clusterType:\n              type: string\n            scaleUp:\n              type: integer\n            scaleDown:\n              type: integer\n              minimum: 0\n```\n\n上面是使用 OpenAPI v3 检验的一个例子，OpenAPI v3 仅支持一些简单的校验规则，可以校验参数的类型，参数值的类型(支持正则)，是否为必要参数等，但若要使用与、或、非等操作对多个字段同时校验还是做不到的，所以针对一些特定场景的校验需要使用 admission webhook。 \n\n\n\n#### 二、Admission Webhooks\n\nadmission control 在 apiserver 中进行配置的，使用`--enable-admission-plugins` 或 `--admission-control`进行启用，admission control 配置的控制器列表是有顺序的，越靠前的越先执行，一旦某个控制器返回的结果是reject 的，那么整个准入控制阶段立刻结束，所以这里的配置顺序是有序的，建议使用官方的顺序配置。\n\n在 v1.9 中，admission webhook 是通过在 `--admission-control` 中配置 `ValidatingAdmissionWebhook` 或 `MutatingAdmissionWebhook` 来支持使用的，两者区别如下：\n\n- MutatingAdmissionWebhook：允许在 webhook 中对 object 进行 mutate 修改，但匹配到的 webhook **串行**执行，因为每个 webhook 都可能会 mutate object。\n- ValidatingAdmissionWebhook: 不允许在 webhook 中对 Object 进行 mutate 修改，仅返回 true 或 false。\n\n启用 admission webhook 后，每次对 CR 做 CRUD 操作时，请求就会被 apiserver 拦住，至于 CRUD 中哪些请求被拦住都是提前在 WebhookConfiguration 中配置的，然后会调用 AdmissionWebhook 进行检查是否 Admit 通过。\n\n\n\n![kubernetes API request lifecycle](http://cdn.tianfeiyu.com/1562032999173.jpg)\n\n\n\n#### 三、启用 Admission Webhooks 功能\n\n> kubernetes 版本 >= v1.9\n\n1、在 apiserver 中开启 admission webhooks\n\n在 v1.9 版本中使用的是：\n\n```shell\n--admission-control=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota\n```\n\n在 v1.10 以后会弃用 `--admission-control`，取而代之的是  `--enable-admission-plugins`：\n\n```\n--enable-admission-plugins=NodeRestriction,NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota\n```\n\n启用之后在 api-resources 可以看到：\n\n```\n# kubectl api-resources | grep admissionregistration\nmutatingwebhookconfigurations                  admissionregistration.k8s.io   false        MutatingWebhookConfiguration\nvalidatingwebhookconfigurations                admissionregistration.k8s.io   false        ValidatingWebhookConfiguration\n```\n\n2、启用 `admissionregistration.k8s.io/v1alpha1` API\n\n```\n//  检查 API 是否已启用\n$ kubectl api-versions | grep admissionregistration.k8s.io\n```\n若不存在则需要在 apiserver 的配置中添加`--runtime-config=admissionregistration.k8s.io/v1alpha1`。\n\n#### 四、编写 Admission Webhook Server\n\nwebhook 其实就是一个 RESTful API 里面加上自己的一些校验逻辑。\n\n可以参考官方的示例： \n[https://github.com/kubernetes/kubernetes/blob/v1.13.0/test/images/webhook/main.go](https://github.com/kubernetes/kubernetes/blob/v1.13.0/test/images/webhook/main.go) \n或者 \n[https://github.com/kubernetes/kubernetes/blob/v1.13.0/test/e2e/apimachinery/webhook.go](https://github.com/kubernetes/kubernetes/blob/v1.13.0/test/e2e/apimachinery/webhook.go)\n\n\n\n> 完整代码参考：[https://github.com/gosoon/admission-webhook](https://github.com/gosoon/admission-webhook)\n\n#### 五、部署 Admission Webhook Service\n\n由于 apiserver 调用 webhook 时强制使用 TLS 认证，所以 WebhookConfiguration 中一定要配置 caBundle，也就是需要自己生成一套私有证书。\n\n生成证书的方式比较多，以下使用 openssl 生成，脚本如下所示：\n\n```\n#!/bin/bash\n\n# Generate the CA cert and private key\nopenssl req -nodes -new -x509 -keyout ca.key -out ca.crt -subj \"/CN=admission-webhook CA\"\n\n# Generate the private key for the webhook server\nopenssl genrsa -out admission-webhook-tls.key 2048\n\n# Generate a Certificate Signing Request (CSR) for the private key, and sign it with the private key of the CA.\nopenssl req -new -key admission-webhook-tls.key -subj \"/CN=admission-webhook.ecs-system.svc\" \\\n    | openssl x509 -req -CA ca.crt -CAkey ca.key -CAcreateserial -out admission-webhook-tls.crt\n\n# Generate pem\nopenssl base64 -A < ca.crt > ca.pem\n```\n\n生成证书后将 ca.pem 中的内容复制到 caBundle 处。\n\nValidatingWebhook yaml 文件如下：\n\n```\napiVersion: admissionregistration.k8s.io/v1beta1\nkind: ValidatingWebhookConfiguration\nmetadata:\n  name: admission-webhook\nwebhooks:\n  - name: admission-webhook.ecs-system.svc  # 必须为 <svc_name>.<svc_namespace>.svc.\n    failurePolicy: Ignore\n    clientConfig:\n      service:\n        name: admission-webhook\n        namespace: ecs-system\n        path: /ecs/operator/cluster  # webhook controller\n      caBundle: xxx\n    rules:\n      - operations:   # 需要校验的方法\n        - CREATE\n        - UPDATE\n        apiGroups:    # api group\n        - ecs.yun.com\n        apiVersions:  # version\n        - v1\n        resources:    # resource\n        - kubernetesclusters\n```\n\n注意 `failurePolicy` 可以为 `Ignore`或者`Fail`，意味着如果和 webhook 通信出现问题导致调用失败，将根据 `failurePolicy`决定忽略失败（admit）还是准入失败(reject)。\n\n最后将 webhook 部署在集群中。\n\n\n\n参考：\nhttps://github.com/gosoon/admission-webhook\nhttps://banzaicloud.com/blog/k8s-admission-webhooks/\n[http://blog.fatedier.com/2019/03/20/k8s-crd/](http://blog.fatedier.com/2019/03/20/k8s-crd/)\nhttps://my.oschina.net/jxcdwangtao/blog/1591681\nhttps://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/\nhttps://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#is-there-a-recommended-set-of-admission-controllers-to-use\nhttps://istio.io/zh/help/ops/setup/validation/\nhttps://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions/\n","slug":"k8s_crd_verify","published":1,"updated":"2019-07-02T03:07:01.313Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjycnhjly000f5vwnd064wo46","content":"<p>在以前的版本若要对 apiserver 的请求做一些访问控制，必须修改 apiserver 的源代码然后重新编译部署，非常麻烦也不灵活，apiserver 也支持一些动态的准入控制器，在 apiserver 配置中看到的<code>ServiceAccount,NamespaceLifecycle,NamespaceExists,LimitRanger,ResourceQuota</code> 等都是 apiserver 的准入控制器，但这些都是 kubernetes 中默认内置的。在 v1.9 中，kubernetes 的动态准入控制器功能中支持了  Admission Webhooks，即用户可以以插件的方式对 apiserver 的请求做一些访问控制，要使用该功能需要自己写一个 admission webhook，apiserver 会在请求通过认证和授权之后、对象被持久化之前拦截该请求，然后调用 webhook 已达到准入控制，比如 Istio 中 sidecar 的注入就是通过这种方式实现的，在创建 Pod 阶段 apiserver 会回调 webhook 然后将 Sidecar 代理注入至用户 Pod。 本文主要介绍如何使用 AdmissionWebhook 对 CR 的校验，一般在开发 operator 过程中，都是通过对 CR 的操作实现某个功能的，若 CR 不规范可能会导致某些问题，所以对提交 CR 的校验是不可避免的一个步骤。</p>\n<p>kubernetes 目前提供了两种方式来对 CR 的校验，语法校验(<code>OpenAPI v3 schema</code>） 和语义校验<br>(<code>validatingadmissionwebhook</code>）。</p>\n<p>CRD 的一个示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: apiextensions.k8s.io/v1beta1</span><br><span class=\"line\">kind: CustomResourceDefinition</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  # name must match the spec fields below, and be in the form: &lt;plural&gt;.&lt;group&gt;</span><br><span class=\"line\">  name: kubernetesclusters.ecs.yun.com</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  # group name to use for REST API: /apis/&lt;group&gt;/&lt;version&gt;</span><br><span class=\"line\">  group: ecs.yun.com</span><br><span class=\"line\">  # list of versions supported by this CustomResourceDefinition</span><br><span class=\"line\">  versions:</span><br><span class=\"line\">    - name: v1</span><br><span class=\"line\">      # Each version can be enabled/disabled by Served flag.</span><br><span class=\"line\">      served: true</span><br><span class=\"line\">      # One and only one version must be marked as the storage version.</span><br><span class=\"line\">      storage: true</span><br><span class=\"line\">  # either Namespaced or Cluster</span><br><span class=\"line\">  scope: Namespaced</span><br><span class=\"line\">  names:</span><br><span class=\"line\">    # plural name to be used in the URL: /apis/&lt;group&gt;/&lt;version&gt;/&lt;plural&gt;</span><br><span class=\"line\">    plural: kubernetesclusters</span><br><span class=\"line\">    # singular name to be used as an alias on the CLI and for display</span><br><span class=\"line\">    singular: kubernetescluster</span><br><span class=\"line\">    # kind is normally the CamelCased singular type. Your resource manifests use this.</span><br><span class=\"line\">    kind: KubernetesCluster</span><br><span class=\"line\">\t  # listKind</span><br><span class=\"line\">    listKind: KubernetesClusterList</span><br><span class=\"line\">    # shortNames allow shorter string to match your resource on the CLI</span><br><span class=\"line\">    shortNames:</span><br><span class=\"line\">    - ecs</span><br></pre></td></tr></table></figure>\n<p>CRD 的一个对象：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: ecs.yun.com/v1</span><br><span class=\"line\">kind: KubernetesCluster</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: test-cluster</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  clusterType: kubernetes</span><br><span class=\"line\">  serviceCIDR: &apos;&apos;</span><br><span class=\"line\">  masterList:</span><br><span class=\"line\">  - ip: 192.168.1.10</span><br><span class=\"line\">  nodeList:</span><br><span class=\"line\">  - ip: 192.168.1.11</span><br><span class=\"line\">  privateSSHKey: &apos;&apos;</span><br><span class=\"line\">  scaleUp: 0</span><br><span class=\"line\">  scaleDown: 0</span><br></pre></td></tr></table></figure>\n<h4 id=\"一、OpenAPI-v3-schema\"><a href=\"#一、OpenAPI-v3-schema\" class=\"headerlink\" title=\"一、OpenAPI v3 schema\"></a>一、OpenAPI v3 schema</h4><p><a href=\"https://github.com/OAI/OpenAPI-Specification\" target=\"_blank\" rel=\"noopener\">OpenAPI</a> 是针对 REST API 的 API 描述格式，也是一种规范。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: apiextensions.k8s.io/v1beta1</span><br><span class=\"line\">kind: CustomResourceDefinition</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: kubernetesclusters.ecs.yun.com</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  group: ecs.yun.com</span><br><span class=\"line\">  versions:</span><br><span class=\"line\">    - name: v1</span><br><span class=\"line\">      served: true</span><br><span class=\"line\">      storage: true</span><br><span class=\"line\">  scope: Namespaced</span><br><span class=\"line\">  names:</span><br><span class=\"line\">    plural: kubernetesclusters</span><br><span class=\"line\">    singular: kubernetescluster</span><br><span class=\"line\">    kind: KubernetesCluster</span><br><span class=\"line\">    listKind: KubernetesClusterList</span><br><span class=\"line\">    shortNames:</span><br><span class=\"line\">    - ecs</span><br><span class=\"line\">  validation:</span><br><span class=\"line\">    openAPIV3Schema:</span><br><span class=\"line\">      properties:</span><br><span class=\"line\">        spec:</span><br><span class=\"line\">\t\t      type: object</span><br><span class=\"line\">          required:</span><br><span class=\"line\">          - clusterType</span><br><span class=\"line\">          - masterList</span><br><span class=\"line\">          - nodeList</span><br><span class=\"line\">          properties:</span><br><span class=\"line\">            clusterType:</span><br><span class=\"line\">              type: string</span><br><span class=\"line\">            scaleUp:</span><br><span class=\"line\">              type: integer</span><br><span class=\"line\">            scaleDown:</span><br><span class=\"line\">              type: integer</span><br><span class=\"line\">              minimum: 0</span><br></pre></td></tr></table></figure>\n<p>上面是使用 OpenAPI v3 检验的一个例子，OpenAPI v3 仅支持一些简单的校验规则，可以校验参数的类型，参数值的类型(支持正则)，是否为必要参数等，但若要使用与、或、非等操作对多个字段同时校验还是做不到的，所以针对一些特定场景的校验需要使用 admission webhook。 </p>\n<h4 id=\"二、Admission-Webhooks\"><a href=\"#二、Admission-Webhooks\" class=\"headerlink\" title=\"二、Admission Webhooks\"></a>二、Admission Webhooks</h4><p>admission control 在 apiserver 中进行配置的，使用<code>--enable-admission-plugins</code> 或 <code>--admission-control</code>进行启用，admission control 配置的控制器列表是有顺序的，越靠前的越先执行，一旦某个控制器返回的结果是reject 的，那么整个准入控制阶段立刻结束，所以这里的配置顺序是有序的，建议使用官方的顺序配置。</p>\n<p>在 v1.9 中，admission webhook 是通过在 <code>--admission-control</code> 中配置 <code>ValidatingAdmissionWebhook</code> 或 <code>MutatingAdmissionWebhook</code> 来支持使用的，两者区别如下：</p>\n<ul>\n<li>MutatingAdmissionWebhook：允许在 webhook 中对 object 进行 mutate 修改，但匹配到的 webhook <strong>串行</strong>执行，因为每个 webhook 都可能会 mutate object。</li>\n<li>ValidatingAdmissionWebhook: 不允许在 webhook 中对 Object 进行 mutate 修改，仅返回 true 或 false。</li>\n</ul>\n<p>启用 admission webhook 后，每次对 CR 做 CRUD 操作时，请求就会被 apiserver 拦住，至于 CRUD 中哪些请求被拦住都是提前在 WebhookConfiguration 中配置的，然后会调用 AdmissionWebhook 进行检查是否 Admit 通过。</p>\n<p><img src=\"http://cdn.tianfeiyu.com/1562032999173.jpg\" alt=\"kubernetes API request lifecycle\"></p>\n<h4 id=\"三、启用-Admission-Webhooks-功能\"><a href=\"#三、启用-Admission-Webhooks-功能\" class=\"headerlink\" title=\"三、启用 Admission Webhooks 功能\"></a>三、启用 Admission Webhooks 功能</h4><blockquote>\n<p>kubernetes 版本 &gt;= v1.9</p>\n</blockquote>\n<p>1、在 apiserver 中开启 admission webhooks</p>\n<p>在 v1.9 版本中使用的是：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--admission-control=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota</span><br></pre></td></tr></table></figure>\n<p>在 v1.10 以后会弃用 <code>--admission-control</code>，取而代之的是  <code>--enable-admission-plugins</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--enable-admission-plugins=NodeRestriction,NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota</span><br></pre></td></tr></table></figure>\n<p>启用之后在 api-resources 可以看到：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># kubectl api-resources | grep admissionregistration</span><br><span class=\"line\">mutatingwebhookconfigurations                  admissionregistration.k8s.io   false        MutatingWebhookConfiguration</span><br><span class=\"line\">validatingwebhookconfigurations                admissionregistration.k8s.io   false        ValidatingWebhookConfiguration</span><br></pre></td></tr></table></figure>\n<p>2、启用 <code>admissionregistration.k8s.io/v1alpha1</code> API</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//  检查 API 是否已启用</span><br><span class=\"line\">$ kubectl api-versions | grep admissionregistration.k8s.io</span><br></pre></td></tr></table></figure>\n<p>若不存在则需要在 apiserver 的配置中添加<code>--runtime-config=admissionregistration.k8s.io/v1alpha1</code>。</p>\n<h4 id=\"四、编写-Admission-Webhook-Server\"><a href=\"#四、编写-Admission-Webhook-Server\" class=\"headerlink\" title=\"四、编写 Admission Webhook Server\"></a>四、编写 Admission Webhook Server</h4><p>webhook 其实就是一个 RESTful API 里面加上自己的一些校验逻辑。</p>\n<p>可以参考官方的示例：<br><a href=\"https://github.com/kubernetes/kubernetes/blob/v1.13.0/test/images/webhook/main.go\" target=\"_blank\" rel=\"noopener\">https://github.com/kubernetes/kubernetes/blob/v1.13.0/test/images/webhook/main.go</a><br>或者<br><a href=\"https://github.com/kubernetes/kubernetes/blob/v1.13.0/test/e2e/apimachinery/webhook.go\" target=\"_blank\" rel=\"noopener\">https://github.com/kubernetes/kubernetes/blob/v1.13.0/test/e2e/apimachinery/webhook.go</a></p>\n<blockquote>\n<p>完整代码参考：<a href=\"https://github.com/gosoon/admission-webhook\" target=\"_blank\" rel=\"noopener\">https://github.com/gosoon/admission-webhook</a></p>\n</blockquote>\n<h4 id=\"五、部署-Admission-Webhook-Service\"><a href=\"#五、部署-Admission-Webhook-Service\" class=\"headerlink\" title=\"五、部署 Admission Webhook Service\"></a>五、部署 Admission Webhook Service</h4><p>由于 apiserver 调用 webhook 时强制使用 TLS 认证，所以 WebhookConfiguration 中一定要配置 caBundle，也就是需要自己生成一套私有证书。</p>\n<p>生成证书的方式比较多，以下使用 openssl 生成，脚本如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\"># Generate the CA cert and private key</span><br><span class=\"line\">openssl req -nodes -new -x509 -keyout ca.key -out ca.crt -subj &quot;/CN=admission-webhook CA&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># Generate the private key for the webhook server</span><br><span class=\"line\">openssl genrsa -out admission-webhook-tls.key 2048</span><br><span class=\"line\"></span><br><span class=\"line\"># Generate a Certificate Signing Request (CSR) for the private key, and sign it with the private key of the CA.</span><br><span class=\"line\">openssl req -new -key admission-webhook-tls.key -subj &quot;/CN=admission-webhook.ecs-system.svc&quot; \\</span><br><span class=\"line\">    | openssl x509 -req -CA ca.crt -CAkey ca.key -CAcreateserial -out admission-webhook-tls.crt</span><br><span class=\"line\"></span><br><span class=\"line\"># Generate pem</span><br><span class=\"line\">openssl base64 -A &lt; ca.crt &gt; ca.pem</span><br></pre></td></tr></table></figure>\n<p>生成证书后将 ca.pem 中的内容复制到 caBundle 处。</p>\n<p>ValidatingWebhook yaml 文件如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: admissionregistration.k8s.io/v1beta1</span><br><span class=\"line\">kind: ValidatingWebhookConfiguration</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: admission-webhook</span><br><span class=\"line\">webhooks:</span><br><span class=\"line\">  - name: admission-webhook.ecs-system.svc  # 必须为 &lt;svc_name&gt;.&lt;svc_namespace&gt;.svc.</span><br><span class=\"line\">    failurePolicy: Ignore</span><br><span class=\"line\">    clientConfig:</span><br><span class=\"line\">      service:</span><br><span class=\"line\">        name: admission-webhook</span><br><span class=\"line\">        namespace: ecs-system</span><br><span class=\"line\">        path: /ecs/operator/cluster  # webhook controller</span><br><span class=\"line\">      caBundle: xxx</span><br><span class=\"line\">    rules:</span><br><span class=\"line\">      - operations:   # 需要校验的方法</span><br><span class=\"line\">        - CREATE</span><br><span class=\"line\">        - UPDATE</span><br><span class=\"line\">        apiGroups:    # api group</span><br><span class=\"line\">        - ecs.yun.com</span><br><span class=\"line\">        apiVersions:  # version</span><br><span class=\"line\">        - v1</span><br><span class=\"line\">        resources:    # resource</span><br><span class=\"line\">        - kubernetesclusters</span><br></pre></td></tr></table></figure>\n<p>注意 <code>failurePolicy</code> 可以为 <code>Ignore</code>或者<code>Fail</code>，意味着如果和 webhook 通信出现问题导致调用失败，将根据 <code>failurePolicy</code>决定忽略失败（admit）还是准入失败(reject)。</p>\n<p>最后将 webhook 部署在集群中。</p>\n<p>参考：<br><a href=\"https://github.com/gosoon/admission-webhook\" target=\"_blank\" rel=\"noopener\">https://github.com/gosoon/admission-webhook</a><br><a href=\"https://banzaicloud.com/blog/k8s-admission-webhooks/\" target=\"_blank\" rel=\"noopener\">https://banzaicloud.com/blog/k8s-admission-webhooks/</a><br><a href=\"http://blog.fatedier.com/2019/03/20/k8s-crd/\" target=\"_blank\" rel=\"noopener\">http://blog.fatedier.com/2019/03/20/k8s-crd/</a><br><a href=\"https://my.oschina.net/jxcdwangtao/blog/1591681\" target=\"_blank\" rel=\"noopener\">https://my.oschina.net/jxcdwangtao/blog/1591681</a><br><a href=\"https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/\" target=\"_blank\" rel=\"noopener\">https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/</a><br><a href=\"https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#is-there-a-recommended-set-of-admission-controllers-to-use\" target=\"_blank\" rel=\"noopener\">https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#is-there-a-recommended-set-of-admission-controllers-to-use</a><br><a href=\"https://istio.io/zh/help/ops/setup/validation/\" target=\"_blank\" rel=\"noopener\">https://istio.io/zh/help/ops/setup/validation/</a><br><a href=\"https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions/\" target=\"_blank\" rel=\"noopener\">https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>在以前的版本若要对 apiserver 的请求做一些访问控制，必须修改 apiserver 的源代码然后重新编译部署，非常麻烦也不灵活，apiserver 也支持一些动态的准入控制器，在 apiserver 配置中看到的<code>ServiceAccount,NamespaceLifecycle,NamespaceExists,LimitRanger,ResourceQuota</code> 等都是 apiserver 的准入控制器，但这些都是 kubernetes 中默认内置的。在 v1.9 中，kubernetes 的动态准入控制器功能中支持了  Admission Webhooks，即用户可以以插件的方式对 apiserver 的请求做一些访问控制，要使用该功能需要自己写一个 admission webhook，apiserver 会在请求通过认证和授权之后、对象被持久化之前拦截该请求，然后调用 webhook 已达到准入控制，比如 Istio 中 sidecar 的注入就是通过这种方式实现的，在创建 Pod 阶段 apiserver 会回调 webhook 然后将 Sidecar 代理注入至用户 Pod。 本文主要介绍如何使用 AdmissionWebhook 对 CR 的校验，一般在开发 operator 过程中，都是通过对 CR 的操作实现某个功能的，若 CR 不规范可能会导致某些问题，所以对提交 CR 的校验是不可避免的一个步骤。</p>\n<p>kubernetes 目前提供了两种方式来对 CR 的校验，语法校验(<code>OpenAPI v3 schema</code>） 和语义校验<br>(<code>validatingadmissionwebhook</code>）。</p>\n<p>CRD 的一个示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: apiextensions.k8s.io/v1beta1</span><br><span class=\"line\">kind: CustomResourceDefinition</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  # name must match the spec fields below, and be in the form: &lt;plural&gt;.&lt;group&gt;</span><br><span class=\"line\">  name: kubernetesclusters.ecs.yun.com</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  # group name to use for REST API: /apis/&lt;group&gt;/&lt;version&gt;</span><br><span class=\"line\">  group: ecs.yun.com</span><br><span class=\"line\">  # list of versions supported by this CustomResourceDefinition</span><br><span class=\"line\">  versions:</span><br><span class=\"line\">    - name: v1</span><br><span class=\"line\">      # Each version can be enabled/disabled by Served flag.</span><br><span class=\"line\">      served: true</span><br><span class=\"line\">      # One and only one version must be marked as the storage version.</span><br><span class=\"line\">      storage: true</span><br><span class=\"line\">  # either Namespaced or Cluster</span><br><span class=\"line\">  scope: Namespaced</span><br><span class=\"line\">  names:</span><br><span class=\"line\">    # plural name to be used in the URL: /apis/&lt;group&gt;/&lt;version&gt;/&lt;plural&gt;</span><br><span class=\"line\">    plural: kubernetesclusters</span><br><span class=\"line\">    # singular name to be used as an alias on the CLI and for display</span><br><span class=\"line\">    singular: kubernetescluster</span><br><span class=\"line\">    # kind is normally the CamelCased singular type. Your resource manifests use this.</span><br><span class=\"line\">    kind: KubernetesCluster</span><br><span class=\"line\">\t  # listKind</span><br><span class=\"line\">    listKind: KubernetesClusterList</span><br><span class=\"line\">    # shortNames allow shorter string to match your resource on the CLI</span><br><span class=\"line\">    shortNames:</span><br><span class=\"line\">    - ecs</span><br></pre></td></tr></table></figure>\n<p>CRD 的一个对象：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: ecs.yun.com/v1</span><br><span class=\"line\">kind: KubernetesCluster</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: test-cluster</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  clusterType: kubernetes</span><br><span class=\"line\">  serviceCIDR: &apos;&apos;</span><br><span class=\"line\">  masterList:</span><br><span class=\"line\">  - ip: 192.168.1.10</span><br><span class=\"line\">  nodeList:</span><br><span class=\"line\">  - ip: 192.168.1.11</span><br><span class=\"line\">  privateSSHKey: &apos;&apos;</span><br><span class=\"line\">  scaleUp: 0</span><br><span class=\"line\">  scaleDown: 0</span><br></pre></td></tr></table></figure>\n<h4 id=\"一、OpenAPI-v3-schema\"><a href=\"#一、OpenAPI-v3-schema\" class=\"headerlink\" title=\"一、OpenAPI v3 schema\"></a>一、OpenAPI v3 schema</h4><p><a href=\"https://github.com/OAI/OpenAPI-Specification\" target=\"_blank\" rel=\"noopener\">OpenAPI</a> 是针对 REST API 的 API 描述格式，也是一种规范。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: apiextensions.k8s.io/v1beta1</span><br><span class=\"line\">kind: CustomResourceDefinition</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: kubernetesclusters.ecs.yun.com</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  group: ecs.yun.com</span><br><span class=\"line\">  versions:</span><br><span class=\"line\">    - name: v1</span><br><span class=\"line\">      served: true</span><br><span class=\"line\">      storage: true</span><br><span class=\"line\">  scope: Namespaced</span><br><span class=\"line\">  names:</span><br><span class=\"line\">    plural: kubernetesclusters</span><br><span class=\"line\">    singular: kubernetescluster</span><br><span class=\"line\">    kind: KubernetesCluster</span><br><span class=\"line\">    listKind: KubernetesClusterList</span><br><span class=\"line\">    shortNames:</span><br><span class=\"line\">    - ecs</span><br><span class=\"line\">  validation:</span><br><span class=\"line\">    openAPIV3Schema:</span><br><span class=\"line\">      properties:</span><br><span class=\"line\">        spec:</span><br><span class=\"line\">\t\t      type: object</span><br><span class=\"line\">          required:</span><br><span class=\"line\">          - clusterType</span><br><span class=\"line\">          - masterList</span><br><span class=\"line\">          - nodeList</span><br><span class=\"line\">          properties:</span><br><span class=\"line\">            clusterType:</span><br><span class=\"line\">              type: string</span><br><span class=\"line\">            scaleUp:</span><br><span class=\"line\">              type: integer</span><br><span class=\"line\">            scaleDown:</span><br><span class=\"line\">              type: integer</span><br><span class=\"line\">              minimum: 0</span><br></pre></td></tr></table></figure>\n<p>上面是使用 OpenAPI v3 检验的一个例子，OpenAPI v3 仅支持一些简单的校验规则，可以校验参数的类型，参数值的类型(支持正则)，是否为必要参数等，但若要使用与、或、非等操作对多个字段同时校验还是做不到的，所以针对一些特定场景的校验需要使用 admission webhook。 </p>\n<h4 id=\"二、Admission-Webhooks\"><a href=\"#二、Admission-Webhooks\" class=\"headerlink\" title=\"二、Admission Webhooks\"></a>二、Admission Webhooks</h4><p>admission control 在 apiserver 中进行配置的，使用<code>--enable-admission-plugins</code> 或 <code>--admission-control</code>进行启用，admission control 配置的控制器列表是有顺序的，越靠前的越先执行，一旦某个控制器返回的结果是reject 的，那么整个准入控制阶段立刻结束，所以这里的配置顺序是有序的，建议使用官方的顺序配置。</p>\n<p>在 v1.9 中，admission webhook 是通过在 <code>--admission-control</code> 中配置 <code>ValidatingAdmissionWebhook</code> 或 <code>MutatingAdmissionWebhook</code> 来支持使用的，两者区别如下：</p>\n<ul>\n<li>MutatingAdmissionWebhook：允许在 webhook 中对 object 进行 mutate 修改，但匹配到的 webhook <strong>串行</strong>执行，因为每个 webhook 都可能会 mutate object。</li>\n<li>ValidatingAdmissionWebhook: 不允许在 webhook 中对 Object 进行 mutate 修改，仅返回 true 或 false。</li>\n</ul>\n<p>启用 admission webhook 后，每次对 CR 做 CRUD 操作时，请求就会被 apiserver 拦住，至于 CRUD 中哪些请求被拦住都是提前在 WebhookConfiguration 中配置的，然后会调用 AdmissionWebhook 进行检查是否 Admit 通过。</p>\n<p><img src=\"http://cdn.tianfeiyu.com/1562032999173.jpg\" alt=\"kubernetes API request lifecycle\"></p>\n<h4 id=\"三、启用-Admission-Webhooks-功能\"><a href=\"#三、启用-Admission-Webhooks-功能\" class=\"headerlink\" title=\"三、启用 Admission Webhooks 功能\"></a>三、启用 Admission Webhooks 功能</h4><blockquote>\n<p>kubernetes 版本 &gt;= v1.9</p>\n</blockquote>\n<p>1、在 apiserver 中开启 admission webhooks</p>\n<p>在 v1.9 版本中使用的是：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--admission-control=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota</span><br></pre></td></tr></table></figure>\n<p>在 v1.10 以后会弃用 <code>--admission-control</code>，取而代之的是  <code>--enable-admission-plugins</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--enable-admission-plugins=NodeRestriction,NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota</span><br></pre></td></tr></table></figure>\n<p>启用之后在 api-resources 可以看到：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># kubectl api-resources | grep admissionregistration</span><br><span class=\"line\">mutatingwebhookconfigurations                  admissionregistration.k8s.io   false        MutatingWebhookConfiguration</span><br><span class=\"line\">validatingwebhookconfigurations                admissionregistration.k8s.io   false        ValidatingWebhookConfiguration</span><br></pre></td></tr></table></figure>\n<p>2、启用 <code>admissionregistration.k8s.io/v1alpha1</code> API</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//  检查 API 是否已启用</span><br><span class=\"line\">$ kubectl api-versions | grep admissionregistration.k8s.io</span><br></pre></td></tr></table></figure>\n<p>若不存在则需要在 apiserver 的配置中添加<code>--runtime-config=admissionregistration.k8s.io/v1alpha1</code>。</p>\n<h4 id=\"四、编写-Admission-Webhook-Server\"><a href=\"#四、编写-Admission-Webhook-Server\" class=\"headerlink\" title=\"四、编写 Admission Webhook Server\"></a>四、编写 Admission Webhook Server</h4><p>webhook 其实就是一个 RESTful API 里面加上自己的一些校验逻辑。</p>\n<p>可以参考官方的示例：<br><a href=\"https://github.com/kubernetes/kubernetes/blob/v1.13.0/test/images/webhook/main.go\" target=\"_blank\" rel=\"noopener\">https://github.com/kubernetes/kubernetes/blob/v1.13.0/test/images/webhook/main.go</a><br>或者<br><a href=\"https://github.com/kubernetes/kubernetes/blob/v1.13.0/test/e2e/apimachinery/webhook.go\" target=\"_blank\" rel=\"noopener\">https://github.com/kubernetes/kubernetes/blob/v1.13.0/test/e2e/apimachinery/webhook.go</a></p>\n<blockquote>\n<p>完整代码参考：<a href=\"https://github.com/gosoon/admission-webhook\" target=\"_blank\" rel=\"noopener\">https://github.com/gosoon/admission-webhook</a></p>\n</blockquote>\n<h4 id=\"五、部署-Admission-Webhook-Service\"><a href=\"#五、部署-Admission-Webhook-Service\" class=\"headerlink\" title=\"五、部署 Admission Webhook Service\"></a>五、部署 Admission Webhook Service</h4><p>由于 apiserver 调用 webhook 时强制使用 TLS 认证，所以 WebhookConfiguration 中一定要配置 caBundle，也就是需要自己生成一套私有证书。</p>\n<p>生成证书的方式比较多，以下使用 openssl 生成，脚本如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\"># Generate the CA cert and private key</span><br><span class=\"line\">openssl req -nodes -new -x509 -keyout ca.key -out ca.crt -subj &quot;/CN=admission-webhook CA&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># Generate the private key for the webhook server</span><br><span class=\"line\">openssl genrsa -out admission-webhook-tls.key 2048</span><br><span class=\"line\"></span><br><span class=\"line\"># Generate a Certificate Signing Request (CSR) for the private key, and sign it with the private key of the CA.</span><br><span class=\"line\">openssl req -new -key admission-webhook-tls.key -subj &quot;/CN=admission-webhook.ecs-system.svc&quot; \\</span><br><span class=\"line\">    | openssl x509 -req -CA ca.crt -CAkey ca.key -CAcreateserial -out admission-webhook-tls.crt</span><br><span class=\"line\"></span><br><span class=\"line\"># Generate pem</span><br><span class=\"line\">openssl base64 -A &lt; ca.crt &gt; ca.pem</span><br></pre></td></tr></table></figure>\n<p>生成证书后将 ca.pem 中的内容复制到 caBundle 处。</p>\n<p>ValidatingWebhook yaml 文件如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: admissionregistration.k8s.io/v1beta1</span><br><span class=\"line\">kind: ValidatingWebhookConfiguration</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: admission-webhook</span><br><span class=\"line\">webhooks:</span><br><span class=\"line\">  - name: admission-webhook.ecs-system.svc  # 必须为 &lt;svc_name&gt;.&lt;svc_namespace&gt;.svc.</span><br><span class=\"line\">    failurePolicy: Ignore</span><br><span class=\"line\">    clientConfig:</span><br><span class=\"line\">      service:</span><br><span class=\"line\">        name: admission-webhook</span><br><span class=\"line\">        namespace: ecs-system</span><br><span class=\"line\">        path: /ecs/operator/cluster  # webhook controller</span><br><span class=\"line\">      caBundle: xxx</span><br><span class=\"line\">    rules:</span><br><span class=\"line\">      - operations:   # 需要校验的方法</span><br><span class=\"line\">        - CREATE</span><br><span class=\"line\">        - UPDATE</span><br><span class=\"line\">        apiGroups:    # api group</span><br><span class=\"line\">        - ecs.yun.com</span><br><span class=\"line\">        apiVersions:  # version</span><br><span class=\"line\">        - v1</span><br><span class=\"line\">        resources:    # resource</span><br><span class=\"line\">        - kubernetesclusters</span><br></pre></td></tr></table></figure>\n<p>注意 <code>failurePolicy</code> 可以为 <code>Ignore</code>或者<code>Fail</code>，意味着如果和 webhook 通信出现问题导致调用失败，将根据 <code>failurePolicy</code>决定忽略失败（admit）还是准入失败(reject)。</p>\n<p>最后将 webhook 部署在集群中。</p>\n<p>参考：<br><a href=\"https://github.com/gosoon/admission-webhook\" target=\"_blank\" rel=\"noopener\">https://github.com/gosoon/admission-webhook</a><br><a href=\"https://banzaicloud.com/blog/k8s-admission-webhooks/\" target=\"_blank\" rel=\"noopener\">https://banzaicloud.com/blog/k8s-admission-webhooks/</a><br><a href=\"http://blog.fatedier.com/2019/03/20/k8s-crd/\" target=\"_blank\" rel=\"noopener\">http://blog.fatedier.com/2019/03/20/k8s-crd/</a><br><a href=\"https://my.oschina.net/jxcdwangtao/blog/1591681\" target=\"_blank\" rel=\"noopener\">https://my.oschina.net/jxcdwangtao/blog/1591681</a><br><a href=\"https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/\" target=\"_blank\" rel=\"noopener\">https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/</a><br><a href=\"https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#is-there-a-recommended-set-of-admission-controllers-to-use\" target=\"_blank\" rel=\"noopener\">https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#is-there-a-recommended-set-of-admission-controllers-to-use</a><br><a href=\"https://istio.io/zh/help/ops/setup/validation/\" target=\"_blank\" rel=\"noopener\">https://istio.io/zh/help/ops/setup/validation/</a><br><a href=\"https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions/\" target=\"_blank\" rel=\"noopener\">https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions/</a></p>\n"},{"title":"部署 kubernetes 可视化监控组件","date":"2019-04-22T14:43:30.000Z","type":"kubernetes","_content":"\n随着 kubernetes 的大规模使用，对 kubernetes 组件及其上运行服务的监控也是非常重要的一个环节，目前开源的监控组件有很多种，例如 cAdvisor、Heapster、metrics-server、kube-state-metrics、Prometheus 等，对监控数据的可视化查看组件有 Dashboard、 Prometheus、Grafana 等，本文会介绍 kube-dashboard 和基于 prometheus 搭建数据可视化监控。\n\n> kubernetes 版本：v1.12\n\n### 一、kubernetes-dashboard 的部署\n\n#### 1、创建 kubernetes-dashboard\n\n```golang\n$ kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard.yaml\n\n$ kubectl get svc -n kube-system | grep kubernetes-dashboard\nkubernetes-dashboard   ClusterIP    10.101.203.44   <none>        443/TCP    2h\n\n$ kubectl get pod -n kube-system | grep kubernetes-dashboard\nkubernetes-dashboard-65c76f6c97-8npsv    1/1     Running       0          2h\n```\n\n> 所需镜像下载地址：[k8s-system-images](https://github.com/gosoon/k8s-system-images)\n\n#### 2、使用 nodePort 方式访问 kubernetes-dashboard\n\nnodeport 的访问方式虽然有性能损失但是比较简单，kubernetes-dashboard 默认使用 clusterIP 的方式暴露服务，修改 kubernetes-dashboard svc 使用 nodePort 方式：\n\n```\n$ kubectl edit svc -n kube-system\n\t...\n  spec:\n    clusterIP: 10.101.203.44\n    externalTrafficPolicy: Cluster\n    ports:\n    - nodePort: 8004  // 添加 nodeport 端口\n      port: 443\n      protocol: TCP\n      targetPort: 8443\n    selector:\n      k8s-app: kubernetes-dashboard\n    sessionAffinity: None\n    type: NodePort   // 将 ClusterIP 修改为 NodePort\n    ...\n```\n\nnodePort 端口默认为 30000-32767，若使用其他端口，需要修改 apiserver 的启动参数 `--service-node-port-range` 来指定 nodePort 范围，如：`--service-node-port-range 8000-9000`。\n\n#### 3、创建 kubernetes-dashboard 管理员角色\n\n `kubernetes-dashboard-admin.yaml`：\n\n```\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: dashboard-admin\n  namespace: kube-system\n---\nkind: ClusterRoleBinding\napiVersion: rbac.authorization.k8s.io/v1beta1\nmetadata:\n  name: dashboard-admin\nsubjects:\n  - kind: ServiceAccount\n    name: dashboard-admin\n    namespace: kube-system\nroleRef:\n  kind: ClusterRole\n  name: cluster-admin\n  apiGroup: rbac.authorization.k8s.io\n```\n\n创建角色并获取 token：\n\n```\n$ kubectl apply -f kubernetes-dashboard-admin.yaml\n\n$ kubectl describe secrets `kubectl get secret -n kube-system | grep dashboard-admin | awk '{print $1}'` -n kube-system\n\nName:         dashboard-admin-token-hrhfd\nNamespace:    kube-system\nLabels:       <none>\nAnnotations:  kubernetes.io/service-account.name: dashboard-admin\n              kubernetes.io/service-account.uid: 76805bdb-6047-11e9-ba0d-525400c322d9\n\nType:  kubernetes.io/service-account-token\n\nData\n====\nca.crt:     1025 bytes\nnamespace:  11 bytes\ntoken:      eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJkYXNoYm9hcmQtYWRtaW4tdG9rZW4taHJoZmQiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiZGFzaGJvYXJkLWFkbWluIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiNzY4MDViZGItNjA0Ny0xMWU5LWJhMGQtNTI1NDAwYzMyMmQ5Iiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50Omt1YmUtc3lzdGVtOmRhc2hib2FyZC1hZG1pbiJ9.hJJRyp_O4sGvIULj3BhqidCkkPnD4A2AtnpkXJoEPCALaaQHC8zhCA5-nDNlo2fiEggZ02UZPwiyGxKKFPC57UlKhjTf5zYcMIhELVXlj5FdBmjzCZcCHVFF4tj_rCoOFlZi6fQ3vNCcX8CtLxX_OsH1YXaFVuUmR1gYm97hbyuO382_k3tFIPXFP3QG8zUtc_7QMkeMNEakJZLCvkW8xdlaCuC-GVAMhZl5Kq1MSthuF-8HY7KaXhvqQzfD4DQZrdQ7vf_7NG3rdvhsj8nQ__TTe1W0RjqwkQuxg5YdE4gbAsxwJjkek-N0K9HfnZhkS9WosaUaUe9pZaGZ9akqyQ\n```\n\ntoken 是访问 dashboard 需要用的。\n\n\n若没有安装 kube-proxy，可以参考官方提供使用 `kubectl proxy` 的方式访问：\n\n```\n$ kubectl proxy --address=IP --disable-filter=true\n```\n\n访问 http://IP:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/#!/login\n\n已部署 kube-proxy 的可直接访问 https://IP:nodePort \n\n![](http://cdn.tianfeiyu.com/dash-1.png)\n\n选择令牌方式使用上面生成的 token 登录。\n\n![](http://cdn.tianfeiyu.com/dash-2.png)\n\nDashboard 可以使用 Ingress、Let's Encrypt 等多种方式配置 ssl，关于 ssl 的详细配置此处不进行详解。\n\n\n### 二、部署 prometheus \n\nprometheus 作为 CNCF 生态圈中的重要一员，其活跃度仅次于 Kubernetes, 现已广泛用于 Kubernetes 集群的监控系统中。prometheus 的部署相对比较简单，社区已经有了 [kube-prometheus](<https://github.com/coreos/kube-prometheus>)，kube-prometheus 会部署包含 prometheus-operator、grafana、kube-state-metrics 等多个组件。\n\n```\n$ git clone https://github.com/coreos/kube-prometheus\n\n$ kubectl apply -f manifests/\n```\n\n为了使用简单，我也会将 prometheus 和 grafana 的端口修改为 nodePort 的方式进行暴露：\n\n```\n$ kubectl edit svc prometheus-k8s -n monitoring\n\n$ kubectl edit svc grafana -n monitoring\n\n$ kubectl get svc -n monitoring\nNAME                    TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)             AGE\nalertmanager-main       NodePort    10.102.81.118   <none>        9093:8007/TCP       5d1h\nalertmanager-operated   ClusterIP   None            <none>        9093/TCP,6783/TCP   5d1h\ngrafana                 NodePort    10.96.19.82     <none>        3000:8006/TCP       5d1h\nkube-state-metrics      ClusterIP   None            <none>        8443/TCP,9443/TCP   5d1h\nnode-exporter           ClusterIP   None            <none>        9100/TCP            5d1h\nprometheus-adapter      ClusterIP   10.107.103.58   <none>        443/TCP             5d1h\nprometheus-k8s          NodePort    10.110.222.41   <none>        9090:8005/TCP       5d1h\nprometheus-operated     ClusterIP   None            <none>        9090/TCP            5d1h\nprometheus-operator     ClusterIP   None            <none>        8080/TCP            5d1h\n\n$ kubectl get pod -n monitoring\nNAME                                   READY   STATUS    RESTARTS   AGE\nalertmanager-main-0                    2/2     Running   0          4d\nalertmanager-main-1                    2/2     Running   0          4d\nalertmanager-main-2                    2/2     Running   0          4d\ngrafana-9d97dfdc7-qfjts                1/1     Running   0          4d\nkube-state-metrics-74d7dcd7dc-qfz5m    4/4     Running   0          3d11h\nnode-exporter-5cdl2                    2/2     Running   0          4d\nprometheus-adapter-b7d894c9c-dvzzq     1/1     Running   0          4d\nprometheus-k8s-0                       3/3     Running   1          2d2h\nprometheus-k8s-1                       3/3     Running   1          4d\nprometheus-operator-77b8b97459-7qfxj   1/1     Running   0          4d\n```\n\n上面几个组件成功运行后就可以在页面访问 prometheus 和 ganfana ：\n\n![](http://cdn.tianfeiyu.com/dash-3.png)\n\n进入 grafana 的 web 端，默认用户名和密码均为 admin：\n\n![](http://cdn.tianfeiyu.com/dash-4.png)\n\ngrafana 支持导入其他的 Dashboard，在 grafana 官方网站可以搜到大量与 k8s 相关的 dashboard。 \n\n### 三、总结\n\n本文介绍了对 kubernetes 和容器监控比较成熟的两个方案，虽然目前开源的方案比较多，但是要形成采集、存储、展示、报警一个完成的体系还需要在使用过程中不断探索与完善。\n","source":"_posts/k8s_dashboard_prometheus.md","raw":"---\ntitle: 部署 kubernetes 可视化监控组件\ndate: 2019-04-22 22:43:30\ntags: [\"kube-dashboard\",\"prometheus\"]\ntype: \"kubernetes\"\n\n---\n\n随着 kubernetes 的大规模使用，对 kubernetes 组件及其上运行服务的监控也是非常重要的一个环节，目前开源的监控组件有很多种，例如 cAdvisor、Heapster、metrics-server、kube-state-metrics、Prometheus 等，对监控数据的可视化查看组件有 Dashboard、 Prometheus、Grafana 等，本文会介绍 kube-dashboard 和基于 prometheus 搭建数据可视化监控。\n\n> kubernetes 版本：v1.12\n\n### 一、kubernetes-dashboard 的部署\n\n#### 1、创建 kubernetes-dashboard\n\n```golang\n$ kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard.yaml\n\n$ kubectl get svc -n kube-system | grep kubernetes-dashboard\nkubernetes-dashboard   ClusterIP    10.101.203.44   <none>        443/TCP    2h\n\n$ kubectl get pod -n kube-system | grep kubernetes-dashboard\nkubernetes-dashboard-65c76f6c97-8npsv    1/1     Running       0          2h\n```\n\n> 所需镜像下载地址：[k8s-system-images](https://github.com/gosoon/k8s-system-images)\n\n#### 2、使用 nodePort 方式访问 kubernetes-dashboard\n\nnodeport 的访问方式虽然有性能损失但是比较简单，kubernetes-dashboard 默认使用 clusterIP 的方式暴露服务，修改 kubernetes-dashboard svc 使用 nodePort 方式：\n\n```\n$ kubectl edit svc -n kube-system\n\t...\n  spec:\n    clusterIP: 10.101.203.44\n    externalTrafficPolicy: Cluster\n    ports:\n    - nodePort: 8004  // 添加 nodeport 端口\n      port: 443\n      protocol: TCP\n      targetPort: 8443\n    selector:\n      k8s-app: kubernetes-dashboard\n    sessionAffinity: None\n    type: NodePort   // 将 ClusterIP 修改为 NodePort\n    ...\n```\n\nnodePort 端口默认为 30000-32767，若使用其他端口，需要修改 apiserver 的启动参数 `--service-node-port-range` 来指定 nodePort 范围，如：`--service-node-port-range 8000-9000`。\n\n#### 3、创建 kubernetes-dashboard 管理员角色\n\n `kubernetes-dashboard-admin.yaml`：\n\n```\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: dashboard-admin\n  namespace: kube-system\n---\nkind: ClusterRoleBinding\napiVersion: rbac.authorization.k8s.io/v1beta1\nmetadata:\n  name: dashboard-admin\nsubjects:\n  - kind: ServiceAccount\n    name: dashboard-admin\n    namespace: kube-system\nroleRef:\n  kind: ClusterRole\n  name: cluster-admin\n  apiGroup: rbac.authorization.k8s.io\n```\n\n创建角色并获取 token：\n\n```\n$ kubectl apply -f kubernetes-dashboard-admin.yaml\n\n$ kubectl describe secrets `kubectl get secret -n kube-system | grep dashboard-admin | awk '{print $1}'` -n kube-system\n\nName:         dashboard-admin-token-hrhfd\nNamespace:    kube-system\nLabels:       <none>\nAnnotations:  kubernetes.io/service-account.name: dashboard-admin\n              kubernetes.io/service-account.uid: 76805bdb-6047-11e9-ba0d-525400c322d9\n\nType:  kubernetes.io/service-account-token\n\nData\n====\nca.crt:     1025 bytes\nnamespace:  11 bytes\ntoken:      eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJkYXNoYm9hcmQtYWRtaW4tdG9rZW4taHJoZmQiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiZGFzaGJvYXJkLWFkbWluIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiNzY4MDViZGItNjA0Ny0xMWU5LWJhMGQtNTI1NDAwYzMyMmQ5Iiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50Omt1YmUtc3lzdGVtOmRhc2hib2FyZC1hZG1pbiJ9.hJJRyp_O4sGvIULj3BhqidCkkPnD4A2AtnpkXJoEPCALaaQHC8zhCA5-nDNlo2fiEggZ02UZPwiyGxKKFPC57UlKhjTf5zYcMIhELVXlj5FdBmjzCZcCHVFF4tj_rCoOFlZi6fQ3vNCcX8CtLxX_OsH1YXaFVuUmR1gYm97hbyuO382_k3tFIPXFP3QG8zUtc_7QMkeMNEakJZLCvkW8xdlaCuC-GVAMhZl5Kq1MSthuF-8HY7KaXhvqQzfD4DQZrdQ7vf_7NG3rdvhsj8nQ__TTe1W0RjqwkQuxg5YdE4gbAsxwJjkek-N0K9HfnZhkS9WosaUaUe9pZaGZ9akqyQ\n```\n\ntoken 是访问 dashboard 需要用的。\n\n\n若没有安装 kube-proxy，可以参考官方提供使用 `kubectl proxy` 的方式访问：\n\n```\n$ kubectl proxy --address=IP --disable-filter=true\n```\n\n访问 http://IP:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/#!/login\n\n已部署 kube-proxy 的可直接访问 https://IP:nodePort \n\n![](http://cdn.tianfeiyu.com/dash-1.png)\n\n选择令牌方式使用上面生成的 token 登录。\n\n![](http://cdn.tianfeiyu.com/dash-2.png)\n\nDashboard 可以使用 Ingress、Let's Encrypt 等多种方式配置 ssl，关于 ssl 的详细配置此处不进行详解。\n\n\n### 二、部署 prometheus \n\nprometheus 作为 CNCF 生态圈中的重要一员，其活跃度仅次于 Kubernetes, 现已广泛用于 Kubernetes 集群的监控系统中。prometheus 的部署相对比较简单，社区已经有了 [kube-prometheus](<https://github.com/coreos/kube-prometheus>)，kube-prometheus 会部署包含 prometheus-operator、grafana、kube-state-metrics 等多个组件。\n\n```\n$ git clone https://github.com/coreos/kube-prometheus\n\n$ kubectl apply -f manifests/\n```\n\n为了使用简单，我也会将 prometheus 和 grafana 的端口修改为 nodePort 的方式进行暴露：\n\n```\n$ kubectl edit svc prometheus-k8s -n monitoring\n\n$ kubectl edit svc grafana -n monitoring\n\n$ kubectl get svc -n monitoring\nNAME                    TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)             AGE\nalertmanager-main       NodePort    10.102.81.118   <none>        9093:8007/TCP       5d1h\nalertmanager-operated   ClusterIP   None            <none>        9093/TCP,6783/TCP   5d1h\ngrafana                 NodePort    10.96.19.82     <none>        3000:8006/TCP       5d1h\nkube-state-metrics      ClusterIP   None            <none>        8443/TCP,9443/TCP   5d1h\nnode-exporter           ClusterIP   None            <none>        9100/TCP            5d1h\nprometheus-adapter      ClusterIP   10.107.103.58   <none>        443/TCP             5d1h\nprometheus-k8s          NodePort    10.110.222.41   <none>        9090:8005/TCP       5d1h\nprometheus-operated     ClusterIP   None            <none>        9090/TCP            5d1h\nprometheus-operator     ClusterIP   None            <none>        8080/TCP            5d1h\n\n$ kubectl get pod -n monitoring\nNAME                                   READY   STATUS    RESTARTS   AGE\nalertmanager-main-0                    2/2     Running   0          4d\nalertmanager-main-1                    2/2     Running   0          4d\nalertmanager-main-2                    2/2     Running   0          4d\ngrafana-9d97dfdc7-qfjts                1/1     Running   0          4d\nkube-state-metrics-74d7dcd7dc-qfz5m    4/4     Running   0          3d11h\nnode-exporter-5cdl2                    2/2     Running   0          4d\nprometheus-adapter-b7d894c9c-dvzzq     1/1     Running   0          4d\nprometheus-k8s-0                       3/3     Running   1          2d2h\nprometheus-k8s-1                       3/3     Running   1          4d\nprometheus-operator-77b8b97459-7qfxj   1/1     Running   0          4d\n```\n\n上面几个组件成功运行后就可以在页面访问 prometheus 和 ganfana ：\n\n![](http://cdn.tianfeiyu.com/dash-3.png)\n\n进入 grafana 的 web 端，默认用户名和密码均为 admin：\n\n![](http://cdn.tianfeiyu.com/dash-4.png)\n\ngrafana 支持导入其他的 Dashboard，在 grafana 官方网站可以搜到大量与 k8s 相关的 dashboard。 \n\n### 三、总结\n\n本文介绍了对 kubernetes 和容器监控比较成熟的两个方案，虽然目前开源的方案比较多，但是要形成采集、存储、展示、报警一个完成的体系还需要在使用过程中不断探索与完善。\n","slug":"k8s_dashboard_prometheus","published":1,"updated":"2019-07-21T10:03:57.982Z","_id":"cjycnhjlz000i5vwnelwmonun","comments":1,"layout":"post","photos":[],"link":"","content":"<p>随着 kubernetes 的大规模使用，对 kubernetes 组件及其上运行服务的监控也是非常重要的一个环节，目前开源的监控组件有很多种，例如 cAdvisor、Heapster、metrics-server、kube-state-metrics、Prometheus 等，对监控数据的可视化查看组件有 Dashboard、 Prometheus、Grafana 等，本文会介绍 kube-dashboard 和基于 prometheus 搭建数据可视化监控。</p>\n<blockquote>\n<p>kubernetes 版本：v1.12</p>\n</blockquote>\n<h3 id=\"一、kubernetes-dashboard-的部署\"><a href=\"#一、kubernetes-dashboard-的部署\" class=\"headerlink\" title=\"一、kubernetes-dashboard 的部署\"></a>一、kubernetes-dashboard 的部署</h3><h4 id=\"1、创建-kubernetes-dashboard\"><a href=\"#1、创建-kubernetes-dashboard\" class=\"headerlink\" title=\"1、创建 kubernetes-dashboard\"></a>1、创建 kubernetes-dashboard</h4><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f https:<span class=\"comment\">//raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard.yaml</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl get svc -n kube-system | grep kubernetes-dashboard</span><br><span class=\"line\">kubernetes-dashboard   ClusterIP    <span class=\"number\">10.101</span><span class=\"number\">.203</span><span class=\"number\">.44</span>   &lt;none&gt;        <span class=\"number\">443</span>/TCP    <span class=\"number\">2</span>h</span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl get pod -n kube-system | grep kubernetes-dashboard</span><br><span class=\"line\">kubernetes-dashboard<span class=\"number\">-65</span>c76f6c97<span class=\"number\">-8</span>npsv    <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running       <span class=\"number\">0</span>          <span class=\"number\">2</span>h</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>所需镜像下载地址：<a href=\"https://github.com/gosoon/k8s-system-images\" target=\"_blank\" rel=\"noopener\">k8s-system-images</a></p>\n</blockquote>\n<h4 id=\"2、使用-nodePort-方式访问-kubernetes-dashboard\"><a href=\"#2、使用-nodePort-方式访问-kubernetes-dashboard\" class=\"headerlink\" title=\"2、使用 nodePort 方式访问 kubernetes-dashboard\"></a>2、使用 nodePort 方式访问 kubernetes-dashboard</h4><p>nodeport 的访问方式虽然有性能损失但是比较简单，kubernetes-dashboard 默认使用 clusterIP 的方式暴露服务，修改 kubernetes-dashboard svc 使用 nodePort 方式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl edit svc -n kube-system</span><br><span class=\"line\">\t...</span><br><span class=\"line\">  spec:</span><br><span class=\"line\">    clusterIP: 10.101.203.44</span><br><span class=\"line\">    externalTrafficPolicy: Cluster</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">    - nodePort: 8004  // 添加 nodeport 端口</span><br><span class=\"line\">      port: 443</span><br><span class=\"line\">      protocol: TCP</span><br><span class=\"line\">      targetPort: 8443</span><br><span class=\"line\">    selector:</span><br><span class=\"line\">      k8s-app: kubernetes-dashboard</span><br><span class=\"line\">    sessionAffinity: None</span><br><span class=\"line\">    type: NodePort   // 将 ClusterIP 修改为 NodePort</span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure>\n<p>nodePort 端口默认为 30000-32767，若使用其他端口，需要修改 apiserver 的启动参数 <code>--service-node-port-range</code> 来指定 nodePort 范围，如：<code>--service-node-port-range 8000-9000</code>。</p>\n<h4 id=\"3、创建-kubernetes-dashboard-管理员角色\"><a href=\"#3、创建-kubernetes-dashboard-管理员角色\" class=\"headerlink\" title=\"3、创建 kubernetes-dashboard 管理员角色\"></a>3、创建 kubernetes-dashboard 管理员角色</h4><p> <code>kubernetes-dashboard-admin.yaml</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: ServiceAccount</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: dashboard-admin</span><br><span class=\"line\">  namespace: kube-system</span><br><span class=\"line\">---</span><br><span class=\"line\">kind: ClusterRoleBinding</span><br><span class=\"line\">apiVersion: rbac.authorization.k8s.io/v1beta1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: dashboard-admin</span><br><span class=\"line\">subjects:</span><br><span class=\"line\">  - kind: ServiceAccount</span><br><span class=\"line\">    name: dashboard-admin</span><br><span class=\"line\">    namespace: kube-system</span><br><span class=\"line\">roleRef:</span><br><span class=\"line\">  kind: ClusterRole</span><br><span class=\"line\">  name: cluster-admin</span><br><span class=\"line\">  apiGroup: rbac.authorization.k8s.io</span><br></pre></td></tr></table></figure>\n<p>创建角色并获取 token：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f kubernetes-dashboard-admin.yaml</span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl describe secrets `kubectl get secret -n kube-system | grep dashboard-admin | awk &apos;&#123;print $1&#125;&apos;` -n kube-system</span><br><span class=\"line\"></span><br><span class=\"line\">Name:         dashboard-admin-token-hrhfd</span><br><span class=\"line\">Namespace:    kube-system</span><br><span class=\"line\">Labels:       &lt;none&gt;</span><br><span class=\"line\">Annotations:  kubernetes.io/service-account.name: dashboard-admin</span><br><span class=\"line\">              kubernetes.io/service-account.uid: 76805bdb-6047-11e9-ba0d-525400c322d9</span><br><span class=\"line\"></span><br><span class=\"line\">Type:  kubernetes.io/service-account-token</span><br><span class=\"line\"></span><br><span class=\"line\">Data</span><br><span class=\"line\">====</span><br><span class=\"line\">ca.crt:     1025 bytes</span><br><span class=\"line\">namespace:  11 bytes</span><br><span class=\"line\">token:      eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJkYXNoYm9hcmQtYWRtaW4tdG9rZW4taHJoZmQiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiZGFzaGJvYXJkLWFkbWluIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiNzY4MDViZGItNjA0Ny0xMWU5LWJhMGQtNTI1NDAwYzMyMmQ5Iiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50Omt1YmUtc3lzdGVtOmRhc2hib2FyZC1hZG1pbiJ9.hJJRyp_O4sGvIULj3BhqidCkkPnD4A2AtnpkXJoEPCALaaQHC8zhCA5-nDNlo2fiEggZ02UZPwiyGxKKFPC57UlKhjTf5zYcMIhELVXlj5FdBmjzCZcCHVFF4tj_rCoOFlZi6fQ3vNCcX8CtLxX_OsH1YXaFVuUmR1gYm97hbyuO382_k3tFIPXFP3QG8zUtc_7QMkeMNEakJZLCvkW8xdlaCuC-GVAMhZl5Kq1MSthuF-8HY7KaXhvqQzfD4DQZrdQ7vf_7NG3rdvhsj8nQ__TTe1W0RjqwkQuxg5YdE4gbAsxwJjkek-N0K9HfnZhkS9WosaUaUe9pZaGZ9akqyQ</span><br></pre></td></tr></table></figure>\n<p>token 是访问 dashboard 需要用的。</p>\n<p>若没有安装 kube-proxy，可以参考官方提供使用 <code>kubectl proxy</code> 的方式访问：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl proxy --address=IP --disable-filter=true</span><br></pre></td></tr></table></figure>\n<p>访问 <a href=\"http://IP:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/#!/login\" target=\"_blank\" rel=\"noopener\">http://IP:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/#!/login</a></p>\n<p>已部署 kube-proxy 的可直接访问 <a href=\"https://IP:nodePort\" target=\"_blank\" rel=\"noopener\">https://IP:nodePort</a> </p>\n<p><img src=\"http://cdn.tianfeiyu.com/dash-1.png\" alt=\"\"></p>\n<p>选择令牌方式使用上面生成的 token 登录。</p>\n<p><img src=\"http://cdn.tianfeiyu.com/dash-2.png\" alt=\"\"></p>\n<p>Dashboard 可以使用 Ingress、Let’s Encrypt 等多种方式配置 ssl，关于 ssl 的详细配置此处不进行详解。</p>\n<h3 id=\"二、部署-prometheus\"><a href=\"#二、部署-prometheus\" class=\"headerlink\" title=\"二、部署 prometheus\"></a>二、部署 prometheus</h3><p>prometheus 作为 CNCF 生态圈中的重要一员，其活跃度仅次于 Kubernetes, 现已广泛用于 Kubernetes 集群的监控系统中。prometheus 的部署相对比较简单，社区已经有了 <a href=\"https://github.com/coreos/kube-prometheus\" target=\"_blank\" rel=\"noopener\">kube-prometheus</a>，kube-prometheus 会部署包含 prometheus-operator、grafana、kube-state-metrics 等多个组件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone https://github.com/coreos/kube-prometheus</span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl apply -f manifests/</span><br></pre></td></tr></table></figure>\n<p>为了使用简单，我也会将 prometheus 和 grafana 的端口修改为 nodePort 的方式进行暴露：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl edit svc prometheus-k8s -n monitoring</span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl edit svc grafana -n monitoring</span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl get svc -n monitoring</span><br><span class=\"line\">NAME                    TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)             AGE</span><br><span class=\"line\">alertmanager-main       NodePort    10.102.81.118   &lt;none&gt;        9093:8007/TCP       5d1h</span><br><span class=\"line\">alertmanager-operated   ClusterIP   None            &lt;none&gt;        9093/TCP,6783/TCP   5d1h</span><br><span class=\"line\">grafana                 NodePort    10.96.19.82     &lt;none&gt;        3000:8006/TCP       5d1h</span><br><span class=\"line\">kube-state-metrics      ClusterIP   None            &lt;none&gt;        8443/TCP,9443/TCP   5d1h</span><br><span class=\"line\">node-exporter           ClusterIP   None            &lt;none&gt;        9100/TCP            5d1h</span><br><span class=\"line\">prometheus-adapter      ClusterIP   10.107.103.58   &lt;none&gt;        443/TCP             5d1h</span><br><span class=\"line\">prometheus-k8s          NodePort    10.110.222.41   &lt;none&gt;        9090:8005/TCP       5d1h</span><br><span class=\"line\">prometheus-operated     ClusterIP   None            &lt;none&gt;        9090/TCP            5d1h</span><br><span class=\"line\">prometheus-operator     ClusterIP   None            &lt;none&gt;        8080/TCP            5d1h</span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl get pod -n monitoring</span><br><span class=\"line\">NAME                                   READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">alertmanager-main-0                    2/2     Running   0          4d</span><br><span class=\"line\">alertmanager-main-1                    2/2     Running   0          4d</span><br><span class=\"line\">alertmanager-main-2                    2/2     Running   0          4d</span><br><span class=\"line\">grafana-9d97dfdc7-qfjts                1/1     Running   0          4d</span><br><span class=\"line\">kube-state-metrics-74d7dcd7dc-qfz5m    4/4     Running   0          3d11h</span><br><span class=\"line\">node-exporter-5cdl2                    2/2     Running   0          4d</span><br><span class=\"line\">prometheus-adapter-b7d894c9c-dvzzq     1/1     Running   0          4d</span><br><span class=\"line\">prometheus-k8s-0                       3/3     Running   1          2d2h</span><br><span class=\"line\">prometheus-k8s-1                       3/3     Running   1          4d</span><br><span class=\"line\">prometheus-operator-77b8b97459-7qfxj   1/1     Running   0          4d</span><br></pre></td></tr></table></figure>\n<p>上面几个组件成功运行后就可以在页面访问 prometheus 和 ganfana ：</p>\n<p><img src=\"http://cdn.tianfeiyu.com/dash-3.png\" alt=\"\"></p>\n<p>进入 grafana 的 web 端，默认用户名和密码均为 admin：</p>\n<p><img src=\"http://cdn.tianfeiyu.com/dash-4.png\" alt=\"\"></p>\n<p>grafana 支持导入其他的 Dashboard，在 grafana 官方网站可以搜到大量与 k8s 相关的 dashboard。 </p>\n<h3 id=\"三、总结\"><a href=\"#三、总结\" class=\"headerlink\" title=\"三、总结\"></a>三、总结</h3><p>本文介绍了对 kubernetes 和容器监控比较成熟的两个方案，虽然目前开源的方案比较多，但是要形成采集、存储、展示、报警一个完成的体系还需要在使用过程中不断探索与完善。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>随着 kubernetes 的大规模使用，对 kubernetes 组件及其上运行服务的监控也是非常重要的一个环节，目前开源的监控组件有很多种，例如 cAdvisor、Heapster、metrics-server、kube-state-metrics、Prometheus 等，对监控数据的可视化查看组件有 Dashboard、 Prometheus、Grafana 等，本文会介绍 kube-dashboard 和基于 prometheus 搭建数据可视化监控。</p>\n<blockquote>\n<p>kubernetes 版本：v1.12</p>\n</blockquote>\n<h3 id=\"一、kubernetes-dashboard-的部署\"><a href=\"#一、kubernetes-dashboard-的部署\" class=\"headerlink\" title=\"一、kubernetes-dashboard 的部署\"></a>一、kubernetes-dashboard 的部署</h3><h4 id=\"1、创建-kubernetes-dashboard\"><a href=\"#1、创建-kubernetes-dashboard\" class=\"headerlink\" title=\"1、创建 kubernetes-dashboard\"></a>1、创建 kubernetes-dashboard</h4><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f https:<span class=\"comment\">//raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard.yaml</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl get svc -n kube-system | grep kubernetes-dashboard</span><br><span class=\"line\">kubernetes-dashboard   ClusterIP    <span class=\"number\">10.101</span><span class=\"number\">.203</span><span class=\"number\">.44</span>   &lt;none&gt;        <span class=\"number\">443</span>/TCP    <span class=\"number\">2</span>h</span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl get pod -n kube-system | grep kubernetes-dashboard</span><br><span class=\"line\">kubernetes-dashboard<span class=\"number\">-65</span>c76f6c97<span class=\"number\">-8</span>npsv    <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running       <span class=\"number\">0</span>          <span class=\"number\">2</span>h</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>所需镜像下载地址：<a href=\"https://github.com/gosoon/k8s-system-images\" target=\"_blank\" rel=\"noopener\">k8s-system-images</a></p>\n</blockquote>\n<h4 id=\"2、使用-nodePort-方式访问-kubernetes-dashboard\"><a href=\"#2、使用-nodePort-方式访问-kubernetes-dashboard\" class=\"headerlink\" title=\"2、使用 nodePort 方式访问 kubernetes-dashboard\"></a>2、使用 nodePort 方式访问 kubernetes-dashboard</h4><p>nodeport 的访问方式虽然有性能损失但是比较简单，kubernetes-dashboard 默认使用 clusterIP 的方式暴露服务，修改 kubernetes-dashboard svc 使用 nodePort 方式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl edit svc -n kube-system</span><br><span class=\"line\">\t...</span><br><span class=\"line\">  spec:</span><br><span class=\"line\">    clusterIP: 10.101.203.44</span><br><span class=\"line\">    externalTrafficPolicy: Cluster</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">    - nodePort: 8004  // 添加 nodeport 端口</span><br><span class=\"line\">      port: 443</span><br><span class=\"line\">      protocol: TCP</span><br><span class=\"line\">      targetPort: 8443</span><br><span class=\"line\">    selector:</span><br><span class=\"line\">      k8s-app: kubernetes-dashboard</span><br><span class=\"line\">    sessionAffinity: None</span><br><span class=\"line\">    type: NodePort   // 将 ClusterIP 修改为 NodePort</span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure>\n<p>nodePort 端口默认为 30000-32767，若使用其他端口，需要修改 apiserver 的启动参数 <code>--service-node-port-range</code> 来指定 nodePort 范围，如：<code>--service-node-port-range 8000-9000</code>。</p>\n<h4 id=\"3、创建-kubernetes-dashboard-管理员角色\"><a href=\"#3、创建-kubernetes-dashboard-管理员角色\" class=\"headerlink\" title=\"3、创建 kubernetes-dashboard 管理员角色\"></a>3、创建 kubernetes-dashboard 管理员角色</h4><p> <code>kubernetes-dashboard-admin.yaml</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: ServiceAccount</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: dashboard-admin</span><br><span class=\"line\">  namespace: kube-system</span><br><span class=\"line\">---</span><br><span class=\"line\">kind: ClusterRoleBinding</span><br><span class=\"line\">apiVersion: rbac.authorization.k8s.io/v1beta1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: dashboard-admin</span><br><span class=\"line\">subjects:</span><br><span class=\"line\">  - kind: ServiceAccount</span><br><span class=\"line\">    name: dashboard-admin</span><br><span class=\"line\">    namespace: kube-system</span><br><span class=\"line\">roleRef:</span><br><span class=\"line\">  kind: ClusterRole</span><br><span class=\"line\">  name: cluster-admin</span><br><span class=\"line\">  apiGroup: rbac.authorization.k8s.io</span><br></pre></td></tr></table></figure>\n<p>创建角色并获取 token：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f kubernetes-dashboard-admin.yaml</span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl describe secrets `kubectl get secret -n kube-system | grep dashboard-admin | awk &apos;&#123;print $1&#125;&apos;` -n kube-system</span><br><span class=\"line\"></span><br><span class=\"line\">Name:         dashboard-admin-token-hrhfd</span><br><span class=\"line\">Namespace:    kube-system</span><br><span class=\"line\">Labels:       &lt;none&gt;</span><br><span class=\"line\">Annotations:  kubernetes.io/service-account.name: dashboard-admin</span><br><span class=\"line\">              kubernetes.io/service-account.uid: 76805bdb-6047-11e9-ba0d-525400c322d9</span><br><span class=\"line\"></span><br><span class=\"line\">Type:  kubernetes.io/service-account-token</span><br><span class=\"line\"></span><br><span class=\"line\">Data</span><br><span class=\"line\">====</span><br><span class=\"line\">ca.crt:     1025 bytes</span><br><span class=\"line\">namespace:  11 bytes</span><br><span class=\"line\">token:      eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJkYXNoYm9hcmQtYWRtaW4tdG9rZW4taHJoZmQiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiZGFzaGJvYXJkLWFkbWluIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiNzY4MDViZGItNjA0Ny0xMWU5LWJhMGQtNTI1NDAwYzMyMmQ5Iiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50Omt1YmUtc3lzdGVtOmRhc2hib2FyZC1hZG1pbiJ9.hJJRyp_O4sGvIULj3BhqidCkkPnD4A2AtnpkXJoEPCALaaQHC8zhCA5-nDNlo2fiEggZ02UZPwiyGxKKFPC57UlKhjTf5zYcMIhELVXlj5FdBmjzCZcCHVFF4tj_rCoOFlZi6fQ3vNCcX8CtLxX_OsH1YXaFVuUmR1gYm97hbyuO382_k3tFIPXFP3QG8zUtc_7QMkeMNEakJZLCvkW8xdlaCuC-GVAMhZl5Kq1MSthuF-8HY7KaXhvqQzfD4DQZrdQ7vf_7NG3rdvhsj8nQ__TTe1W0RjqwkQuxg5YdE4gbAsxwJjkek-N0K9HfnZhkS9WosaUaUe9pZaGZ9akqyQ</span><br></pre></td></tr></table></figure>\n<p>token 是访问 dashboard 需要用的。</p>\n<p>若没有安装 kube-proxy，可以参考官方提供使用 <code>kubectl proxy</code> 的方式访问：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl proxy --address=IP --disable-filter=true</span><br></pre></td></tr></table></figure>\n<p>访问 <a href=\"http://IP:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/#!/login\" target=\"_blank\" rel=\"noopener\">http://IP:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/#!/login</a></p>\n<p>已部署 kube-proxy 的可直接访问 <a href=\"https://IP:nodePort\" target=\"_blank\" rel=\"noopener\">https://IP:nodePort</a> </p>\n<p><img src=\"http://cdn.tianfeiyu.com/dash-1.png\" alt=\"\"></p>\n<p>选择令牌方式使用上面生成的 token 登录。</p>\n<p><img src=\"http://cdn.tianfeiyu.com/dash-2.png\" alt=\"\"></p>\n<p>Dashboard 可以使用 Ingress、Let’s Encrypt 等多种方式配置 ssl，关于 ssl 的详细配置此处不进行详解。</p>\n<h3 id=\"二、部署-prometheus\"><a href=\"#二、部署-prometheus\" class=\"headerlink\" title=\"二、部署 prometheus\"></a>二、部署 prometheus</h3><p>prometheus 作为 CNCF 生态圈中的重要一员，其活跃度仅次于 Kubernetes, 现已广泛用于 Kubernetes 集群的监控系统中。prometheus 的部署相对比较简单，社区已经有了 <a href=\"https://github.com/coreos/kube-prometheus\" target=\"_blank\" rel=\"noopener\">kube-prometheus</a>，kube-prometheus 会部署包含 prometheus-operator、grafana、kube-state-metrics 等多个组件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone https://github.com/coreos/kube-prometheus</span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl apply -f manifests/</span><br></pre></td></tr></table></figure>\n<p>为了使用简单，我也会将 prometheus 和 grafana 的端口修改为 nodePort 的方式进行暴露：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl edit svc prometheus-k8s -n monitoring</span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl edit svc grafana -n monitoring</span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl get svc -n monitoring</span><br><span class=\"line\">NAME                    TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)             AGE</span><br><span class=\"line\">alertmanager-main       NodePort    10.102.81.118   &lt;none&gt;        9093:8007/TCP       5d1h</span><br><span class=\"line\">alertmanager-operated   ClusterIP   None            &lt;none&gt;        9093/TCP,6783/TCP   5d1h</span><br><span class=\"line\">grafana                 NodePort    10.96.19.82     &lt;none&gt;        3000:8006/TCP       5d1h</span><br><span class=\"line\">kube-state-metrics      ClusterIP   None            &lt;none&gt;        8443/TCP,9443/TCP   5d1h</span><br><span class=\"line\">node-exporter           ClusterIP   None            &lt;none&gt;        9100/TCP            5d1h</span><br><span class=\"line\">prometheus-adapter      ClusterIP   10.107.103.58   &lt;none&gt;        443/TCP             5d1h</span><br><span class=\"line\">prometheus-k8s          NodePort    10.110.222.41   &lt;none&gt;        9090:8005/TCP       5d1h</span><br><span class=\"line\">prometheus-operated     ClusterIP   None            &lt;none&gt;        9090/TCP            5d1h</span><br><span class=\"line\">prometheus-operator     ClusterIP   None            &lt;none&gt;        8080/TCP            5d1h</span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl get pod -n monitoring</span><br><span class=\"line\">NAME                                   READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">alertmanager-main-0                    2/2     Running   0          4d</span><br><span class=\"line\">alertmanager-main-1                    2/2     Running   0          4d</span><br><span class=\"line\">alertmanager-main-2                    2/2     Running   0          4d</span><br><span class=\"line\">grafana-9d97dfdc7-qfjts                1/1     Running   0          4d</span><br><span class=\"line\">kube-state-metrics-74d7dcd7dc-qfz5m    4/4     Running   0          3d11h</span><br><span class=\"line\">node-exporter-5cdl2                    2/2     Running   0          4d</span><br><span class=\"line\">prometheus-adapter-b7d894c9c-dvzzq     1/1     Running   0          4d</span><br><span class=\"line\">prometheus-k8s-0                       3/3     Running   1          2d2h</span><br><span class=\"line\">prometheus-k8s-1                       3/3     Running   1          4d</span><br><span class=\"line\">prometheus-operator-77b8b97459-7qfxj   1/1     Running   0          4d</span><br></pre></td></tr></table></figure>\n<p>上面几个组件成功运行后就可以在页面访问 prometheus 和 ganfana ：</p>\n<p><img src=\"http://cdn.tianfeiyu.com/dash-3.png\" alt=\"\"></p>\n<p>进入 grafana 的 web 端，默认用户名和密码均为 admin：</p>\n<p><img src=\"http://cdn.tianfeiyu.com/dash-4.png\" alt=\"\"></p>\n<p>grafana 支持导入其他的 Dashboard，在 grafana 官方网站可以搜到大量与 k8s 相关的 dashboard。 </p>\n<h3 id=\"三、总结\"><a href=\"#三、总结\" class=\"headerlink\" title=\"三、总结\"></a>三、总结</h3><p>本文介绍了对 kubernetes 和容器监控比较成熟的两个方案，虽然目前开源的方案比较多，但是要形成采集、存储、展示、报警一个完成的体系还需要在使用过程中不断探索与完善。</p>\n"},{"title":"kubernets 中事件处理机制","date":"2019-02-26T12:49:30.000Z","type":"k8s-events","_content":"\n当集群中的 node 或 pod 异常时，大部分用户会使用 kubectl 查看对应的 events，那么 events 是从何而来的？其实 k8s 中的各个组件会将运行时产生的各种事件汇报到 apiserver，对于 k8s 中的可描述资源，使用 kubectl describe 都可以看到其相关的 events，那 k8s 中又有哪几个组件都上报 events 呢？ \n\n只要在 `k8s.io/kubernetes/cmd` 目录下暴力搜索一下就能知道哪些组件会产生 events：\n```\n$ grep -R -n -i \"EventRecorder\" .\n```\n\n可以看出，controller-manage、kube-proxy、kube-scheduler、kubelet 都使用了 EventRecorder，本文只讲述 kubelet 中对 Events 的使用。\n\n\n\n##### 1、Events 的定义\n\nevents 在 `k8s.io/api/core/v1/types.go` 中进行定义,结构体如下所示：\n\n```\ntype Event struct {\n    metav1.TypeMeta `json:\",inline\"`\n    metav1.ObjectMeta `json:\"metadata\" protobuf:\"bytes,1,opt,name=metadata\"`\n    InvolvedObject ObjectReference `json:\"involvedObject\" protobuf:\"bytes,2,opt,name=involvedObject\"`\n    Reason string `json:\"reason,omitempty\" protobuf:\"bytes,3,opt,name=reason\"`\n    Message string `json:\"message,omitempty\" protobuf:\"bytes,4,opt,name=message\"`\n    Source EventSource `json:\"source,omitempty\" protobuf:\"bytes,5,opt,name=source\"`\n    FirstTimestamp metav1.Time `json:\"firstTimestamp,omitempty\" protobuf:\"bytes,6,opt,name=firstTimestamp\"`\n    LastTimestamp metav1.Time `json:\"lastTimestamp,omitempty\" protobuf:\"bytes,7,opt,name=lastTimestamp\"`\n    Count int32 `json:\"count,omitempty\" protobuf:\"varint,8,opt,name=count\"`\n    Type string `json:\"type,omitempty\" protobuf:\"bytes,9,opt,name=type\"`\n    EventTime metav1.MicroTime `json:\"eventTime,omitempty\" protobuf:\"bytes,10,opt,name=eventTime\"`\n    Series *EventSeries `json:\"series,omitempty\" protobuf:\"bytes,11,opt,name=series\"`\n    Action string `json:\"action,omitempty\" protobuf:\"bytes,12,opt,name=action\"`\n    Related *ObjectReference `json:\"related,omitempty\" protobuf:\"bytes,13,opt,name=related\"`\n    ReportingController string `json:\"reportingComponent\" protobuf:\"bytes,14,opt,name=reportingComponent\"`\n    ReportingInstance string `json:\"reportingInstance\" protobuf:\"bytes,15,opt,name=reportingInstance\"`\n    ReportingInstance string `json:\"reportingInstance\" protobuf:\"bytes,15,opt,name=reportingInstance\"`\n}\n```\n\n其中 InvolvedObject 代表和事件关联的对象，source 代表事件源，使用 kubectl 看到的事件一般包含 Type、Reason、Age、From、Message 几个字段。\n\nk8s 中 events 目前只有两种类型：\"Normal\" 和 \"Warning\"：\n\n![events 的两种类型](http://cdn.tianfeiyu.com/events.png)\n\n\n##### 2、EventBroadcaster 的初始化\n\nevents 的整个生命周期都与 EventBroadcaster 有关，kubelet 中对 EventBroadcaster 的初始化在`k8s.io/kubernetes/cmd/kubelet/app/server.go`中：\n\n\n```\nfunc RunKubelet(kubeServer *options.KubeletServer, kubeDeps *kubelet.Dependencies, runOnce bool) error {\n  ...\n  // event 初始化\n  makeEventRecorder(kubeDeps, nodeName)\n  ...\n}\n\n\nfunc makeEventRecorder(kubeDeps *kubelet.Dependencies, nodeName types.NodeName) {\n  if kubeDeps.Recorder != nil {\n    return\n  }\n  // 初始化 EventBroadcaster \n  eventBroadcaster := record.NewBroadcaster()\n  // 初始化 EventRecorder\n  kubeDeps.Recorder = eventBroadcaster.NewRecorder(legacyscheme.Scheme, v1.EventSource{Component: componentKubelet, Host: string(nodeName)})\n  // 记录 events 到本地日志\n  eventBroadcaster.StartLogging(glog.V(3).Infof)\n  if kubeDeps.EventClient != nil {\n    glog.V(4).Infof(\"Sending events to api server.\")\n    // 上报 events 到 apiserver\n  eventBroadcaster.StartRecordingToSink(&v1core.EventSinkImpl{Interface: kubeDeps.EventClient.Events(\"\")})\n  } else {\n    glog.Warning(\"No api server defined - no events will be sent to API server.\")\n  }\n}\n```\n\nKubelet 在启动的时候会初始化一个 EventBroadcaster，它主要是对接收到的 events 做一些后续的处理(保存、上报等），EventBroadcaster 也会被 kubelet 中的其他模块使用，以下是相关的定义，对 events 生成和处理的函数都定义在 `k8s.io/client-go/tools/record/event.go` 中：\n\n```\ntype eventBroadcasterImpl struct {\n  *watch.Broadcaster\n  sleepDuration time.Duration\n}\n\n// EventBroadcaster knows how to receive events and send them to any EventSink, watcher, or log.\ntype EventBroadcaster interface {\n  StartEventWatcher(eventHandler func(*v1.Event)) watch.Interface\n\n  StartRecordingToSink(sink EventSink) watch.Interface\n\n  StartLogging(logf func(format string, args ...interface{})) watch.Interface\n\n  NewRecorder(scheme *runtime.Scheme, source v1.EventSource) EventRecorder\n}\n```\n\nEventBroadcaster 是个接口类型，该接口有以下四个方法：\n- StartEventWatcher() ： EventBroadcaster 中的核心方法，接收各模块产生的 events，参数为一个处理 events 的函数，用户可以使用 StartEventWatcher() 接收 events 然后使用自定义的 handle 进行处理\n- StartRecordingToSink() ： 调用 StartEventWatcher() 接收 events，并将收到的 events 发送到 apiserver \n- StartLogging() ：也是调用 StartEventWatcher() 接收 events，然后保存 events 到日志\n- NewRecorder() ：会创建一个指定 EventSource 的 EventRecorder，EventSource 指明了哪个节点的哪个组件\n\n\neventBroadcasterImpl 是 eventBroadcaster 实际的对象，初始化 EventBroadcaster 对象的时候会初始化一个 Broadcaster，Broadcaster 会启动一个 goroutine 接收各组件产生的 events 并广播到每一个 watcher。\n\n```\nfunc NewBroadcaster() EventBroadcaster {\n  return &eventBroadcasterImpl{watch.NewBroadcaster(maxQueuedEvents, watch.DropIfChannelFull), defaultSleepDuration}\n}\n```\n\n可以看到，kubelet 在初始化完 EventBroadcaster 后会调用 StartRecordingToSink() 和 StartLogging() 两个方法，StartRecordingToSink() 处理函数会将收到的 events 进行缓存、过滤、聚合而后发送到 apiserver，StartLogging() 仅将 events 保存到 kubelet 的日志中。\n\n##### 3、Events 的生成\n\n从初始化 EventBroadcaster 的代码中可以看到 kubelet 在初始化完 EventBroadcaster 后紧接着初始化了 EventRecorder，并将已经初始化的 Broadcaster 对象作为参数传给了 EventRecorder，至此，EventBroadcaster、EventRecorder、Broadcaster 三个对象产生了关联。EventRecorder 的主要功能是生成指定格式的 events，以下是相关的定义：\n\n```\ntype recorderImpl struct {\n  scheme *runtime.Scheme\n  source v1.EventSource\n  *watch.Broadcaster\n  clock clock.Clock\n}\n\ntype EventRecorder interface {\n  Event(object runtime.Object, eventtype, reason, message string)\n\n  Eventf(object runtime.Object, eventtype, reason, messageFmt string, args ...interface{})\n\n  PastEventf(object runtime.Object, timestamp metav1.Time, eventtype, reason, messageFmt string, args ...interface{})\n\n  AnnotatedEventf(object runtime.Object, annotations map[string]string, eventtype, reason, messageFmt string, args ...interface{})\n}\n```\n\nEventRecorder 中包含的几个方法都是产生指定格式的 events，Event() 和 Eventf() 的功能类似 fmt.Println() 和 fmt.Printf()，kubelet 中的各个模块会调用 EventRecorder 生成 events。recorderImpl 是 EventRecorder 实际的对象。EventRecorder 的每个方法会调用 generateEvent，在 generateEvent 中初始化 events 。\n\n以下是生成 events 的函数：\n\n```\nfunc (recorder *recorderImpl) generateEvent(object runtime.Object, annotations map[string]string, timestamp metav1.Time, eventtype, reason, message string) {\n  ref, err := ref.GetReference(recorder.scheme, object)\n  if err != nil {\n    glog.Errorf(\"Could not construct reference to: '%#v' due to: '%v'. Will not report event: '%v' '%v' '%v'\", object, err, eventtype, reason, message)\n    return\n  }\n\n  if !validateEventType(eventtype) {\n    glog.Errorf(\"Unsupported event type: '%v'\", eventtype)\n    return\n  }\n\n  event := recorder.makeEvent(ref, annotations, eventtype, reason, message)\n  event.Source = recorder.source\n\n  go func() {\n    // NOTE: events should be a non-blocking operation\n    defer utilruntime.HandleCrash()\n    // 发送事件\n    recorder.Action(watch.Added, event)\n  }()\n}\n\nfunc (recorder *recorderImpl) makeEvent(ref *v1.ObjectReference, annotations map[string]string, eventtype, reason, message string) *v1.Event {\n  t := metav1.Time{Time: recorder.clock.Now()}\n  namespace := ref.Namespace\n  if namespace == \"\" {\n    namespace = metav1.NamespaceDefault\n  }\n  return &v1.Event{\n    ObjectMeta: metav1.ObjectMeta{\n      Name:        fmt.Sprintf(\"%v.%x\", ref.Name, t.UnixNano()),\n      Namespace:   namespace,\n      Annotations: annotations,\n    },\n    InvolvedObject: *ref,\n    Reason:         reason,\n    Message:        message,\n    FirstTimestamp: t,\n    LastTimestamp:  t,\n    Count:          1,\n    Type:           eventtype,\n  }\n}\n```\n初始化完 events 后会调用 recorder.Action() 将 events 发送到 Broadcaster 的事件接收队列中, Action() 是 Broadcaster 中的方法。\n\n以下是 Action() 方法的实现：\n\n```\nfunc (m *Broadcaster) Action(action EventType, obj runtime.Object) {\n  m.incoming <- Event{action, obj}\n}\n```\n\n##### 4、Events 的广播\n\n上面已经说了，EventBroadcaster 初始化时会初始化一个 Broadcaster，Broadcaster 的作用就是接收所有的 events 并进行广播，Broadcaster 的实现在 `k8s.io/apimachinery/pkg/watch/mux.go ` 中，Broadcaster 初始化完成后会在后台启动一个 goroutine，然后接收所有从 EventRecorder 发送过来的 events，Broadcaster 中有一个 map 会保存每一个注册的 watcher， 接着将 events 广播给所有的 watcher，每个 watcher 都有一个接收消息的 channel，watcher 可以通过它的 ResultChan() 方法从 channel 中读取数据进行消费。\n\n\n以下是 Broadcaster 广播 events 的实现：\n```\nfunc (m *Broadcaster) loop() {\n  for event := range m.incoming {\n    if event.Type == internalRunFunctionMarker {\n      event.Object.(functionFakeRuntimeObject)()\n      continue\n    }\n    m.distribute(event)\n  }\n  m.closeAll()\n  m.distributing.Done()\n}\n\n// distribute sends event to all watchers. Blocking.\nfunc (m *Broadcaster) distribute(event Event) {\n  m.lock.Lock()\n  defer m.lock.Unlock()\n  if m.fullChannelBehavior == DropIfChannelFull {\n    for _, w := range m.watchers {\n      select {\n      case w.result <- event:\n      case <-w.stopped:\n      default: // Don't block if the event can't be queued.\n      }\n    }\n  } else {\n    for _, w := range m.watchers {\n      select {\n      case w.result <- event:\n      case <-w.stopped:\n      }\n    }\n  }\n}\n```\n\n\n##### 5、Events 的处理\n\n那么 watcher 是从何而来呢？每一个要处理 events 的 client 都需要初始化一个 watcher，处理 events 的方法是在 EventBroadcaster 中定义的，以下是 EventBroadcaster 中对 events 处理的三个函数：\n\n```\nfunc (eventBroadcaster *eventBroadcasterImpl) StartEventWatcher(eventHandler func(*v1.Event)) watch.Interface {\n  watcher := eventBroadcaster.Watch()\n  go func() {\n    defer utilruntime.HandleCrash()\n    for watchEvent := range watcher.ResultChan() {\n      event, ok := watchEvent.Object.(*v1.Event)\n      if !ok {\n        // This is all local, so there's no reason this should\n        // ever happen.\n        continue\n      }\n      eventHandler(event)\n    }\n  }()\n  return watcher\n}\n```\n\nStartEventWatcher() 首先实例化一个 watcher，每个 watcher 都会被塞入到 Broadcaster 的 watcher 列表中，watcher 从 Broadcaster 提供的 channel 中读取 events，然后再调用 eventHandler 进行处理，StartLogging() 和 StartRecordingToSink() 都是对 StartEventWatcher() 的封装，都会传入自己的处理函数。\n\n\n\n```\nfunc (eventBroadcaster *eventBroadcasterImpl) StartLogging(logf func(format string, args ...interface{})) watch.Interface {\n  return eventBroadcaster.StartEventWatcher(\n    func(e *v1.Event) {\n      logf(\"Event(%#v): type: '%v' reason: '%v' %v\", e.InvolvedObject, e.Type, e.Reason, e.Message)\n    })\n}\n```\n\nStartLogging() 传入的 eventHandler 仅将 events 保存到日志中。\n\n```\nfunc (eventBroadcaster *eventBroadcasterImpl) StartRecordingToSink(sink EventSink) watch.Interface {\n  // The default math/rand package functions aren't thread safe, so create a\n  // new Rand object for each StartRecording call.\n  randGen := rand.New(rand.NewSource(time.Now().UnixNano()))\n  eventCorrelator := NewEventCorrelator(clock.RealClock{})\n  return eventBroadcaster.StartEventWatcher(\n    func(event *v1.Event) {\n      recordToSink(sink, event, eventCorrelator, randGen, eventBroadcaster.sleepDuration)\n    })\n}\n\nfunc recordToSink(sink EventSink, event *v1.Event, eventCorrelator *EventCorrelator, randGen *rand.Rand, sleepDuration time.Duration) {\n  eventCopy := *event\n  event = &eventCopy\n  result, err := eventCorrelator.EventCorrelate(event)\n  if err != nil {\n    utilruntime.HandleError(err)\n  }\n  if result.Skip {\n    return\n  }\n  tries := 0\n  for {\n    if recordEvent(sink, result.Event, result.Patch, result.Event.Count > 1, eventCorrelator) {\n      break\n    }\n    tries++\n    if tries >= maxTriesPerEvent {\n      glog.Errorf(\"Unable to write event '%#v' (retry limit exceeded!)\", event)\n      break\n    }\n    // 第一次重试增加随机性，防止 apiserver 重启的时候所有的事件都在同一时间发送事件\n    if tries == 1 {\n      time.Sleep(time.Duration(float64(sleepDuration) * randGen.Float64()))\n    } else {\n      time.Sleep(sleepDuration)\n    }\n  }\n}\n```\n\nStartRecordingToSink() 方法先根据当前时间生成一个随机数发生器 randGen，增加随机数是为了在重试时增加随机性，防止 apiserver 重启的时候所有的事件都在同一时间发送事件，接着实例化一个EventCorrelator，EventCorrelator 会对事件做一些预处理的工作，其中包括过滤、聚合、缓存等操作，具体代码不做详细分析，最后将 recordToSink() 函数作为处理函数，recordToSink() 会将处理后的 events 发送到 apiserver，这是 StartEventWatcher() 的整个工作流程。\n\n\n##### 6、Events 简单实现\n\n了解完 events 的整个处理流程后，可以参考其实现方式写一个 demo，要实现一个完整的 events 需要包含以下几个功能：\n\n- 1、事件的产生\n- 2、事件的发送\n- 3、事件广播\n- 4、事件缓存\n- 5、事件过滤和聚合\n\n```\npackage main\n\nimport (\n  \"fmt\"\n  \"sync\"\n  \"time\"\n)\n\n// watcher queue\nconst queueLength = int64(1)\n\n// Events xxx\ntype Events struct {\n  Reason    string\n  Message   string\n  Source    string\n  Type      string\n  Count     int64\n  Timestamp time.Time\n}\n\n// EventBroadcaster xxx\ntype EventBroadcaster interface {\n  Event(etype, reason, message string)\n  StartLogging() Interface\n  Stop()\n}\n\n// eventBroadcaster xxx\ntype eventBroadcasterImpl struct {\n  *Broadcaster\n}\n\nfunc NewEventBroadcaster() EventBroadcaster {\n  return &eventBroadcasterImpl{NewBroadcaster(queueLength)}\n}\n\nfunc (eventBroadcaster *eventBroadcasterImpl) Stop() {\n  eventBroadcaster.Shutdown()\n}\n\n// generate event\nfunc (eventBroadcaster *eventBroadcasterImpl) Event(etype, reason, message string) {\n  events := &Events{Type: etype, Reason: reason, Message: message}\n  // send event to broadcast\n  eventBroadcaster.Action(events)\n}\n\n// 仅实现 StartLogging() 的功能，将日志打印\nfunc (eventBroadcaster *eventBroadcasterImpl) StartLogging() Interface {\n  // register a watcher\n  watcher := eventBroadcaster.Watch()\n  go func() {\n    for watchEvent := range watcher.ResultChan() {\n      fmt.Printf(\"%v\\n\", watchEvent)\n    }\n  }()\n\n  go func() {\n    time.Sleep(time.Second * 4)\n    watcher.Stop()\n  }()\n\n  return watcher\n}\n\n// --------------------\n// Broadcaster 定义与实现\n// 接收 events channel 的长度\nconst incomingQueuLength = 100\n\ntype Broadcaster struct {\n  lock             sync.Mutex\n  incoming         chan Events\n  watchers         map[int64]*broadcasterWatcher\n  watchersQueue    int64\n  watchQueueLength int64\n  distributing     sync.WaitGroup\n}\n\nfunc NewBroadcaster(queueLength int64) *Broadcaster {\n  m := &Broadcaster{\n    incoming:         make(chan Events, incomingQueuLength),\n    watchers:         map[int64]*broadcasterWatcher{},\n    watchQueueLength: queueLength,\n  }\n  m.distributing.Add(1)\n  // 后台启动一个 goroutine 广播 events\n  go m.loop()\n  return m\n}\n\n// Broadcaster 接收所产生的 events\nfunc (m *Broadcaster) Action(event *Events) {\n  m.incoming <- *event\n}\n\n// 广播 events 到每个 watcher\nfunc (m *Broadcaster) loop() {\n  // 从 incoming channel 中读取所接收到的 events\n  for event := range m.incoming {\n    // 发送 events 到每一个 watcher\n    for _, w := range m.watchers {\n      select {\n      case w.result <- event:\n      case <-w.stopped:\n      default:\n      }\n    }\n  }\n  m.closeAll()\n  m.distributing.Done()\n}\n\nfunc (m *Broadcaster) Shutdown() {\n  close(m.incoming)\n  m.distributing.Wait()\n}\n\nfunc (m *Broadcaster) closeAll() {\n  // TODO\n  m.lock.Lock()\n  defer m.lock.Unlock()\n  for _, w := range m.watchers {\n    close(w.result)\n  }\n  m.watchers = map[int64]*broadcasterWatcher{}\n}\n\nfunc (m *Broadcaster) stopWatching(id int64) {\n  m.lock.Lock()\n  defer m.lock.Unlock()\n  w, ok := m.watchers[id]\n  if !ok {\n    return\n  }\n  delete(m.watchers, id)\n  close(w.result)\n}\n\n// 调用 Watch(）方法注册一个 watcher\nfunc (m *Broadcaster) Watch() Interface {\n  watcher := &broadcasterWatcher{\n    result:  make(chan Events, incomingQueuLength),\n    stopped: make(chan struct{}),\n    id:      m.watchQueueLength,\n    m:       m,\n  }\n  m.watchers[m.watchersQueue] = watcher\n  m.watchQueueLength++\n  return watcher\n}\n\n// watcher 实现\ntype Interface interface {\n  Stop()\n  ResultChan() <-chan Events\n}\n\ntype broadcasterWatcher struct {\n  result  chan Events\n  stopped chan struct{}\n  stop    sync.Once\n  id      int64\n  m       *Broadcaster\n}\n\n// 每个 watcher 通过该方法读取 channel 中广播的 events\nfunc (b *broadcasterWatcher) ResultChan() <-chan Events {\n  return b.result\n}\n\nfunc (b *broadcasterWatcher) Stop() {\n  b.stop.Do(func() {\n    close(b.stopped)\n    b.m.stopWatching(b.id)\n  })\n}\n\n// --------------------\n\nfunc main() {\n  eventBroadcast := NewEventBroadcaster()\n\n  var wg sync.WaitGroup\n  wg.Add(1)\n  // producer event\n  go func() {\n    defer wg.Done()\n    time.Sleep(time.Second)\n    eventBroadcast.Event(\"add\", \"test\", \"1\")\n    time.Sleep(time.Second * 2)\n    eventBroadcast.Event(\"add\", \"test\", \"2\")\n    time.Sleep(time.Second * 3)\n    eventBroadcast.Event(\"add\", \"test\", \"3\")\n    //eventBroadcast.Stop()\n  }()\n\n  eventBroadcast.StartLogging()\n  wg.Wait()\n}\n```\n\n此处仅简单实现，将 EventRecorder 处理 events 的功能直接放在了 EventBroadcaster 中实现，对 events 的处理方法仅实现了 StartLogging()，Broadcaster 中的部分功能是直接复制 k8s 中的代码，有一定的精简，其实现值得学习，此处对 EventCorrelator 并没有进行实现。\n\n\n代码请参考：https://github.com/gosoon/k8s-learning-notes/tree/master/k8s-package/events\n\n##### 7、总结\n\n本文讲述了 k8s 中 events 从产生到展示的一个完整过程，最后也实现了一个简单的 demo，在此将 kubelet 对 events 的整个处理过程再梳理下，其中主要有三个对象 EventBroadcaster、EventRecorder、Broadcaster：\n\n- 1、kubelet 首先会初始化 EventBroadcaster 对象，同时会初始化一个 Broadcaster 对象。\n- 2、kubelet 通过 EventBroadcaster 对象的 NewRecorder() 方法初始化 EventRecorder 对象，EventRecorder 对象提供的几个方法会生成 events 并通过 Action() 方法发送 events 到 Broadcaster 的 channel 队列中。\n- 3、Broadcaster 的作用就是接收所有的 events 并进行广播，Broadcaster 初始化后会在后台启动一个 goroutine，然后接收所有从 EventRecorder 发来的 events。\n- 4、EventBroadcaster 对 events 有三个处理方法：StartEventWatcher()、StartRecordingToSink()、StartLogging()，StartEventWatcher() 是其中的核心方法，会初始化一个 watcher 注册到 Broadcaster，其余两个处理函数对 StartEventWatcher() 进行了封装，并实现了自己的处理函数。\n- 5、 Broadcaster 中有一个 map 会保存每一个注册的 watcher，其会将所有的 events 广播给每一个 watcher，每个 watcher 通过它的 ResultChan() 方法从 channel 接收 events。\n- 6、kubelet 会使用 StartRecordingToSink() 和 StartLogging() 对 events 进行处理，StartRecordingToSink() 处理函数收到 events 后会进行缓存、过滤、聚合而后发送到 apiserver，apiserver 会将 events 保存到 etcd 中，使用 kubectl 或其他客户端可以查看。StartLogging() 仅将 events 保存到 kubelet 的日志中。\n","source":"_posts/k8s_events.md","raw":"---\ntitle: kubernets 中事件处理机制\ndate: 2019-02-26 20:49:30\ntags: [\"events\",\"kubelet\"]\ntype: \"k8s-events\"\n\n---\n\n当集群中的 node 或 pod 异常时，大部分用户会使用 kubectl 查看对应的 events，那么 events 是从何而来的？其实 k8s 中的各个组件会将运行时产生的各种事件汇报到 apiserver，对于 k8s 中的可描述资源，使用 kubectl describe 都可以看到其相关的 events，那 k8s 中又有哪几个组件都上报 events 呢？ \n\n只要在 `k8s.io/kubernetes/cmd` 目录下暴力搜索一下就能知道哪些组件会产生 events：\n```\n$ grep -R -n -i \"EventRecorder\" .\n```\n\n可以看出，controller-manage、kube-proxy、kube-scheduler、kubelet 都使用了 EventRecorder，本文只讲述 kubelet 中对 Events 的使用。\n\n\n\n##### 1、Events 的定义\n\nevents 在 `k8s.io/api/core/v1/types.go` 中进行定义,结构体如下所示：\n\n```\ntype Event struct {\n    metav1.TypeMeta `json:\",inline\"`\n    metav1.ObjectMeta `json:\"metadata\" protobuf:\"bytes,1,opt,name=metadata\"`\n    InvolvedObject ObjectReference `json:\"involvedObject\" protobuf:\"bytes,2,opt,name=involvedObject\"`\n    Reason string `json:\"reason,omitempty\" protobuf:\"bytes,3,opt,name=reason\"`\n    Message string `json:\"message,omitempty\" protobuf:\"bytes,4,opt,name=message\"`\n    Source EventSource `json:\"source,omitempty\" protobuf:\"bytes,5,opt,name=source\"`\n    FirstTimestamp metav1.Time `json:\"firstTimestamp,omitempty\" protobuf:\"bytes,6,opt,name=firstTimestamp\"`\n    LastTimestamp metav1.Time `json:\"lastTimestamp,omitempty\" protobuf:\"bytes,7,opt,name=lastTimestamp\"`\n    Count int32 `json:\"count,omitempty\" protobuf:\"varint,8,opt,name=count\"`\n    Type string `json:\"type,omitempty\" protobuf:\"bytes,9,opt,name=type\"`\n    EventTime metav1.MicroTime `json:\"eventTime,omitempty\" protobuf:\"bytes,10,opt,name=eventTime\"`\n    Series *EventSeries `json:\"series,omitempty\" protobuf:\"bytes,11,opt,name=series\"`\n    Action string `json:\"action,omitempty\" protobuf:\"bytes,12,opt,name=action\"`\n    Related *ObjectReference `json:\"related,omitempty\" protobuf:\"bytes,13,opt,name=related\"`\n    ReportingController string `json:\"reportingComponent\" protobuf:\"bytes,14,opt,name=reportingComponent\"`\n    ReportingInstance string `json:\"reportingInstance\" protobuf:\"bytes,15,opt,name=reportingInstance\"`\n    ReportingInstance string `json:\"reportingInstance\" protobuf:\"bytes,15,opt,name=reportingInstance\"`\n}\n```\n\n其中 InvolvedObject 代表和事件关联的对象，source 代表事件源，使用 kubectl 看到的事件一般包含 Type、Reason、Age、From、Message 几个字段。\n\nk8s 中 events 目前只有两种类型：\"Normal\" 和 \"Warning\"：\n\n![events 的两种类型](http://cdn.tianfeiyu.com/events.png)\n\n\n##### 2、EventBroadcaster 的初始化\n\nevents 的整个生命周期都与 EventBroadcaster 有关，kubelet 中对 EventBroadcaster 的初始化在`k8s.io/kubernetes/cmd/kubelet/app/server.go`中：\n\n\n```\nfunc RunKubelet(kubeServer *options.KubeletServer, kubeDeps *kubelet.Dependencies, runOnce bool) error {\n  ...\n  // event 初始化\n  makeEventRecorder(kubeDeps, nodeName)\n  ...\n}\n\n\nfunc makeEventRecorder(kubeDeps *kubelet.Dependencies, nodeName types.NodeName) {\n  if kubeDeps.Recorder != nil {\n    return\n  }\n  // 初始化 EventBroadcaster \n  eventBroadcaster := record.NewBroadcaster()\n  // 初始化 EventRecorder\n  kubeDeps.Recorder = eventBroadcaster.NewRecorder(legacyscheme.Scheme, v1.EventSource{Component: componentKubelet, Host: string(nodeName)})\n  // 记录 events 到本地日志\n  eventBroadcaster.StartLogging(glog.V(3).Infof)\n  if kubeDeps.EventClient != nil {\n    glog.V(4).Infof(\"Sending events to api server.\")\n    // 上报 events 到 apiserver\n  eventBroadcaster.StartRecordingToSink(&v1core.EventSinkImpl{Interface: kubeDeps.EventClient.Events(\"\")})\n  } else {\n    glog.Warning(\"No api server defined - no events will be sent to API server.\")\n  }\n}\n```\n\nKubelet 在启动的时候会初始化一个 EventBroadcaster，它主要是对接收到的 events 做一些后续的处理(保存、上报等），EventBroadcaster 也会被 kubelet 中的其他模块使用，以下是相关的定义，对 events 生成和处理的函数都定义在 `k8s.io/client-go/tools/record/event.go` 中：\n\n```\ntype eventBroadcasterImpl struct {\n  *watch.Broadcaster\n  sleepDuration time.Duration\n}\n\n// EventBroadcaster knows how to receive events and send them to any EventSink, watcher, or log.\ntype EventBroadcaster interface {\n  StartEventWatcher(eventHandler func(*v1.Event)) watch.Interface\n\n  StartRecordingToSink(sink EventSink) watch.Interface\n\n  StartLogging(logf func(format string, args ...interface{})) watch.Interface\n\n  NewRecorder(scheme *runtime.Scheme, source v1.EventSource) EventRecorder\n}\n```\n\nEventBroadcaster 是个接口类型，该接口有以下四个方法：\n- StartEventWatcher() ： EventBroadcaster 中的核心方法，接收各模块产生的 events，参数为一个处理 events 的函数，用户可以使用 StartEventWatcher() 接收 events 然后使用自定义的 handle 进行处理\n- StartRecordingToSink() ： 调用 StartEventWatcher() 接收 events，并将收到的 events 发送到 apiserver \n- StartLogging() ：也是调用 StartEventWatcher() 接收 events，然后保存 events 到日志\n- NewRecorder() ：会创建一个指定 EventSource 的 EventRecorder，EventSource 指明了哪个节点的哪个组件\n\n\neventBroadcasterImpl 是 eventBroadcaster 实际的对象，初始化 EventBroadcaster 对象的时候会初始化一个 Broadcaster，Broadcaster 会启动一个 goroutine 接收各组件产生的 events 并广播到每一个 watcher。\n\n```\nfunc NewBroadcaster() EventBroadcaster {\n  return &eventBroadcasterImpl{watch.NewBroadcaster(maxQueuedEvents, watch.DropIfChannelFull), defaultSleepDuration}\n}\n```\n\n可以看到，kubelet 在初始化完 EventBroadcaster 后会调用 StartRecordingToSink() 和 StartLogging() 两个方法，StartRecordingToSink() 处理函数会将收到的 events 进行缓存、过滤、聚合而后发送到 apiserver，StartLogging() 仅将 events 保存到 kubelet 的日志中。\n\n##### 3、Events 的生成\n\n从初始化 EventBroadcaster 的代码中可以看到 kubelet 在初始化完 EventBroadcaster 后紧接着初始化了 EventRecorder，并将已经初始化的 Broadcaster 对象作为参数传给了 EventRecorder，至此，EventBroadcaster、EventRecorder、Broadcaster 三个对象产生了关联。EventRecorder 的主要功能是生成指定格式的 events，以下是相关的定义：\n\n```\ntype recorderImpl struct {\n  scheme *runtime.Scheme\n  source v1.EventSource\n  *watch.Broadcaster\n  clock clock.Clock\n}\n\ntype EventRecorder interface {\n  Event(object runtime.Object, eventtype, reason, message string)\n\n  Eventf(object runtime.Object, eventtype, reason, messageFmt string, args ...interface{})\n\n  PastEventf(object runtime.Object, timestamp metav1.Time, eventtype, reason, messageFmt string, args ...interface{})\n\n  AnnotatedEventf(object runtime.Object, annotations map[string]string, eventtype, reason, messageFmt string, args ...interface{})\n}\n```\n\nEventRecorder 中包含的几个方法都是产生指定格式的 events，Event() 和 Eventf() 的功能类似 fmt.Println() 和 fmt.Printf()，kubelet 中的各个模块会调用 EventRecorder 生成 events。recorderImpl 是 EventRecorder 实际的对象。EventRecorder 的每个方法会调用 generateEvent，在 generateEvent 中初始化 events 。\n\n以下是生成 events 的函数：\n\n```\nfunc (recorder *recorderImpl) generateEvent(object runtime.Object, annotations map[string]string, timestamp metav1.Time, eventtype, reason, message string) {\n  ref, err := ref.GetReference(recorder.scheme, object)\n  if err != nil {\n    glog.Errorf(\"Could not construct reference to: '%#v' due to: '%v'. Will not report event: '%v' '%v' '%v'\", object, err, eventtype, reason, message)\n    return\n  }\n\n  if !validateEventType(eventtype) {\n    glog.Errorf(\"Unsupported event type: '%v'\", eventtype)\n    return\n  }\n\n  event := recorder.makeEvent(ref, annotations, eventtype, reason, message)\n  event.Source = recorder.source\n\n  go func() {\n    // NOTE: events should be a non-blocking operation\n    defer utilruntime.HandleCrash()\n    // 发送事件\n    recorder.Action(watch.Added, event)\n  }()\n}\n\nfunc (recorder *recorderImpl) makeEvent(ref *v1.ObjectReference, annotations map[string]string, eventtype, reason, message string) *v1.Event {\n  t := metav1.Time{Time: recorder.clock.Now()}\n  namespace := ref.Namespace\n  if namespace == \"\" {\n    namespace = metav1.NamespaceDefault\n  }\n  return &v1.Event{\n    ObjectMeta: metav1.ObjectMeta{\n      Name:        fmt.Sprintf(\"%v.%x\", ref.Name, t.UnixNano()),\n      Namespace:   namespace,\n      Annotations: annotations,\n    },\n    InvolvedObject: *ref,\n    Reason:         reason,\n    Message:        message,\n    FirstTimestamp: t,\n    LastTimestamp:  t,\n    Count:          1,\n    Type:           eventtype,\n  }\n}\n```\n初始化完 events 后会调用 recorder.Action() 将 events 发送到 Broadcaster 的事件接收队列中, Action() 是 Broadcaster 中的方法。\n\n以下是 Action() 方法的实现：\n\n```\nfunc (m *Broadcaster) Action(action EventType, obj runtime.Object) {\n  m.incoming <- Event{action, obj}\n}\n```\n\n##### 4、Events 的广播\n\n上面已经说了，EventBroadcaster 初始化时会初始化一个 Broadcaster，Broadcaster 的作用就是接收所有的 events 并进行广播，Broadcaster 的实现在 `k8s.io/apimachinery/pkg/watch/mux.go ` 中，Broadcaster 初始化完成后会在后台启动一个 goroutine，然后接收所有从 EventRecorder 发送过来的 events，Broadcaster 中有一个 map 会保存每一个注册的 watcher， 接着将 events 广播给所有的 watcher，每个 watcher 都有一个接收消息的 channel，watcher 可以通过它的 ResultChan() 方法从 channel 中读取数据进行消费。\n\n\n以下是 Broadcaster 广播 events 的实现：\n```\nfunc (m *Broadcaster) loop() {\n  for event := range m.incoming {\n    if event.Type == internalRunFunctionMarker {\n      event.Object.(functionFakeRuntimeObject)()\n      continue\n    }\n    m.distribute(event)\n  }\n  m.closeAll()\n  m.distributing.Done()\n}\n\n// distribute sends event to all watchers. Blocking.\nfunc (m *Broadcaster) distribute(event Event) {\n  m.lock.Lock()\n  defer m.lock.Unlock()\n  if m.fullChannelBehavior == DropIfChannelFull {\n    for _, w := range m.watchers {\n      select {\n      case w.result <- event:\n      case <-w.stopped:\n      default: // Don't block if the event can't be queued.\n      }\n    }\n  } else {\n    for _, w := range m.watchers {\n      select {\n      case w.result <- event:\n      case <-w.stopped:\n      }\n    }\n  }\n}\n```\n\n\n##### 5、Events 的处理\n\n那么 watcher 是从何而来呢？每一个要处理 events 的 client 都需要初始化一个 watcher，处理 events 的方法是在 EventBroadcaster 中定义的，以下是 EventBroadcaster 中对 events 处理的三个函数：\n\n```\nfunc (eventBroadcaster *eventBroadcasterImpl) StartEventWatcher(eventHandler func(*v1.Event)) watch.Interface {\n  watcher := eventBroadcaster.Watch()\n  go func() {\n    defer utilruntime.HandleCrash()\n    for watchEvent := range watcher.ResultChan() {\n      event, ok := watchEvent.Object.(*v1.Event)\n      if !ok {\n        // This is all local, so there's no reason this should\n        // ever happen.\n        continue\n      }\n      eventHandler(event)\n    }\n  }()\n  return watcher\n}\n```\n\nStartEventWatcher() 首先实例化一个 watcher，每个 watcher 都会被塞入到 Broadcaster 的 watcher 列表中，watcher 从 Broadcaster 提供的 channel 中读取 events，然后再调用 eventHandler 进行处理，StartLogging() 和 StartRecordingToSink() 都是对 StartEventWatcher() 的封装，都会传入自己的处理函数。\n\n\n\n```\nfunc (eventBroadcaster *eventBroadcasterImpl) StartLogging(logf func(format string, args ...interface{})) watch.Interface {\n  return eventBroadcaster.StartEventWatcher(\n    func(e *v1.Event) {\n      logf(\"Event(%#v): type: '%v' reason: '%v' %v\", e.InvolvedObject, e.Type, e.Reason, e.Message)\n    })\n}\n```\n\nStartLogging() 传入的 eventHandler 仅将 events 保存到日志中。\n\n```\nfunc (eventBroadcaster *eventBroadcasterImpl) StartRecordingToSink(sink EventSink) watch.Interface {\n  // The default math/rand package functions aren't thread safe, so create a\n  // new Rand object for each StartRecording call.\n  randGen := rand.New(rand.NewSource(time.Now().UnixNano()))\n  eventCorrelator := NewEventCorrelator(clock.RealClock{})\n  return eventBroadcaster.StartEventWatcher(\n    func(event *v1.Event) {\n      recordToSink(sink, event, eventCorrelator, randGen, eventBroadcaster.sleepDuration)\n    })\n}\n\nfunc recordToSink(sink EventSink, event *v1.Event, eventCorrelator *EventCorrelator, randGen *rand.Rand, sleepDuration time.Duration) {\n  eventCopy := *event\n  event = &eventCopy\n  result, err := eventCorrelator.EventCorrelate(event)\n  if err != nil {\n    utilruntime.HandleError(err)\n  }\n  if result.Skip {\n    return\n  }\n  tries := 0\n  for {\n    if recordEvent(sink, result.Event, result.Patch, result.Event.Count > 1, eventCorrelator) {\n      break\n    }\n    tries++\n    if tries >= maxTriesPerEvent {\n      glog.Errorf(\"Unable to write event '%#v' (retry limit exceeded!)\", event)\n      break\n    }\n    // 第一次重试增加随机性，防止 apiserver 重启的时候所有的事件都在同一时间发送事件\n    if tries == 1 {\n      time.Sleep(time.Duration(float64(sleepDuration) * randGen.Float64()))\n    } else {\n      time.Sleep(sleepDuration)\n    }\n  }\n}\n```\n\nStartRecordingToSink() 方法先根据当前时间生成一个随机数发生器 randGen，增加随机数是为了在重试时增加随机性，防止 apiserver 重启的时候所有的事件都在同一时间发送事件，接着实例化一个EventCorrelator，EventCorrelator 会对事件做一些预处理的工作，其中包括过滤、聚合、缓存等操作，具体代码不做详细分析，最后将 recordToSink() 函数作为处理函数，recordToSink() 会将处理后的 events 发送到 apiserver，这是 StartEventWatcher() 的整个工作流程。\n\n\n##### 6、Events 简单实现\n\n了解完 events 的整个处理流程后，可以参考其实现方式写一个 demo，要实现一个完整的 events 需要包含以下几个功能：\n\n- 1、事件的产生\n- 2、事件的发送\n- 3、事件广播\n- 4、事件缓存\n- 5、事件过滤和聚合\n\n```\npackage main\n\nimport (\n  \"fmt\"\n  \"sync\"\n  \"time\"\n)\n\n// watcher queue\nconst queueLength = int64(1)\n\n// Events xxx\ntype Events struct {\n  Reason    string\n  Message   string\n  Source    string\n  Type      string\n  Count     int64\n  Timestamp time.Time\n}\n\n// EventBroadcaster xxx\ntype EventBroadcaster interface {\n  Event(etype, reason, message string)\n  StartLogging() Interface\n  Stop()\n}\n\n// eventBroadcaster xxx\ntype eventBroadcasterImpl struct {\n  *Broadcaster\n}\n\nfunc NewEventBroadcaster() EventBroadcaster {\n  return &eventBroadcasterImpl{NewBroadcaster(queueLength)}\n}\n\nfunc (eventBroadcaster *eventBroadcasterImpl) Stop() {\n  eventBroadcaster.Shutdown()\n}\n\n// generate event\nfunc (eventBroadcaster *eventBroadcasterImpl) Event(etype, reason, message string) {\n  events := &Events{Type: etype, Reason: reason, Message: message}\n  // send event to broadcast\n  eventBroadcaster.Action(events)\n}\n\n// 仅实现 StartLogging() 的功能，将日志打印\nfunc (eventBroadcaster *eventBroadcasterImpl) StartLogging() Interface {\n  // register a watcher\n  watcher := eventBroadcaster.Watch()\n  go func() {\n    for watchEvent := range watcher.ResultChan() {\n      fmt.Printf(\"%v\\n\", watchEvent)\n    }\n  }()\n\n  go func() {\n    time.Sleep(time.Second * 4)\n    watcher.Stop()\n  }()\n\n  return watcher\n}\n\n// --------------------\n// Broadcaster 定义与实现\n// 接收 events channel 的长度\nconst incomingQueuLength = 100\n\ntype Broadcaster struct {\n  lock             sync.Mutex\n  incoming         chan Events\n  watchers         map[int64]*broadcasterWatcher\n  watchersQueue    int64\n  watchQueueLength int64\n  distributing     sync.WaitGroup\n}\n\nfunc NewBroadcaster(queueLength int64) *Broadcaster {\n  m := &Broadcaster{\n    incoming:         make(chan Events, incomingQueuLength),\n    watchers:         map[int64]*broadcasterWatcher{},\n    watchQueueLength: queueLength,\n  }\n  m.distributing.Add(1)\n  // 后台启动一个 goroutine 广播 events\n  go m.loop()\n  return m\n}\n\n// Broadcaster 接收所产生的 events\nfunc (m *Broadcaster) Action(event *Events) {\n  m.incoming <- *event\n}\n\n// 广播 events 到每个 watcher\nfunc (m *Broadcaster) loop() {\n  // 从 incoming channel 中读取所接收到的 events\n  for event := range m.incoming {\n    // 发送 events 到每一个 watcher\n    for _, w := range m.watchers {\n      select {\n      case w.result <- event:\n      case <-w.stopped:\n      default:\n      }\n    }\n  }\n  m.closeAll()\n  m.distributing.Done()\n}\n\nfunc (m *Broadcaster) Shutdown() {\n  close(m.incoming)\n  m.distributing.Wait()\n}\n\nfunc (m *Broadcaster) closeAll() {\n  // TODO\n  m.lock.Lock()\n  defer m.lock.Unlock()\n  for _, w := range m.watchers {\n    close(w.result)\n  }\n  m.watchers = map[int64]*broadcasterWatcher{}\n}\n\nfunc (m *Broadcaster) stopWatching(id int64) {\n  m.lock.Lock()\n  defer m.lock.Unlock()\n  w, ok := m.watchers[id]\n  if !ok {\n    return\n  }\n  delete(m.watchers, id)\n  close(w.result)\n}\n\n// 调用 Watch(）方法注册一个 watcher\nfunc (m *Broadcaster) Watch() Interface {\n  watcher := &broadcasterWatcher{\n    result:  make(chan Events, incomingQueuLength),\n    stopped: make(chan struct{}),\n    id:      m.watchQueueLength,\n    m:       m,\n  }\n  m.watchers[m.watchersQueue] = watcher\n  m.watchQueueLength++\n  return watcher\n}\n\n// watcher 实现\ntype Interface interface {\n  Stop()\n  ResultChan() <-chan Events\n}\n\ntype broadcasterWatcher struct {\n  result  chan Events\n  stopped chan struct{}\n  stop    sync.Once\n  id      int64\n  m       *Broadcaster\n}\n\n// 每个 watcher 通过该方法读取 channel 中广播的 events\nfunc (b *broadcasterWatcher) ResultChan() <-chan Events {\n  return b.result\n}\n\nfunc (b *broadcasterWatcher) Stop() {\n  b.stop.Do(func() {\n    close(b.stopped)\n    b.m.stopWatching(b.id)\n  })\n}\n\n// --------------------\n\nfunc main() {\n  eventBroadcast := NewEventBroadcaster()\n\n  var wg sync.WaitGroup\n  wg.Add(1)\n  // producer event\n  go func() {\n    defer wg.Done()\n    time.Sleep(time.Second)\n    eventBroadcast.Event(\"add\", \"test\", \"1\")\n    time.Sleep(time.Second * 2)\n    eventBroadcast.Event(\"add\", \"test\", \"2\")\n    time.Sleep(time.Second * 3)\n    eventBroadcast.Event(\"add\", \"test\", \"3\")\n    //eventBroadcast.Stop()\n  }()\n\n  eventBroadcast.StartLogging()\n  wg.Wait()\n}\n```\n\n此处仅简单实现，将 EventRecorder 处理 events 的功能直接放在了 EventBroadcaster 中实现，对 events 的处理方法仅实现了 StartLogging()，Broadcaster 中的部分功能是直接复制 k8s 中的代码，有一定的精简，其实现值得学习，此处对 EventCorrelator 并没有进行实现。\n\n\n代码请参考：https://github.com/gosoon/k8s-learning-notes/tree/master/k8s-package/events\n\n##### 7、总结\n\n本文讲述了 k8s 中 events 从产生到展示的一个完整过程，最后也实现了一个简单的 demo，在此将 kubelet 对 events 的整个处理过程再梳理下，其中主要有三个对象 EventBroadcaster、EventRecorder、Broadcaster：\n\n- 1、kubelet 首先会初始化 EventBroadcaster 对象，同时会初始化一个 Broadcaster 对象。\n- 2、kubelet 通过 EventBroadcaster 对象的 NewRecorder() 方法初始化 EventRecorder 对象，EventRecorder 对象提供的几个方法会生成 events 并通过 Action() 方法发送 events 到 Broadcaster 的 channel 队列中。\n- 3、Broadcaster 的作用就是接收所有的 events 并进行广播，Broadcaster 初始化后会在后台启动一个 goroutine，然后接收所有从 EventRecorder 发来的 events。\n- 4、EventBroadcaster 对 events 有三个处理方法：StartEventWatcher()、StartRecordingToSink()、StartLogging()，StartEventWatcher() 是其中的核心方法，会初始化一个 watcher 注册到 Broadcaster，其余两个处理函数对 StartEventWatcher() 进行了封装，并实现了自己的处理函数。\n- 5、 Broadcaster 中有一个 map 会保存每一个注册的 watcher，其会将所有的 events 广播给每一个 watcher，每个 watcher 通过它的 ResultChan() 方法从 channel 接收 events。\n- 6、kubelet 会使用 StartRecordingToSink() 和 StartLogging() 对 events 进行处理，StartRecordingToSink() 处理函数收到 events 后会进行缓存、过滤、聚合而后发送到 apiserver，apiserver 会将 events 保存到 etcd 中，使用 kubectl 或其他客户端可以查看。StartLogging() 仅将 events 保存到 kubelet 的日志中。\n","slug":"k8s_events","published":1,"updated":"2019-07-21T09:46:28.879Z","_id":"cjycnhjm0000k5vwn5qm9gva9","comments":1,"layout":"post","photos":[],"link":"","content":"<p>当集群中的 node 或 pod 异常时，大部分用户会使用 kubectl 查看对应的 events，那么 events 是从何而来的？其实 k8s 中的各个组件会将运行时产生的各种事件汇报到 apiserver，对于 k8s 中的可描述资源，使用 kubectl describe 都可以看到其相关的 events，那 k8s 中又有哪几个组件都上报 events 呢？ </p>\n<p>只要在 <code>k8s.io/kubernetes/cmd</code> 目录下暴力搜索一下就能知道哪些组件会产生 events：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ grep -R -n -i &quot;EventRecorder&quot; .</span><br></pre></td></tr></table></figure></p>\n<p>可以看出，controller-manage、kube-proxy、kube-scheduler、kubelet 都使用了 EventRecorder，本文只讲述 kubelet 中对 Events 的使用。</p>\n<h5 id=\"1、Events-的定义\"><a href=\"#1、Events-的定义\" class=\"headerlink\" title=\"1、Events 的定义\"></a>1、Events 的定义</h5><p>events 在 <code>k8s.io/api/core/v1/types.go</code> 中进行定义,结构体如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type Event struct &#123;</span><br><span class=\"line\">    metav1.TypeMeta `json:&quot;,inline&quot;`</span><br><span class=\"line\">    metav1.ObjectMeta `json:&quot;metadata&quot; protobuf:&quot;bytes,1,opt,name=metadata&quot;`</span><br><span class=\"line\">    InvolvedObject ObjectReference `json:&quot;involvedObject&quot; protobuf:&quot;bytes,2,opt,name=involvedObject&quot;`</span><br><span class=\"line\">    Reason string `json:&quot;reason,omitempty&quot; protobuf:&quot;bytes,3,opt,name=reason&quot;`</span><br><span class=\"line\">    Message string `json:&quot;message,omitempty&quot; protobuf:&quot;bytes,4,opt,name=message&quot;`</span><br><span class=\"line\">    Source EventSource `json:&quot;source,omitempty&quot; protobuf:&quot;bytes,5,opt,name=source&quot;`</span><br><span class=\"line\">    FirstTimestamp metav1.Time `json:&quot;firstTimestamp,omitempty&quot; protobuf:&quot;bytes,6,opt,name=firstTimestamp&quot;`</span><br><span class=\"line\">    LastTimestamp metav1.Time `json:&quot;lastTimestamp,omitempty&quot; protobuf:&quot;bytes,7,opt,name=lastTimestamp&quot;`</span><br><span class=\"line\">    Count int32 `json:&quot;count,omitempty&quot; protobuf:&quot;varint,8,opt,name=count&quot;`</span><br><span class=\"line\">    Type string `json:&quot;type,omitempty&quot; protobuf:&quot;bytes,9,opt,name=type&quot;`</span><br><span class=\"line\">    EventTime metav1.MicroTime `json:&quot;eventTime,omitempty&quot; protobuf:&quot;bytes,10,opt,name=eventTime&quot;`</span><br><span class=\"line\">    Series *EventSeries `json:&quot;series,omitempty&quot; protobuf:&quot;bytes,11,opt,name=series&quot;`</span><br><span class=\"line\">    Action string `json:&quot;action,omitempty&quot; protobuf:&quot;bytes,12,opt,name=action&quot;`</span><br><span class=\"line\">    Related *ObjectReference `json:&quot;related,omitempty&quot; protobuf:&quot;bytes,13,opt,name=related&quot;`</span><br><span class=\"line\">    ReportingController string `json:&quot;reportingComponent&quot; protobuf:&quot;bytes,14,opt,name=reportingComponent&quot;`</span><br><span class=\"line\">    ReportingInstance string `json:&quot;reportingInstance&quot; protobuf:&quot;bytes,15,opt,name=reportingInstance&quot;`</span><br><span class=\"line\">    ReportingInstance string `json:&quot;reportingInstance&quot; protobuf:&quot;bytes,15,opt,name=reportingInstance&quot;`</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中 InvolvedObject 代表和事件关联的对象，source 代表事件源，使用 kubectl 看到的事件一般包含 Type、Reason、Age、From、Message 几个字段。</p>\n<p>k8s 中 events 目前只有两种类型：”Normal” 和 “Warning”：</p>\n<p><img src=\"http://cdn.tianfeiyu.com/events.png\" alt=\"events 的两种类型\"></p>\n<h5 id=\"2、EventBroadcaster-的初始化\"><a href=\"#2、EventBroadcaster-的初始化\" class=\"headerlink\" title=\"2、EventBroadcaster 的初始化\"></a>2、EventBroadcaster 的初始化</h5><p>events 的整个生命周期都与 EventBroadcaster 有关，kubelet 中对 EventBroadcaster 的初始化在<code>k8s.io/kubernetes/cmd/kubelet/app/server.go</code>中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func RunKubelet(kubeServer *options.KubeletServer, kubeDeps *kubelet.Dependencies, runOnce bool) error &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  // event 初始化</span><br><span class=\"line\">  makeEventRecorder(kubeDeps, nodeName)</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">func makeEventRecorder(kubeDeps *kubelet.Dependencies, nodeName types.NodeName) &#123;</span><br><span class=\"line\">  if kubeDeps.Recorder != nil &#123;</span><br><span class=\"line\">    return</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // 初始化 EventBroadcaster </span><br><span class=\"line\">  eventBroadcaster := record.NewBroadcaster()</span><br><span class=\"line\">  // 初始化 EventRecorder</span><br><span class=\"line\">  kubeDeps.Recorder = eventBroadcaster.NewRecorder(legacyscheme.Scheme, v1.EventSource&#123;Component: componentKubelet, Host: string(nodeName)&#125;)</span><br><span class=\"line\">  // 记录 events 到本地日志</span><br><span class=\"line\">  eventBroadcaster.StartLogging(glog.V(3).Infof)</span><br><span class=\"line\">  if kubeDeps.EventClient != nil &#123;</span><br><span class=\"line\">    glog.V(4).Infof(&quot;Sending events to api server.&quot;)</span><br><span class=\"line\">    // 上报 events 到 apiserver</span><br><span class=\"line\">  eventBroadcaster.StartRecordingToSink(&amp;v1core.EventSinkImpl&#123;Interface: kubeDeps.EventClient.Events(&quot;&quot;)&#125;)</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    glog.Warning(&quot;No api server defined - no events will be sent to API server.&quot;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Kubelet 在启动的时候会初始化一个 EventBroadcaster，它主要是对接收到的 events 做一些后续的处理(保存、上报等），EventBroadcaster 也会被 kubelet 中的其他模块使用，以下是相关的定义，对 events 生成和处理的函数都定义在 <code>k8s.io/client-go/tools/record/event.go</code> 中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type eventBroadcasterImpl struct &#123;</span><br><span class=\"line\">  *watch.Broadcaster</span><br><span class=\"line\">  sleepDuration time.Duration</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// EventBroadcaster knows how to receive events and send them to any EventSink, watcher, or log.</span><br><span class=\"line\">type EventBroadcaster interface &#123;</span><br><span class=\"line\">  StartEventWatcher(eventHandler func(*v1.Event)) watch.Interface</span><br><span class=\"line\"></span><br><span class=\"line\">  StartRecordingToSink(sink EventSink) watch.Interface</span><br><span class=\"line\"></span><br><span class=\"line\">  StartLogging(logf func(format string, args ...interface&#123;&#125;)) watch.Interface</span><br><span class=\"line\"></span><br><span class=\"line\">  NewRecorder(scheme *runtime.Scheme, source v1.EventSource) EventRecorder</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>EventBroadcaster 是个接口类型，该接口有以下四个方法：</p>\n<ul>\n<li>StartEventWatcher() ： EventBroadcaster 中的核心方法，接收各模块产生的 events，参数为一个处理 events 的函数，用户可以使用 StartEventWatcher() 接收 events 然后使用自定义的 handle 进行处理</li>\n<li>StartRecordingToSink() ： 调用 StartEventWatcher() 接收 events，并将收到的 events 发送到 apiserver </li>\n<li>StartLogging() ：也是调用 StartEventWatcher() 接收 events，然后保存 events 到日志</li>\n<li>NewRecorder() ：会创建一个指定 EventSource 的 EventRecorder，EventSource 指明了哪个节点的哪个组件</li>\n</ul>\n<p>eventBroadcasterImpl 是 eventBroadcaster 实际的对象，初始化 EventBroadcaster 对象的时候会初始化一个 Broadcaster，Broadcaster 会启动一个 goroutine 接收各组件产生的 events 并广播到每一个 watcher。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func NewBroadcaster() EventBroadcaster &#123;</span><br><span class=\"line\">  return &amp;eventBroadcasterImpl&#123;watch.NewBroadcaster(maxQueuedEvents, watch.DropIfChannelFull), defaultSleepDuration&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到，kubelet 在初始化完 EventBroadcaster 后会调用 StartRecordingToSink() 和 StartLogging() 两个方法，StartRecordingToSink() 处理函数会将收到的 events 进行缓存、过滤、聚合而后发送到 apiserver，StartLogging() 仅将 events 保存到 kubelet 的日志中。</p>\n<h5 id=\"3、Events-的生成\"><a href=\"#3、Events-的生成\" class=\"headerlink\" title=\"3、Events 的生成\"></a>3、Events 的生成</h5><p>从初始化 EventBroadcaster 的代码中可以看到 kubelet 在初始化完 EventBroadcaster 后紧接着初始化了 EventRecorder，并将已经初始化的 Broadcaster 对象作为参数传给了 EventRecorder，至此，EventBroadcaster、EventRecorder、Broadcaster 三个对象产生了关联。EventRecorder 的主要功能是生成指定格式的 events，以下是相关的定义：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type recorderImpl struct &#123;</span><br><span class=\"line\">  scheme *runtime.Scheme</span><br><span class=\"line\">  source v1.EventSource</span><br><span class=\"line\">  *watch.Broadcaster</span><br><span class=\"line\">  clock clock.Clock</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">type EventRecorder interface &#123;</span><br><span class=\"line\">  Event(object runtime.Object, eventtype, reason, message string)</span><br><span class=\"line\"></span><br><span class=\"line\">  Eventf(object runtime.Object, eventtype, reason, messageFmt string, args ...interface&#123;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  PastEventf(object runtime.Object, timestamp metav1.Time, eventtype, reason, messageFmt string, args ...interface&#123;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  AnnotatedEventf(object runtime.Object, annotations map[string]string, eventtype, reason, messageFmt string, args ...interface&#123;&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>EventRecorder 中包含的几个方法都是产生指定格式的 events，Event() 和 Eventf() 的功能类似 fmt.Println() 和 fmt.Printf()，kubelet 中的各个模块会调用 EventRecorder 生成 events。recorderImpl 是 EventRecorder 实际的对象。EventRecorder 的每个方法会调用 generateEvent，在 generateEvent 中初始化 events 。</p>\n<p>以下是生成 events 的函数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (recorder *recorderImpl) generateEvent(object runtime.Object, annotations map[string]string, timestamp metav1.Time, eventtype, reason, message string) &#123;</span><br><span class=\"line\">  ref, err := ref.GetReference(recorder.scheme, object)</span><br><span class=\"line\">  if err != nil &#123;</span><br><span class=\"line\">    glog.Errorf(&quot;Could not construct reference to: &apos;%#v&apos; due to: &apos;%v&apos;. Will not report event: &apos;%v&apos; &apos;%v&apos; &apos;%v&apos;&quot;, object, err, eventtype, reason, message)</span><br><span class=\"line\">    return</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  if !validateEventType(eventtype) &#123;</span><br><span class=\"line\">    glog.Errorf(&quot;Unsupported event type: &apos;%v&apos;&quot;, eventtype)</span><br><span class=\"line\">    return</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  event := recorder.makeEvent(ref, annotations, eventtype, reason, message)</span><br><span class=\"line\">  event.Source = recorder.source</span><br><span class=\"line\"></span><br><span class=\"line\">  go func() &#123;</span><br><span class=\"line\">    // NOTE: events should be a non-blocking operation</span><br><span class=\"line\">    defer utilruntime.HandleCrash()</span><br><span class=\"line\">    // 发送事件</span><br><span class=\"line\">    recorder.Action(watch.Added, event)</span><br><span class=\"line\">  &#125;()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (recorder *recorderImpl) makeEvent(ref *v1.ObjectReference, annotations map[string]string, eventtype, reason, message string) *v1.Event &#123;</span><br><span class=\"line\">  t := metav1.Time&#123;Time: recorder.clock.Now()&#125;</span><br><span class=\"line\">  namespace := ref.Namespace</span><br><span class=\"line\">  if namespace == &quot;&quot; &#123;</span><br><span class=\"line\">    namespace = metav1.NamespaceDefault</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return &amp;v1.Event&#123;</span><br><span class=\"line\">    ObjectMeta: metav1.ObjectMeta&#123;</span><br><span class=\"line\">      Name:        fmt.Sprintf(&quot;%v.%x&quot;, ref.Name, t.UnixNano()),</span><br><span class=\"line\">      Namespace:   namespace,</span><br><span class=\"line\">      Annotations: annotations,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    InvolvedObject: *ref,</span><br><span class=\"line\">    Reason:         reason,</span><br><span class=\"line\">    Message:        message,</span><br><span class=\"line\">    FirstTimestamp: t,</span><br><span class=\"line\">    LastTimestamp:  t,</span><br><span class=\"line\">    Count:          1,</span><br><span class=\"line\">    Type:           eventtype,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>初始化完 events 后会调用 recorder.Action() 将 events 发送到 Broadcaster 的事件接收队列中, Action() 是 Broadcaster 中的方法。</p>\n<p>以下是 Action() 方法的实现：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (m *Broadcaster) Action(action EventType, obj runtime.Object) &#123;</span><br><span class=\"line\">  m.incoming &lt;- Event&#123;action, obj&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"4、Events-的广播\"><a href=\"#4、Events-的广播\" class=\"headerlink\" title=\"4、Events 的广播\"></a>4、Events 的广播</h5><p>上面已经说了，EventBroadcaster 初始化时会初始化一个 Broadcaster，Broadcaster 的作用就是接收所有的 events 并进行广播，Broadcaster 的实现在 <code>k8s.io/apimachinery/pkg/watch/mux.go</code> 中，Broadcaster 初始化完成后会在后台启动一个 goroutine，然后接收所有从 EventRecorder 发送过来的 events，Broadcaster 中有一个 map 会保存每一个注册的 watcher， 接着将 events 广播给所有的 watcher，每个 watcher 都有一个接收消息的 channel，watcher 可以通过它的 ResultChan() 方法从 channel 中读取数据进行消费。</p>\n<p>以下是 Broadcaster 广播 events 的实现：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (m *Broadcaster) loop() &#123;</span><br><span class=\"line\">  for event := range m.incoming &#123;</span><br><span class=\"line\">    if event.Type == internalRunFunctionMarker &#123;</span><br><span class=\"line\">      event.Object.(functionFakeRuntimeObject)()</span><br><span class=\"line\">      continue</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    m.distribute(event)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  m.closeAll()</span><br><span class=\"line\">  m.distributing.Done()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// distribute sends event to all watchers. Blocking.</span><br><span class=\"line\">func (m *Broadcaster) distribute(event Event) &#123;</span><br><span class=\"line\">  m.lock.Lock()</span><br><span class=\"line\">  defer m.lock.Unlock()</span><br><span class=\"line\">  if m.fullChannelBehavior == DropIfChannelFull &#123;</span><br><span class=\"line\">    for _, w := range m.watchers &#123;</span><br><span class=\"line\">      select &#123;</span><br><span class=\"line\">      case w.result &lt;- event:</span><br><span class=\"line\">      case &lt;-w.stopped:</span><br><span class=\"line\">      default: // Don&apos;t block if the event can&apos;t be queued.</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    for _, w := range m.watchers &#123;</span><br><span class=\"line\">      select &#123;</span><br><span class=\"line\">      case w.result &lt;- event:</span><br><span class=\"line\">      case &lt;-w.stopped:</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"5、Events-的处理\"><a href=\"#5、Events-的处理\" class=\"headerlink\" title=\"5、Events 的处理\"></a>5、Events 的处理</h5><p>那么 watcher 是从何而来呢？每一个要处理 events 的 client 都需要初始化一个 watcher，处理 events 的方法是在 EventBroadcaster 中定义的，以下是 EventBroadcaster 中对 events 处理的三个函数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (eventBroadcaster *eventBroadcasterImpl) StartEventWatcher(eventHandler func(*v1.Event)) watch.Interface &#123;</span><br><span class=\"line\">  watcher := eventBroadcaster.Watch()</span><br><span class=\"line\">  go func() &#123;</span><br><span class=\"line\">    defer utilruntime.HandleCrash()</span><br><span class=\"line\">    for watchEvent := range watcher.ResultChan() &#123;</span><br><span class=\"line\">      event, ok := watchEvent.Object.(*v1.Event)</span><br><span class=\"line\">      if !ok &#123;</span><br><span class=\"line\">        // This is all local, so there&apos;s no reason this should</span><br><span class=\"line\">        // ever happen.</span><br><span class=\"line\">        continue</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      eventHandler(event)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;()</span><br><span class=\"line\">  return watcher</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>StartEventWatcher() 首先实例化一个 watcher，每个 watcher 都会被塞入到 Broadcaster 的 watcher 列表中，watcher 从 Broadcaster 提供的 channel 中读取 events，然后再调用 eventHandler 进行处理，StartLogging() 和 StartRecordingToSink() 都是对 StartEventWatcher() 的封装，都会传入自己的处理函数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (eventBroadcaster *eventBroadcasterImpl) StartLogging(logf func(format string, args ...interface&#123;&#125;)) watch.Interface &#123;</span><br><span class=\"line\">  return eventBroadcaster.StartEventWatcher(</span><br><span class=\"line\">    func(e *v1.Event) &#123;</span><br><span class=\"line\">      logf(&quot;Event(%#v): type: &apos;%v&apos; reason: &apos;%v&apos; %v&quot;, e.InvolvedObject, e.Type, e.Reason, e.Message)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>StartLogging() 传入的 eventHandler 仅将 events 保存到日志中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (eventBroadcaster *eventBroadcasterImpl) StartRecordingToSink(sink EventSink) watch.Interface &#123;</span><br><span class=\"line\">  // The default math/rand package functions aren&apos;t thread safe, so create a</span><br><span class=\"line\">  // new Rand object for each StartRecording call.</span><br><span class=\"line\">  randGen := rand.New(rand.NewSource(time.Now().UnixNano()))</span><br><span class=\"line\">  eventCorrelator := NewEventCorrelator(clock.RealClock&#123;&#125;)</span><br><span class=\"line\">  return eventBroadcaster.StartEventWatcher(</span><br><span class=\"line\">    func(event *v1.Event) &#123;</span><br><span class=\"line\">      recordToSink(sink, event, eventCorrelator, randGen, eventBroadcaster.sleepDuration)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func recordToSink(sink EventSink, event *v1.Event, eventCorrelator *EventCorrelator, randGen *rand.Rand, sleepDuration time.Duration) &#123;</span><br><span class=\"line\">  eventCopy := *event</span><br><span class=\"line\">  event = &amp;eventCopy</span><br><span class=\"line\">  result, err := eventCorrelator.EventCorrelate(event)</span><br><span class=\"line\">  if err != nil &#123;</span><br><span class=\"line\">    utilruntime.HandleError(err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  if result.Skip &#123;</span><br><span class=\"line\">    return</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  tries := 0</span><br><span class=\"line\">  for &#123;</span><br><span class=\"line\">    if recordEvent(sink, result.Event, result.Patch, result.Event.Count &gt; 1, eventCorrelator) &#123;</span><br><span class=\"line\">      break</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    tries++</span><br><span class=\"line\">    if tries &gt;= maxTriesPerEvent &#123;</span><br><span class=\"line\">      glog.Errorf(&quot;Unable to write event &apos;%#v&apos; (retry limit exceeded!)&quot;, event)</span><br><span class=\"line\">      break</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 第一次重试增加随机性，防止 apiserver 重启的时候所有的事件都在同一时间发送事件</span><br><span class=\"line\">    if tries == 1 &#123;</span><br><span class=\"line\">      time.Sleep(time.Duration(float64(sleepDuration) * randGen.Float64()))</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      time.Sleep(sleepDuration)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>StartRecordingToSink() 方法先根据当前时间生成一个随机数发生器 randGen，增加随机数是为了在重试时增加随机性，防止 apiserver 重启的时候所有的事件都在同一时间发送事件，接着实例化一个EventCorrelator，EventCorrelator 会对事件做一些预处理的工作，其中包括过滤、聚合、缓存等操作，具体代码不做详细分析，最后将 recordToSink() 函数作为处理函数，recordToSink() 会将处理后的 events 发送到 apiserver，这是 StartEventWatcher() 的整个工作流程。</p>\n<h5 id=\"6、Events-简单实现\"><a href=\"#6、Events-简单实现\" class=\"headerlink\" title=\"6、Events 简单实现\"></a>6、Events 简单实现</h5><p>了解完 events 的整个处理流程后，可以参考其实现方式写一个 demo，要实现一个完整的 events 需要包含以下几个功能：</p>\n<ul>\n<li>1、事件的产生</li>\n<li>2、事件的发送</li>\n<li>3、事件广播</li>\n<li>4、事件缓存</li>\n<li>5、事件过滤和聚合</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">  &quot;fmt&quot;</span><br><span class=\"line\">  &quot;sync&quot;</span><br><span class=\"line\">  &quot;time&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">// watcher queue</span><br><span class=\"line\">const queueLength = int64(1)</span><br><span class=\"line\"></span><br><span class=\"line\">// Events xxx</span><br><span class=\"line\">type Events struct &#123;</span><br><span class=\"line\">  Reason    string</span><br><span class=\"line\">  Message   string</span><br><span class=\"line\">  Source    string</span><br><span class=\"line\">  Type      string</span><br><span class=\"line\">  Count     int64</span><br><span class=\"line\">  Timestamp time.Time</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// EventBroadcaster xxx</span><br><span class=\"line\">type EventBroadcaster interface &#123;</span><br><span class=\"line\">  Event(etype, reason, message string)</span><br><span class=\"line\">  StartLogging() Interface</span><br><span class=\"line\">  Stop()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// eventBroadcaster xxx</span><br><span class=\"line\">type eventBroadcasterImpl struct &#123;</span><br><span class=\"line\">  *Broadcaster</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func NewEventBroadcaster() EventBroadcaster &#123;</span><br><span class=\"line\">  return &amp;eventBroadcasterImpl&#123;NewBroadcaster(queueLength)&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (eventBroadcaster *eventBroadcasterImpl) Stop() &#123;</span><br><span class=\"line\">  eventBroadcaster.Shutdown()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// generate event</span><br><span class=\"line\">func (eventBroadcaster *eventBroadcasterImpl) Event(etype, reason, message string) &#123;</span><br><span class=\"line\">  events := &amp;Events&#123;Type: etype, Reason: reason, Message: message&#125;</span><br><span class=\"line\">  // send event to broadcast</span><br><span class=\"line\">  eventBroadcaster.Action(events)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 仅实现 StartLogging() 的功能，将日志打印</span><br><span class=\"line\">func (eventBroadcaster *eventBroadcasterImpl) StartLogging() Interface &#123;</span><br><span class=\"line\">  // register a watcher</span><br><span class=\"line\">  watcher := eventBroadcaster.Watch()</span><br><span class=\"line\">  go func() &#123;</span><br><span class=\"line\">    for watchEvent := range watcher.ResultChan() &#123;</span><br><span class=\"line\">      fmt.Printf(&quot;%v\\n&quot;, watchEvent)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">  go func() &#123;</span><br><span class=\"line\">    time.Sleep(time.Second * 4)</span><br><span class=\"line\">    watcher.Stop()</span><br><span class=\"line\">  &#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">  return watcher</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// --------------------</span><br><span class=\"line\">// Broadcaster 定义与实现</span><br><span class=\"line\">// 接收 events channel 的长度</span><br><span class=\"line\">const incomingQueuLength = 100</span><br><span class=\"line\"></span><br><span class=\"line\">type Broadcaster struct &#123;</span><br><span class=\"line\">  lock             sync.Mutex</span><br><span class=\"line\">  incoming         chan Events</span><br><span class=\"line\">  watchers         map[int64]*broadcasterWatcher</span><br><span class=\"line\">  watchersQueue    int64</span><br><span class=\"line\">  watchQueueLength int64</span><br><span class=\"line\">  distributing     sync.WaitGroup</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func NewBroadcaster(queueLength int64) *Broadcaster &#123;</span><br><span class=\"line\">  m := &amp;Broadcaster&#123;</span><br><span class=\"line\">    incoming:         make(chan Events, incomingQueuLength),</span><br><span class=\"line\">    watchers:         map[int64]*broadcasterWatcher&#123;&#125;,</span><br><span class=\"line\">    watchQueueLength: queueLength,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  m.distributing.Add(1)</span><br><span class=\"line\">  // 后台启动一个 goroutine 广播 events</span><br><span class=\"line\">  go m.loop()</span><br><span class=\"line\">  return m</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// Broadcaster 接收所产生的 events</span><br><span class=\"line\">func (m *Broadcaster) Action(event *Events) &#123;</span><br><span class=\"line\">  m.incoming &lt;- *event</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 广播 events 到每个 watcher</span><br><span class=\"line\">func (m *Broadcaster) loop() &#123;</span><br><span class=\"line\">  // 从 incoming channel 中读取所接收到的 events</span><br><span class=\"line\">  for event := range m.incoming &#123;</span><br><span class=\"line\">    // 发送 events 到每一个 watcher</span><br><span class=\"line\">    for _, w := range m.watchers &#123;</span><br><span class=\"line\">      select &#123;</span><br><span class=\"line\">      case w.result &lt;- event:</span><br><span class=\"line\">      case &lt;-w.stopped:</span><br><span class=\"line\">      default:</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  m.closeAll()</span><br><span class=\"line\">  m.distributing.Done()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (m *Broadcaster) Shutdown() &#123;</span><br><span class=\"line\">  close(m.incoming)</span><br><span class=\"line\">  m.distributing.Wait()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (m *Broadcaster) closeAll() &#123;</span><br><span class=\"line\">  // TODO</span><br><span class=\"line\">  m.lock.Lock()</span><br><span class=\"line\">  defer m.lock.Unlock()</span><br><span class=\"line\">  for _, w := range m.watchers &#123;</span><br><span class=\"line\">    close(w.result)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  m.watchers = map[int64]*broadcasterWatcher&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (m *Broadcaster) stopWatching(id int64) &#123;</span><br><span class=\"line\">  m.lock.Lock()</span><br><span class=\"line\">  defer m.lock.Unlock()</span><br><span class=\"line\">  w, ok := m.watchers[id]</span><br><span class=\"line\">  if !ok &#123;</span><br><span class=\"line\">    return</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  delete(m.watchers, id)</span><br><span class=\"line\">  close(w.result)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 调用 Watch(）方法注册一个 watcher</span><br><span class=\"line\">func (m *Broadcaster) Watch() Interface &#123;</span><br><span class=\"line\">  watcher := &amp;broadcasterWatcher&#123;</span><br><span class=\"line\">    result:  make(chan Events, incomingQueuLength),</span><br><span class=\"line\">    stopped: make(chan struct&#123;&#125;),</span><br><span class=\"line\">    id:      m.watchQueueLength,</span><br><span class=\"line\">    m:       m,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  m.watchers[m.watchersQueue] = watcher</span><br><span class=\"line\">  m.watchQueueLength++</span><br><span class=\"line\">  return watcher</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// watcher 实现</span><br><span class=\"line\">type Interface interface &#123;</span><br><span class=\"line\">  Stop()</span><br><span class=\"line\">  ResultChan() &lt;-chan Events</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">type broadcasterWatcher struct &#123;</span><br><span class=\"line\">  result  chan Events</span><br><span class=\"line\">  stopped chan struct&#123;&#125;</span><br><span class=\"line\">  stop    sync.Once</span><br><span class=\"line\">  id      int64</span><br><span class=\"line\">  m       *Broadcaster</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 每个 watcher 通过该方法读取 channel 中广播的 events</span><br><span class=\"line\">func (b *broadcasterWatcher) ResultChan() &lt;-chan Events &#123;</span><br><span class=\"line\">  return b.result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (b *broadcasterWatcher) Stop() &#123;</span><br><span class=\"line\">  b.stop.Do(func() &#123;</span><br><span class=\"line\">    close(b.stopped)</span><br><span class=\"line\">    b.m.stopWatching(b.id)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// --------------------</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">  eventBroadcast := NewEventBroadcaster()</span><br><span class=\"line\"></span><br><span class=\"line\">  var wg sync.WaitGroup</span><br><span class=\"line\">  wg.Add(1)</span><br><span class=\"line\">  // producer event</span><br><span class=\"line\">  go func() &#123;</span><br><span class=\"line\">    defer wg.Done()</span><br><span class=\"line\">    time.Sleep(time.Second)</span><br><span class=\"line\">    eventBroadcast.Event(&quot;add&quot;, &quot;test&quot;, &quot;1&quot;)</span><br><span class=\"line\">    time.Sleep(time.Second * 2)</span><br><span class=\"line\">    eventBroadcast.Event(&quot;add&quot;, &quot;test&quot;, &quot;2&quot;)</span><br><span class=\"line\">    time.Sleep(time.Second * 3)</span><br><span class=\"line\">    eventBroadcast.Event(&quot;add&quot;, &quot;test&quot;, &quot;3&quot;)</span><br><span class=\"line\">    //eventBroadcast.Stop()</span><br><span class=\"line\">  &#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">  eventBroadcast.StartLogging()</span><br><span class=\"line\">  wg.Wait()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此处仅简单实现，将 EventRecorder 处理 events 的功能直接放在了 EventBroadcaster 中实现，对 events 的处理方法仅实现了 StartLogging()，Broadcaster 中的部分功能是直接复制 k8s 中的代码，有一定的精简，其实现值得学习，此处对 EventCorrelator 并没有进行实现。</p>\n<p>代码请参考：<a href=\"https://github.com/gosoon/k8s-learning-notes/tree/master/k8s-package/events\" target=\"_blank\" rel=\"noopener\">https://github.com/gosoon/k8s-learning-notes/tree/master/k8s-package/events</a></p>\n<h5 id=\"7、总结\"><a href=\"#7、总结\" class=\"headerlink\" title=\"7、总结\"></a>7、总结</h5><p>本文讲述了 k8s 中 events 从产生到展示的一个完整过程，最后也实现了一个简单的 demo，在此将 kubelet 对 events 的整个处理过程再梳理下，其中主要有三个对象 EventBroadcaster、EventRecorder、Broadcaster：</p>\n<ul>\n<li>1、kubelet 首先会初始化 EventBroadcaster 对象，同时会初始化一个 Broadcaster 对象。</li>\n<li>2、kubelet 通过 EventBroadcaster 对象的 NewRecorder() 方法初始化 EventRecorder 对象，EventRecorder 对象提供的几个方法会生成 events 并通过 Action() 方法发送 events 到 Broadcaster 的 channel 队列中。</li>\n<li>3、Broadcaster 的作用就是接收所有的 events 并进行广播，Broadcaster 初始化后会在后台启动一个 goroutine，然后接收所有从 EventRecorder 发来的 events。</li>\n<li>4、EventBroadcaster 对 events 有三个处理方法：StartEventWatcher()、StartRecordingToSink()、StartLogging()，StartEventWatcher() 是其中的核心方法，会初始化一个 watcher 注册到 Broadcaster，其余两个处理函数对 StartEventWatcher() 进行了封装，并实现了自己的处理函数。</li>\n<li>5、 Broadcaster 中有一个 map 会保存每一个注册的 watcher，其会将所有的 events 广播给每一个 watcher，每个 watcher 通过它的 ResultChan() 方法从 channel 接收 events。</li>\n<li>6、kubelet 会使用 StartRecordingToSink() 和 StartLogging() 对 events 进行处理，StartRecordingToSink() 处理函数收到 events 后会进行缓存、过滤、聚合而后发送到 apiserver，apiserver 会将 events 保存到 etcd 中，使用 kubectl 或其他客户端可以查看。StartLogging() 仅将 events 保存到 kubelet 的日志中。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>当集群中的 node 或 pod 异常时，大部分用户会使用 kubectl 查看对应的 events，那么 events 是从何而来的？其实 k8s 中的各个组件会将运行时产生的各种事件汇报到 apiserver，对于 k8s 中的可描述资源，使用 kubectl describe 都可以看到其相关的 events，那 k8s 中又有哪几个组件都上报 events 呢？ </p>\n<p>只要在 <code>k8s.io/kubernetes/cmd</code> 目录下暴力搜索一下就能知道哪些组件会产生 events：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ grep -R -n -i &quot;EventRecorder&quot; .</span><br></pre></td></tr></table></figure></p>\n<p>可以看出，controller-manage、kube-proxy、kube-scheduler、kubelet 都使用了 EventRecorder，本文只讲述 kubelet 中对 Events 的使用。</p>\n<h5 id=\"1、Events-的定义\"><a href=\"#1、Events-的定义\" class=\"headerlink\" title=\"1、Events 的定义\"></a>1、Events 的定义</h5><p>events 在 <code>k8s.io/api/core/v1/types.go</code> 中进行定义,结构体如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type Event struct &#123;</span><br><span class=\"line\">    metav1.TypeMeta `json:&quot;,inline&quot;`</span><br><span class=\"line\">    metav1.ObjectMeta `json:&quot;metadata&quot; protobuf:&quot;bytes,1,opt,name=metadata&quot;`</span><br><span class=\"line\">    InvolvedObject ObjectReference `json:&quot;involvedObject&quot; protobuf:&quot;bytes,2,opt,name=involvedObject&quot;`</span><br><span class=\"line\">    Reason string `json:&quot;reason,omitempty&quot; protobuf:&quot;bytes,3,opt,name=reason&quot;`</span><br><span class=\"line\">    Message string `json:&quot;message,omitempty&quot; protobuf:&quot;bytes,4,opt,name=message&quot;`</span><br><span class=\"line\">    Source EventSource `json:&quot;source,omitempty&quot; protobuf:&quot;bytes,5,opt,name=source&quot;`</span><br><span class=\"line\">    FirstTimestamp metav1.Time `json:&quot;firstTimestamp,omitempty&quot; protobuf:&quot;bytes,6,opt,name=firstTimestamp&quot;`</span><br><span class=\"line\">    LastTimestamp metav1.Time `json:&quot;lastTimestamp,omitempty&quot; protobuf:&quot;bytes,7,opt,name=lastTimestamp&quot;`</span><br><span class=\"line\">    Count int32 `json:&quot;count,omitempty&quot; protobuf:&quot;varint,8,opt,name=count&quot;`</span><br><span class=\"line\">    Type string `json:&quot;type,omitempty&quot; protobuf:&quot;bytes,9,opt,name=type&quot;`</span><br><span class=\"line\">    EventTime metav1.MicroTime `json:&quot;eventTime,omitempty&quot; protobuf:&quot;bytes,10,opt,name=eventTime&quot;`</span><br><span class=\"line\">    Series *EventSeries `json:&quot;series,omitempty&quot; protobuf:&quot;bytes,11,opt,name=series&quot;`</span><br><span class=\"line\">    Action string `json:&quot;action,omitempty&quot; protobuf:&quot;bytes,12,opt,name=action&quot;`</span><br><span class=\"line\">    Related *ObjectReference `json:&quot;related,omitempty&quot; protobuf:&quot;bytes,13,opt,name=related&quot;`</span><br><span class=\"line\">    ReportingController string `json:&quot;reportingComponent&quot; protobuf:&quot;bytes,14,opt,name=reportingComponent&quot;`</span><br><span class=\"line\">    ReportingInstance string `json:&quot;reportingInstance&quot; protobuf:&quot;bytes,15,opt,name=reportingInstance&quot;`</span><br><span class=\"line\">    ReportingInstance string `json:&quot;reportingInstance&quot; protobuf:&quot;bytes,15,opt,name=reportingInstance&quot;`</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中 InvolvedObject 代表和事件关联的对象，source 代表事件源，使用 kubectl 看到的事件一般包含 Type、Reason、Age、From、Message 几个字段。</p>\n<p>k8s 中 events 目前只有两种类型：”Normal” 和 “Warning”：</p>\n<p><img src=\"http://cdn.tianfeiyu.com/events.png\" alt=\"events 的两种类型\"></p>\n<h5 id=\"2、EventBroadcaster-的初始化\"><a href=\"#2、EventBroadcaster-的初始化\" class=\"headerlink\" title=\"2、EventBroadcaster 的初始化\"></a>2、EventBroadcaster 的初始化</h5><p>events 的整个生命周期都与 EventBroadcaster 有关，kubelet 中对 EventBroadcaster 的初始化在<code>k8s.io/kubernetes/cmd/kubelet/app/server.go</code>中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func RunKubelet(kubeServer *options.KubeletServer, kubeDeps *kubelet.Dependencies, runOnce bool) error &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  // event 初始化</span><br><span class=\"line\">  makeEventRecorder(kubeDeps, nodeName)</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">func makeEventRecorder(kubeDeps *kubelet.Dependencies, nodeName types.NodeName) &#123;</span><br><span class=\"line\">  if kubeDeps.Recorder != nil &#123;</span><br><span class=\"line\">    return</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // 初始化 EventBroadcaster </span><br><span class=\"line\">  eventBroadcaster := record.NewBroadcaster()</span><br><span class=\"line\">  // 初始化 EventRecorder</span><br><span class=\"line\">  kubeDeps.Recorder = eventBroadcaster.NewRecorder(legacyscheme.Scheme, v1.EventSource&#123;Component: componentKubelet, Host: string(nodeName)&#125;)</span><br><span class=\"line\">  // 记录 events 到本地日志</span><br><span class=\"line\">  eventBroadcaster.StartLogging(glog.V(3).Infof)</span><br><span class=\"line\">  if kubeDeps.EventClient != nil &#123;</span><br><span class=\"line\">    glog.V(4).Infof(&quot;Sending events to api server.&quot;)</span><br><span class=\"line\">    // 上报 events 到 apiserver</span><br><span class=\"line\">  eventBroadcaster.StartRecordingToSink(&amp;v1core.EventSinkImpl&#123;Interface: kubeDeps.EventClient.Events(&quot;&quot;)&#125;)</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    glog.Warning(&quot;No api server defined - no events will be sent to API server.&quot;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Kubelet 在启动的时候会初始化一个 EventBroadcaster，它主要是对接收到的 events 做一些后续的处理(保存、上报等），EventBroadcaster 也会被 kubelet 中的其他模块使用，以下是相关的定义，对 events 生成和处理的函数都定义在 <code>k8s.io/client-go/tools/record/event.go</code> 中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type eventBroadcasterImpl struct &#123;</span><br><span class=\"line\">  *watch.Broadcaster</span><br><span class=\"line\">  sleepDuration time.Duration</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// EventBroadcaster knows how to receive events and send them to any EventSink, watcher, or log.</span><br><span class=\"line\">type EventBroadcaster interface &#123;</span><br><span class=\"line\">  StartEventWatcher(eventHandler func(*v1.Event)) watch.Interface</span><br><span class=\"line\"></span><br><span class=\"line\">  StartRecordingToSink(sink EventSink) watch.Interface</span><br><span class=\"line\"></span><br><span class=\"line\">  StartLogging(logf func(format string, args ...interface&#123;&#125;)) watch.Interface</span><br><span class=\"line\"></span><br><span class=\"line\">  NewRecorder(scheme *runtime.Scheme, source v1.EventSource) EventRecorder</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>EventBroadcaster 是个接口类型，该接口有以下四个方法：</p>\n<ul>\n<li>StartEventWatcher() ： EventBroadcaster 中的核心方法，接收各模块产生的 events，参数为一个处理 events 的函数，用户可以使用 StartEventWatcher() 接收 events 然后使用自定义的 handle 进行处理</li>\n<li>StartRecordingToSink() ： 调用 StartEventWatcher() 接收 events，并将收到的 events 发送到 apiserver </li>\n<li>StartLogging() ：也是调用 StartEventWatcher() 接收 events，然后保存 events 到日志</li>\n<li>NewRecorder() ：会创建一个指定 EventSource 的 EventRecorder，EventSource 指明了哪个节点的哪个组件</li>\n</ul>\n<p>eventBroadcasterImpl 是 eventBroadcaster 实际的对象，初始化 EventBroadcaster 对象的时候会初始化一个 Broadcaster，Broadcaster 会启动一个 goroutine 接收各组件产生的 events 并广播到每一个 watcher。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func NewBroadcaster() EventBroadcaster &#123;</span><br><span class=\"line\">  return &amp;eventBroadcasterImpl&#123;watch.NewBroadcaster(maxQueuedEvents, watch.DropIfChannelFull), defaultSleepDuration&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到，kubelet 在初始化完 EventBroadcaster 后会调用 StartRecordingToSink() 和 StartLogging() 两个方法，StartRecordingToSink() 处理函数会将收到的 events 进行缓存、过滤、聚合而后发送到 apiserver，StartLogging() 仅将 events 保存到 kubelet 的日志中。</p>\n<h5 id=\"3、Events-的生成\"><a href=\"#3、Events-的生成\" class=\"headerlink\" title=\"3、Events 的生成\"></a>3、Events 的生成</h5><p>从初始化 EventBroadcaster 的代码中可以看到 kubelet 在初始化完 EventBroadcaster 后紧接着初始化了 EventRecorder，并将已经初始化的 Broadcaster 对象作为参数传给了 EventRecorder，至此，EventBroadcaster、EventRecorder、Broadcaster 三个对象产生了关联。EventRecorder 的主要功能是生成指定格式的 events，以下是相关的定义：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type recorderImpl struct &#123;</span><br><span class=\"line\">  scheme *runtime.Scheme</span><br><span class=\"line\">  source v1.EventSource</span><br><span class=\"line\">  *watch.Broadcaster</span><br><span class=\"line\">  clock clock.Clock</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">type EventRecorder interface &#123;</span><br><span class=\"line\">  Event(object runtime.Object, eventtype, reason, message string)</span><br><span class=\"line\"></span><br><span class=\"line\">  Eventf(object runtime.Object, eventtype, reason, messageFmt string, args ...interface&#123;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  PastEventf(object runtime.Object, timestamp metav1.Time, eventtype, reason, messageFmt string, args ...interface&#123;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  AnnotatedEventf(object runtime.Object, annotations map[string]string, eventtype, reason, messageFmt string, args ...interface&#123;&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>EventRecorder 中包含的几个方法都是产生指定格式的 events，Event() 和 Eventf() 的功能类似 fmt.Println() 和 fmt.Printf()，kubelet 中的各个模块会调用 EventRecorder 生成 events。recorderImpl 是 EventRecorder 实际的对象。EventRecorder 的每个方法会调用 generateEvent，在 generateEvent 中初始化 events 。</p>\n<p>以下是生成 events 的函数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (recorder *recorderImpl) generateEvent(object runtime.Object, annotations map[string]string, timestamp metav1.Time, eventtype, reason, message string) &#123;</span><br><span class=\"line\">  ref, err := ref.GetReference(recorder.scheme, object)</span><br><span class=\"line\">  if err != nil &#123;</span><br><span class=\"line\">    glog.Errorf(&quot;Could not construct reference to: &apos;%#v&apos; due to: &apos;%v&apos;. Will not report event: &apos;%v&apos; &apos;%v&apos; &apos;%v&apos;&quot;, object, err, eventtype, reason, message)</span><br><span class=\"line\">    return</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  if !validateEventType(eventtype) &#123;</span><br><span class=\"line\">    glog.Errorf(&quot;Unsupported event type: &apos;%v&apos;&quot;, eventtype)</span><br><span class=\"line\">    return</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  event := recorder.makeEvent(ref, annotations, eventtype, reason, message)</span><br><span class=\"line\">  event.Source = recorder.source</span><br><span class=\"line\"></span><br><span class=\"line\">  go func() &#123;</span><br><span class=\"line\">    // NOTE: events should be a non-blocking operation</span><br><span class=\"line\">    defer utilruntime.HandleCrash()</span><br><span class=\"line\">    // 发送事件</span><br><span class=\"line\">    recorder.Action(watch.Added, event)</span><br><span class=\"line\">  &#125;()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (recorder *recorderImpl) makeEvent(ref *v1.ObjectReference, annotations map[string]string, eventtype, reason, message string) *v1.Event &#123;</span><br><span class=\"line\">  t := metav1.Time&#123;Time: recorder.clock.Now()&#125;</span><br><span class=\"line\">  namespace := ref.Namespace</span><br><span class=\"line\">  if namespace == &quot;&quot; &#123;</span><br><span class=\"line\">    namespace = metav1.NamespaceDefault</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return &amp;v1.Event&#123;</span><br><span class=\"line\">    ObjectMeta: metav1.ObjectMeta&#123;</span><br><span class=\"line\">      Name:        fmt.Sprintf(&quot;%v.%x&quot;, ref.Name, t.UnixNano()),</span><br><span class=\"line\">      Namespace:   namespace,</span><br><span class=\"line\">      Annotations: annotations,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    InvolvedObject: *ref,</span><br><span class=\"line\">    Reason:         reason,</span><br><span class=\"line\">    Message:        message,</span><br><span class=\"line\">    FirstTimestamp: t,</span><br><span class=\"line\">    LastTimestamp:  t,</span><br><span class=\"line\">    Count:          1,</span><br><span class=\"line\">    Type:           eventtype,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>初始化完 events 后会调用 recorder.Action() 将 events 发送到 Broadcaster 的事件接收队列中, Action() 是 Broadcaster 中的方法。</p>\n<p>以下是 Action() 方法的实现：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (m *Broadcaster) Action(action EventType, obj runtime.Object) &#123;</span><br><span class=\"line\">  m.incoming &lt;- Event&#123;action, obj&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"4、Events-的广播\"><a href=\"#4、Events-的广播\" class=\"headerlink\" title=\"4、Events 的广播\"></a>4、Events 的广播</h5><p>上面已经说了，EventBroadcaster 初始化时会初始化一个 Broadcaster，Broadcaster 的作用就是接收所有的 events 并进行广播，Broadcaster 的实现在 <code>k8s.io/apimachinery/pkg/watch/mux.go</code> 中，Broadcaster 初始化完成后会在后台启动一个 goroutine，然后接收所有从 EventRecorder 发送过来的 events，Broadcaster 中有一个 map 会保存每一个注册的 watcher， 接着将 events 广播给所有的 watcher，每个 watcher 都有一个接收消息的 channel，watcher 可以通过它的 ResultChan() 方法从 channel 中读取数据进行消费。</p>\n<p>以下是 Broadcaster 广播 events 的实现：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (m *Broadcaster) loop() &#123;</span><br><span class=\"line\">  for event := range m.incoming &#123;</span><br><span class=\"line\">    if event.Type == internalRunFunctionMarker &#123;</span><br><span class=\"line\">      event.Object.(functionFakeRuntimeObject)()</span><br><span class=\"line\">      continue</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    m.distribute(event)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  m.closeAll()</span><br><span class=\"line\">  m.distributing.Done()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// distribute sends event to all watchers. Blocking.</span><br><span class=\"line\">func (m *Broadcaster) distribute(event Event) &#123;</span><br><span class=\"line\">  m.lock.Lock()</span><br><span class=\"line\">  defer m.lock.Unlock()</span><br><span class=\"line\">  if m.fullChannelBehavior == DropIfChannelFull &#123;</span><br><span class=\"line\">    for _, w := range m.watchers &#123;</span><br><span class=\"line\">      select &#123;</span><br><span class=\"line\">      case w.result &lt;- event:</span><br><span class=\"line\">      case &lt;-w.stopped:</span><br><span class=\"line\">      default: // Don&apos;t block if the event can&apos;t be queued.</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    for _, w := range m.watchers &#123;</span><br><span class=\"line\">      select &#123;</span><br><span class=\"line\">      case w.result &lt;- event:</span><br><span class=\"line\">      case &lt;-w.stopped:</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"5、Events-的处理\"><a href=\"#5、Events-的处理\" class=\"headerlink\" title=\"5、Events 的处理\"></a>5、Events 的处理</h5><p>那么 watcher 是从何而来呢？每一个要处理 events 的 client 都需要初始化一个 watcher，处理 events 的方法是在 EventBroadcaster 中定义的，以下是 EventBroadcaster 中对 events 处理的三个函数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (eventBroadcaster *eventBroadcasterImpl) StartEventWatcher(eventHandler func(*v1.Event)) watch.Interface &#123;</span><br><span class=\"line\">  watcher := eventBroadcaster.Watch()</span><br><span class=\"line\">  go func() &#123;</span><br><span class=\"line\">    defer utilruntime.HandleCrash()</span><br><span class=\"line\">    for watchEvent := range watcher.ResultChan() &#123;</span><br><span class=\"line\">      event, ok := watchEvent.Object.(*v1.Event)</span><br><span class=\"line\">      if !ok &#123;</span><br><span class=\"line\">        // This is all local, so there&apos;s no reason this should</span><br><span class=\"line\">        // ever happen.</span><br><span class=\"line\">        continue</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      eventHandler(event)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;()</span><br><span class=\"line\">  return watcher</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>StartEventWatcher() 首先实例化一个 watcher，每个 watcher 都会被塞入到 Broadcaster 的 watcher 列表中，watcher 从 Broadcaster 提供的 channel 中读取 events，然后再调用 eventHandler 进行处理，StartLogging() 和 StartRecordingToSink() 都是对 StartEventWatcher() 的封装，都会传入自己的处理函数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (eventBroadcaster *eventBroadcasterImpl) StartLogging(logf func(format string, args ...interface&#123;&#125;)) watch.Interface &#123;</span><br><span class=\"line\">  return eventBroadcaster.StartEventWatcher(</span><br><span class=\"line\">    func(e *v1.Event) &#123;</span><br><span class=\"line\">      logf(&quot;Event(%#v): type: &apos;%v&apos; reason: &apos;%v&apos; %v&quot;, e.InvolvedObject, e.Type, e.Reason, e.Message)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>StartLogging() 传入的 eventHandler 仅将 events 保存到日志中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (eventBroadcaster *eventBroadcasterImpl) StartRecordingToSink(sink EventSink) watch.Interface &#123;</span><br><span class=\"line\">  // The default math/rand package functions aren&apos;t thread safe, so create a</span><br><span class=\"line\">  // new Rand object for each StartRecording call.</span><br><span class=\"line\">  randGen := rand.New(rand.NewSource(time.Now().UnixNano()))</span><br><span class=\"line\">  eventCorrelator := NewEventCorrelator(clock.RealClock&#123;&#125;)</span><br><span class=\"line\">  return eventBroadcaster.StartEventWatcher(</span><br><span class=\"line\">    func(event *v1.Event) &#123;</span><br><span class=\"line\">      recordToSink(sink, event, eventCorrelator, randGen, eventBroadcaster.sleepDuration)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func recordToSink(sink EventSink, event *v1.Event, eventCorrelator *EventCorrelator, randGen *rand.Rand, sleepDuration time.Duration) &#123;</span><br><span class=\"line\">  eventCopy := *event</span><br><span class=\"line\">  event = &amp;eventCopy</span><br><span class=\"line\">  result, err := eventCorrelator.EventCorrelate(event)</span><br><span class=\"line\">  if err != nil &#123;</span><br><span class=\"line\">    utilruntime.HandleError(err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  if result.Skip &#123;</span><br><span class=\"line\">    return</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  tries := 0</span><br><span class=\"line\">  for &#123;</span><br><span class=\"line\">    if recordEvent(sink, result.Event, result.Patch, result.Event.Count &gt; 1, eventCorrelator) &#123;</span><br><span class=\"line\">      break</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    tries++</span><br><span class=\"line\">    if tries &gt;= maxTriesPerEvent &#123;</span><br><span class=\"line\">      glog.Errorf(&quot;Unable to write event &apos;%#v&apos; (retry limit exceeded!)&quot;, event)</span><br><span class=\"line\">      break</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 第一次重试增加随机性，防止 apiserver 重启的时候所有的事件都在同一时间发送事件</span><br><span class=\"line\">    if tries == 1 &#123;</span><br><span class=\"line\">      time.Sleep(time.Duration(float64(sleepDuration) * randGen.Float64()))</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      time.Sleep(sleepDuration)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>StartRecordingToSink() 方法先根据当前时间生成一个随机数发生器 randGen，增加随机数是为了在重试时增加随机性，防止 apiserver 重启的时候所有的事件都在同一时间发送事件，接着实例化一个EventCorrelator，EventCorrelator 会对事件做一些预处理的工作，其中包括过滤、聚合、缓存等操作，具体代码不做详细分析，最后将 recordToSink() 函数作为处理函数，recordToSink() 会将处理后的 events 发送到 apiserver，这是 StartEventWatcher() 的整个工作流程。</p>\n<h5 id=\"6、Events-简单实现\"><a href=\"#6、Events-简单实现\" class=\"headerlink\" title=\"6、Events 简单实现\"></a>6、Events 简单实现</h5><p>了解完 events 的整个处理流程后，可以参考其实现方式写一个 demo，要实现一个完整的 events 需要包含以下几个功能：</p>\n<ul>\n<li>1、事件的产生</li>\n<li>2、事件的发送</li>\n<li>3、事件广播</li>\n<li>4、事件缓存</li>\n<li>5、事件过滤和聚合</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">  &quot;fmt&quot;</span><br><span class=\"line\">  &quot;sync&quot;</span><br><span class=\"line\">  &quot;time&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">// watcher queue</span><br><span class=\"line\">const queueLength = int64(1)</span><br><span class=\"line\"></span><br><span class=\"line\">// Events xxx</span><br><span class=\"line\">type Events struct &#123;</span><br><span class=\"line\">  Reason    string</span><br><span class=\"line\">  Message   string</span><br><span class=\"line\">  Source    string</span><br><span class=\"line\">  Type      string</span><br><span class=\"line\">  Count     int64</span><br><span class=\"line\">  Timestamp time.Time</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// EventBroadcaster xxx</span><br><span class=\"line\">type EventBroadcaster interface &#123;</span><br><span class=\"line\">  Event(etype, reason, message string)</span><br><span class=\"line\">  StartLogging() Interface</span><br><span class=\"line\">  Stop()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// eventBroadcaster xxx</span><br><span class=\"line\">type eventBroadcasterImpl struct &#123;</span><br><span class=\"line\">  *Broadcaster</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func NewEventBroadcaster() EventBroadcaster &#123;</span><br><span class=\"line\">  return &amp;eventBroadcasterImpl&#123;NewBroadcaster(queueLength)&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (eventBroadcaster *eventBroadcasterImpl) Stop() &#123;</span><br><span class=\"line\">  eventBroadcaster.Shutdown()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// generate event</span><br><span class=\"line\">func (eventBroadcaster *eventBroadcasterImpl) Event(etype, reason, message string) &#123;</span><br><span class=\"line\">  events := &amp;Events&#123;Type: etype, Reason: reason, Message: message&#125;</span><br><span class=\"line\">  // send event to broadcast</span><br><span class=\"line\">  eventBroadcaster.Action(events)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 仅实现 StartLogging() 的功能，将日志打印</span><br><span class=\"line\">func (eventBroadcaster *eventBroadcasterImpl) StartLogging() Interface &#123;</span><br><span class=\"line\">  // register a watcher</span><br><span class=\"line\">  watcher := eventBroadcaster.Watch()</span><br><span class=\"line\">  go func() &#123;</span><br><span class=\"line\">    for watchEvent := range watcher.ResultChan() &#123;</span><br><span class=\"line\">      fmt.Printf(&quot;%v\\n&quot;, watchEvent)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">  go func() &#123;</span><br><span class=\"line\">    time.Sleep(time.Second * 4)</span><br><span class=\"line\">    watcher.Stop()</span><br><span class=\"line\">  &#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">  return watcher</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// --------------------</span><br><span class=\"line\">// Broadcaster 定义与实现</span><br><span class=\"line\">// 接收 events channel 的长度</span><br><span class=\"line\">const incomingQueuLength = 100</span><br><span class=\"line\"></span><br><span class=\"line\">type Broadcaster struct &#123;</span><br><span class=\"line\">  lock             sync.Mutex</span><br><span class=\"line\">  incoming         chan Events</span><br><span class=\"line\">  watchers         map[int64]*broadcasterWatcher</span><br><span class=\"line\">  watchersQueue    int64</span><br><span class=\"line\">  watchQueueLength int64</span><br><span class=\"line\">  distributing     sync.WaitGroup</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func NewBroadcaster(queueLength int64) *Broadcaster &#123;</span><br><span class=\"line\">  m := &amp;Broadcaster&#123;</span><br><span class=\"line\">    incoming:         make(chan Events, incomingQueuLength),</span><br><span class=\"line\">    watchers:         map[int64]*broadcasterWatcher&#123;&#125;,</span><br><span class=\"line\">    watchQueueLength: queueLength,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  m.distributing.Add(1)</span><br><span class=\"line\">  // 后台启动一个 goroutine 广播 events</span><br><span class=\"line\">  go m.loop()</span><br><span class=\"line\">  return m</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// Broadcaster 接收所产生的 events</span><br><span class=\"line\">func (m *Broadcaster) Action(event *Events) &#123;</span><br><span class=\"line\">  m.incoming &lt;- *event</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 广播 events 到每个 watcher</span><br><span class=\"line\">func (m *Broadcaster) loop() &#123;</span><br><span class=\"line\">  // 从 incoming channel 中读取所接收到的 events</span><br><span class=\"line\">  for event := range m.incoming &#123;</span><br><span class=\"line\">    // 发送 events 到每一个 watcher</span><br><span class=\"line\">    for _, w := range m.watchers &#123;</span><br><span class=\"line\">      select &#123;</span><br><span class=\"line\">      case w.result &lt;- event:</span><br><span class=\"line\">      case &lt;-w.stopped:</span><br><span class=\"line\">      default:</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  m.closeAll()</span><br><span class=\"line\">  m.distributing.Done()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (m *Broadcaster) Shutdown() &#123;</span><br><span class=\"line\">  close(m.incoming)</span><br><span class=\"line\">  m.distributing.Wait()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (m *Broadcaster) closeAll() &#123;</span><br><span class=\"line\">  // TODO</span><br><span class=\"line\">  m.lock.Lock()</span><br><span class=\"line\">  defer m.lock.Unlock()</span><br><span class=\"line\">  for _, w := range m.watchers &#123;</span><br><span class=\"line\">    close(w.result)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  m.watchers = map[int64]*broadcasterWatcher&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (m *Broadcaster) stopWatching(id int64) &#123;</span><br><span class=\"line\">  m.lock.Lock()</span><br><span class=\"line\">  defer m.lock.Unlock()</span><br><span class=\"line\">  w, ok := m.watchers[id]</span><br><span class=\"line\">  if !ok &#123;</span><br><span class=\"line\">    return</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  delete(m.watchers, id)</span><br><span class=\"line\">  close(w.result)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 调用 Watch(）方法注册一个 watcher</span><br><span class=\"line\">func (m *Broadcaster) Watch() Interface &#123;</span><br><span class=\"line\">  watcher := &amp;broadcasterWatcher&#123;</span><br><span class=\"line\">    result:  make(chan Events, incomingQueuLength),</span><br><span class=\"line\">    stopped: make(chan struct&#123;&#125;),</span><br><span class=\"line\">    id:      m.watchQueueLength,</span><br><span class=\"line\">    m:       m,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  m.watchers[m.watchersQueue] = watcher</span><br><span class=\"line\">  m.watchQueueLength++</span><br><span class=\"line\">  return watcher</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// watcher 实现</span><br><span class=\"line\">type Interface interface &#123;</span><br><span class=\"line\">  Stop()</span><br><span class=\"line\">  ResultChan() &lt;-chan Events</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">type broadcasterWatcher struct &#123;</span><br><span class=\"line\">  result  chan Events</span><br><span class=\"line\">  stopped chan struct&#123;&#125;</span><br><span class=\"line\">  stop    sync.Once</span><br><span class=\"line\">  id      int64</span><br><span class=\"line\">  m       *Broadcaster</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 每个 watcher 通过该方法读取 channel 中广播的 events</span><br><span class=\"line\">func (b *broadcasterWatcher) ResultChan() &lt;-chan Events &#123;</span><br><span class=\"line\">  return b.result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (b *broadcasterWatcher) Stop() &#123;</span><br><span class=\"line\">  b.stop.Do(func() &#123;</span><br><span class=\"line\">    close(b.stopped)</span><br><span class=\"line\">    b.m.stopWatching(b.id)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// --------------------</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">  eventBroadcast := NewEventBroadcaster()</span><br><span class=\"line\"></span><br><span class=\"line\">  var wg sync.WaitGroup</span><br><span class=\"line\">  wg.Add(1)</span><br><span class=\"line\">  // producer event</span><br><span class=\"line\">  go func() &#123;</span><br><span class=\"line\">    defer wg.Done()</span><br><span class=\"line\">    time.Sleep(time.Second)</span><br><span class=\"line\">    eventBroadcast.Event(&quot;add&quot;, &quot;test&quot;, &quot;1&quot;)</span><br><span class=\"line\">    time.Sleep(time.Second * 2)</span><br><span class=\"line\">    eventBroadcast.Event(&quot;add&quot;, &quot;test&quot;, &quot;2&quot;)</span><br><span class=\"line\">    time.Sleep(time.Second * 3)</span><br><span class=\"line\">    eventBroadcast.Event(&quot;add&quot;, &quot;test&quot;, &quot;3&quot;)</span><br><span class=\"line\">    //eventBroadcast.Stop()</span><br><span class=\"line\">  &#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">  eventBroadcast.StartLogging()</span><br><span class=\"line\">  wg.Wait()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此处仅简单实现，将 EventRecorder 处理 events 的功能直接放在了 EventBroadcaster 中实现，对 events 的处理方法仅实现了 StartLogging()，Broadcaster 中的部分功能是直接复制 k8s 中的代码，有一定的精简，其实现值得学习，此处对 EventCorrelator 并没有进行实现。</p>\n<p>代码请参考：<a href=\"https://github.com/gosoon/k8s-learning-notes/tree/master/k8s-package/events\" target=\"_blank\" rel=\"noopener\">https://github.com/gosoon/k8s-learning-notes/tree/master/k8s-package/events</a></p>\n<h5 id=\"7、总结\"><a href=\"#7、总结\" class=\"headerlink\" title=\"7、总结\"></a>7、总结</h5><p>本文讲述了 k8s 中 events 从产生到展示的一个完整过程，最后也实现了一个简单的 demo，在此将 kubelet 对 events 的整个处理过程再梳理下，其中主要有三个对象 EventBroadcaster、EventRecorder、Broadcaster：</p>\n<ul>\n<li>1、kubelet 首先会初始化 EventBroadcaster 对象，同时会初始化一个 Broadcaster 对象。</li>\n<li>2、kubelet 通过 EventBroadcaster 对象的 NewRecorder() 方法初始化 EventRecorder 对象，EventRecorder 对象提供的几个方法会生成 events 并通过 Action() 方法发送 events 到 Broadcaster 的 channel 队列中。</li>\n<li>3、Broadcaster 的作用就是接收所有的 events 并进行广播，Broadcaster 初始化后会在后台启动一个 goroutine，然后接收所有从 EventRecorder 发来的 events。</li>\n<li>4、EventBroadcaster 对 events 有三个处理方法：StartEventWatcher()、StartRecordingToSink()、StartLogging()，StartEventWatcher() 是其中的核心方法，会初始化一个 watcher 注册到 Broadcaster，其余两个处理函数对 StartEventWatcher() 进行了封装，并实现了自己的处理函数。</li>\n<li>5、 Broadcaster 中有一个 map 会保存每一个注册的 watcher，其会将所有的 events 广播给每一个 watcher，每个 watcher 通过它的 ResultChan() 方法从 channel 接收 events。</li>\n<li>6、kubelet 会使用 StartRecordingToSink() 和 StartLogging() 对 events 进行处理，StartRecordingToSink() 处理函数收到 events 后会进行缓存、过滤、聚合而后发送到 apiserver，apiserver 会将 events 保存到 etcd 中，使用 kubectl 或其他客户端可以查看。StartLogging() 仅将 events 保存到 kubelet 的日志中。</li>\n</ul>\n"},{"title":"kubernets 中组件高可用的实现方式","date":"2019-03-12T23:49:30.000Z","type":"component-HA","_content":"生产环境中为了保障业务的稳定性，集群都需要高可用部署，k8s 中 apiserver 是无状态的，可以横向扩容保证其高可用，kube-controller-manager 和 kube-scheduler 两个组件通过 leader 选举保障高可用，即正常情况下 kube-scheduler 或 kube-manager-controller 组件的多个副本只有一个是处于业务逻辑运行状态，其它副本则不断的尝试去获取锁，去竞争 leader，直到自己成为leader。如果正在运行的 leader 因某种原因导致当前进程退出，或者锁丢失，则由其它副本去竞争新的 leader，获取 leader 继而执行业务逻辑。\n\n> kubernetes 版本： v1.12 \n\n#### 组件高可用的使用\n\nk8s 中已经为 kube-controller-manager、kube-scheduler 组件实现了高可用，只需在每个组件的配置文件中添加 `--leader-elect=true` 参数即可启用。在每个组件的日志中可以看到 HA 相关参数的默认值：\n\n```\nI0306 19:17:14.109511  161798 flags.go:33] FLAG: --leader-elect=\"true\"\nI0306 19:17:14.109513  161798 flags.go:33] FLAG: --leader-elect-lease-duration=\"15s\"\nI0306 19:17:14.109516  161798 flags.go:33] FLAG: --leader-elect-renew-deadline=\"10s\"\nI0306 19:17:14.109518  161798 flags.go:33] FLAG: --leader-elect-resource-lock=\"endpoints\"\nI0306 19:17:14.109520  161798 flags.go:33] FLAG: --leader-elect-retry-period=\"2s\"\n```\n\nkubernetes 中查看组件 leader 的方法：\n\n\n```\n$ kubectl get endpoints kube-controller-manager --namespace=kube-system -o yaml && \n  kubectl get endpoints kube-scheduler --namespace=kube-system -o yaml\n```\n\n当前组件 leader 的 hostname 会写在 annotation 的 control-plane.alpha.kubernetes.io/leader 字段里。\n\n\n#### Leader Election 的实现\n\nLeader Election 的过程本质上是一个竞争分布式锁的过程。在 Kubernetes 中，这个分布式锁是以创建 Endpoint 资源的形式进行，谁先创建了该资源，谁就先获得锁，之后会对该资源不断更新以保持锁的拥有权。\n\n\n\n下面开始讲述 kube-controller-manager 中 leader 的竞争过程，cm 在加载及配置完参数后就开始执行 run 方法了。代码在 `k8s.io/kubernetes/cmd/kube-controller-manager/app/controllermanager.go` 中：\n\n```\n// Run runs the KubeControllerManagerOptions.  This should never exit.\nfunc Run(c *config.CompletedConfig, stopCh <-chan struct{}) error {\n\t\t...\n\t\t// kube-controller-manager 的核心\n\t\trun := func(ctx context.Context) {\n\t\trootClientBuilder := controller.SimpleControllerClientBuilder{\n\t\t\tClientConfig: c.Kubeconfig,\n\t\t}\n\t\tvar clientBuilder controller.ControllerClientBuilder\n\t\tif c.ComponentConfig.KubeCloudShared.UseServiceAccountCredentials {\n\t\t\tif len(c.ComponentConfig.SAController.ServiceAccountKeyFile) == 0 {\n\t\t\t\t// It'c possible another controller process is creating the tokens for us.\n\t\t\t\t// If one isn't, we'll timeout and exit when our client builder is unable to create the tokens.\n\t\t\t\tglog.Warningf(\"--use-service-account-credentials was specified without providing a --service-account-private-key-file\")\n\t\t\t}\n\t\t\tclientBuilder = controller.SAControllerClientBuilder{\n\t\t\t\tClientConfig:         restclient.AnonymousClientConfig(c.Kubeconfig),\n\t\t\t\tCoreClient:           c.Client.CoreV1(),\n\t\t\t\tAuthenticationClient: c.Client.AuthenticationV1(),\n\t\t\t\tNamespace:            \"kube-system\",\n\t\t\t}\n\t\t} else {\n\t\t\tclientBuilder = rootClientBuilder\n\t\t}\n\t\tcontrollerContext, err := CreateControllerContext(c, rootClientBuilder, clientBuilder, ctx.Done())\n\t\tif err != nil {\n\t\t\tglog.Fatalf(\"error building controller context: %v\", err)\n\t\t}\n\t\tsaTokenControllerInitFunc := serviceAccountTokenControllerStarter{rootClientBuilder: rootClientBuilder}.startServiceAccountTokenController\n\t\t// 初始化及启动所有的 controller\n\t\tif err := StartControllers(controllerContext, saTokenControllerInitFunc, NewControllerInitializers(controllerContext.LoopMode), unsecuredMux); err != nil {\n\t\t\tglog.Fatalf(\"error starting controllers: %v\", err)\n\t\t}\n\n\t\tcontrollerContext.InformerFactory.Start(controllerContext.Stop)\n\t\tclose(controllerContext.InformersStarted)\n\n\t\tselect {}\n\t}\n\n    // 如果 LeaderElect 参数未配置,说明 controller-manager 是单点启动的，\n    // 则直接调用 run 方法来启动需要被启动的控制器即可。\n    if !c.ComponentConfig.Generic.LeaderElection.LeaderElect {\n        run(context.TODO())\n        panic(\"unreachable\")\n    }\n\n    // 如果 LeaderElect 参数配置为 true,说明 controller-manager 是以 HA 方式启动的，\n    // 则执行下面的代码进行 leader 选举，选举出的 leader 会回调 run 方法。\n    id, err := os.Hostname()\n    if err != nil {\n        return err\n    }\n\n    // add a uniquifier so that two processes on the same host don't accidentally both become active\n    id = id + \"_\" + string(uuid.NewUUID())\n    \n    // 初始化资源锁\n    rl, err := resourcelock.New(c.ComponentConfig.Generic.LeaderElection.ResourceLock,\n        \"kube-system\",\n        \"kube-controller-manager\",\n        c.LeaderElectionClient.CoreV1(),\n        resourcelock.ResourceLockConfig{\n            Identity:      id,\n            EventRecorder: c.EventRecorder,\n        })\n    if err != nil {\n        glog.Fatalf(\"error creating lock: %v\", err)\n    }\n    // 进入到选举的流程\n    leaderelection.RunOrDie(context.TODO(), leaderelection.LeaderElectionConfig{\n        Lock:          rl,\n        LeaseDuration: c.ComponentConfig.Generic.LeaderElection.LeaseDuration.Duration,\n        RenewDeadline: c.ComponentConfig.Generic.LeaderElection.RenewDeadline.Duration,\n        RetryPeriod:   c.ComponentConfig.Generic.LeaderElection.RetryPeriod.Duration,\n        Callbacks: leaderelection.LeaderCallbacks{\n            OnStartedLeading: run,\n            OnStoppedLeading: func() {\n                glog.Fatalf(\"leaderelection lost\")\n            },\n        },\n        WatchDog: electionChecker,\n        Name:     \"kube-controller-manager\",\n    })\n    panic(\"unreachable\")\n}\n```\n\n- 1、初始化资源锁，kubernetes 中默认的资源锁使用 `endpoints`，也就是 c.ComponentConfig.Generic.LeaderElection.ResourceLock 的值为 \"endpoints\"，在代码中我并没有找到对 ResourceLock 初始化的地方，只看到了对该参数的说明以及日志中配置的默认值：\n\n![](http://cdn.tianfeiyu.com/leader-1.png)\n\n​在初始化资源锁的时候还传入了 EventRecorder，其作用是当 leader 发生变化的时候会将对应的 events 发送到 apiserver。\n\n\n- 2、rl 资源锁被用于 controller-manager 进行 leader 的选举，RunOrDie 方法中就是 leader 的选举过程了。\n\n- 3、Callbacks 中定义了在切换状态后需要执行的操作，当成为 leader 后会执行 OnStartedLeading 中的 run 方法，run 方法是 controller-manager 的核心，run 方法中会初始化并启动所包含资源的 controller，以下是 kube-controller-manager 中所有的 controller：\n\n```\nfunc NewControllerInitializers(loopMode ControllerLoopMode) map[string]InitFunc {\n\tcontrollers := map[string]InitFunc{}\n\tcontrollers[\"endpoint\"] = startEndpointController\n\tcontrollers[\"replicationcontroller\"] = startReplicationController\n\tcontrollers[\"podgc\"] = startPodGCController\n\tcontrollers[\"resourcequota\"] = startResourceQuotaController\n\tcontrollers[\"namespace\"] = startNamespaceController\n\tcontrollers[\"serviceaccount\"] = startServiceAccountController\n\tcontrollers[\"garbagecollector\"] = startGarbageCollectorController\n\tcontrollers[\"daemonset\"] = startDaemonSetController\n\tcontrollers[\"job\"] = startJobController\n\tcontrollers[\"deployment\"] = startDeploymentController\n\tcontrollers[\"replicaset\"] = startReplicaSetController\n\tcontrollers[\"horizontalpodautoscaling\"] = startHPAController\n\tcontrollers[\"disruption\"] = startDisruptionController\n\tcontrollers[\"statefulset\"] = startStatefulSetController\n\tcontrollers[\"cronjob\"] = startCronJobController\n\tcontrollers[\"csrsigning\"] = startCSRSigningController\n\tcontrollers[\"csrapproving\"] = startCSRApprovingController\n\tcontrollers[\"csrcleaner\"] = startCSRCleanerController\n\tcontrollers[\"ttl\"] = startTTLController\n\tcontrollers[\"bootstrapsigner\"] = startBootstrapSignerController\n\tcontrollers[\"tokencleaner\"] = startTokenCleanerController\n\tcontrollers[\"nodeipam\"] = startNodeIpamController\n\tif loopMode == IncludeCloudLoops {\n\t\tcontrollers[\"service\"] = startServiceController\n\t\tcontrollers[\"route\"] = startRouteController\n\t}\n\tcontrollers[\"nodelifecycle\"] = startNodeLifecycleController\n\tcontrollers[\"persistentvolume-binder\"] = startPersistentVolumeBinderController\n\tcontrollers[\"attachdetach\"] = startAttachDetachController\n\tcontrollers[\"persistentvolume-expander\"] = startVolumeExpandController\n\tcontrollers[\"clusterrole-aggregation\"] = startClusterRoleAggregrationController\n\tcontrollers[\"pvc-protection\"] = startPVCProtectionController\n\tcontrollers[\"pv-protection\"] = startPVProtectionController\n\tcontrollers[\"ttl-after-finished\"] = startTTLAfterFinishedController\n\n\treturn controllers\n}\n```\n\nOnStoppedLeading 是从 leader 状态切换为 slave 要执行的操作，此方法仅打印了一条日志。\n\n\n\n```\nfunc RunOrDie(ctx context.Context, lec LeaderElectionConfig) {\n    le, err := NewLeaderElector(lec)\n    if err != nil {\n        panic(err)\n    }\n    if lec.WatchDog != nil {\n        lec.WatchDog.SetLeaderElection(le)\n    }\n    le.Run(ctx)\n}\n```\n\n在 RunOrDie 中首先调用 NewLeaderElector 初始化了一个 LeaderElector 对象，然后执行 LeaderElector 的 run 方法进行选举。\n\n\n```\nfunc (le *LeaderElector) Run(ctx context.Context) {\n\tdefer func() {\n\t\truntime.HandleCrash()\n\t\tle.config.Callbacks.OnStoppedLeading()\n\t}()\n\tif !le.acquire(ctx) {\n\t\treturn // ctx signalled done\n\t}\n\tctx, cancel := context.WithCancel(ctx)\n\tdefer cancel()\n\tgo le.config.Callbacks.OnStartedLeading(ctx)\n\tle.renew(ctx)\n}\n```\n\nRun 中首先会执行 acquire 尝试获取锁，获取到锁之后会回调 OnStartedLeading 启动所需要的 controller，然后会执行 renew 方法定期更新锁，保持 leader 的状态。\n\n\n```\nfunc (le *LeaderElector) acquire(ctx context.Context) bool {\n\tctx, cancel := context.WithCancel(ctx)\n\tdefer cancel()\n\tsucceeded := false\n\tdesc := le.config.Lock.Describe()\n\tglog.Infof(\"attempting to acquire leader lease  %v...\", desc)\n\twait.JitterUntil(func() {\n\t\t// 尝试创建或者续约资源锁\n\t\tsucceeded = le.tryAcquireOrRenew()\n\t\t// leader 可能发生了改变，在 maybeReportTransition 方法中会\n\t\t// 执行相应的 OnNewLeader() 回调函数,代码中对 OnNewLeader() 并没有初始化\n\t\tle.maybeReportTransition()\n\t\tif !succeeded {\n\t\t\tglog.V(4).Infof(\"failed to acquire lease %v\", desc)\n\t\t\treturn\n\t\t}\n\t\tle.config.Lock.RecordEvent(\"became leader\")\n\t\tglog.Infof(\"successfully acquired lease %v\", desc)\n\t\tcancel()\n\t}, le.config.RetryPeriod, JitterFactor, true, ctx.Done())\n\treturn succeeded\n}\n```\n在 acquire 中首先初始化了一个 ctx，通过 wait.JitterUntil 周期性的去调用 le.tryAcquireOrRenew 方法来获取资源锁，直到获取为止。如果获取不到锁，则会以 RetryPeriod 为间隔不断尝试。如果获取到锁，就会关闭 ctx 通知 wait.JitterUntil 停止尝试，tryAcquireOrRenew 是最核心的方法。\n\n\n\n```\nfunc (le *LeaderElector) tryAcquireOrRenew() bool {\n\tnow := metav1.Now()\n\tleaderElectionRecord := rl.LeaderElectionRecord{\n\t\tHolderIdentity:       le.config.Lock.Identity(),\n\t\tLeaseDurationSeconds: int(le.config.LeaseDuration / time.Second),\n\t\tRenewTime:            now,\n\t\tAcquireTime:          now,\n\t}\n\n\t// 1、获取当前的资源锁\n\toldLeaderElectionRecord, err := le.config.Lock.Get()\n\tif err != nil {\n\t\tif !errors.IsNotFound(err) {\n\t\t\tglog.Errorf(\"error retrieving resource lock %v: %v\", le.config.Lock.Describe(), err)\n\t\t\treturn false\n\t\t}\n\t\t// 没有获取到资源锁，开始创建资源锁，若创建成功则成为 leader \n\t\tif err = le.config.Lock.Create(leaderElectionRecord); err != nil {\n\t\t\tglog.Errorf(\"error initially creating leader election record: %v\", err)\n\t\t\treturn false\n\t\t}\n\t\tle.observedRecord = leaderElectionRecord\n\t\tle.observedTime = le.clock.Now()\n\t\treturn true\n\t}\n\n\t// 2、获取资源锁后检查当前 id 是不是 leader\n\tif !reflect.DeepEqual(le.observedRecord, *oldLeaderElectionRecord) {\n\t\tle.observedRecord = *oldLeaderElectionRecord\n\t\tle.observedTime = le.clock.Now()\n\t}\n\t// 如果资源锁没有过期且当前 id 不是 Leader，直接返回\n\tif le.observedTime.Add(le.config.LeaseDuration).After(now.Time) &&\n\t\t!le.IsLeader() {\n\t\tglog.V(4).Infof(\"lock is held by %v and has not yet expired\", oldLeaderElectionRecord.HolderIdentity)\n\t\treturn false\n\t}\n\n\t// 3、如果当前 id 是 Leader，将对应字段的时间改成当前时间，准备续租\n\t// 如果是非 Leader 节点则抢夺资源锁\n\tif le.IsLeader() {\n\t\tleaderElectionRecord.AcquireTime = oldLeaderElectionRecord.AcquireTime\n\t\tleaderElectionRecord.LeaderTransitions = oldLeaderElectionRecord.LeaderTransitions\n\t} else {\n\t\tleaderElectionRecord.LeaderTransitions = oldLeaderElectionRecord.LeaderTransitions + 1\n\t}\n\n        // 更新资源\n        // 对于 Leader 来说，这是一个续租的过程\n        // 对于非 Leader 节点（仅在上一个资源锁已经过期），这是一个更新锁所有权的过程\n\tif err = le.config.Lock.Update(leaderElectionRecord); err != nil {\n\t\tglog.Errorf(\"Failed to update lock: %v\", err)\n\t\treturn false\n\t}\n\tle.observedRecord = leaderElectionRecord\n\tle.observedTime = le.clock.Now()\n\treturn true\n}\n```\n\n上面的这个函数的主要逻辑：\n- 1、获取 ElectionRecord 记录，如果没有则创建一条新的 ElectionRecord 记录，创建成功则表示获取到锁并成为 leader 了。\n- 2、当获取到资源锁后开始检查其中的信息，比较当前 id 是不是 leader 以及资源锁有没有过期，如果资源锁没有过期且当前 id 不是 Leader，则直接返回。\n- 3、如果当前 id 是 Leader，将对应字段的时间改成当前时间，更新资源锁进行续租。\n- 4、如果当前 id 不是 Leader 但是资源锁已经过期了，则抢夺资源锁，抢夺成功则成为 leader 否则返回。\n\n\n最后是 renew 方法：\n\n```\nfunc (le *LeaderElector) renew(ctx context.Context) {\n\tctx, cancel := context.WithCancel(ctx)\n\tdefer cancel()\n\twait.Until(func() {\n\t\ttimeoutCtx, timeoutCancel := context.WithTimeout(ctx, le.config.RenewDeadline)\n\t\tdefer timeoutCancel()\n                // 每间隔 RetryPeriod 就执行 tryAcquireOrRenew()\n                // 如果 tryAcquireOrRenew() 返回 false 说明续租失败\n\t\terr := wait.PollImmediateUntil(le.config.RetryPeriod, func() (bool, error) {\n\t\t\tdone := make(chan bool, 1)\n\t\t\tgo func() {\n\t\t\t\tdefer close(done)\n\t\t\t\tdone <- le.tryAcquireOrRenew()\n\t\t\t}()\n\n\t\t\tselect {\n\t\t\tcase <-timeoutCtx.Done():\n\t\t\t\treturn false, fmt.Errorf(\"failed to tryAcquireOrRenew %s\", timeoutCtx.Err())\n\t\t\tcase result := <-done:\n\t\t\t\treturn result, nil\n\t\t\t}\n\t\t}, timeoutCtx.Done())\n\n\t\tle.maybeReportTransition()\n\t\tdesc := le.config.Lock.Describe()\n\t\tif err == nil {\n\t\t\tglog.V(4).Infof(\"successfully renewed lease %v\", desc)\n\t\t\treturn\n\t\t}\n\t\t// 续租失败，说明已经不是 Leader，然后程序 panic\n\t\tle.config.Lock.RecordEvent(\"stopped leading\")\n\t\tglog.Infof(\"failed to renew lease %v: %v\", desc, err)\n\t\tcancel()\n\t}, le.config.RetryPeriod, ctx.Done())\n}\n```\n获取到锁之后定期进行更新，renew 只有在获取锁之后才会调用，它会通过持续更新资源锁的数据，来确保继续持有已获得的锁，保持自己的 leader 状态。\n\n\n\n#### Leader Election 功能的使用\n\n以下是一个 demo，使用 k8s 中 `k8s.io/client-go/tools/leaderelection` 进行一个演示：\n\n\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"flag\"\n\t\"fmt\"\n\t\"os\"\n\t\"time\"\n\n\t\"github.com/golang/glog\"\n\t\"k8s.io/api/core/v1\"\n\t\"k8s.io/client-go/kubernetes\"\n\t\"k8s.io/client-go/kubernetes/scheme\"\n\tv1core \"k8s.io/client-go/kubernetes/typed/core/v1\"\n\t\"k8s.io/client-go/tools/clientcmd\"\n\t\"k8s.io/client-go/tools/leaderelection\"\n\t\"k8s.io/client-go/tools/leaderelection/resourcelock\"\n\t\"k8s.io/client-go/tools/record\"\n)\n\nvar (\n\tmasterURL  string\n\tkubeconfig string\n)\n\nfunc init() {\n\tflag.StringVar(&kubeconfig, \"kubeconfig\", \"\", \"Path to a kubeconfig. Only required if out-of-cluster.\")\n\tflag.StringVar(&masterURL, \"master\", \"\", \"The address of the Kubernetes API server. Overrides any value in kubeconfig. Only required if out-of-cluster.\")\n\n\tflag.Set(\"logtostderr\", \"true\")\n}\n\nfunc main() {\n\tflag.Parse()\n\tdefer glog.Flush()\n\n\tid, err := os.Hostname()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\t\n\t// 加载 kubeconfig 配置\n\tcfg, err := clientcmd.BuildConfigFromFlags(masterURL, kubeconfig)\n\tif err != nil {\n\t\tglog.Fatalf(\"Error building kubeconfig: %s\", err.Error())\n\t}\n\n\t// 创建 kubeclient\n\tkubeClient, err := kubernetes.NewForConfig(cfg)\n\tif err != nil {\n\t\tglog.Fatalf(\"Error building kubernetes clientset: %s\", err.Error())\n\t}\n\n\t// 初始化 eventRecorder\n\teventBroadcaster := record.NewBroadcaster()\n\teventRecorder := eventBroadcaster.NewRecorder(scheme.Scheme, v1.EventSource{Component: \"test-1\"})\n\teventBroadcaster.StartLogging(glog.Infof)\n\teventBroadcaster.StartRecordingToSink(&v1core.EventSinkImpl{Interface: kubeClient.CoreV1().Events(\"\")})\n\n\trun := func(ctx context.Context) {\n\t\tfmt.Println(\"run.........\")\n\t\tselect {}\n\t}\n\n\tid = id + \"_\" + \"1\"\n\trl, err := resourcelock.New(\"endpoints\",\n\t\t\"kube-system\",\n\t\t\"test\",\n\t\tkubeClient.CoreV1(),\n\t\tresourcelock.ResourceLockConfig{\n\t\t\tIdentity:      id,\n\t\t\tEventRecorder: eventRecorder,\n\t\t})\n\tif err != nil {\n\t\tglog.Fatalf(\"error creating lock: %v\", err)\n\t}\n\n\tleaderelection.RunOrDie(context.TODO(), leaderelection.LeaderElectionConfig{\n\t\tLock:          rl,\n\t\tLeaseDuration: 15 * time.Second,\n\t\tRenewDeadline: 10 * time.Second,\n\t\tRetryPeriod:   2 * time.Second,\n\t\tCallbacks: leaderelection.LeaderCallbacks{\n\t\t\tOnStartedLeading: run,\n\t\t\tOnStoppedLeading: func() {\n\t\t\t\tglog.Info(\"leaderelection lost\")\n\t\t\t},\n\t\t},\n\t\tName: \"test-1\",\n\t})\n}\n```\n\n分别使用多个 hostname 同时运行后并测试 leader 切换，可以在 events 中看到 leader 切换的记录：\n\n\n```\n# kubectl describe endpoints test  -n kube-system\nName:         test\nNamespace:    kube-system\nLabels:       <none>\nAnnotations:  control-plane.alpha.kubernetes.io/leader={\"holderIdentity\":\"localhost_2\",\"leaseDurationSeconds\":15,\"acquireTime\":\"2019-03-10T08:47:42Z\",\"renewTime\":\"2019-03-10T08:47:44Z\",\"leaderTransitions\":2}\nSubsets:\nEvents:\n  Type    Reason          Age   From    Message\n  ----    ------          ----  ----    -------\n  Normal  LeaderElection  50s   test-1  localhost_1 became leader\n  Normal  LeaderElection  5s    test-2  localhost_2 became leader\n```\n\n\n#### 总结\n\n本文讲述了 kube-controller-manager 使用 HA 的方式启动后 leader 选举过程的实现说明，k8s 中通过创建 endpoints 资源以及对该资源的持续更新来实现资源锁轮转的过程。但是相对于其他分布式锁的实现，普遍是直接基于现有的中间件实现，比如 redis、zookeeper、etcd 等，其所有对锁的操作都是原子性的，那 k8s 选举过程中的原子操作是如何实现的？k8s 中的原子操作最终也是通过 etcd 实现的，其在做 update 更新锁的操作时采用的是乐观锁，通过对比 resourceVersion 实现的，详细的实现下节再讲。\n\n![api resource](http://cdn.tianfeiyu.com/api-resource-1.png)\n\n\n\n参考文档：\n[API OVERVIEW](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.10/)\n[Simple leader election with Kubernetes and Docker](https://kubernetes.io/blog/2016/01/simple-leader-election-with-kubernetes/)\n\n\n","source":"_posts/k8s_leader_election.md","raw":"---\ntitle: kubernets 中组件高可用的实现方式\ndate: 2019-03-13 07:49:30\ntags: [\"leader-election\",\"component\"]\ntype: \"component-HA\"\n\n---\n生产环境中为了保障业务的稳定性，集群都需要高可用部署，k8s 中 apiserver 是无状态的，可以横向扩容保证其高可用，kube-controller-manager 和 kube-scheduler 两个组件通过 leader 选举保障高可用，即正常情况下 kube-scheduler 或 kube-manager-controller 组件的多个副本只有一个是处于业务逻辑运行状态，其它副本则不断的尝试去获取锁，去竞争 leader，直到自己成为leader。如果正在运行的 leader 因某种原因导致当前进程退出，或者锁丢失，则由其它副本去竞争新的 leader，获取 leader 继而执行业务逻辑。\n\n> kubernetes 版本： v1.12 \n\n#### 组件高可用的使用\n\nk8s 中已经为 kube-controller-manager、kube-scheduler 组件实现了高可用，只需在每个组件的配置文件中添加 `--leader-elect=true` 参数即可启用。在每个组件的日志中可以看到 HA 相关参数的默认值：\n\n```\nI0306 19:17:14.109511  161798 flags.go:33] FLAG: --leader-elect=\"true\"\nI0306 19:17:14.109513  161798 flags.go:33] FLAG: --leader-elect-lease-duration=\"15s\"\nI0306 19:17:14.109516  161798 flags.go:33] FLAG: --leader-elect-renew-deadline=\"10s\"\nI0306 19:17:14.109518  161798 flags.go:33] FLAG: --leader-elect-resource-lock=\"endpoints\"\nI0306 19:17:14.109520  161798 flags.go:33] FLAG: --leader-elect-retry-period=\"2s\"\n```\n\nkubernetes 中查看组件 leader 的方法：\n\n\n```\n$ kubectl get endpoints kube-controller-manager --namespace=kube-system -o yaml && \n  kubectl get endpoints kube-scheduler --namespace=kube-system -o yaml\n```\n\n当前组件 leader 的 hostname 会写在 annotation 的 control-plane.alpha.kubernetes.io/leader 字段里。\n\n\n#### Leader Election 的实现\n\nLeader Election 的过程本质上是一个竞争分布式锁的过程。在 Kubernetes 中，这个分布式锁是以创建 Endpoint 资源的形式进行，谁先创建了该资源，谁就先获得锁，之后会对该资源不断更新以保持锁的拥有权。\n\n\n\n下面开始讲述 kube-controller-manager 中 leader 的竞争过程，cm 在加载及配置完参数后就开始执行 run 方法了。代码在 `k8s.io/kubernetes/cmd/kube-controller-manager/app/controllermanager.go` 中：\n\n```\n// Run runs the KubeControllerManagerOptions.  This should never exit.\nfunc Run(c *config.CompletedConfig, stopCh <-chan struct{}) error {\n\t\t...\n\t\t// kube-controller-manager 的核心\n\t\trun := func(ctx context.Context) {\n\t\trootClientBuilder := controller.SimpleControllerClientBuilder{\n\t\t\tClientConfig: c.Kubeconfig,\n\t\t}\n\t\tvar clientBuilder controller.ControllerClientBuilder\n\t\tif c.ComponentConfig.KubeCloudShared.UseServiceAccountCredentials {\n\t\t\tif len(c.ComponentConfig.SAController.ServiceAccountKeyFile) == 0 {\n\t\t\t\t// It'c possible another controller process is creating the tokens for us.\n\t\t\t\t// If one isn't, we'll timeout and exit when our client builder is unable to create the tokens.\n\t\t\t\tglog.Warningf(\"--use-service-account-credentials was specified without providing a --service-account-private-key-file\")\n\t\t\t}\n\t\t\tclientBuilder = controller.SAControllerClientBuilder{\n\t\t\t\tClientConfig:         restclient.AnonymousClientConfig(c.Kubeconfig),\n\t\t\t\tCoreClient:           c.Client.CoreV1(),\n\t\t\t\tAuthenticationClient: c.Client.AuthenticationV1(),\n\t\t\t\tNamespace:            \"kube-system\",\n\t\t\t}\n\t\t} else {\n\t\t\tclientBuilder = rootClientBuilder\n\t\t}\n\t\tcontrollerContext, err := CreateControllerContext(c, rootClientBuilder, clientBuilder, ctx.Done())\n\t\tif err != nil {\n\t\t\tglog.Fatalf(\"error building controller context: %v\", err)\n\t\t}\n\t\tsaTokenControllerInitFunc := serviceAccountTokenControllerStarter{rootClientBuilder: rootClientBuilder}.startServiceAccountTokenController\n\t\t// 初始化及启动所有的 controller\n\t\tif err := StartControllers(controllerContext, saTokenControllerInitFunc, NewControllerInitializers(controllerContext.LoopMode), unsecuredMux); err != nil {\n\t\t\tglog.Fatalf(\"error starting controllers: %v\", err)\n\t\t}\n\n\t\tcontrollerContext.InformerFactory.Start(controllerContext.Stop)\n\t\tclose(controllerContext.InformersStarted)\n\n\t\tselect {}\n\t}\n\n    // 如果 LeaderElect 参数未配置,说明 controller-manager 是单点启动的，\n    // 则直接调用 run 方法来启动需要被启动的控制器即可。\n    if !c.ComponentConfig.Generic.LeaderElection.LeaderElect {\n        run(context.TODO())\n        panic(\"unreachable\")\n    }\n\n    // 如果 LeaderElect 参数配置为 true,说明 controller-manager 是以 HA 方式启动的，\n    // 则执行下面的代码进行 leader 选举，选举出的 leader 会回调 run 方法。\n    id, err := os.Hostname()\n    if err != nil {\n        return err\n    }\n\n    // add a uniquifier so that two processes on the same host don't accidentally both become active\n    id = id + \"_\" + string(uuid.NewUUID())\n    \n    // 初始化资源锁\n    rl, err := resourcelock.New(c.ComponentConfig.Generic.LeaderElection.ResourceLock,\n        \"kube-system\",\n        \"kube-controller-manager\",\n        c.LeaderElectionClient.CoreV1(),\n        resourcelock.ResourceLockConfig{\n            Identity:      id,\n            EventRecorder: c.EventRecorder,\n        })\n    if err != nil {\n        glog.Fatalf(\"error creating lock: %v\", err)\n    }\n    // 进入到选举的流程\n    leaderelection.RunOrDie(context.TODO(), leaderelection.LeaderElectionConfig{\n        Lock:          rl,\n        LeaseDuration: c.ComponentConfig.Generic.LeaderElection.LeaseDuration.Duration,\n        RenewDeadline: c.ComponentConfig.Generic.LeaderElection.RenewDeadline.Duration,\n        RetryPeriod:   c.ComponentConfig.Generic.LeaderElection.RetryPeriod.Duration,\n        Callbacks: leaderelection.LeaderCallbacks{\n            OnStartedLeading: run,\n            OnStoppedLeading: func() {\n                glog.Fatalf(\"leaderelection lost\")\n            },\n        },\n        WatchDog: electionChecker,\n        Name:     \"kube-controller-manager\",\n    })\n    panic(\"unreachable\")\n}\n```\n\n- 1、初始化资源锁，kubernetes 中默认的资源锁使用 `endpoints`，也就是 c.ComponentConfig.Generic.LeaderElection.ResourceLock 的值为 \"endpoints\"，在代码中我并没有找到对 ResourceLock 初始化的地方，只看到了对该参数的说明以及日志中配置的默认值：\n\n![](http://cdn.tianfeiyu.com/leader-1.png)\n\n​在初始化资源锁的时候还传入了 EventRecorder，其作用是当 leader 发生变化的时候会将对应的 events 发送到 apiserver。\n\n\n- 2、rl 资源锁被用于 controller-manager 进行 leader 的选举，RunOrDie 方法中就是 leader 的选举过程了。\n\n- 3、Callbacks 中定义了在切换状态后需要执行的操作，当成为 leader 后会执行 OnStartedLeading 中的 run 方法，run 方法是 controller-manager 的核心，run 方法中会初始化并启动所包含资源的 controller，以下是 kube-controller-manager 中所有的 controller：\n\n```\nfunc NewControllerInitializers(loopMode ControllerLoopMode) map[string]InitFunc {\n\tcontrollers := map[string]InitFunc{}\n\tcontrollers[\"endpoint\"] = startEndpointController\n\tcontrollers[\"replicationcontroller\"] = startReplicationController\n\tcontrollers[\"podgc\"] = startPodGCController\n\tcontrollers[\"resourcequota\"] = startResourceQuotaController\n\tcontrollers[\"namespace\"] = startNamespaceController\n\tcontrollers[\"serviceaccount\"] = startServiceAccountController\n\tcontrollers[\"garbagecollector\"] = startGarbageCollectorController\n\tcontrollers[\"daemonset\"] = startDaemonSetController\n\tcontrollers[\"job\"] = startJobController\n\tcontrollers[\"deployment\"] = startDeploymentController\n\tcontrollers[\"replicaset\"] = startReplicaSetController\n\tcontrollers[\"horizontalpodautoscaling\"] = startHPAController\n\tcontrollers[\"disruption\"] = startDisruptionController\n\tcontrollers[\"statefulset\"] = startStatefulSetController\n\tcontrollers[\"cronjob\"] = startCronJobController\n\tcontrollers[\"csrsigning\"] = startCSRSigningController\n\tcontrollers[\"csrapproving\"] = startCSRApprovingController\n\tcontrollers[\"csrcleaner\"] = startCSRCleanerController\n\tcontrollers[\"ttl\"] = startTTLController\n\tcontrollers[\"bootstrapsigner\"] = startBootstrapSignerController\n\tcontrollers[\"tokencleaner\"] = startTokenCleanerController\n\tcontrollers[\"nodeipam\"] = startNodeIpamController\n\tif loopMode == IncludeCloudLoops {\n\t\tcontrollers[\"service\"] = startServiceController\n\t\tcontrollers[\"route\"] = startRouteController\n\t}\n\tcontrollers[\"nodelifecycle\"] = startNodeLifecycleController\n\tcontrollers[\"persistentvolume-binder\"] = startPersistentVolumeBinderController\n\tcontrollers[\"attachdetach\"] = startAttachDetachController\n\tcontrollers[\"persistentvolume-expander\"] = startVolumeExpandController\n\tcontrollers[\"clusterrole-aggregation\"] = startClusterRoleAggregrationController\n\tcontrollers[\"pvc-protection\"] = startPVCProtectionController\n\tcontrollers[\"pv-protection\"] = startPVProtectionController\n\tcontrollers[\"ttl-after-finished\"] = startTTLAfterFinishedController\n\n\treturn controllers\n}\n```\n\nOnStoppedLeading 是从 leader 状态切换为 slave 要执行的操作，此方法仅打印了一条日志。\n\n\n\n```\nfunc RunOrDie(ctx context.Context, lec LeaderElectionConfig) {\n    le, err := NewLeaderElector(lec)\n    if err != nil {\n        panic(err)\n    }\n    if lec.WatchDog != nil {\n        lec.WatchDog.SetLeaderElection(le)\n    }\n    le.Run(ctx)\n}\n```\n\n在 RunOrDie 中首先调用 NewLeaderElector 初始化了一个 LeaderElector 对象，然后执行 LeaderElector 的 run 方法进行选举。\n\n\n```\nfunc (le *LeaderElector) Run(ctx context.Context) {\n\tdefer func() {\n\t\truntime.HandleCrash()\n\t\tle.config.Callbacks.OnStoppedLeading()\n\t}()\n\tif !le.acquire(ctx) {\n\t\treturn // ctx signalled done\n\t}\n\tctx, cancel := context.WithCancel(ctx)\n\tdefer cancel()\n\tgo le.config.Callbacks.OnStartedLeading(ctx)\n\tle.renew(ctx)\n}\n```\n\nRun 中首先会执行 acquire 尝试获取锁，获取到锁之后会回调 OnStartedLeading 启动所需要的 controller，然后会执行 renew 方法定期更新锁，保持 leader 的状态。\n\n\n```\nfunc (le *LeaderElector) acquire(ctx context.Context) bool {\n\tctx, cancel := context.WithCancel(ctx)\n\tdefer cancel()\n\tsucceeded := false\n\tdesc := le.config.Lock.Describe()\n\tglog.Infof(\"attempting to acquire leader lease  %v...\", desc)\n\twait.JitterUntil(func() {\n\t\t// 尝试创建或者续约资源锁\n\t\tsucceeded = le.tryAcquireOrRenew()\n\t\t// leader 可能发生了改变，在 maybeReportTransition 方法中会\n\t\t// 执行相应的 OnNewLeader() 回调函数,代码中对 OnNewLeader() 并没有初始化\n\t\tle.maybeReportTransition()\n\t\tif !succeeded {\n\t\t\tglog.V(4).Infof(\"failed to acquire lease %v\", desc)\n\t\t\treturn\n\t\t}\n\t\tle.config.Lock.RecordEvent(\"became leader\")\n\t\tglog.Infof(\"successfully acquired lease %v\", desc)\n\t\tcancel()\n\t}, le.config.RetryPeriod, JitterFactor, true, ctx.Done())\n\treturn succeeded\n}\n```\n在 acquire 中首先初始化了一个 ctx，通过 wait.JitterUntil 周期性的去调用 le.tryAcquireOrRenew 方法来获取资源锁，直到获取为止。如果获取不到锁，则会以 RetryPeriod 为间隔不断尝试。如果获取到锁，就会关闭 ctx 通知 wait.JitterUntil 停止尝试，tryAcquireOrRenew 是最核心的方法。\n\n\n\n```\nfunc (le *LeaderElector) tryAcquireOrRenew() bool {\n\tnow := metav1.Now()\n\tleaderElectionRecord := rl.LeaderElectionRecord{\n\t\tHolderIdentity:       le.config.Lock.Identity(),\n\t\tLeaseDurationSeconds: int(le.config.LeaseDuration / time.Second),\n\t\tRenewTime:            now,\n\t\tAcquireTime:          now,\n\t}\n\n\t// 1、获取当前的资源锁\n\toldLeaderElectionRecord, err := le.config.Lock.Get()\n\tif err != nil {\n\t\tif !errors.IsNotFound(err) {\n\t\t\tglog.Errorf(\"error retrieving resource lock %v: %v\", le.config.Lock.Describe(), err)\n\t\t\treturn false\n\t\t}\n\t\t// 没有获取到资源锁，开始创建资源锁，若创建成功则成为 leader \n\t\tif err = le.config.Lock.Create(leaderElectionRecord); err != nil {\n\t\t\tglog.Errorf(\"error initially creating leader election record: %v\", err)\n\t\t\treturn false\n\t\t}\n\t\tle.observedRecord = leaderElectionRecord\n\t\tle.observedTime = le.clock.Now()\n\t\treturn true\n\t}\n\n\t// 2、获取资源锁后检查当前 id 是不是 leader\n\tif !reflect.DeepEqual(le.observedRecord, *oldLeaderElectionRecord) {\n\t\tle.observedRecord = *oldLeaderElectionRecord\n\t\tle.observedTime = le.clock.Now()\n\t}\n\t// 如果资源锁没有过期且当前 id 不是 Leader，直接返回\n\tif le.observedTime.Add(le.config.LeaseDuration).After(now.Time) &&\n\t\t!le.IsLeader() {\n\t\tglog.V(4).Infof(\"lock is held by %v and has not yet expired\", oldLeaderElectionRecord.HolderIdentity)\n\t\treturn false\n\t}\n\n\t// 3、如果当前 id 是 Leader，将对应字段的时间改成当前时间，准备续租\n\t// 如果是非 Leader 节点则抢夺资源锁\n\tif le.IsLeader() {\n\t\tleaderElectionRecord.AcquireTime = oldLeaderElectionRecord.AcquireTime\n\t\tleaderElectionRecord.LeaderTransitions = oldLeaderElectionRecord.LeaderTransitions\n\t} else {\n\t\tleaderElectionRecord.LeaderTransitions = oldLeaderElectionRecord.LeaderTransitions + 1\n\t}\n\n        // 更新资源\n        // 对于 Leader 来说，这是一个续租的过程\n        // 对于非 Leader 节点（仅在上一个资源锁已经过期），这是一个更新锁所有权的过程\n\tif err = le.config.Lock.Update(leaderElectionRecord); err != nil {\n\t\tglog.Errorf(\"Failed to update lock: %v\", err)\n\t\treturn false\n\t}\n\tle.observedRecord = leaderElectionRecord\n\tle.observedTime = le.clock.Now()\n\treturn true\n}\n```\n\n上面的这个函数的主要逻辑：\n- 1、获取 ElectionRecord 记录，如果没有则创建一条新的 ElectionRecord 记录，创建成功则表示获取到锁并成为 leader 了。\n- 2、当获取到资源锁后开始检查其中的信息，比较当前 id 是不是 leader 以及资源锁有没有过期，如果资源锁没有过期且当前 id 不是 Leader，则直接返回。\n- 3、如果当前 id 是 Leader，将对应字段的时间改成当前时间，更新资源锁进行续租。\n- 4、如果当前 id 不是 Leader 但是资源锁已经过期了，则抢夺资源锁，抢夺成功则成为 leader 否则返回。\n\n\n最后是 renew 方法：\n\n```\nfunc (le *LeaderElector) renew(ctx context.Context) {\n\tctx, cancel := context.WithCancel(ctx)\n\tdefer cancel()\n\twait.Until(func() {\n\t\ttimeoutCtx, timeoutCancel := context.WithTimeout(ctx, le.config.RenewDeadline)\n\t\tdefer timeoutCancel()\n                // 每间隔 RetryPeriod 就执行 tryAcquireOrRenew()\n                // 如果 tryAcquireOrRenew() 返回 false 说明续租失败\n\t\terr := wait.PollImmediateUntil(le.config.RetryPeriod, func() (bool, error) {\n\t\t\tdone := make(chan bool, 1)\n\t\t\tgo func() {\n\t\t\t\tdefer close(done)\n\t\t\t\tdone <- le.tryAcquireOrRenew()\n\t\t\t}()\n\n\t\t\tselect {\n\t\t\tcase <-timeoutCtx.Done():\n\t\t\t\treturn false, fmt.Errorf(\"failed to tryAcquireOrRenew %s\", timeoutCtx.Err())\n\t\t\tcase result := <-done:\n\t\t\t\treturn result, nil\n\t\t\t}\n\t\t}, timeoutCtx.Done())\n\n\t\tle.maybeReportTransition()\n\t\tdesc := le.config.Lock.Describe()\n\t\tif err == nil {\n\t\t\tglog.V(4).Infof(\"successfully renewed lease %v\", desc)\n\t\t\treturn\n\t\t}\n\t\t// 续租失败，说明已经不是 Leader，然后程序 panic\n\t\tle.config.Lock.RecordEvent(\"stopped leading\")\n\t\tglog.Infof(\"failed to renew lease %v: %v\", desc, err)\n\t\tcancel()\n\t}, le.config.RetryPeriod, ctx.Done())\n}\n```\n获取到锁之后定期进行更新，renew 只有在获取锁之后才会调用，它会通过持续更新资源锁的数据，来确保继续持有已获得的锁，保持自己的 leader 状态。\n\n\n\n#### Leader Election 功能的使用\n\n以下是一个 demo，使用 k8s 中 `k8s.io/client-go/tools/leaderelection` 进行一个演示：\n\n\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"flag\"\n\t\"fmt\"\n\t\"os\"\n\t\"time\"\n\n\t\"github.com/golang/glog\"\n\t\"k8s.io/api/core/v1\"\n\t\"k8s.io/client-go/kubernetes\"\n\t\"k8s.io/client-go/kubernetes/scheme\"\n\tv1core \"k8s.io/client-go/kubernetes/typed/core/v1\"\n\t\"k8s.io/client-go/tools/clientcmd\"\n\t\"k8s.io/client-go/tools/leaderelection\"\n\t\"k8s.io/client-go/tools/leaderelection/resourcelock\"\n\t\"k8s.io/client-go/tools/record\"\n)\n\nvar (\n\tmasterURL  string\n\tkubeconfig string\n)\n\nfunc init() {\n\tflag.StringVar(&kubeconfig, \"kubeconfig\", \"\", \"Path to a kubeconfig. Only required if out-of-cluster.\")\n\tflag.StringVar(&masterURL, \"master\", \"\", \"The address of the Kubernetes API server. Overrides any value in kubeconfig. Only required if out-of-cluster.\")\n\n\tflag.Set(\"logtostderr\", \"true\")\n}\n\nfunc main() {\n\tflag.Parse()\n\tdefer glog.Flush()\n\n\tid, err := os.Hostname()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\t\n\t// 加载 kubeconfig 配置\n\tcfg, err := clientcmd.BuildConfigFromFlags(masterURL, kubeconfig)\n\tif err != nil {\n\t\tglog.Fatalf(\"Error building kubeconfig: %s\", err.Error())\n\t}\n\n\t// 创建 kubeclient\n\tkubeClient, err := kubernetes.NewForConfig(cfg)\n\tif err != nil {\n\t\tglog.Fatalf(\"Error building kubernetes clientset: %s\", err.Error())\n\t}\n\n\t// 初始化 eventRecorder\n\teventBroadcaster := record.NewBroadcaster()\n\teventRecorder := eventBroadcaster.NewRecorder(scheme.Scheme, v1.EventSource{Component: \"test-1\"})\n\teventBroadcaster.StartLogging(glog.Infof)\n\teventBroadcaster.StartRecordingToSink(&v1core.EventSinkImpl{Interface: kubeClient.CoreV1().Events(\"\")})\n\n\trun := func(ctx context.Context) {\n\t\tfmt.Println(\"run.........\")\n\t\tselect {}\n\t}\n\n\tid = id + \"_\" + \"1\"\n\trl, err := resourcelock.New(\"endpoints\",\n\t\t\"kube-system\",\n\t\t\"test\",\n\t\tkubeClient.CoreV1(),\n\t\tresourcelock.ResourceLockConfig{\n\t\t\tIdentity:      id,\n\t\t\tEventRecorder: eventRecorder,\n\t\t})\n\tif err != nil {\n\t\tglog.Fatalf(\"error creating lock: %v\", err)\n\t}\n\n\tleaderelection.RunOrDie(context.TODO(), leaderelection.LeaderElectionConfig{\n\t\tLock:          rl,\n\t\tLeaseDuration: 15 * time.Second,\n\t\tRenewDeadline: 10 * time.Second,\n\t\tRetryPeriod:   2 * time.Second,\n\t\tCallbacks: leaderelection.LeaderCallbacks{\n\t\t\tOnStartedLeading: run,\n\t\t\tOnStoppedLeading: func() {\n\t\t\t\tglog.Info(\"leaderelection lost\")\n\t\t\t},\n\t\t},\n\t\tName: \"test-1\",\n\t})\n}\n```\n\n分别使用多个 hostname 同时运行后并测试 leader 切换，可以在 events 中看到 leader 切换的记录：\n\n\n```\n# kubectl describe endpoints test  -n kube-system\nName:         test\nNamespace:    kube-system\nLabels:       <none>\nAnnotations:  control-plane.alpha.kubernetes.io/leader={\"holderIdentity\":\"localhost_2\",\"leaseDurationSeconds\":15,\"acquireTime\":\"2019-03-10T08:47:42Z\",\"renewTime\":\"2019-03-10T08:47:44Z\",\"leaderTransitions\":2}\nSubsets:\nEvents:\n  Type    Reason          Age   From    Message\n  ----    ------          ----  ----    -------\n  Normal  LeaderElection  50s   test-1  localhost_1 became leader\n  Normal  LeaderElection  5s    test-2  localhost_2 became leader\n```\n\n\n#### 总结\n\n本文讲述了 kube-controller-manager 使用 HA 的方式启动后 leader 选举过程的实现说明，k8s 中通过创建 endpoints 资源以及对该资源的持续更新来实现资源锁轮转的过程。但是相对于其他分布式锁的实现，普遍是直接基于现有的中间件实现，比如 redis、zookeeper、etcd 等，其所有对锁的操作都是原子性的，那 k8s 选举过程中的原子操作是如何实现的？k8s 中的原子操作最终也是通过 etcd 实现的，其在做 update 更新锁的操作时采用的是乐观锁，通过对比 resourceVersion 实现的，详细的实现下节再讲。\n\n![api resource](http://cdn.tianfeiyu.com/api-resource-1.png)\n\n\n\n参考文档：\n[API OVERVIEW](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.10/)\n[Simple leader election with Kubernetes and Docker](https://kubernetes.io/blog/2016/01/simple-leader-election-with-kubernetes/)\n\n\n","slug":"k8s_leader_election","published":1,"updated":"2019-07-21T10:01:02.574Z","_id":"cjycnhjm2000m5vwnfusv9dgo","comments":1,"layout":"post","photos":[],"link":"","content":"<p>生产环境中为了保障业务的稳定性，集群都需要高可用部署，k8s 中 apiserver 是无状态的，可以横向扩容保证其高可用，kube-controller-manager 和 kube-scheduler 两个组件通过 leader 选举保障高可用，即正常情况下 kube-scheduler 或 kube-manager-controller 组件的多个副本只有一个是处于业务逻辑运行状态，其它副本则不断的尝试去获取锁，去竞争 leader，直到自己成为leader。如果正在运行的 leader 因某种原因导致当前进程退出，或者锁丢失，则由其它副本去竞争新的 leader，获取 leader 继而执行业务逻辑。</p>\n<blockquote>\n<p>kubernetes 版本： v1.12 </p>\n</blockquote>\n<h4 id=\"组件高可用的使用\"><a href=\"#组件高可用的使用\" class=\"headerlink\" title=\"组件高可用的使用\"></a>组件高可用的使用</h4><p>k8s 中已经为 kube-controller-manager、kube-scheduler 组件实现了高可用，只需在每个组件的配置文件中添加 <code>--leader-elect=true</code> 参数即可启用。在每个组件的日志中可以看到 HA 相关参数的默认值：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I0306 19:17:14.109511  161798 flags.go:33] FLAG: --leader-elect=&quot;true&quot;</span><br><span class=\"line\">I0306 19:17:14.109513  161798 flags.go:33] FLAG: --leader-elect-lease-duration=&quot;15s&quot;</span><br><span class=\"line\">I0306 19:17:14.109516  161798 flags.go:33] FLAG: --leader-elect-renew-deadline=&quot;10s&quot;</span><br><span class=\"line\">I0306 19:17:14.109518  161798 flags.go:33] FLAG: --leader-elect-resource-lock=&quot;endpoints&quot;</span><br><span class=\"line\">I0306 19:17:14.109520  161798 flags.go:33] FLAG: --leader-elect-retry-period=&quot;2s&quot;</span><br></pre></td></tr></table></figure>\n<p>kubernetes 中查看组件 leader 的方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get endpoints kube-controller-manager --namespace=kube-system -o yaml &amp;&amp; </span><br><span class=\"line\">  kubectl get endpoints kube-scheduler --namespace=kube-system -o yaml</span><br></pre></td></tr></table></figure>\n<p>当前组件 leader 的 hostname 会写在 annotation 的 control-plane.alpha.kubernetes.io/leader 字段里。</p>\n<h4 id=\"Leader-Election-的实现\"><a href=\"#Leader-Election-的实现\" class=\"headerlink\" title=\"Leader Election 的实现\"></a>Leader Election 的实现</h4><p>Leader Election 的过程本质上是一个竞争分布式锁的过程。在 Kubernetes 中，这个分布式锁是以创建 Endpoint 资源的形式进行，谁先创建了该资源，谁就先获得锁，之后会对该资源不断更新以保持锁的拥有权。</p>\n<p>下面开始讲述 kube-controller-manager 中 leader 的竞争过程，cm 在加载及配置完参数后就开始执行 run 方法了。代码在 <code>k8s.io/kubernetes/cmd/kube-controller-manager/app/controllermanager.go</code> 中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Run runs the KubeControllerManagerOptions.  This should never exit.</span><br><span class=\"line\">func Run(c *config.CompletedConfig, stopCh &lt;-chan struct&#123;&#125;) error &#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t\t// kube-controller-manager 的核心</span><br><span class=\"line\">\t\trun := func(ctx context.Context) &#123;</span><br><span class=\"line\">\t\trootClientBuilder := controller.SimpleControllerClientBuilder&#123;</span><br><span class=\"line\">\t\t\tClientConfig: c.Kubeconfig,</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tvar clientBuilder controller.ControllerClientBuilder</span><br><span class=\"line\">\t\tif c.ComponentConfig.KubeCloudShared.UseServiceAccountCredentials &#123;</span><br><span class=\"line\">\t\t\tif len(c.ComponentConfig.SAController.ServiceAccountKeyFile) == 0 &#123;</span><br><span class=\"line\">\t\t\t\t// It&apos;c possible another controller process is creating the tokens for us.</span><br><span class=\"line\">\t\t\t\t// If one isn&apos;t, we&apos;ll timeout and exit when our client builder is unable to create the tokens.</span><br><span class=\"line\">\t\t\t\tglog.Warningf(&quot;--use-service-account-credentials was specified without providing a --service-account-private-key-file&quot;)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tclientBuilder = controller.SAControllerClientBuilder&#123;</span><br><span class=\"line\">\t\t\t\tClientConfig:         restclient.AnonymousClientConfig(c.Kubeconfig),</span><br><span class=\"line\">\t\t\t\tCoreClient:           c.Client.CoreV1(),</span><br><span class=\"line\">\t\t\t\tAuthenticationClient: c.Client.AuthenticationV1(),</span><br><span class=\"line\">\t\t\t\tNamespace:            &quot;kube-system&quot;,</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\tclientBuilder = rootClientBuilder</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcontrollerContext, err := CreateControllerContext(c, rootClientBuilder, clientBuilder, ctx.Done())</span><br><span class=\"line\">\t\tif err != nil &#123;</span><br><span class=\"line\">\t\t\tglog.Fatalf(&quot;error building controller context: %v&quot;, err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tsaTokenControllerInitFunc := serviceAccountTokenControllerStarter&#123;rootClientBuilder: rootClientBuilder&#125;.startServiceAccountTokenController</span><br><span class=\"line\">\t\t// 初始化及启动所有的 controller</span><br><span class=\"line\">\t\tif err := StartControllers(controllerContext, saTokenControllerInitFunc, NewControllerInitializers(controllerContext.LoopMode), unsecuredMux); err != nil &#123;</span><br><span class=\"line\">\t\t\tglog.Fatalf(&quot;error starting controllers: %v&quot;, err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tcontrollerContext.InformerFactory.Start(controllerContext.Stop)</span><br><span class=\"line\">\t\tclose(controllerContext.InformersStarted)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tselect &#123;&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 如果 LeaderElect 参数未配置,说明 controller-manager 是单点启动的，</span><br><span class=\"line\">    // 则直接调用 run 方法来启动需要被启动的控制器即可。</span><br><span class=\"line\">    if !c.ComponentConfig.Generic.LeaderElection.LeaderElect &#123;</span><br><span class=\"line\">        run(context.TODO())</span><br><span class=\"line\">        panic(&quot;unreachable&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 如果 LeaderElect 参数配置为 true,说明 controller-manager 是以 HA 方式启动的，</span><br><span class=\"line\">    // 则执行下面的代码进行 leader 选举，选举出的 leader 会回调 run 方法。</span><br><span class=\"line\">    id, err := os.Hostname()</span><br><span class=\"line\">    if err != nil &#123;</span><br><span class=\"line\">        return err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // add a uniquifier so that two processes on the same host don&apos;t accidentally both become active</span><br><span class=\"line\">    id = id + &quot;_&quot; + string(uuid.NewUUID())</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 初始化资源锁</span><br><span class=\"line\">    rl, err := resourcelock.New(c.ComponentConfig.Generic.LeaderElection.ResourceLock,</span><br><span class=\"line\">        &quot;kube-system&quot;,</span><br><span class=\"line\">        &quot;kube-controller-manager&quot;,</span><br><span class=\"line\">        c.LeaderElectionClient.CoreV1(),</span><br><span class=\"line\">        resourcelock.ResourceLockConfig&#123;</span><br><span class=\"line\">            Identity:      id,</span><br><span class=\"line\">            EventRecorder: c.EventRecorder,</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    if err != nil &#123;</span><br><span class=\"line\">        glog.Fatalf(&quot;error creating lock: %v&quot;, err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 进入到选举的流程</span><br><span class=\"line\">    leaderelection.RunOrDie(context.TODO(), leaderelection.LeaderElectionConfig&#123;</span><br><span class=\"line\">        Lock:          rl,</span><br><span class=\"line\">        LeaseDuration: c.ComponentConfig.Generic.LeaderElection.LeaseDuration.Duration,</span><br><span class=\"line\">        RenewDeadline: c.ComponentConfig.Generic.LeaderElection.RenewDeadline.Duration,</span><br><span class=\"line\">        RetryPeriod:   c.ComponentConfig.Generic.LeaderElection.RetryPeriod.Duration,</span><br><span class=\"line\">        Callbacks: leaderelection.LeaderCallbacks&#123;</span><br><span class=\"line\">            OnStartedLeading: run,</span><br><span class=\"line\">            OnStoppedLeading: func() &#123;</span><br><span class=\"line\">                glog.Fatalf(&quot;leaderelection lost&quot;)</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        WatchDog: electionChecker,</span><br><span class=\"line\">        Name:     &quot;kube-controller-manager&quot;,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    panic(&quot;unreachable&quot;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>1、初始化资源锁，kubernetes 中默认的资源锁使用 <code>endpoints</code>，也就是 c.ComponentConfig.Generic.LeaderElection.ResourceLock 的值为 “endpoints”，在代码中我并没有找到对 ResourceLock 初始化的地方，只看到了对该参数的说明以及日志中配置的默认值：</li>\n</ul>\n<p><img src=\"http://cdn.tianfeiyu.com/leader-1.png\" alt=\"\"></p>\n<p>​在初始化资源锁的时候还传入了 EventRecorder，其作用是当 leader 发生变化的时候会将对应的 events 发送到 apiserver。</p>\n<ul>\n<li><p>2、rl 资源锁被用于 controller-manager 进行 leader 的选举，RunOrDie 方法中就是 leader 的选举过程了。</p>\n</li>\n<li><p>3、Callbacks 中定义了在切换状态后需要执行的操作，当成为 leader 后会执行 OnStartedLeading 中的 run 方法，run 方法是 controller-manager 的核心，run 方法中会初始化并启动所包含资源的 controller，以下是 kube-controller-manager 中所有的 controller：</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func NewControllerInitializers(loopMode ControllerLoopMode) map[string]InitFunc &#123;</span><br><span class=\"line\">\tcontrollers := map[string]InitFunc&#123;&#125;</span><br><span class=\"line\">\tcontrollers[&quot;endpoint&quot;] = startEndpointController</span><br><span class=\"line\">\tcontrollers[&quot;replicationcontroller&quot;] = startReplicationController</span><br><span class=\"line\">\tcontrollers[&quot;podgc&quot;] = startPodGCController</span><br><span class=\"line\">\tcontrollers[&quot;resourcequota&quot;] = startResourceQuotaController</span><br><span class=\"line\">\tcontrollers[&quot;namespace&quot;] = startNamespaceController</span><br><span class=\"line\">\tcontrollers[&quot;serviceaccount&quot;] = startServiceAccountController</span><br><span class=\"line\">\tcontrollers[&quot;garbagecollector&quot;] = startGarbageCollectorController</span><br><span class=\"line\">\tcontrollers[&quot;daemonset&quot;] = startDaemonSetController</span><br><span class=\"line\">\tcontrollers[&quot;job&quot;] = startJobController</span><br><span class=\"line\">\tcontrollers[&quot;deployment&quot;] = startDeploymentController</span><br><span class=\"line\">\tcontrollers[&quot;replicaset&quot;] = startReplicaSetController</span><br><span class=\"line\">\tcontrollers[&quot;horizontalpodautoscaling&quot;] = startHPAController</span><br><span class=\"line\">\tcontrollers[&quot;disruption&quot;] = startDisruptionController</span><br><span class=\"line\">\tcontrollers[&quot;statefulset&quot;] = startStatefulSetController</span><br><span class=\"line\">\tcontrollers[&quot;cronjob&quot;] = startCronJobController</span><br><span class=\"line\">\tcontrollers[&quot;csrsigning&quot;] = startCSRSigningController</span><br><span class=\"line\">\tcontrollers[&quot;csrapproving&quot;] = startCSRApprovingController</span><br><span class=\"line\">\tcontrollers[&quot;csrcleaner&quot;] = startCSRCleanerController</span><br><span class=\"line\">\tcontrollers[&quot;ttl&quot;] = startTTLController</span><br><span class=\"line\">\tcontrollers[&quot;bootstrapsigner&quot;] = startBootstrapSignerController</span><br><span class=\"line\">\tcontrollers[&quot;tokencleaner&quot;] = startTokenCleanerController</span><br><span class=\"line\">\tcontrollers[&quot;nodeipam&quot;] = startNodeIpamController</span><br><span class=\"line\">\tif loopMode == IncludeCloudLoops &#123;</span><br><span class=\"line\">\t\tcontrollers[&quot;service&quot;] = startServiceController</span><br><span class=\"line\">\t\tcontrollers[&quot;route&quot;] = startRouteController</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcontrollers[&quot;nodelifecycle&quot;] = startNodeLifecycleController</span><br><span class=\"line\">\tcontrollers[&quot;persistentvolume-binder&quot;] = startPersistentVolumeBinderController</span><br><span class=\"line\">\tcontrollers[&quot;attachdetach&quot;] = startAttachDetachController</span><br><span class=\"line\">\tcontrollers[&quot;persistentvolume-expander&quot;] = startVolumeExpandController</span><br><span class=\"line\">\tcontrollers[&quot;clusterrole-aggregation&quot;] = startClusterRoleAggregrationController</span><br><span class=\"line\">\tcontrollers[&quot;pvc-protection&quot;] = startPVCProtectionController</span><br><span class=\"line\">\tcontrollers[&quot;pv-protection&quot;] = startPVProtectionController</span><br><span class=\"line\">\tcontrollers[&quot;ttl-after-finished&quot;] = startTTLAfterFinishedController</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn controllers</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>OnStoppedLeading 是从 leader 状态切换为 slave 要执行的操作，此方法仅打印了一条日志。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func RunOrDie(ctx context.Context, lec LeaderElectionConfig) &#123;</span><br><span class=\"line\">    le, err := NewLeaderElector(lec)</span><br><span class=\"line\">    if err != nil &#123;</span><br><span class=\"line\">        panic(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if lec.WatchDog != nil &#123;</span><br><span class=\"line\">        lec.WatchDog.SetLeaderElection(le)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    le.Run(ctx)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 RunOrDie 中首先调用 NewLeaderElector 初始化了一个 LeaderElector 对象，然后执行 LeaderElector 的 run 方法进行选举。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (le *LeaderElector) Run(ctx context.Context) &#123;</span><br><span class=\"line\">\tdefer func() &#123;</span><br><span class=\"line\">\t\truntime.HandleCrash()</span><br><span class=\"line\">\t\tle.config.Callbacks.OnStoppedLeading()</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\tif !le.acquire(ctx) &#123;</span><br><span class=\"line\">\t\treturn // ctx signalled done</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tctx, cancel := context.WithCancel(ctx)</span><br><span class=\"line\">\tdefer cancel()</span><br><span class=\"line\">\tgo le.config.Callbacks.OnStartedLeading(ctx)</span><br><span class=\"line\">\tle.renew(ctx)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Run 中首先会执行 acquire 尝试获取锁，获取到锁之后会回调 OnStartedLeading 启动所需要的 controller，然后会执行 renew 方法定期更新锁，保持 leader 的状态。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (le *LeaderElector) acquire(ctx context.Context) bool &#123;</span><br><span class=\"line\">\tctx, cancel := context.WithCancel(ctx)</span><br><span class=\"line\">\tdefer cancel()</span><br><span class=\"line\">\tsucceeded := false</span><br><span class=\"line\">\tdesc := le.config.Lock.Describe()</span><br><span class=\"line\">\tglog.Infof(&quot;attempting to acquire leader lease  %v...&quot;, desc)</span><br><span class=\"line\">\twait.JitterUntil(func() &#123;</span><br><span class=\"line\">\t\t// 尝试创建或者续约资源锁</span><br><span class=\"line\">\t\tsucceeded = le.tryAcquireOrRenew()</span><br><span class=\"line\">\t\t// leader 可能发生了改变，在 maybeReportTransition 方法中会</span><br><span class=\"line\">\t\t// 执行相应的 OnNewLeader() 回调函数,代码中对 OnNewLeader() 并没有初始化</span><br><span class=\"line\">\t\tle.maybeReportTransition()</span><br><span class=\"line\">\t\tif !succeeded &#123;</span><br><span class=\"line\">\t\t\tglog.V(4).Infof(&quot;failed to acquire lease %v&quot;, desc)</span><br><span class=\"line\">\t\t\treturn</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tle.config.Lock.RecordEvent(&quot;became leader&quot;)</span><br><span class=\"line\">\t\tglog.Infof(&quot;successfully acquired lease %v&quot;, desc)</span><br><span class=\"line\">\t\tcancel()</span><br><span class=\"line\">\t&#125;, le.config.RetryPeriod, JitterFactor, true, ctx.Done())</span><br><span class=\"line\">\treturn succeeded</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 acquire 中首先初始化了一个 ctx，通过 wait.JitterUntil 周期性的去调用 le.tryAcquireOrRenew 方法来获取资源锁，直到获取为止。如果获取不到锁，则会以 RetryPeriod 为间隔不断尝试。如果获取到锁，就会关闭 ctx 通知 wait.JitterUntil 停止尝试，tryAcquireOrRenew 是最核心的方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (le *LeaderElector) tryAcquireOrRenew() bool &#123;</span><br><span class=\"line\">\tnow := metav1.Now()</span><br><span class=\"line\">\tleaderElectionRecord := rl.LeaderElectionRecord&#123;</span><br><span class=\"line\">\t\tHolderIdentity:       le.config.Lock.Identity(),</span><br><span class=\"line\">\t\tLeaseDurationSeconds: int(le.config.LeaseDuration / time.Second),</span><br><span class=\"line\">\t\tRenewTime:            now,</span><br><span class=\"line\">\t\tAcquireTime:          now,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 1、获取当前的资源锁</span><br><span class=\"line\">\toldLeaderElectionRecord, err := le.config.Lock.Get()</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\tif !errors.IsNotFound(err) &#123;</span><br><span class=\"line\">\t\t\tglog.Errorf(&quot;error retrieving resource lock %v: %v&quot;, le.config.Lock.Describe(), err)</span><br><span class=\"line\">\t\t\treturn false</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t// 没有获取到资源锁，开始创建资源锁，若创建成功则成为 leader </span><br><span class=\"line\">\t\tif err = le.config.Lock.Create(leaderElectionRecord); err != nil &#123;</span><br><span class=\"line\">\t\t\tglog.Errorf(&quot;error initially creating leader election record: %v&quot;, err)</span><br><span class=\"line\">\t\t\treturn false</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tle.observedRecord = leaderElectionRecord</span><br><span class=\"line\">\t\tle.observedTime = le.clock.Now()</span><br><span class=\"line\">\t\treturn true</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 2、获取资源锁后检查当前 id 是不是 leader</span><br><span class=\"line\">\tif !reflect.DeepEqual(le.observedRecord, *oldLeaderElectionRecord) &#123;</span><br><span class=\"line\">\t\tle.observedRecord = *oldLeaderElectionRecord</span><br><span class=\"line\">\t\tle.observedTime = le.clock.Now()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t// 如果资源锁没有过期且当前 id 不是 Leader，直接返回</span><br><span class=\"line\">\tif le.observedTime.Add(le.config.LeaseDuration).After(now.Time) &amp;&amp;</span><br><span class=\"line\">\t\t!le.IsLeader() &#123;</span><br><span class=\"line\">\t\tglog.V(4).Infof(&quot;lock is held by %v and has not yet expired&quot;, oldLeaderElectionRecord.HolderIdentity)</span><br><span class=\"line\">\t\treturn false</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 3、如果当前 id 是 Leader，将对应字段的时间改成当前时间，准备续租</span><br><span class=\"line\">\t// 如果是非 Leader 节点则抢夺资源锁</span><br><span class=\"line\">\tif le.IsLeader() &#123;</span><br><span class=\"line\">\t\tleaderElectionRecord.AcquireTime = oldLeaderElectionRecord.AcquireTime</span><br><span class=\"line\">\t\tleaderElectionRecord.LeaderTransitions = oldLeaderElectionRecord.LeaderTransitions</span><br><span class=\"line\">\t&#125; else &#123;</span><br><span class=\"line\">\t\tleaderElectionRecord.LeaderTransitions = oldLeaderElectionRecord.LeaderTransitions + 1</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 更新资源</span><br><span class=\"line\">        // 对于 Leader 来说，这是一个续租的过程</span><br><span class=\"line\">        // 对于非 Leader 节点（仅在上一个资源锁已经过期），这是一个更新锁所有权的过程</span><br><span class=\"line\">\tif err = le.config.Lock.Update(leaderElectionRecord); err != nil &#123;</span><br><span class=\"line\">\t\tglog.Errorf(&quot;Failed to update lock: %v&quot;, err)</span><br><span class=\"line\">\t\treturn false</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tle.observedRecord = leaderElectionRecord</span><br><span class=\"line\">\tle.observedTime = le.clock.Now()</span><br><span class=\"line\">\treturn true</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的这个函数的主要逻辑：</p>\n<ul>\n<li>1、获取 ElectionRecord 记录，如果没有则创建一条新的 ElectionRecord 记录，创建成功则表示获取到锁并成为 leader 了。</li>\n<li>2、当获取到资源锁后开始检查其中的信息，比较当前 id 是不是 leader 以及资源锁有没有过期，如果资源锁没有过期且当前 id 不是 Leader，则直接返回。</li>\n<li>3、如果当前 id 是 Leader，将对应字段的时间改成当前时间，更新资源锁进行续租。</li>\n<li>4、如果当前 id 不是 Leader 但是资源锁已经过期了，则抢夺资源锁，抢夺成功则成为 leader 否则返回。</li>\n</ul>\n<p>最后是 renew 方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (le *LeaderElector) renew(ctx context.Context) &#123;</span><br><span class=\"line\">\tctx, cancel := context.WithCancel(ctx)</span><br><span class=\"line\">\tdefer cancel()</span><br><span class=\"line\">\twait.Until(func() &#123;</span><br><span class=\"line\">\t\ttimeoutCtx, timeoutCancel := context.WithTimeout(ctx, le.config.RenewDeadline)</span><br><span class=\"line\">\t\tdefer timeoutCancel()</span><br><span class=\"line\">                // 每间隔 RetryPeriod 就执行 tryAcquireOrRenew()</span><br><span class=\"line\">                // 如果 tryAcquireOrRenew() 返回 false 说明续租失败</span><br><span class=\"line\">\t\terr := wait.PollImmediateUntil(le.config.RetryPeriod, func() (bool, error) &#123;</span><br><span class=\"line\">\t\t\tdone := make(chan bool, 1)</span><br><span class=\"line\">\t\t\tgo func() &#123;</span><br><span class=\"line\">\t\t\t\tdefer close(done)</span><br><span class=\"line\">\t\t\t\tdone &lt;- le.tryAcquireOrRenew()</span><br><span class=\"line\">\t\t\t&#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tselect &#123;</span><br><span class=\"line\">\t\t\tcase &lt;-timeoutCtx.Done():</span><br><span class=\"line\">\t\t\t\treturn false, fmt.Errorf(&quot;failed to tryAcquireOrRenew %s&quot;, timeoutCtx.Err())</span><br><span class=\"line\">\t\t\tcase result := &lt;-done:</span><br><span class=\"line\">\t\t\t\treturn result, nil</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;, timeoutCtx.Done())</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tle.maybeReportTransition()</span><br><span class=\"line\">\t\tdesc := le.config.Lock.Describe()</span><br><span class=\"line\">\t\tif err == nil &#123;</span><br><span class=\"line\">\t\t\tglog.V(4).Infof(&quot;successfully renewed lease %v&quot;, desc)</span><br><span class=\"line\">\t\t\treturn</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t// 续租失败，说明已经不是 Leader，然后程序 panic</span><br><span class=\"line\">\t\tle.config.Lock.RecordEvent(&quot;stopped leading&quot;)</span><br><span class=\"line\">\t\tglog.Infof(&quot;failed to renew lease %v: %v&quot;, desc, err)</span><br><span class=\"line\">\t\tcancel()</span><br><span class=\"line\">\t&#125;, le.config.RetryPeriod, ctx.Done())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>获取到锁之后定期进行更新，renew 只有在获取锁之后才会调用，它会通过持续更新资源锁的数据，来确保继续持有已获得的锁，保持自己的 leader 状态。</p>\n<h4 id=\"Leader-Election-功能的使用\"><a href=\"#Leader-Election-功能的使用\" class=\"headerlink\" title=\"Leader Election 功能的使用\"></a>Leader Election 功能的使用</h4><p>以下是一个 demo，使用 k8s 中 <code>k8s.io/client-go/tools/leaderelection</code> 进行一个演示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;context&quot;</span><br><span class=\"line\">\t&quot;flag&quot;</span><br><span class=\"line\">\t&quot;fmt&quot;</span><br><span class=\"line\">\t&quot;os&quot;</span><br><span class=\"line\">\t&quot;time&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&quot;github.com/golang/glog&quot;</span><br><span class=\"line\">\t&quot;k8s.io/api/core/v1&quot;</span><br><span class=\"line\">\t&quot;k8s.io/client-go/kubernetes&quot;</span><br><span class=\"line\">\t&quot;k8s.io/client-go/kubernetes/scheme&quot;</span><br><span class=\"line\">\tv1core &quot;k8s.io/client-go/kubernetes/typed/core/v1&quot;</span><br><span class=\"line\">\t&quot;k8s.io/client-go/tools/clientcmd&quot;</span><br><span class=\"line\">\t&quot;k8s.io/client-go/tools/leaderelection&quot;</span><br><span class=\"line\">\t&quot;k8s.io/client-go/tools/leaderelection/resourcelock&quot;</span><br><span class=\"line\">\t&quot;k8s.io/client-go/tools/record&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">var (</span><br><span class=\"line\">\tmasterURL  string</span><br><span class=\"line\">\tkubeconfig string</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func init() &#123;</span><br><span class=\"line\">\tflag.StringVar(&amp;kubeconfig, &quot;kubeconfig&quot;, &quot;&quot;, &quot;Path to a kubeconfig. Only required if out-of-cluster.&quot;)</span><br><span class=\"line\">\tflag.StringVar(&amp;masterURL, &quot;master&quot;, &quot;&quot;, &quot;The address of the Kubernetes API server. Overrides any value in kubeconfig. Only required if out-of-cluster.&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">\tflag.Set(&quot;logtostderr&quot;, &quot;true&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\tflag.Parse()</span><br><span class=\"line\">\tdefer glog.Flush()</span><br><span class=\"line\"></span><br><span class=\"line\">\tid, err := os.Hostname()</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\tpanic(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// 加载 kubeconfig 配置</span><br><span class=\"line\">\tcfg, err := clientcmd.BuildConfigFromFlags(masterURL, kubeconfig)</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\tglog.Fatalf(&quot;Error building kubeconfig: %s&quot;, err.Error())</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 创建 kubeclient</span><br><span class=\"line\">\tkubeClient, err := kubernetes.NewForConfig(cfg)</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\tglog.Fatalf(&quot;Error building kubernetes clientset: %s&quot;, err.Error())</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 初始化 eventRecorder</span><br><span class=\"line\">\teventBroadcaster := record.NewBroadcaster()</span><br><span class=\"line\">\teventRecorder := eventBroadcaster.NewRecorder(scheme.Scheme, v1.EventSource&#123;Component: &quot;test-1&quot;&#125;)</span><br><span class=\"line\">\teventBroadcaster.StartLogging(glog.Infof)</span><br><span class=\"line\">\teventBroadcaster.StartRecordingToSink(&amp;v1core.EventSinkImpl&#123;Interface: kubeClient.CoreV1().Events(&quot;&quot;)&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\trun := func(ctx context.Context) &#123;</span><br><span class=\"line\">\t\tfmt.Println(&quot;run.........&quot;)</span><br><span class=\"line\">\t\tselect &#123;&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tid = id + &quot;_&quot; + &quot;1&quot;</span><br><span class=\"line\">\trl, err := resourcelock.New(&quot;endpoints&quot;,</span><br><span class=\"line\">\t\t&quot;kube-system&quot;,</span><br><span class=\"line\">\t\t&quot;test&quot;,</span><br><span class=\"line\">\t\tkubeClient.CoreV1(),</span><br><span class=\"line\">\t\tresourcelock.ResourceLockConfig&#123;</span><br><span class=\"line\">\t\t\tIdentity:      id,</span><br><span class=\"line\">\t\t\tEventRecorder: eventRecorder,</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\tglog.Fatalf(&quot;error creating lock: %v&quot;, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tleaderelection.RunOrDie(context.TODO(), leaderelection.LeaderElectionConfig&#123;</span><br><span class=\"line\">\t\tLock:          rl,</span><br><span class=\"line\">\t\tLeaseDuration: 15 * time.Second,</span><br><span class=\"line\">\t\tRenewDeadline: 10 * time.Second,</span><br><span class=\"line\">\t\tRetryPeriod:   2 * time.Second,</span><br><span class=\"line\">\t\tCallbacks: leaderelection.LeaderCallbacks&#123;</span><br><span class=\"line\">\t\t\tOnStartedLeading: run,</span><br><span class=\"line\">\t\t\tOnStoppedLeading: func() &#123;</span><br><span class=\"line\">\t\t\t\tglog.Info(&quot;leaderelection lost&quot;)</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tName: &quot;test-1&quot;,</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分别使用多个 hostname 同时运行后并测试 leader 切换，可以在 events 中看到 leader 切换的记录：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># kubectl describe endpoints test  -n kube-system</span><br><span class=\"line\">Name:         test</span><br><span class=\"line\">Namespace:    kube-system</span><br><span class=\"line\">Labels:       &lt;none&gt;</span><br><span class=\"line\">Annotations:  control-plane.alpha.kubernetes.io/leader=&#123;&quot;holderIdentity&quot;:&quot;localhost_2&quot;,&quot;leaseDurationSeconds&quot;:15,&quot;acquireTime&quot;:&quot;2019-03-10T08:47:42Z&quot;,&quot;renewTime&quot;:&quot;2019-03-10T08:47:44Z&quot;,&quot;leaderTransitions&quot;:2&#125;</span><br><span class=\"line\">Subsets:</span><br><span class=\"line\">Events:</span><br><span class=\"line\">  Type    Reason          Age   From    Message</span><br><span class=\"line\">  ----    ------          ----  ----    -------</span><br><span class=\"line\">  Normal  LeaderElection  50s   test-1  localhost_1 became leader</span><br><span class=\"line\">  Normal  LeaderElection  5s    test-2  localhost_2 became leader</span><br></pre></td></tr></table></figure>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>本文讲述了 kube-controller-manager 使用 HA 的方式启动后 leader 选举过程的实现说明，k8s 中通过创建 endpoints 资源以及对该资源的持续更新来实现资源锁轮转的过程。但是相对于其他分布式锁的实现，普遍是直接基于现有的中间件实现，比如 redis、zookeeper、etcd 等，其所有对锁的操作都是原子性的，那 k8s 选举过程中的原子操作是如何实现的？k8s 中的原子操作最终也是通过 etcd 实现的，其在做 update 更新锁的操作时采用的是乐观锁，通过对比 resourceVersion 实现的，详细的实现下节再讲。</p>\n<p><img src=\"http://cdn.tianfeiyu.com/api-resource-1.png\" alt=\"api resource\"></p>\n<p>参考文档：<br><a href=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.10/\" target=\"_blank\" rel=\"noopener\">API OVERVIEW</a><br><a href=\"https://kubernetes.io/blog/2016/01/simple-leader-election-with-kubernetes/\" target=\"_blank\" rel=\"noopener\">Simple leader election with Kubernetes and Docker</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>生产环境中为了保障业务的稳定性，集群都需要高可用部署，k8s 中 apiserver 是无状态的，可以横向扩容保证其高可用，kube-controller-manager 和 kube-scheduler 两个组件通过 leader 选举保障高可用，即正常情况下 kube-scheduler 或 kube-manager-controller 组件的多个副本只有一个是处于业务逻辑运行状态，其它副本则不断的尝试去获取锁，去竞争 leader，直到自己成为leader。如果正在运行的 leader 因某种原因导致当前进程退出，或者锁丢失，则由其它副本去竞争新的 leader，获取 leader 继而执行业务逻辑。</p>\n<blockquote>\n<p>kubernetes 版本： v1.12 </p>\n</blockquote>\n<h4 id=\"组件高可用的使用\"><a href=\"#组件高可用的使用\" class=\"headerlink\" title=\"组件高可用的使用\"></a>组件高可用的使用</h4><p>k8s 中已经为 kube-controller-manager、kube-scheduler 组件实现了高可用，只需在每个组件的配置文件中添加 <code>--leader-elect=true</code> 参数即可启用。在每个组件的日志中可以看到 HA 相关参数的默认值：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I0306 19:17:14.109511  161798 flags.go:33] FLAG: --leader-elect=&quot;true&quot;</span><br><span class=\"line\">I0306 19:17:14.109513  161798 flags.go:33] FLAG: --leader-elect-lease-duration=&quot;15s&quot;</span><br><span class=\"line\">I0306 19:17:14.109516  161798 flags.go:33] FLAG: --leader-elect-renew-deadline=&quot;10s&quot;</span><br><span class=\"line\">I0306 19:17:14.109518  161798 flags.go:33] FLAG: --leader-elect-resource-lock=&quot;endpoints&quot;</span><br><span class=\"line\">I0306 19:17:14.109520  161798 flags.go:33] FLAG: --leader-elect-retry-period=&quot;2s&quot;</span><br></pre></td></tr></table></figure>\n<p>kubernetes 中查看组件 leader 的方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get endpoints kube-controller-manager --namespace=kube-system -o yaml &amp;&amp; </span><br><span class=\"line\">  kubectl get endpoints kube-scheduler --namespace=kube-system -o yaml</span><br></pre></td></tr></table></figure>\n<p>当前组件 leader 的 hostname 会写在 annotation 的 control-plane.alpha.kubernetes.io/leader 字段里。</p>\n<h4 id=\"Leader-Election-的实现\"><a href=\"#Leader-Election-的实现\" class=\"headerlink\" title=\"Leader Election 的实现\"></a>Leader Election 的实现</h4><p>Leader Election 的过程本质上是一个竞争分布式锁的过程。在 Kubernetes 中，这个分布式锁是以创建 Endpoint 资源的形式进行，谁先创建了该资源，谁就先获得锁，之后会对该资源不断更新以保持锁的拥有权。</p>\n<p>下面开始讲述 kube-controller-manager 中 leader 的竞争过程，cm 在加载及配置完参数后就开始执行 run 方法了。代码在 <code>k8s.io/kubernetes/cmd/kube-controller-manager/app/controllermanager.go</code> 中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Run runs the KubeControllerManagerOptions.  This should never exit.</span><br><span class=\"line\">func Run(c *config.CompletedConfig, stopCh &lt;-chan struct&#123;&#125;) error &#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t\t// kube-controller-manager 的核心</span><br><span class=\"line\">\t\trun := func(ctx context.Context) &#123;</span><br><span class=\"line\">\t\trootClientBuilder := controller.SimpleControllerClientBuilder&#123;</span><br><span class=\"line\">\t\t\tClientConfig: c.Kubeconfig,</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tvar clientBuilder controller.ControllerClientBuilder</span><br><span class=\"line\">\t\tif c.ComponentConfig.KubeCloudShared.UseServiceAccountCredentials &#123;</span><br><span class=\"line\">\t\t\tif len(c.ComponentConfig.SAController.ServiceAccountKeyFile) == 0 &#123;</span><br><span class=\"line\">\t\t\t\t// It&apos;c possible another controller process is creating the tokens for us.</span><br><span class=\"line\">\t\t\t\t// If one isn&apos;t, we&apos;ll timeout and exit when our client builder is unable to create the tokens.</span><br><span class=\"line\">\t\t\t\tglog.Warningf(&quot;--use-service-account-credentials was specified without providing a --service-account-private-key-file&quot;)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tclientBuilder = controller.SAControllerClientBuilder&#123;</span><br><span class=\"line\">\t\t\t\tClientConfig:         restclient.AnonymousClientConfig(c.Kubeconfig),</span><br><span class=\"line\">\t\t\t\tCoreClient:           c.Client.CoreV1(),</span><br><span class=\"line\">\t\t\t\tAuthenticationClient: c.Client.AuthenticationV1(),</span><br><span class=\"line\">\t\t\t\tNamespace:            &quot;kube-system&quot;,</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\tclientBuilder = rootClientBuilder</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcontrollerContext, err := CreateControllerContext(c, rootClientBuilder, clientBuilder, ctx.Done())</span><br><span class=\"line\">\t\tif err != nil &#123;</span><br><span class=\"line\">\t\t\tglog.Fatalf(&quot;error building controller context: %v&quot;, err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tsaTokenControllerInitFunc := serviceAccountTokenControllerStarter&#123;rootClientBuilder: rootClientBuilder&#125;.startServiceAccountTokenController</span><br><span class=\"line\">\t\t// 初始化及启动所有的 controller</span><br><span class=\"line\">\t\tif err := StartControllers(controllerContext, saTokenControllerInitFunc, NewControllerInitializers(controllerContext.LoopMode), unsecuredMux); err != nil &#123;</span><br><span class=\"line\">\t\t\tglog.Fatalf(&quot;error starting controllers: %v&quot;, err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tcontrollerContext.InformerFactory.Start(controllerContext.Stop)</span><br><span class=\"line\">\t\tclose(controllerContext.InformersStarted)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tselect &#123;&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 如果 LeaderElect 参数未配置,说明 controller-manager 是单点启动的，</span><br><span class=\"line\">    // 则直接调用 run 方法来启动需要被启动的控制器即可。</span><br><span class=\"line\">    if !c.ComponentConfig.Generic.LeaderElection.LeaderElect &#123;</span><br><span class=\"line\">        run(context.TODO())</span><br><span class=\"line\">        panic(&quot;unreachable&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 如果 LeaderElect 参数配置为 true,说明 controller-manager 是以 HA 方式启动的，</span><br><span class=\"line\">    // 则执行下面的代码进行 leader 选举，选举出的 leader 会回调 run 方法。</span><br><span class=\"line\">    id, err := os.Hostname()</span><br><span class=\"line\">    if err != nil &#123;</span><br><span class=\"line\">        return err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // add a uniquifier so that two processes on the same host don&apos;t accidentally both become active</span><br><span class=\"line\">    id = id + &quot;_&quot; + string(uuid.NewUUID())</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 初始化资源锁</span><br><span class=\"line\">    rl, err := resourcelock.New(c.ComponentConfig.Generic.LeaderElection.ResourceLock,</span><br><span class=\"line\">        &quot;kube-system&quot;,</span><br><span class=\"line\">        &quot;kube-controller-manager&quot;,</span><br><span class=\"line\">        c.LeaderElectionClient.CoreV1(),</span><br><span class=\"line\">        resourcelock.ResourceLockConfig&#123;</span><br><span class=\"line\">            Identity:      id,</span><br><span class=\"line\">            EventRecorder: c.EventRecorder,</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    if err != nil &#123;</span><br><span class=\"line\">        glog.Fatalf(&quot;error creating lock: %v&quot;, err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 进入到选举的流程</span><br><span class=\"line\">    leaderelection.RunOrDie(context.TODO(), leaderelection.LeaderElectionConfig&#123;</span><br><span class=\"line\">        Lock:          rl,</span><br><span class=\"line\">        LeaseDuration: c.ComponentConfig.Generic.LeaderElection.LeaseDuration.Duration,</span><br><span class=\"line\">        RenewDeadline: c.ComponentConfig.Generic.LeaderElection.RenewDeadline.Duration,</span><br><span class=\"line\">        RetryPeriod:   c.ComponentConfig.Generic.LeaderElection.RetryPeriod.Duration,</span><br><span class=\"line\">        Callbacks: leaderelection.LeaderCallbacks&#123;</span><br><span class=\"line\">            OnStartedLeading: run,</span><br><span class=\"line\">            OnStoppedLeading: func() &#123;</span><br><span class=\"line\">                glog.Fatalf(&quot;leaderelection lost&quot;)</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        WatchDog: electionChecker,</span><br><span class=\"line\">        Name:     &quot;kube-controller-manager&quot;,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    panic(&quot;unreachable&quot;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>1、初始化资源锁，kubernetes 中默认的资源锁使用 <code>endpoints</code>，也就是 c.ComponentConfig.Generic.LeaderElection.ResourceLock 的值为 “endpoints”，在代码中我并没有找到对 ResourceLock 初始化的地方，只看到了对该参数的说明以及日志中配置的默认值：</li>\n</ul>\n<p><img src=\"http://cdn.tianfeiyu.com/leader-1.png\" alt=\"\"></p>\n<p>​在初始化资源锁的时候还传入了 EventRecorder，其作用是当 leader 发生变化的时候会将对应的 events 发送到 apiserver。</p>\n<ul>\n<li><p>2、rl 资源锁被用于 controller-manager 进行 leader 的选举，RunOrDie 方法中就是 leader 的选举过程了。</p>\n</li>\n<li><p>3、Callbacks 中定义了在切换状态后需要执行的操作，当成为 leader 后会执行 OnStartedLeading 中的 run 方法，run 方法是 controller-manager 的核心，run 方法中会初始化并启动所包含资源的 controller，以下是 kube-controller-manager 中所有的 controller：</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func NewControllerInitializers(loopMode ControllerLoopMode) map[string]InitFunc &#123;</span><br><span class=\"line\">\tcontrollers := map[string]InitFunc&#123;&#125;</span><br><span class=\"line\">\tcontrollers[&quot;endpoint&quot;] = startEndpointController</span><br><span class=\"line\">\tcontrollers[&quot;replicationcontroller&quot;] = startReplicationController</span><br><span class=\"line\">\tcontrollers[&quot;podgc&quot;] = startPodGCController</span><br><span class=\"line\">\tcontrollers[&quot;resourcequota&quot;] = startResourceQuotaController</span><br><span class=\"line\">\tcontrollers[&quot;namespace&quot;] = startNamespaceController</span><br><span class=\"line\">\tcontrollers[&quot;serviceaccount&quot;] = startServiceAccountController</span><br><span class=\"line\">\tcontrollers[&quot;garbagecollector&quot;] = startGarbageCollectorController</span><br><span class=\"line\">\tcontrollers[&quot;daemonset&quot;] = startDaemonSetController</span><br><span class=\"line\">\tcontrollers[&quot;job&quot;] = startJobController</span><br><span class=\"line\">\tcontrollers[&quot;deployment&quot;] = startDeploymentController</span><br><span class=\"line\">\tcontrollers[&quot;replicaset&quot;] = startReplicaSetController</span><br><span class=\"line\">\tcontrollers[&quot;horizontalpodautoscaling&quot;] = startHPAController</span><br><span class=\"line\">\tcontrollers[&quot;disruption&quot;] = startDisruptionController</span><br><span class=\"line\">\tcontrollers[&quot;statefulset&quot;] = startStatefulSetController</span><br><span class=\"line\">\tcontrollers[&quot;cronjob&quot;] = startCronJobController</span><br><span class=\"line\">\tcontrollers[&quot;csrsigning&quot;] = startCSRSigningController</span><br><span class=\"line\">\tcontrollers[&quot;csrapproving&quot;] = startCSRApprovingController</span><br><span class=\"line\">\tcontrollers[&quot;csrcleaner&quot;] = startCSRCleanerController</span><br><span class=\"line\">\tcontrollers[&quot;ttl&quot;] = startTTLController</span><br><span class=\"line\">\tcontrollers[&quot;bootstrapsigner&quot;] = startBootstrapSignerController</span><br><span class=\"line\">\tcontrollers[&quot;tokencleaner&quot;] = startTokenCleanerController</span><br><span class=\"line\">\tcontrollers[&quot;nodeipam&quot;] = startNodeIpamController</span><br><span class=\"line\">\tif loopMode == IncludeCloudLoops &#123;</span><br><span class=\"line\">\t\tcontrollers[&quot;service&quot;] = startServiceController</span><br><span class=\"line\">\t\tcontrollers[&quot;route&quot;] = startRouteController</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcontrollers[&quot;nodelifecycle&quot;] = startNodeLifecycleController</span><br><span class=\"line\">\tcontrollers[&quot;persistentvolume-binder&quot;] = startPersistentVolumeBinderController</span><br><span class=\"line\">\tcontrollers[&quot;attachdetach&quot;] = startAttachDetachController</span><br><span class=\"line\">\tcontrollers[&quot;persistentvolume-expander&quot;] = startVolumeExpandController</span><br><span class=\"line\">\tcontrollers[&quot;clusterrole-aggregation&quot;] = startClusterRoleAggregrationController</span><br><span class=\"line\">\tcontrollers[&quot;pvc-protection&quot;] = startPVCProtectionController</span><br><span class=\"line\">\tcontrollers[&quot;pv-protection&quot;] = startPVProtectionController</span><br><span class=\"line\">\tcontrollers[&quot;ttl-after-finished&quot;] = startTTLAfterFinishedController</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn controllers</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>OnStoppedLeading 是从 leader 状态切换为 slave 要执行的操作，此方法仅打印了一条日志。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func RunOrDie(ctx context.Context, lec LeaderElectionConfig) &#123;</span><br><span class=\"line\">    le, err := NewLeaderElector(lec)</span><br><span class=\"line\">    if err != nil &#123;</span><br><span class=\"line\">        panic(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if lec.WatchDog != nil &#123;</span><br><span class=\"line\">        lec.WatchDog.SetLeaderElection(le)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    le.Run(ctx)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 RunOrDie 中首先调用 NewLeaderElector 初始化了一个 LeaderElector 对象，然后执行 LeaderElector 的 run 方法进行选举。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (le *LeaderElector) Run(ctx context.Context) &#123;</span><br><span class=\"line\">\tdefer func() &#123;</span><br><span class=\"line\">\t\truntime.HandleCrash()</span><br><span class=\"line\">\t\tle.config.Callbacks.OnStoppedLeading()</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\tif !le.acquire(ctx) &#123;</span><br><span class=\"line\">\t\treturn // ctx signalled done</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tctx, cancel := context.WithCancel(ctx)</span><br><span class=\"line\">\tdefer cancel()</span><br><span class=\"line\">\tgo le.config.Callbacks.OnStartedLeading(ctx)</span><br><span class=\"line\">\tle.renew(ctx)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Run 中首先会执行 acquire 尝试获取锁，获取到锁之后会回调 OnStartedLeading 启动所需要的 controller，然后会执行 renew 方法定期更新锁，保持 leader 的状态。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (le *LeaderElector) acquire(ctx context.Context) bool &#123;</span><br><span class=\"line\">\tctx, cancel := context.WithCancel(ctx)</span><br><span class=\"line\">\tdefer cancel()</span><br><span class=\"line\">\tsucceeded := false</span><br><span class=\"line\">\tdesc := le.config.Lock.Describe()</span><br><span class=\"line\">\tglog.Infof(&quot;attempting to acquire leader lease  %v...&quot;, desc)</span><br><span class=\"line\">\twait.JitterUntil(func() &#123;</span><br><span class=\"line\">\t\t// 尝试创建或者续约资源锁</span><br><span class=\"line\">\t\tsucceeded = le.tryAcquireOrRenew()</span><br><span class=\"line\">\t\t// leader 可能发生了改变，在 maybeReportTransition 方法中会</span><br><span class=\"line\">\t\t// 执行相应的 OnNewLeader() 回调函数,代码中对 OnNewLeader() 并没有初始化</span><br><span class=\"line\">\t\tle.maybeReportTransition()</span><br><span class=\"line\">\t\tif !succeeded &#123;</span><br><span class=\"line\">\t\t\tglog.V(4).Infof(&quot;failed to acquire lease %v&quot;, desc)</span><br><span class=\"line\">\t\t\treturn</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tle.config.Lock.RecordEvent(&quot;became leader&quot;)</span><br><span class=\"line\">\t\tglog.Infof(&quot;successfully acquired lease %v&quot;, desc)</span><br><span class=\"line\">\t\tcancel()</span><br><span class=\"line\">\t&#125;, le.config.RetryPeriod, JitterFactor, true, ctx.Done())</span><br><span class=\"line\">\treturn succeeded</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 acquire 中首先初始化了一个 ctx，通过 wait.JitterUntil 周期性的去调用 le.tryAcquireOrRenew 方法来获取资源锁，直到获取为止。如果获取不到锁，则会以 RetryPeriod 为间隔不断尝试。如果获取到锁，就会关闭 ctx 通知 wait.JitterUntil 停止尝试，tryAcquireOrRenew 是最核心的方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (le *LeaderElector) tryAcquireOrRenew() bool &#123;</span><br><span class=\"line\">\tnow := metav1.Now()</span><br><span class=\"line\">\tleaderElectionRecord := rl.LeaderElectionRecord&#123;</span><br><span class=\"line\">\t\tHolderIdentity:       le.config.Lock.Identity(),</span><br><span class=\"line\">\t\tLeaseDurationSeconds: int(le.config.LeaseDuration / time.Second),</span><br><span class=\"line\">\t\tRenewTime:            now,</span><br><span class=\"line\">\t\tAcquireTime:          now,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 1、获取当前的资源锁</span><br><span class=\"line\">\toldLeaderElectionRecord, err := le.config.Lock.Get()</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\tif !errors.IsNotFound(err) &#123;</span><br><span class=\"line\">\t\t\tglog.Errorf(&quot;error retrieving resource lock %v: %v&quot;, le.config.Lock.Describe(), err)</span><br><span class=\"line\">\t\t\treturn false</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t// 没有获取到资源锁，开始创建资源锁，若创建成功则成为 leader </span><br><span class=\"line\">\t\tif err = le.config.Lock.Create(leaderElectionRecord); err != nil &#123;</span><br><span class=\"line\">\t\t\tglog.Errorf(&quot;error initially creating leader election record: %v&quot;, err)</span><br><span class=\"line\">\t\t\treturn false</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tle.observedRecord = leaderElectionRecord</span><br><span class=\"line\">\t\tle.observedTime = le.clock.Now()</span><br><span class=\"line\">\t\treturn true</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 2、获取资源锁后检查当前 id 是不是 leader</span><br><span class=\"line\">\tif !reflect.DeepEqual(le.observedRecord, *oldLeaderElectionRecord) &#123;</span><br><span class=\"line\">\t\tle.observedRecord = *oldLeaderElectionRecord</span><br><span class=\"line\">\t\tle.observedTime = le.clock.Now()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t// 如果资源锁没有过期且当前 id 不是 Leader，直接返回</span><br><span class=\"line\">\tif le.observedTime.Add(le.config.LeaseDuration).After(now.Time) &amp;&amp;</span><br><span class=\"line\">\t\t!le.IsLeader() &#123;</span><br><span class=\"line\">\t\tglog.V(4).Infof(&quot;lock is held by %v and has not yet expired&quot;, oldLeaderElectionRecord.HolderIdentity)</span><br><span class=\"line\">\t\treturn false</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 3、如果当前 id 是 Leader，将对应字段的时间改成当前时间，准备续租</span><br><span class=\"line\">\t// 如果是非 Leader 节点则抢夺资源锁</span><br><span class=\"line\">\tif le.IsLeader() &#123;</span><br><span class=\"line\">\t\tleaderElectionRecord.AcquireTime = oldLeaderElectionRecord.AcquireTime</span><br><span class=\"line\">\t\tleaderElectionRecord.LeaderTransitions = oldLeaderElectionRecord.LeaderTransitions</span><br><span class=\"line\">\t&#125; else &#123;</span><br><span class=\"line\">\t\tleaderElectionRecord.LeaderTransitions = oldLeaderElectionRecord.LeaderTransitions + 1</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 更新资源</span><br><span class=\"line\">        // 对于 Leader 来说，这是一个续租的过程</span><br><span class=\"line\">        // 对于非 Leader 节点（仅在上一个资源锁已经过期），这是一个更新锁所有权的过程</span><br><span class=\"line\">\tif err = le.config.Lock.Update(leaderElectionRecord); err != nil &#123;</span><br><span class=\"line\">\t\tglog.Errorf(&quot;Failed to update lock: %v&quot;, err)</span><br><span class=\"line\">\t\treturn false</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tle.observedRecord = leaderElectionRecord</span><br><span class=\"line\">\tle.observedTime = le.clock.Now()</span><br><span class=\"line\">\treturn true</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的这个函数的主要逻辑：</p>\n<ul>\n<li>1、获取 ElectionRecord 记录，如果没有则创建一条新的 ElectionRecord 记录，创建成功则表示获取到锁并成为 leader 了。</li>\n<li>2、当获取到资源锁后开始检查其中的信息，比较当前 id 是不是 leader 以及资源锁有没有过期，如果资源锁没有过期且当前 id 不是 Leader，则直接返回。</li>\n<li>3、如果当前 id 是 Leader，将对应字段的时间改成当前时间，更新资源锁进行续租。</li>\n<li>4、如果当前 id 不是 Leader 但是资源锁已经过期了，则抢夺资源锁，抢夺成功则成为 leader 否则返回。</li>\n</ul>\n<p>最后是 renew 方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (le *LeaderElector) renew(ctx context.Context) &#123;</span><br><span class=\"line\">\tctx, cancel := context.WithCancel(ctx)</span><br><span class=\"line\">\tdefer cancel()</span><br><span class=\"line\">\twait.Until(func() &#123;</span><br><span class=\"line\">\t\ttimeoutCtx, timeoutCancel := context.WithTimeout(ctx, le.config.RenewDeadline)</span><br><span class=\"line\">\t\tdefer timeoutCancel()</span><br><span class=\"line\">                // 每间隔 RetryPeriod 就执行 tryAcquireOrRenew()</span><br><span class=\"line\">                // 如果 tryAcquireOrRenew() 返回 false 说明续租失败</span><br><span class=\"line\">\t\terr := wait.PollImmediateUntil(le.config.RetryPeriod, func() (bool, error) &#123;</span><br><span class=\"line\">\t\t\tdone := make(chan bool, 1)</span><br><span class=\"line\">\t\t\tgo func() &#123;</span><br><span class=\"line\">\t\t\t\tdefer close(done)</span><br><span class=\"line\">\t\t\t\tdone &lt;- le.tryAcquireOrRenew()</span><br><span class=\"line\">\t\t\t&#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tselect &#123;</span><br><span class=\"line\">\t\t\tcase &lt;-timeoutCtx.Done():</span><br><span class=\"line\">\t\t\t\treturn false, fmt.Errorf(&quot;failed to tryAcquireOrRenew %s&quot;, timeoutCtx.Err())</span><br><span class=\"line\">\t\t\tcase result := &lt;-done:</span><br><span class=\"line\">\t\t\t\treturn result, nil</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;, timeoutCtx.Done())</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tle.maybeReportTransition()</span><br><span class=\"line\">\t\tdesc := le.config.Lock.Describe()</span><br><span class=\"line\">\t\tif err == nil &#123;</span><br><span class=\"line\">\t\t\tglog.V(4).Infof(&quot;successfully renewed lease %v&quot;, desc)</span><br><span class=\"line\">\t\t\treturn</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t// 续租失败，说明已经不是 Leader，然后程序 panic</span><br><span class=\"line\">\t\tle.config.Lock.RecordEvent(&quot;stopped leading&quot;)</span><br><span class=\"line\">\t\tglog.Infof(&quot;failed to renew lease %v: %v&quot;, desc, err)</span><br><span class=\"line\">\t\tcancel()</span><br><span class=\"line\">\t&#125;, le.config.RetryPeriod, ctx.Done())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>获取到锁之后定期进行更新，renew 只有在获取锁之后才会调用，它会通过持续更新资源锁的数据，来确保继续持有已获得的锁，保持自己的 leader 状态。</p>\n<h4 id=\"Leader-Election-功能的使用\"><a href=\"#Leader-Election-功能的使用\" class=\"headerlink\" title=\"Leader Election 功能的使用\"></a>Leader Election 功能的使用</h4><p>以下是一个 demo，使用 k8s 中 <code>k8s.io/client-go/tools/leaderelection</code> 进行一个演示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;context&quot;</span><br><span class=\"line\">\t&quot;flag&quot;</span><br><span class=\"line\">\t&quot;fmt&quot;</span><br><span class=\"line\">\t&quot;os&quot;</span><br><span class=\"line\">\t&quot;time&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&quot;github.com/golang/glog&quot;</span><br><span class=\"line\">\t&quot;k8s.io/api/core/v1&quot;</span><br><span class=\"line\">\t&quot;k8s.io/client-go/kubernetes&quot;</span><br><span class=\"line\">\t&quot;k8s.io/client-go/kubernetes/scheme&quot;</span><br><span class=\"line\">\tv1core &quot;k8s.io/client-go/kubernetes/typed/core/v1&quot;</span><br><span class=\"line\">\t&quot;k8s.io/client-go/tools/clientcmd&quot;</span><br><span class=\"line\">\t&quot;k8s.io/client-go/tools/leaderelection&quot;</span><br><span class=\"line\">\t&quot;k8s.io/client-go/tools/leaderelection/resourcelock&quot;</span><br><span class=\"line\">\t&quot;k8s.io/client-go/tools/record&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">var (</span><br><span class=\"line\">\tmasterURL  string</span><br><span class=\"line\">\tkubeconfig string</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func init() &#123;</span><br><span class=\"line\">\tflag.StringVar(&amp;kubeconfig, &quot;kubeconfig&quot;, &quot;&quot;, &quot;Path to a kubeconfig. Only required if out-of-cluster.&quot;)</span><br><span class=\"line\">\tflag.StringVar(&amp;masterURL, &quot;master&quot;, &quot;&quot;, &quot;The address of the Kubernetes API server. Overrides any value in kubeconfig. Only required if out-of-cluster.&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">\tflag.Set(&quot;logtostderr&quot;, &quot;true&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\tflag.Parse()</span><br><span class=\"line\">\tdefer glog.Flush()</span><br><span class=\"line\"></span><br><span class=\"line\">\tid, err := os.Hostname()</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\tpanic(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// 加载 kubeconfig 配置</span><br><span class=\"line\">\tcfg, err := clientcmd.BuildConfigFromFlags(masterURL, kubeconfig)</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\tglog.Fatalf(&quot;Error building kubeconfig: %s&quot;, err.Error())</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 创建 kubeclient</span><br><span class=\"line\">\tkubeClient, err := kubernetes.NewForConfig(cfg)</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\tglog.Fatalf(&quot;Error building kubernetes clientset: %s&quot;, err.Error())</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 初始化 eventRecorder</span><br><span class=\"line\">\teventBroadcaster := record.NewBroadcaster()</span><br><span class=\"line\">\teventRecorder := eventBroadcaster.NewRecorder(scheme.Scheme, v1.EventSource&#123;Component: &quot;test-1&quot;&#125;)</span><br><span class=\"line\">\teventBroadcaster.StartLogging(glog.Infof)</span><br><span class=\"line\">\teventBroadcaster.StartRecordingToSink(&amp;v1core.EventSinkImpl&#123;Interface: kubeClient.CoreV1().Events(&quot;&quot;)&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\trun := func(ctx context.Context) &#123;</span><br><span class=\"line\">\t\tfmt.Println(&quot;run.........&quot;)</span><br><span class=\"line\">\t\tselect &#123;&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tid = id + &quot;_&quot; + &quot;1&quot;</span><br><span class=\"line\">\trl, err := resourcelock.New(&quot;endpoints&quot;,</span><br><span class=\"line\">\t\t&quot;kube-system&quot;,</span><br><span class=\"line\">\t\t&quot;test&quot;,</span><br><span class=\"line\">\t\tkubeClient.CoreV1(),</span><br><span class=\"line\">\t\tresourcelock.ResourceLockConfig&#123;</span><br><span class=\"line\">\t\t\tIdentity:      id,</span><br><span class=\"line\">\t\t\tEventRecorder: eventRecorder,</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\tglog.Fatalf(&quot;error creating lock: %v&quot;, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tleaderelection.RunOrDie(context.TODO(), leaderelection.LeaderElectionConfig&#123;</span><br><span class=\"line\">\t\tLock:          rl,</span><br><span class=\"line\">\t\tLeaseDuration: 15 * time.Second,</span><br><span class=\"line\">\t\tRenewDeadline: 10 * time.Second,</span><br><span class=\"line\">\t\tRetryPeriod:   2 * time.Second,</span><br><span class=\"line\">\t\tCallbacks: leaderelection.LeaderCallbacks&#123;</span><br><span class=\"line\">\t\t\tOnStartedLeading: run,</span><br><span class=\"line\">\t\t\tOnStoppedLeading: func() &#123;</span><br><span class=\"line\">\t\t\t\tglog.Info(&quot;leaderelection lost&quot;)</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tName: &quot;test-1&quot;,</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分别使用多个 hostname 同时运行后并测试 leader 切换，可以在 events 中看到 leader 切换的记录：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># kubectl describe endpoints test  -n kube-system</span><br><span class=\"line\">Name:         test</span><br><span class=\"line\">Namespace:    kube-system</span><br><span class=\"line\">Labels:       &lt;none&gt;</span><br><span class=\"line\">Annotations:  control-plane.alpha.kubernetes.io/leader=&#123;&quot;holderIdentity&quot;:&quot;localhost_2&quot;,&quot;leaseDurationSeconds&quot;:15,&quot;acquireTime&quot;:&quot;2019-03-10T08:47:42Z&quot;,&quot;renewTime&quot;:&quot;2019-03-10T08:47:44Z&quot;,&quot;leaderTransitions&quot;:2&#125;</span><br><span class=\"line\">Subsets:</span><br><span class=\"line\">Events:</span><br><span class=\"line\">  Type    Reason          Age   From    Message</span><br><span class=\"line\">  ----    ------          ----  ----    -------</span><br><span class=\"line\">  Normal  LeaderElection  50s   test-1  localhost_1 became leader</span><br><span class=\"line\">  Normal  LeaderElection  5s    test-2  localhost_2 became leader</span><br></pre></td></tr></table></figure>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>本文讲述了 kube-controller-manager 使用 HA 的方式启动后 leader 选举过程的实现说明，k8s 中通过创建 endpoints 资源以及对该资源的持续更新来实现资源锁轮转的过程。但是相对于其他分布式锁的实现，普遍是直接基于现有的中间件实现，比如 redis、zookeeper、etcd 等，其所有对锁的操作都是原子性的，那 k8s 选举过程中的原子操作是如何实现的？k8s 中的原子操作最终也是通过 etcd 实现的，其在做 update 更新锁的操作时采用的是乐观锁，通过对比 resourceVersion 实现的，详细的实现下节再讲。</p>\n<p><img src=\"http://cdn.tianfeiyu.com/api-resource-1.png\" alt=\"api resource\"></p>\n<p>参考文档：<br><a href=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.10/\" target=\"_blank\" rel=\"noopener\">API OVERVIEW</a><br><a href=\"https://kubernetes.io/blog/2016/01/simple-leader-election-with-kubernetes/\" target=\"_blank\" rel=\"noopener\">Simple leader election with Kubernetes and Docker</a></p>\n"},{"title":"kubernetes 指标采集组件 metrics-server 的部署","date":"2019-04-14T13:27:30.000Z","type":"metrics-server","_content":"\n[metrics-server](https://github.com/kubernetes-incubator/metrics-server) 是一个采集集群中指标的组件，类似于 cadvisor，在 v1.8 版本中引入，官方将其作为 heapster 的替代者，metric-server 属于 core metrics(核心指标)，提供 API metrics.k8s.io，仅可以查看 node、pod 当前 CPU/Memory/Storage 的资源使用情况，也支持通过 Metrics API 的形式获取，以此数据提供给 Dashboard、HPA、scheduler 等使用。\n\n#### 一、开启 API Aggregation\n\n由于 metrics-server 需要暴露 API，但 k8s 的 API 要统一管理，如何将 apiserver 的请求转发给 metrics-server ，解决方案就是使用 [kube-aggregator](https://github.com/kubernetes/kube-aggregator) ，所以在部署 metrics-server 之前，需要在 kube-apiserver 中开启 API Aggregation，即增加以下配置：\n\n```\n--proxy-client-cert-file=/etc/kubernetes/certs/proxy.crt\n--proxy-client-key-file=/etc/kubernetes/certs/proxy.key\n--requestheader-client-ca-file=/etc/kubernetes/certs/proxy-ca.crt\n--requestheader-allowed-names=aggregator\n--requestheader-extra-headers-prefix=X-Remote-Extra-\n--requestheader-group-headers=X-Remote-Group\n--requestheader-username-headers=X-Remote-User\n```\n\n如果kube-proxy没有在Master上面运行，还需要配置\n\n```\n--enable-aggregator-routing=true\n```\n\n[kube-aggregator](https://github.com/kubernetes/kube-aggregator)  的详细设计文档请参考：[configure-aggregation-layer](https://kubernetes.io/docs/tasks/access-kubernetes-api/configure-aggregation-layer/)\n\n#### 二、部署 metrics-server\n\n##### 1、获取配置文件\n\n```\n$ git clone  https://github.com/kubernetes/kubernetes\n$ cd  kubernetes/cluster/addons/metrics-server/\n```\n\n##### 2、修改 metrics-server 配置参数\n\n修改 `resource-reader.yaml` 文件：\n\n```\nrules:\n- apiGroups:\n  - \"\"\n  resources:\n  - pods\n  - nodes\n  - nodes/stats    #新增这一行\n  - namespaces\n  verbs:\n  - get\n  - list\n  - watch\n```\n\n修改 `metrics-server-deployment.yaml`文件:\n\n```\n\n      ......\n      # metrics-server containers 启动参数作如下修改：\n      containers:\n      - name: metrics-server\n        image: k8s.gcr.io/metrics-server-amd64:v0.3.1\n        command:\n        - /metrics-server\n        - --metric-resolution=30s\n        - --kubelet-insecure-tls\n        - --kubelet-preferred-address-types=InternalIP,Hostname,InternalDNS,ExternalDNS,ExternalIP\n        # These are needed for GKE, which doesn't support secure communication yet.\n        # Remove these lines for non-GKE clusters, and when GKE supports token-based auth.\n        #- --kubelet-port=10255\n        #- --deprecated-kubelet-completely-insecure=true\n\t\t\t\t\n\t......           \n\t# 修改启动参数：\n        command:\n          - /pod_nanny\n          - --config-dir=/etc/config\n          - --cpu=80m\n          - --extra-cpu=0.5m\n          - --memory=80Mi\n          - --extra-memory=8Mi\n          - --threshold=5\n          - --deployment=metrics-server-v0.3.1\n          - --container=metrics-server\n          - --poll-period=300000\n          - --estimator=exponential\n          # Specifies the smallest cluster (defined in number of nodes)\n          # resources will be scaled to.\n          #- --minClusterSize={{ metrics_server_min_cluster_size }}\n```\n\n##### 3、部署\n\n```\nkubectl apply -f .  \n```\n\nmetrics-server 的资源占用量会随着集群中的 Pod 数量的不断增长而不断上升，因此需要 addon-resizer 垂直扩缩 metrics-server。addon-resizer 依据集群中节点的数量线性地扩展 metrics-server，以保证其能够有能力提供完整的metrics API 服务，具体参考：[addon-resizer](https://github.com/kubernetes/autoscaler/tree/master/addon-resizer)。\n\n>  所需要的镜像可以在 [k8s-system-images](https://github.com/gosoon/k8s-system-images.git)  中下载。\n\n\n\n检查是否部署成功：\n\n```\n$ kubectl get apiservices | grep metrics\nv1beta1.metrics.k8s.io     kube-system/metrics-server   True        2m\n\n$ kubectl get pod -n kube-system\nmetrics-server-v0.3.1-65b6db6945-rpqwf   2/2     Running   0          20h\n```\n\n\n\n#### 三、metrics-server 的使用\n\n由于采集数据间隔为1分钟，等待数分钟后查看数据：\n\n```\n$ kubectl top node\nNAME             CPU(cores)   CPU%   MEMORY(bytes)   MEMORY%\nnode1            108m         2%     1532Mi          40%\n\n$ kubectl top pod -n kube-system\nNAME                                     CPU(cores)   MEMORY(bytes)\ncoredns-576cbf47c7-8v6n8                 2m           14Mi\ncoredns-576cbf47c7-qk7rk                 2m           10Mi\netcd-node1                               11m          80Mi\nkube-apiserver-node1                     17m          566Mi\nkube-controller-manager-node1            17m          67Mi\nkube-flannel-ds-amd64-8lvs2              2m           13Mi\nkube-proxy-85lhl                         3m           19Mi\nkube-scheduler-node1                     5m           16Mi\nmetrics-server-v0.3.1-65b6db6945-rpqwf   2m           19Mi\n```\n\nMetrics-server 可用 [API](https://github.com/kubernetes/community/blob/master/contributors/design-proposals/instrumentation/resource-metrics-api.md) 列表如下：\n\n- `http://127.0.0.1:8001/apis/metrics.k8s.io/v1beta1/nodes`\n- `http://127.0.0.1:8001/apis/metrics.k8s.io/v1beta1/nodes/<node-name>`\n- `http://127.0.0.1:8001/apis/metrics.k8s.io/v1beta1/pods`\n- `http://127.0.0.1:8001/apis/metrics.k8s.io/v1beta1/namespace/<namespace-name>/pods/<pod-name>`\n\n由于 k8s 在 v1.10 后废弃了 8080 端口，可以通过代理或者使用认证的方式访问这些 API：\n```\n$ kubectl proxy\n$ curl http://127.0.0.1:8001/apis/metrics.k8s.io/v1beta1/nodes\n```\n\n也可以直接通过 kubectl 命令来访问这些 API，比如：\n```\n$ kubectl get --raw /apis/metrics.k8s.io/v1beta1/nodes\n$ kubectl get --raw /apis/metrics.k8s.io/v1beta1/pods\n$ kubectl get --raw /apis/metrics.k8s.io/v1beta1/nodes/<node-name>\n$ kubectl get --raw /apis/metrics.k8s.io/v1beta1/namespace/<namespace-name>/pods/<pod-name>\n```\n\n","source":"_posts/k8s_metrics_server.md","raw":"---\ntitle: kubernetes 指标采集组件 metrics-server 的部署\ndate: 2019-04-14 21:27:30\ntags: [\"metrics-server\"]\ntype: \"metrics-server\"\n\n---\n\n[metrics-server](https://github.com/kubernetes-incubator/metrics-server) 是一个采集集群中指标的组件，类似于 cadvisor，在 v1.8 版本中引入，官方将其作为 heapster 的替代者，metric-server 属于 core metrics(核心指标)，提供 API metrics.k8s.io，仅可以查看 node、pod 当前 CPU/Memory/Storage 的资源使用情况，也支持通过 Metrics API 的形式获取，以此数据提供给 Dashboard、HPA、scheduler 等使用。\n\n#### 一、开启 API Aggregation\n\n由于 metrics-server 需要暴露 API，但 k8s 的 API 要统一管理，如何将 apiserver 的请求转发给 metrics-server ，解决方案就是使用 [kube-aggregator](https://github.com/kubernetes/kube-aggregator) ，所以在部署 metrics-server 之前，需要在 kube-apiserver 中开启 API Aggregation，即增加以下配置：\n\n```\n--proxy-client-cert-file=/etc/kubernetes/certs/proxy.crt\n--proxy-client-key-file=/etc/kubernetes/certs/proxy.key\n--requestheader-client-ca-file=/etc/kubernetes/certs/proxy-ca.crt\n--requestheader-allowed-names=aggregator\n--requestheader-extra-headers-prefix=X-Remote-Extra-\n--requestheader-group-headers=X-Remote-Group\n--requestheader-username-headers=X-Remote-User\n```\n\n如果kube-proxy没有在Master上面运行，还需要配置\n\n```\n--enable-aggregator-routing=true\n```\n\n[kube-aggregator](https://github.com/kubernetes/kube-aggregator)  的详细设计文档请参考：[configure-aggregation-layer](https://kubernetes.io/docs/tasks/access-kubernetes-api/configure-aggregation-layer/)\n\n#### 二、部署 metrics-server\n\n##### 1、获取配置文件\n\n```\n$ git clone  https://github.com/kubernetes/kubernetes\n$ cd  kubernetes/cluster/addons/metrics-server/\n```\n\n##### 2、修改 metrics-server 配置参数\n\n修改 `resource-reader.yaml` 文件：\n\n```\nrules:\n- apiGroups:\n  - \"\"\n  resources:\n  - pods\n  - nodes\n  - nodes/stats    #新增这一行\n  - namespaces\n  verbs:\n  - get\n  - list\n  - watch\n```\n\n修改 `metrics-server-deployment.yaml`文件:\n\n```\n\n      ......\n      # metrics-server containers 启动参数作如下修改：\n      containers:\n      - name: metrics-server\n        image: k8s.gcr.io/metrics-server-amd64:v0.3.1\n        command:\n        - /metrics-server\n        - --metric-resolution=30s\n        - --kubelet-insecure-tls\n        - --kubelet-preferred-address-types=InternalIP,Hostname,InternalDNS,ExternalDNS,ExternalIP\n        # These are needed for GKE, which doesn't support secure communication yet.\n        # Remove these lines for non-GKE clusters, and when GKE supports token-based auth.\n        #- --kubelet-port=10255\n        #- --deprecated-kubelet-completely-insecure=true\n\t\t\t\t\n\t......           \n\t# 修改启动参数：\n        command:\n          - /pod_nanny\n          - --config-dir=/etc/config\n          - --cpu=80m\n          - --extra-cpu=0.5m\n          - --memory=80Mi\n          - --extra-memory=8Mi\n          - --threshold=5\n          - --deployment=metrics-server-v0.3.1\n          - --container=metrics-server\n          - --poll-period=300000\n          - --estimator=exponential\n          # Specifies the smallest cluster (defined in number of nodes)\n          # resources will be scaled to.\n          #- --minClusterSize={{ metrics_server_min_cluster_size }}\n```\n\n##### 3、部署\n\n```\nkubectl apply -f .  \n```\n\nmetrics-server 的资源占用量会随着集群中的 Pod 数量的不断增长而不断上升，因此需要 addon-resizer 垂直扩缩 metrics-server。addon-resizer 依据集群中节点的数量线性地扩展 metrics-server，以保证其能够有能力提供完整的metrics API 服务，具体参考：[addon-resizer](https://github.com/kubernetes/autoscaler/tree/master/addon-resizer)。\n\n>  所需要的镜像可以在 [k8s-system-images](https://github.com/gosoon/k8s-system-images.git)  中下载。\n\n\n\n检查是否部署成功：\n\n```\n$ kubectl get apiservices | grep metrics\nv1beta1.metrics.k8s.io     kube-system/metrics-server   True        2m\n\n$ kubectl get pod -n kube-system\nmetrics-server-v0.3.1-65b6db6945-rpqwf   2/2     Running   0          20h\n```\n\n\n\n#### 三、metrics-server 的使用\n\n由于采集数据间隔为1分钟，等待数分钟后查看数据：\n\n```\n$ kubectl top node\nNAME             CPU(cores)   CPU%   MEMORY(bytes)   MEMORY%\nnode1            108m         2%     1532Mi          40%\n\n$ kubectl top pod -n kube-system\nNAME                                     CPU(cores)   MEMORY(bytes)\ncoredns-576cbf47c7-8v6n8                 2m           14Mi\ncoredns-576cbf47c7-qk7rk                 2m           10Mi\netcd-node1                               11m          80Mi\nkube-apiserver-node1                     17m          566Mi\nkube-controller-manager-node1            17m          67Mi\nkube-flannel-ds-amd64-8lvs2              2m           13Mi\nkube-proxy-85lhl                         3m           19Mi\nkube-scheduler-node1                     5m           16Mi\nmetrics-server-v0.3.1-65b6db6945-rpqwf   2m           19Mi\n```\n\nMetrics-server 可用 [API](https://github.com/kubernetes/community/blob/master/contributors/design-proposals/instrumentation/resource-metrics-api.md) 列表如下：\n\n- `http://127.0.0.1:8001/apis/metrics.k8s.io/v1beta1/nodes`\n- `http://127.0.0.1:8001/apis/metrics.k8s.io/v1beta1/nodes/<node-name>`\n- `http://127.0.0.1:8001/apis/metrics.k8s.io/v1beta1/pods`\n- `http://127.0.0.1:8001/apis/metrics.k8s.io/v1beta1/namespace/<namespace-name>/pods/<pod-name>`\n\n由于 k8s 在 v1.10 后废弃了 8080 端口，可以通过代理或者使用认证的方式访问这些 API：\n```\n$ kubectl proxy\n$ curl http://127.0.0.1:8001/apis/metrics.k8s.io/v1beta1/nodes\n```\n\n也可以直接通过 kubectl 命令来访问这些 API，比如：\n```\n$ kubectl get --raw /apis/metrics.k8s.io/v1beta1/nodes\n$ kubectl get --raw /apis/metrics.k8s.io/v1beta1/pods\n$ kubectl get --raw /apis/metrics.k8s.io/v1beta1/nodes/<node-name>\n$ kubectl get --raw /apis/metrics.k8s.io/v1beta1/namespace/<namespace-name>/pods/<pod-name>\n```\n\n","slug":"k8s_metrics_server","published":1,"updated":"2019-06-01T14:26:16.308Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjycnhjm3000n5vwnbzflbxm6","content":"<p><a href=\"https://github.com/kubernetes-incubator/metrics-server\" target=\"_blank\" rel=\"noopener\">metrics-server</a> 是一个采集集群中指标的组件，类似于 cadvisor，在 v1.8 版本中引入，官方将其作为 heapster 的替代者，metric-server 属于 core metrics(核心指标)，提供 API metrics.k8s.io，仅可以查看 node、pod 当前 CPU/Memory/Storage 的资源使用情况，也支持通过 Metrics API 的形式获取，以此数据提供给 Dashboard、HPA、scheduler 等使用。</p>\n<h4 id=\"一、开启-API-Aggregation\"><a href=\"#一、开启-API-Aggregation\" class=\"headerlink\" title=\"一、开启 API Aggregation\"></a>一、开启 API Aggregation</h4><p>由于 metrics-server 需要暴露 API，但 k8s 的 API 要统一管理，如何将 apiserver 的请求转发给 metrics-server ，解决方案就是使用 <a href=\"https://github.com/kubernetes/kube-aggregator\" target=\"_blank\" rel=\"noopener\">kube-aggregator</a> ，所以在部署 metrics-server 之前，需要在 kube-apiserver 中开启 API Aggregation，即增加以下配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--proxy-client-cert-file=/etc/kubernetes/certs/proxy.crt</span><br><span class=\"line\">--proxy-client-key-file=/etc/kubernetes/certs/proxy.key</span><br><span class=\"line\">--requestheader-client-ca-file=/etc/kubernetes/certs/proxy-ca.crt</span><br><span class=\"line\">--requestheader-allowed-names=aggregator</span><br><span class=\"line\">--requestheader-extra-headers-prefix=X-Remote-Extra-</span><br><span class=\"line\">--requestheader-group-headers=X-Remote-Group</span><br><span class=\"line\">--requestheader-username-headers=X-Remote-User</span><br></pre></td></tr></table></figure>\n<p>如果kube-proxy没有在Master上面运行，还需要配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--enable-aggregator-routing=true</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/kubernetes/kube-aggregator\" target=\"_blank\" rel=\"noopener\">kube-aggregator</a>  的详细设计文档请参考：<a href=\"https://kubernetes.io/docs/tasks/access-kubernetes-api/configure-aggregation-layer/\" target=\"_blank\" rel=\"noopener\">configure-aggregation-layer</a></p>\n<h4 id=\"二、部署-metrics-server\"><a href=\"#二、部署-metrics-server\" class=\"headerlink\" title=\"二、部署 metrics-server\"></a>二、部署 metrics-server</h4><h5 id=\"1、获取配置文件\"><a href=\"#1、获取配置文件\" class=\"headerlink\" title=\"1、获取配置文件\"></a>1、获取配置文件</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone  https://github.com/kubernetes/kubernetes</span><br><span class=\"line\">$ cd  kubernetes/cluster/addons/metrics-server/</span><br></pre></td></tr></table></figure>\n<h5 id=\"2、修改-metrics-server-配置参数\"><a href=\"#2、修改-metrics-server-配置参数\" class=\"headerlink\" title=\"2、修改 metrics-server 配置参数\"></a>2、修改 metrics-server 配置参数</h5><p>修改 <code>resource-reader.yaml</code> 文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rules:</span><br><span class=\"line\">- apiGroups:</span><br><span class=\"line\">  - &quot;&quot;</span><br><span class=\"line\">  resources:</span><br><span class=\"line\">  - pods</span><br><span class=\"line\">  - nodes</span><br><span class=\"line\">  - nodes/stats    #新增这一行</span><br><span class=\"line\">  - namespaces</span><br><span class=\"line\">  verbs:</span><br><span class=\"line\">  - get</span><br><span class=\"line\">  - list</span><br><span class=\"line\">  - watch</span><br></pre></td></tr></table></figure>\n<p>修改 <code>metrics-server-deployment.yaml</code>文件:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">     ......</span><br><span class=\"line\">     # metrics-server containers 启动参数作如下修改：</span><br><span class=\"line\">     containers:</span><br><span class=\"line\">     - name: metrics-server</span><br><span class=\"line\">       image: k8s.gcr.io/metrics-server-amd64:v0.3.1</span><br><span class=\"line\">       command:</span><br><span class=\"line\">       - /metrics-server</span><br><span class=\"line\">       - --metric-resolution=30s</span><br><span class=\"line\">       - --kubelet-insecure-tls</span><br><span class=\"line\">       - --kubelet-preferred-address-types=InternalIP,Hostname,InternalDNS,ExternalDNS,ExternalIP</span><br><span class=\"line\">       # These are needed for GKE, which doesn&apos;t support secure communication yet.</span><br><span class=\"line\">       # Remove these lines for non-GKE clusters, and when GKE supports token-based auth.</span><br><span class=\"line\">       #- --kubelet-port=10255</span><br><span class=\"line\">       #- --deprecated-kubelet-completely-insecure=true</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">......           </span><br><span class=\"line\"># 修改启动参数：</span><br><span class=\"line\">       command:</span><br><span class=\"line\">         - /pod_nanny</span><br><span class=\"line\">         - --config-dir=/etc/config</span><br><span class=\"line\">         - --cpu=80m</span><br><span class=\"line\">         - --extra-cpu=0.5m</span><br><span class=\"line\">         - --memory=80Mi</span><br><span class=\"line\">         - --extra-memory=8Mi</span><br><span class=\"line\">         - --threshold=5</span><br><span class=\"line\">         - --deployment=metrics-server-v0.3.1</span><br><span class=\"line\">         - --container=metrics-server</span><br><span class=\"line\">         - --poll-period=300000</span><br><span class=\"line\">         - --estimator=exponential</span><br><span class=\"line\">         # Specifies the smallest cluster (defined in number of nodes)</span><br><span class=\"line\">         # resources will be scaled to.</span><br><span class=\"line\">         #- --minClusterSize=&#123;&#123; metrics_server_min_cluster_size &#125;&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"3、部署\"><a href=\"#3、部署\" class=\"headerlink\" title=\"3、部署\"></a>3、部署</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f .</span><br></pre></td></tr></table></figure>\n<p>metrics-server 的资源占用量会随着集群中的 Pod 数量的不断增长而不断上升，因此需要 addon-resizer 垂直扩缩 metrics-server。addon-resizer 依据集群中节点的数量线性地扩展 metrics-server，以保证其能够有能力提供完整的metrics API 服务，具体参考：<a href=\"https://github.com/kubernetes/autoscaler/tree/master/addon-resizer\" target=\"_blank\" rel=\"noopener\">addon-resizer</a>。</p>\n<blockquote>\n<p> 所需要的镜像可以在 <a href=\"https://github.com/gosoon/k8s-system-images.git\" target=\"_blank\" rel=\"noopener\">k8s-system-images</a>  中下载。</p>\n</blockquote>\n<p>检查是否部署成功：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get apiservices | grep metrics</span><br><span class=\"line\">v1beta1.metrics.k8s.io     kube-system/metrics-server   True        2m</span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl get pod -n kube-system</span><br><span class=\"line\">metrics-server-v0.3.1-65b6db6945-rpqwf   2/2     Running   0          20h</span><br></pre></td></tr></table></figure>\n<h4 id=\"三、metrics-server-的使用\"><a href=\"#三、metrics-server-的使用\" class=\"headerlink\" title=\"三、metrics-server 的使用\"></a>三、metrics-server 的使用</h4><p>由于采集数据间隔为1分钟，等待数分钟后查看数据：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl top node</span><br><span class=\"line\">NAME             CPU(cores)   CPU%   MEMORY(bytes)   MEMORY%</span><br><span class=\"line\">node1            108m         2%     1532Mi          40%</span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl top pod -n kube-system</span><br><span class=\"line\">NAME                                     CPU(cores)   MEMORY(bytes)</span><br><span class=\"line\">coredns-576cbf47c7-8v6n8                 2m           14Mi</span><br><span class=\"line\">coredns-576cbf47c7-qk7rk                 2m           10Mi</span><br><span class=\"line\">etcd-node1                               11m          80Mi</span><br><span class=\"line\">kube-apiserver-node1                     17m          566Mi</span><br><span class=\"line\">kube-controller-manager-node1            17m          67Mi</span><br><span class=\"line\">kube-flannel-ds-amd64-8lvs2              2m           13Mi</span><br><span class=\"line\">kube-proxy-85lhl                         3m           19Mi</span><br><span class=\"line\">kube-scheduler-node1                     5m           16Mi</span><br><span class=\"line\">metrics-server-v0.3.1-65b6db6945-rpqwf   2m           19Mi</span><br></pre></td></tr></table></figure>\n<p>Metrics-server 可用 <a href=\"https://github.com/kubernetes/community/blob/master/contributors/design-proposals/instrumentation/resource-metrics-api.md\" target=\"_blank\" rel=\"noopener\">API</a> 列表如下：</p>\n<ul>\n<li><code>http://127.0.0.1:8001/apis/metrics.k8s.io/v1beta1/nodes</code></li>\n<li><code>http://127.0.0.1:8001/apis/metrics.k8s.io/v1beta1/nodes/&lt;node-name&gt;</code></li>\n<li><code>http://127.0.0.1:8001/apis/metrics.k8s.io/v1beta1/pods</code></li>\n<li><code>http://127.0.0.1:8001/apis/metrics.k8s.io/v1beta1/namespace/&lt;namespace-name&gt;/pods/&lt;pod-name&gt;</code></li>\n</ul>\n<p>由于 k8s 在 v1.10 后废弃了 8080 端口，可以通过代理或者使用认证的方式访问这些 API：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl proxy</span><br><span class=\"line\">$ curl http://127.0.0.1:8001/apis/metrics.k8s.io/v1beta1/nodes</span><br></pre></td></tr></table></figure></p>\n<p>也可以直接通过 kubectl 命令来访问这些 API，比如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get --raw /apis/metrics.k8s.io/v1beta1/nodes</span><br><span class=\"line\">$ kubectl get --raw /apis/metrics.k8s.io/v1beta1/pods</span><br><span class=\"line\">$ kubectl get --raw /apis/metrics.k8s.io/v1beta1/nodes/&lt;node-name&gt;</span><br><span class=\"line\">$ kubectl get --raw /apis/metrics.k8s.io/v1beta1/namespace/&lt;namespace-name&gt;/pods/&lt;pod-name&gt;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://github.com/kubernetes-incubator/metrics-server\" target=\"_blank\" rel=\"noopener\">metrics-server</a> 是一个采集集群中指标的组件，类似于 cadvisor，在 v1.8 版本中引入，官方将其作为 heapster 的替代者，metric-server 属于 core metrics(核心指标)，提供 API metrics.k8s.io，仅可以查看 node、pod 当前 CPU/Memory/Storage 的资源使用情况，也支持通过 Metrics API 的形式获取，以此数据提供给 Dashboard、HPA、scheduler 等使用。</p>\n<h4 id=\"一、开启-API-Aggregation\"><a href=\"#一、开启-API-Aggregation\" class=\"headerlink\" title=\"一、开启 API Aggregation\"></a>一、开启 API Aggregation</h4><p>由于 metrics-server 需要暴露 API，但 k8s 的 API 要统一管理，如何将 apiserver 的请求转发给 metrics-server ，解决方案就是使用 <a href=\"https://github.com/kubernetes/kube-aggregator\" target=\"_blank\" rel=\"noopener\">kube-aggregator</a> ，所以在部署 metrics-server 之前，需要在 kube-apiserver 中开启 API Aggregation，即增加以下配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--proxy-client-cert-file=/etc/kubernetes/certs/proxy.crt</span><br><span class=\"line\">--proxy-client-key-file=/etc/kubernetes/certs/proxy.key</span><br><span class=\"line\">--requestheader-client-ca-file=/etc/kubernetes/certs/proxy-ca.crt</span><br><span class=\"line\">--requestheader-allowed-names=aggregator</span><br><span class=\"line\">--requestheader-extra-headers-prefix=X-Remote-Extra-</span><br><span class=\"line\">--requestheader-group-headers=X-Remote-Group</span><br><span class=\"line\">--requestheader-username-headers=X-Remote-User</span><br></pre></td></tr></table></figure>\n<p>如果kube-proxy没有在Master上面运行，还需要配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--enable-aggregator-routing=true</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/kubernetes/kube-aggregator\" target=\"_blank\" rel=\"noopener\">kube-aggregator</a>  的详细设计文档请参考：<a href=\"https://kubernetes.io/docs/tasks/access-kubernetes-api/configure-aggregation-layer/\" target=\"_blank\" rel=\"noopener\">configure-aggregation-layer</a></p>\n<h4 id=\"二、部署-metrics-server\"><a href=\"#二、部署-metrics-server\" class=\"headerlink\" title=\"二、部署 metrics-server\"></a>二、部署 metrics-server</h4><h5 id=\"1、获取配置文件\"><a href=\"#1、获取配置文件\" class=\"headerlink\" title=\"1、获取配置文件\"></a>1、获取配置文件</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone  https://github.com/kubernetes/kubernetes</span><br><span class=\"line\">$ cd  kubernetes/cluster/addons/metrics-server/</span><br></pre></td></tr></table></figure>\n<h5 id=\"2、修改-metrics-server-配置参数\"><a href=\"#2、修改-metrics-server-配置参数\" class=\"headerlink\" title=\"2、修改 metrics-server 配置参数\"></a>2、修改 metrics-server 配置参数</h5><p>修改 <code>resource-reader.yaml</code> 文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rules:</span><br><span class=\"line\">- apiGroups:</span><br><span class=\"line\">  - &quot;&quot;</span><br><span class=\"line\">  resources:</span><br><span class=\"line\">  - pods</span><br><span class=\"line\">  - nodes</span><br><span class=\"line\">  - nodes/stats    #新增这一行</span><br><span class=\"line\">  - namespaces</span><br><span class=\"line\">  verbs:</span><br><span class=\"line\">  - get</span><br><span class=\"line\">  - list</span><br><span class=\"line\">  - watch</span><br></pre></td></tr></table></figure>\n<p>修改 <code>metrics-server-deployment.yaml</code>文件:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">     ......</span><br><span class=\"line\">     # metrics-server containers 启动参数作如下修改：</span><br><span class=\"line\">     containers:</span><br><span class=\"line\">     - name: metrics-server</span><br><span class=\"line\">       image: k8s.gcr.io/metrics-server-amd64:v0.3.1</span><br><span class=\"line\">       command:</span><br><span class=\"line\">       - /metrics-server</span><br><span class=\"line\">       - --metric-resolution=30s</span><br><span class=\"line\">       - --kubelet-insecure-tls</span><br><span class=\"line\">       - --kubelet-preferred-address-types=InternalIP,Hostname,InternalDNS,ExternalDNS,ExternalIP</span><br><span class=\"line\">       # These are needed for GKE, which doesn&apos;t support secure communication yet.</span><br><span class=\"line\">       # Remove these lines for non-GKE clusters, and when GKE supports token-based auth.</span><br><span class=\"line\">       #- --kubelet-port=10255</span><br><span class=\"line\">       #- --deprecated-kubelet-completely-insecure=true</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">......           </span><br><span class=\"line\"># 修改启动参数：</span><br><span class=\"line\">       command:</span><br><span class=\"line\">         - /pod_nanny</span><br><span class=\"line\">         - --config-dir=/etc/config</span><br><span class=\"line\">         - --cpu=80m</span><br><span class=\"line\">         - --extra-cpu=0.5m</span><br><span class=\"line\">         - --memory=80Mi</span><br><span class=\"line\">         - --extra-memory=8Mi</span><br><span class=\"line\">         - --threshold=5</span><br><span class=\"line\">         - --deployment=metrics-server-v0.3.1</span><br><span class=\"line\">         - --container=metrics-server</span><br><span class=\"line\">         - --poll-period=300000</span><br><span class=\"line\">         - --estimator=exponential</span><br><span class=\"line\">         # Specifies the smallest cluster (defined in number of nodes)</span><br><span class=\"line\">         # resources will be scaled to.</span><br><span class=\"line\">         #- --minClusterSize=&#123;&#123; metrics_server_min_cluster_size &#125;&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"3、部署\"><a href=\"#3、部署\" class=\"headerlink\" title=\"3、部署\"></a>3、部署</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f .</span><br></pre></td></tr></table></figure>\n<p>metrics-server 的资源占用量会随着集群中的 Pod 数量的不断增长而不断上升，因此需要 addon-resizer 垂直扩缩 metrics-server。addon-resizer 依据集群中节点的数量线性地扩展 metrics-server，以保证其能够有能力提供完整的metrics API 服务，具体参考：<a href=\"https://github.com/kubernetes/autoscaler/tree/master/addon-resizer\" target=\"_blank\" rel=\"noopener\">addon-resizer</a>。</p>\n<blockquote>\n<p> 所需要的镜像可以在 <a href=\"https://github.com/gosoon/k8s-system-images.git\" target=\"_blank\" rel=\"noopener\">k8s-system-images</a>  中下载。</p>\n</blockquote>\n<p>检查是否部署成功：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get apiservices | grep metrics</span><br><span class=\"line\">v1beta1.metrics.k8s.io     kube-system/metrics-server   True        2m</span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl get pod -n kube-system</span><br><span class=\"line\">metrics-server-v0.3.1-65b6db6945-rpqwf   2/2     Running   0          20h</span><br></pre></td></tr></table></figure>\n<h4 id=\"三、metrics-server-的使用\"><a href=\"#三、metrics-server-的使用\" class=\"headerlink\" title=\"三、metrics-server 的使用\"></a>三、metrics-server 的使用</h4><p>由于采集数据间隔为1分钟，等待数分钟后查看数据：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl top node</span><br><span class=\"line\">NAME             CPU(cores)   CPU%   MEMORY(bytes)   MEMORY%</span><br><span class=\"line\">node1            108m         2%     1532Mi          40%</span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl top pod -n kube-system</span><br><span class=\"line\">NAME                                     CPU(cores)   MEMORY(bytes)</span><br><span class=\"line\">coredns-576cbf47c7-8v6n8                 2m           14Mi</span><br><span class=\"line\">coredns-576cbf47c7-qk7rk                 2m           10Mi</span><br><span class=\"line\">etcd-node1                               11m          80Mi</span><br><span class=\"line\">kube-apiserver-node1                     17m          566Mi</span><br><span class=\"line\">kube-controller-manager-node1            17m          67Mi</span><br><span class=\"line\">kube-flannel-ds-amd64-8lvs2              2m           13Mi</span><br><span class=\"line\">kube-proxy-85lhl                         3m           19Mi</span><br><span class=\"line\">kube-scheduler-node1                     5m           16Mi</span><br><span class=\"line\">metrics-server-v0.3.1-65b6db6945-rpqwf   2m           19Mi</span><br></pre></td></tr></table></figure>\n<p>Metrics-server 可用 <a href=\"https://github.com/kubernetes/community/blob/master/contributors/design-proposals/instrumentation/resource-metrics-api.md\" target=\"_blank\" rel=\"noopener\">API</a> 列表如下：</p>\n<ul>\n<li><code>http://127.0.0.1:8001/apis/metrics.k8s.io/v1beta1/nodes</code></li>\n<li><code>http://127.0.0.1:8001/apis/metrics.k8s.io/v1beta1/nodes/&lt;node-name&gt;</code></li>\n<li><code>http://127.0.0.1:8001/apis/metrics.k8s.io/v1beta1/pods</code></li>\n<li><code>http://127.0.0.1:8001/apis/metrics.k8s.io/v1beta1/namespace/&lt;namespace-name&gt;/pods/&lt;pod-name&gt;</code></li>\n</ul>\n<p>由于 k8s 在 v1.10 后废弃了 8080 端口，可以通过代理或者使用认证的方式访问这些 API：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl proxy</span><br><span class=\"line\">$ curl http://127.0.0.1:8001/apis/metrics.k8s.io/v1beta1/nodes</span><br></pre></td></tr></table></figure></p>\n<p>也可以直接通过 kubectl 命令来访问这些 API，比如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get --raw /apis/metrics.k8s.io/v1beta1/nodes</span><br><span class=\"line\">$ kubectl get --raw /apis/metrics.k8s.io/v1beta1/pods</span><br><span class=\"line\">$ kubectl get --raw /apis/metrics.k8s.io/v1beta1/nodes/&lt;node-name&gt;</span><br><span class=\"line\">$ kubectl get --raw /apis/metrics.k8s.io/v1beta1/namespace/&lt;namespace-name&gt;/pods/&lt;pod-name&gt;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"kubernetes 集群升级至 v1.12 需要注意的几个问题","date":"2019-03-05T10:30:30.000Z","type":"v1.12","_content":"\n最近我们生产环境的集群开始升级至 v1.12 版本了，之前的版本是 v1.8，由于跨了多个版本，风险还是比较大的，官方的建议也是一个一个版本升级，k8s 每三个月出一个版本，集群上了规模后升级太麻烦，鉴于我们真正使用 k8s 中的功能还是比较少的，耦合性没有那么大，所以风险还是相对可控，测试环境运行 v1.12 一段时间后发现问题不大，于是开始升级。此处记录几个升级过程要注意的问题：\n\n### 1、注意 k8s 中 resource version 的变化\n\nk8s 中许多 resouce 都是随着 k8s 的版本变化而变化的，例如，statefulset 在 v1.8 版本中 apiVersion 是 apps/v1beta1，在 v1.12 中变为了 apps/v1。k8s 有接口可以获取到当前版本所有的 OpenAPI ：\n\n![OpenAPI](http://cdn.tianfeiyu.com/openapi-1.png)\n\n参考文档：[The Kubernetes API](https://kubernetes.io/docs/concepts/overview/kubernetes-api/)\n\n虽然 k8s 中 resource version 都是向下兼容的，但是在升级完成后尽量使用当前版本的 resource version 避免不必要的麻烦。\n\n### 2、kubelet 配置文件格式\n\nv1.8 中 kubelet 的配置是在 /etc/kubernetes/kubelet 文件中的 KUBELET_ARGS 后面指定，但是在 v1.12 中开始使用 config.yaml 文件，即所有的配置都可以放在 yaml 文件中，由于配置是兼容的，所以暂时也可以继续用以前的方式，其中有些参数仅支持在 config.yaml 文件中指定。\n\nconfig.yaml 文件的官方说明：[Set Kubelet parameters via a config file](https://kubernetes.io/docs/tasks/administer-cluster/kubelet-config-file/)\n\n一个例子：\n\n```\napiVersion: kubelet.config.k8s.io/v1beta1\nkind: KubeletConfiguration\naddress: 0.0.0.0\n- pods\neventBurst: 10\neventRecordQPS: 5\nevictionHard:\n  imagefs.available: 15%\n  memory.available: 100Mi\n  nodefs.available: 10%\n  nodefs.inodesFree: 5%\nevictionPressureTransitionPeriod: 5m0s\nfailSwapOn: true\nfileCheckFrequency: 20s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 20s\nimageGCHighThresholdPercent: 85\nimageGCLowThresholdPercent: 80\nimageMinimumGCAge: 2m0s\nmaxOpenFiles: 1000000\nmaxPods: 110\nnodeLeaseDurationSeconds: 40\nnodeStatusUpdateFrequency: 10s\noomScoreAdj: -999\npodPidsLimit: -1\nport: 10250\nstaticPodPath: /etc/kubernetes/manifests\n```\n\n将 kubelet 配置文件中的 LOG_LEVEL 参数改为大于等于 5 可以看到 config.yaml 中配置的定义，以方便排查问题：\n\n![config](http://cdn.tianfeiyu.com/iterm-1.png)\n\n对应的日志输出：\n\n```\nI0228 16:14:14.064292  191819 server.go:260] KubeletConfiguration: \nconfig.KubeletConfiguration{TypeMeta:v1.TypeMeta{Kind:\"\", \nAPIVersion:\"\"}, StaticPodPath:\"\", Sync    \nFrequency:v1.Duration{Duration:60000000000}, \nFileCheckFrequency:v1.Duration{Duration:20000000000},\nHTTPCheckFrequency:v1.Duration{Duration:20000000000}, \nStaticPodURL:\"\", StaticPodURLHeader:map[string][]string(nil),\nAddress:\"0.0.0.0\", Port:10250, \n...\n```\n\n> 注意：kubelet 配置文件中 ARGS 中定义的参数会覆盖 config.yaml 中的定义。\n\n\n### 3、feature-gates 中功能的使用\n\nv1.12 中 feature-gates 中许多功能默认为开启状态，需要根据实际场景选择，不必要的功能在配置文件中将其关闭。\n\nk8s 各版本中的 Feature 列表以及是否启用状态可以在 [Feature Gates](https://kubernetes.io/docs/reference/command-line-tools-reference/feature-gates/) 中查看。\n\n\n### 4、cadvisor 的使用 \n\nk8s 在 1.12 中将 cadvisor 从 kubelet 中移除了，若要使用 cadvisor，官方建议使用 DaemonSet 进行部署。由于我们一直从 cadvisor 获取容器的监控数据然后推送到自有的监控系统中进行展示，所以 cadvisor 还得继续使用。\n\n这是官方推荐的 cadvisor 部署方法，[cAdvisor Kubernetes Daemonset](\nhttps://github.com/google/cadvisor/blob/master/deploy/kubernetes/README.md)，其中用了 `k8s.gcr.io/cadvisor:v0.30.2` 镜像，在我们的测试环境中，该镜像无法启动，报错 `/sys/fs/cgroup/cpuacct,cpu: no such file or directory`, 经查 cadvisor v0.30.2 版本的镜像使用 cgroup v2，v2 版本中已经没有了 cpuacct subsystem，而 linux kernel 4.5 以上的版本才支持 cgroup v2，与我们的实际场景不太相符，最后测试发现 v0.28.0 的镜像可以正常使用。\n\n由于要兼容之前的使用方式，cadvisor 在宿主机上需要启动 4194 端口，但是创建容器又要结合自身的网络方案，最终我们使用 hostnetwork 的方式部署。\n\n```\napiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  name: cadvisor\n  namespace: kube-system\n  labels:\n    app: cadvisor\nspec:\n  selector:\n    matchLabels:\n      name: cadvisor\n  template:\n    metadata:\n      labels:\n        name: cadvisor\n    spec:\n      hostNetwork: true\n      tolerations:\n      - key: node-role.kubernetes.io/master\n        effect: NoSchedule\n        key: enabledDiskSchedule\n        value: \"true\"\n        effect: NoSchedule\n      containers:\n      - name: cadvisor\n        image: k8s.gcr.io/cadvisor:v0.28.0\n        imagePullPolicy: IfNotPresent\n        volumeMounts:\n        - name: rootfs\n          mountPath: /rootfs\n          readOnly: true\n        - name: var-run\n          mountPath: /var/run\n          readOnly: false\n        - name: sys\n          mountPath: /sys\n          readOnly: true\n        - name: docker\n          mountPath: /var/lib/docker\n          readOnly: true\n        ports:\n          - name: http\n            containerPort: 4194\n            protocol: TCP\n        readinessProbe:\n          tcpSocket:\n            port: 4194\n          initialDelaySeconds: 5\n          periodSeconds: 10\n        args:\n          - --housekeeping_interval=10s\n          - --port=4194\n      terminationGracePeriodSeconds: 30\n      volumes:\n      - name: rootfs\n        hostPath:\n          path: /\n      - name: var-run\n        hostPath:\n          path: /var/run\n      - name: sys\n        hostPath:\n          path: /sys\n      - name: docker\n        hostPath:\n          path: /var/lib/docker\n```\n\n官方建议使用 kustomize 进行部署，kustomize 是 k8s 的一个配置管理工具，此处暂不详细解释。\n\n> 注意：若集群中有打 taint 的宿主，需要在 yaml 文件中加上对应的 tolerations。\n\n\n","source":"_posts/k8s_v1.12.md","raw":"---\ntitle: kubernetes 集群升级至 v1.12 需要注意的几个问题\ndate: 2019-03-05 18:30:30\ntags: \"kubernetes v1.12\"\ntype: \"v1.12\"\n\n---\n\n最近我们生产环境的集群开始升级至 v1.12 版本了，之前的版本是 v1.8，由于跨了多个版本，风险还是比较大的，官方的建议也是一个一个版本升级，k8s 每三个月出一个版本，集群上了规模后升级太麻烦，鉴于我们真正使用 k8s 中的功能还是比较少的，耦合性没有那么大，所以风险还是相对可控，测试环境运行 v1.12 一段时间后发现问题不大，于是开始升级。此处记录几个升级过程要注意的问题：\n\n### 1、注意 k8s 中 resource version 的变化\n\nk8s 中许多 resouce 都是随着 k8s 的版本变化而变化的，例如，statefulset 在 v1.8 版本中 apiVersion 是 apps/v1beta1，在 v1.12 中变为了 apps/v1。k8s 有接口可以获取到当前版本所有的 OpenAPI ：\n\n![OpenAPI](http://cdn.tianfeiyu.com/openapi-1.png)\n\n参考文档：[The Kubernetes API](https://kubernetes.io/docs/concepts/overview/kubernetes-api/)\n\n虽然 k8s 中 resource version 都是向下兼容的，但是在升级完成后尽量使用当前版本的 resource version 避免不必要的麻烦。\n\n### 2、kubelet 配置文件格式\n\nv1.8 中 kubelet 的配置是在 /etc/kubernetes/kubelet 文件中的 KUBELET_ARGS 后面指定，但是在 v1.12 中开始使用 config.yaml 文件，即所有的配置都可以放在 yaml 文件中，由于配置是兼容的，所以暂时也可以继续用以前的方式，其中有些参数仅支持在 config.yaml 文件中指定。\n\nconfig.yaml 文件的官方说明：[Set Kubelet parameters via a config file](https://kubernetes.io/docs/tasks/administer-cluster/kubelet-config-file/)\n\n一个例子：\n\n```\napiVersion: kubelet.config.k8s.io/v1beta1\nkind: KubeletConfiguration\naddress: 0.0.0.0\n- pods\neventBurst: 10\neventRecordQPS: 5\nevictionHard:\n  imagefs.available: 15%\n  memory.available: 100Mi\n  nodefs.available: 10%\n  nodefs.inodesFree: 5%\nevictionPressureTransitionPeriod: 5m0s\nfailSwapOn: true\nfileCheckFrequency: 20s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 20s\nimageGCHighThresholdPercent: 85\nimageGCLowThresholdPercent: 80\nimageMinimumGCAge: 2m0s\nmaxOpenFiles: 1000000\nmaxPods: 110\nnodeLeaseDurationSeconds: 40\nnodeStatusUpdateFrequency: 10s\noomScoreAdj: -999\npodPidsLimit: -1\nport: 10250\nstaticPodPath: /etc/kubernetes/manifests\n```\n\n将 kubelet 配置文件中的 LOG_LEVEL 参数改为大于等于 5 可以看到 config.yaml 中配置的定义，以方便排查问题：\n\n![config](http://cdn.tianfeiyu.com/iterm-1.png)\n\n对应的日志输出：\n\n```\nI0228 16:14:14.064292  191819 server.go:260] KubeletConfiguration: \nconfig.KubeletConfiguration{TypeMeta:v1.TypeMeta{Kind:\"\", \nAPIVersion:\"\"}, StaticPodPath:\"\", Sync    \nFrequency:v1.Duration{Duration:60000000000}, \nFileCheckFrequency:v1.Duration{Duration:20000000000},\nHTTPCheckFrequency:v1.Duration{Duration:20000000000}, \nStaticPodURL:\"\", StaticPodURLHeader:map[string][]string(nil),\nAddress:\"0.0.0.0\", Port:10250, \n...\n```\n\n> 注意：kubelet 配置文件中 ARGS 中定义的参数会覆盖 config.yaml 中的定义。\n\n\n### 3、feature-gates 中功能的使用\n\nv1.12 中 feature-gates 中许多功能默认为开启状态，需要根据实际场景选择，不必要的功能在配置文件中将其关闭。\n\nk8s 各版本中的 Feature 列表以及是否启用状态可以在 [Feature Gates](https://kubernetes.io/docs/reference/command-line-tools-reference/feature-gates/) 中查看。\n\n\n### 4、cadvisor 的使用 \n\nk8s 在 1.12 中将 cadvisor 从 kubelet 中移除了，若要使用 cadvisor，官方建议使用 DaemonSet 进行部署。由于我们一直从 cadvisor 获取容器的监控数据然后推送到自有的监控系统中进行展示，所以 cadvisor 还得继续使用。\n\n这是官方推荐的 cadvisor 部署方法，[cAdvisor Kubernetes Daemonset](\nhttps://github.com/google/cadvisor/blob/master/deploy/kubernetes/README.md)，其中用了 `k8s.gcr.io/cadvisor:v0.30.2` 镜像，在我们的测试环境中，该镜像无法启动，报错 `/sys/fs/cgroup/cpuacct,cpu: no such file or directory`, 经查 cadvisor v0.30.2 版本的镜像使用 cgroup v2，v2 版本中已经没有了 cpuacct subsystem，而 linux kernel 4.5 以上的版本才支持 cgroup v2，与我们的实际场景不太相符，最后测试发现 v0.28.0 的镜像可以正常使用。\n\n由于要兼容之前的使用方式，cadvisor 在宿主机上需要启动 4194 端口，但是创建容器又要结合自身的网络方案，最终我们使用 hostnetwork 的方式部署。\n\n```\napiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  name: cadvisor\n  namespace: kube-system\n  labels:\n    app: cadvisor\nspec:\n  selector:\n    matchLabels:\n      name: cadvisor\n  template:\n    metadata:\n      labels:\n        name: cadvisor\n    spec:\n      hostNetwork: true\n      tolerations:\n      - key: node-role.kubernetes.io/master\n        effect: NoSchedule\n        key: enabledDiskSchedule\n        value: \"true\"\n        effect: NoSchedule\n      containers:\n      - name: cadvisor\n        image: k8s.gcr.io/cadvisor:v0.28.0\n        imagePullPolicy: IfNotPresent\n        volumeMounts:\n        - name: rootfs\n          mountPath: /rootfs\n          readOnly: true\n        - name: var-run\n          mountPath: /var/run\n          readOnly: false\n        - name: sys\n          mountPath: /sys\n          readOnly: true\n        - name: docker\n          mountPath: /var/lib/docker\n          readOnly: true\n        ports:\n          - name: http\n            containerPort: 4194\n            protocol: TCP\n        readinessProbe:\n          tcpSocket:\n            port: 4194\n          initialDelaySeconds: 5\n          periodSeconds: 10\n        args:\n          - --housekeeping_interval=10s\n          - --port=4194\n      terminationGracePeriodSeconds: 30\n      volumes:\n      - name: rootfs\n        hostPath:\n          path: /\n      - name: var-run\n        hostPath:\n          path: /var/run\n      - name: sys\n        hostPath:\n          path: /sys\n      - name: docker\n        hostPath:\n          path: /var/lib/docker\n```\n\n官方建议使用 kustomize 进行部署，kustomize 是 k8s 的一个配置管理工具，此处暂不详细解释。\n\n> 注意：若集群中有打 taint 的宿主，需要在 yaml 文件中加上对应的 tolerations。\n\n\n","slug":"k8s_v1.12","published":1,"updated":"2019-07-21T09:58:04.316Z","_id":"cjycnhjm4000o5vwn62f4to2c","comments":1,"layout":"post","photos":[],"link":"","content":"<p>最近我们生产环境的集群开始升级至 v1.12 版本了，之前的版本是 v1.8，由于跨了多个版本，风险还是比较大的，官方的建议也是一个一个版本升级，k8s 每三个月出一个版本，集群上了规模后升级太麻烦，鉴于我们真正使用 k8s 中的功能还是比较少的，耦合性没有那么大，所以风险还是相对可控，测试环境运行 v1.12 一段时间后发现问题不大，于是开始升级。此处记录几个升级过程要注意的问题：</p>\n<h3 id=\"1、注意-k8s-中-resource-version-的变化\"><a href=\"#1、注意-k8s-中-resource-version-的变化\" class=\"headerlink\" title=\"1、注意 k8s 中 resource version 的变化\"></a>1、注意 k8s 中 resource version 的变化</h3><p>k8s 中许多 resouce 都是随着 k8s 的版本变化而变化的，例如，statefulset 在 v1.8 版本中 apiVersion 是 apps/v1beta1，在 v1.12 中变为了 apps/v1。k8s 有接口可以获取到当前版本所有的 OpenAPI ：</p>\n<p><img src=\"http://cdn.tianfeiyu.com/openapi-1.png\" alt=\"OpenAPI\"></p>\n<p>参考文档：<a href=\"https://kubernetes.io/docs/concepts/overview/kubernetes-api/\" target=\"_blank\" rel=\"noopener\">The Kubernetes API</a></p>\n<p>虽然 k8s 中 resource version 都是向下兼容的，但是在升级完成后尽量使用当前版本的 resource version 避免不必要的麻烦。</p>\n<h3 id=\"2、kubelet-配置文件格式\"><a href=\"#2、kubelet-配置文件格式\" class=\"headerlink\" title=\"2、kubelet 配置文件格式\"></a>2、kubelet 配置文件格式</h3><p>v1.8 中 kubelet 的配置是在 /etc/kubernetes/kubelet 文件中的 KUBELET_ARGS 后面指定，但是在 v1.12 中开始使用 config.yaml 文件，即所有的配置都可以放在 yaml 文件中，由于配置是兼容的，所以暂时也可以继续用以前的方式，其中有些参数仅支持在 config.yaml 文件中指定。</p>\n<p>config.yaml 文件的官方说明：<a href=\"https://kubernetes.io/docs/tasks/administer-cluster/kubelet-config-file/\" target=\"_blank\" rel=\"noopener\">Set Kubelet parameters via a config file</a></p>\n<p>一个例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: kubelet.config.k8s.io/v1beta1</span><br><span class=\"line\">kind: KubeletConfiguration</span><br><span class=\"line\">address: 0.0.0.0</span><br><span class=\"line\">- pods</span><br><span class=\"line\">eventBurst: 10</span><br><span class=\"line\">eventRecordQPS: 5</span><br><span class=\"line\">evictionHard:</span><br><span class=\"line\">  imagefs.available: 15%</span><br><span class=\"line\">  memory.available: 100Mi</span><br><span class=\"line\">  nodefs.available: 10%</span><br><span class=\"line\">  nodefs.inodesFree: 5%</span><br><span class=\"line\">evictionPressureTransitionPeriod: 5m0s</span><br><span class=\"line\">failSwapOn: true</span><br><span class=\"line\">fileCheckFrequency: 20s</span><br><span class=\"line\">healthzBindAddress: 127.0.0.1</span><br><span class=\"line\">healthzPort: 10248</span><br><span class=\"line\">httpCheckFrequency: 20s</span><br><span class=\"line\">imageGCHighThresholdPercent: 85</span><br><span class=\"line\">imageGCLowThresholdPercent: 80</span><br><span class=\"line\">imageMinimumGCAge: 2m0s</span><br><span class=\"line\">maxOpenFiles: 1000000</span><br><span class=\"line\">maxPods: 110</span><br><span class=\"line\">nodeLeaseDurationSeconds: 40</span><br><span class=\"line\">nodeStatusUpdateFrequency: 10s</span><br><span class=\"line\">oomScoreAdj: -999</span><br><span class=\"line\">podPidsLimit: -1</span><br><span class=\"line\">port: 10250</span><br><span class=\"line\">staticPodPath: /etc/kubernetes/manifests</span><br></pre></td></tr></table></figure>\n<p>将 kubelet 配置文件中的 LOG_LEVEL 参数改为大于等于 5 可以看到 config.yaml 中配置的定义，以方便排查问题：</p>\n<p><img src=\"http://cdn.tianfeiyu.com/iterm-1.png\" alt=\"config\"></p>\n<p>对应的日志输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I0228 16:14:14.064292  191819 server.go:260] KubeletConfiguration: </span><br><span class=\"line\">config.KubeletConfiguration&#123;TypeMeta:v1.TypeMeta&#123;Kind:&quot;&quot;, </span><br><span class=\"line\">APIVersion:&quot;&quot;&#125;, StaticPodPath:&quot;&quot;, Sync    </span><br><span class=\"line\">Frequency:v1.Duration&#123;Duration:60000000000&#125;, </span><br><span class=\"line\">FileCheckFrequency:v1.Duration&#123;Duration:20000000000&#125;,</span><br><span class=\"line\">HTTPCheckFrequency:v1.Duration&#123;Duration:20000000000&#125;, </span><br><span class=\"line\">StaticPodURL:&quot;&quot;, StaticPodURLHeader:map[string][]string(nil),</span><br><span class=\"line\">Address:&quot;0.0.0.0&quot;, Port:10250, </span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：kubelet 配置文件中 ARGS 中定义的参数会覆盖 config.yaml 中的定义。</p>\n</blockquote>\n<h3 id=\"3、feature-gates-中功能的使用\"><a href=\"#3、feature-gates-中功能的使用\" class=\"headerlink\" title=\"3、feature-gates 中功能的使用\"></a>3、feature-gates 中功能的使用</h3><p>v1.12 中 feature-gates 中许多功能默认为开启状态，需要根据实际场景选择，不必要的功能在配置文件中将其关闭。</p>\n<p>k8s 各版本中的 Feature 列表以及是否启用状态可以在 <a href=\"https://kubernetes.io/docs/reference/command-line-tools-reference/feature-gates/\" target=\"_blank\" rel=\"noopener\">Feature Gates</a> 中查看。</p>\n<h3 id=\"4、cadvisor-的使用\"><a href=\"#4、cadvisor-的使用\" class=\"headerlink\" title=\"4、cadvisor 的使用\"></a>4、cadvisor 的使用</h3><p>k8s 在 1.12 中将 cadvisor 从 kubelet 中移除了，若要使用 cadvisor，官方建议使用 DaemonSet 进行部署。由于我们一直从 cadvisor 获取容器的监控数据然后推送到自有的监控系统中进行展示，所以 cadvisor 还得继续使用。</p>\n<p>这是官方推荐的 cadvisor 部署方法，<a href=\"https://github.com/google/cadvisor/blob/master/deploy/kubernetes/README.md\" target=\"_blank\" rel=\"noopener\">cAdvisor Kubernetes Daemonset</a>，其中用了 <code>k8s.gcr.io/cadvisor:v0.30.2</code> 镜像，在我们的测试环境中，该镜像无法启动，报错 <code>/sys/fs/cgroup/cpuacct,cpu: no such file or directory</code>, 经查 cadvisor v0.30.2 版本的镜像使用 cgroup v2，v2 版本中已经没有了 cpuacct subsystem，而 linux kernel 4.5 以上的版本才支持 cgroup v2，与我们的实际场景不太相符，最后测试发现 v0.28.0 的镜像可以正常使用。</p>\n<p>由于要兼容之前的使用方式，cadvisor 在宿主机上需要启动 4194 端口，但是创建容器又要结合自身的网络方案，最终我们使用 hostnetwork 的方式部署。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: apps/v1</span><br><span class=\"line\">kind: DaemonSet</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: cadvisor</span><br><span class=\"line\">  namespace: kube-system</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app: cadvisor</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      name: cadvisor</span><br><span class=\"line\">  template:</span><br><span class=\"line\">    metadata:</span><br><span class=\"line\">      labels:</span><br><span class=\"line\">        name: cadvisor</span><br><span class=\"line\">    spec:</span><br><span class=\"line\">      hostNetwork: true</span><br><span class=\"line\">      tolerations:</span><br><span class=\"line\">      - key: node-role.kubernetes.io/master</span><br><span class=\"line\">        effect: NoSchedule</span><br><span class=\"line\">        key: enabledDiskSchedule</span><br><span class=\"line\">        value: &quot;true&quot;</span><br><span class=\"line\">        effect: NoSchedule</span><br><span class=\"line\">      containers:</span><br><span class=\"line\">      - name: cadvisor</span><br><span class=\"line\">        image: k8s.gcr.io/cadvisor:v0.28.0</span><br><span class=\"line\">        imagePullPolicy: IfNotPresent</span><br><span class=\"line\">        volumeMounts:</span><br><span class=\"line\">        - name: rootfs</span><br><span class=\"line\">          mountPath: /rootfs</span><br><span class=\"line\">          readOnly: true</span><br><span class=\"line\">        - name: var-run</span><br><span class=\"line\">          mountPath: /var/run</span><br><span class=\"line\">          readOnly: false</span><br><span class=\"line\">        - name: sys</span><br><span class=\"line\">          mountPath: /sys</span><br><span class=\"line\">          readOnly: true</span><br><span class=\"line\">        - name: docker</span><br><span class=\"line\">          mountPath: /var/lib/docker</span><br><span class=\"line\">          readOnly: true</span><br><span class=\"line\">        ports:</span><br><span class=\"line\">          - name: http</span><br><span class=\"line\">            containerPort: 4194</span><br><span class=\"line\">            protocol: TCP</span><br><span class=\"line\">        readinessProbe:</span><br><span class=\"line\">          tcpSocket:</span><br><span class=\"line\">            port: 4194</span><br><span class=\"line\">          initialDelaySeconds: 5</span><br><span class=\"line\">          periodSeconds: 10</span><br><span class=\"line\">        args:</span><br><span class=\"line\">          - --housekeeping_interval=10s</span><br><span class=\"line\">          - --port=4194</span><br><span class=\"line\">      terminationGracePeriodSeconds: 30</span><br><span class=\"line\">      volumes:</span><br><span class=\"line\">      - name: rootfs</span><br><span class=\"line\">        hostPath:</span><br><span class=\"line\">          path: /</span><br><span class=\"line\">      - name: var-run</span><br><span class=\"line\">        hostPath:</span><br><span class=\"line\">          path: /var/run</span><br><span class=\"line\">      - name: sys</span><br><span class=\"line\">        hostPath:</span><br><span class=\"line\">          path: /sys</span><br><span class=\"line\">      - name: docker</span><br><span class=\"line\">        hostPath:</span><br><span class=\"line\">          path: /var/lib/docker</span><br></pre></td></tr></table></figure>\n<p>官方建议使用 kustomize 进行部署，kustomize 是 k8s 的一个配置管理工具，此处暂不详细解释。</p>\n<blockquote>\n<p>注意：若集群中有打 taint 的宿主，需要在 yaml 文件中加上对应的 tolerations。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>最近我们生产环境的集群开始升级至 v1.12 版本了，之前的版本是 v1.8，由于跨了多个版本，风险还是比较大的，官方的建议也是一个一个版本升级，k8s 每三个月出一个版本，集群上了规模后升级太麻烦，鉴于我们真正使用 k8s 中的功能还是比较少的，耦合性没有那么大，所以风险还是相对可控，测试环境运行 v1.12 一段时间后发现问题不大，于是开始升级。此处记录几个升级过程要注意的问题：</p>\n<h3 id=\"1、注意-k8s-中-resource-version-的变化\"><a href=\"#1、注意-k8s-中-resource-version-的变化\" class=\"headerlink\" title=\"1、注意 k8s 中 resource version 的变化\"></a>1、注意 k8s 中 resource version 的变化</h3><p>k8s 中许多 resouce 都是随着 k8s 的版本变化而变化的，例如，statefulset 在 v1.8 版本中 apiVersion 是 apps/v1beta1，在 v1.12 中变为了 apps/v1。k8s 有接口可以获取到当前版本所有的 OpenAPI ：</p>\n<p><img src=\"http://cdn.tianfeiyu.com/openapi-1.png\" alt=\"OpenAPI\"></p>\n<p>参考文档：<a href=\"https://kubernetes.io/docs/concepts/overview/kubernetes-api/\" target=\"_blank\" rel=\"noopener\">The Kubernetes API</a></p>\n<p>虽然 k8s 中 resource version 都是向下兼容的，但是在升级完成后尽量使用当前版本的 resource version 避免不必要的麻烦。</p>\n<h3 id=\"2、kubelet-配置文件格式\"><a href=\"#2、kubelet-配置文件格式\" class=\"headerlink\" title=\"2、kubelet 配置文件格式\"></a>2、kubelet 配置文件格式</h3><p>v1.8 中 kubelet 的配置是在 /etc/kubernetes/kubelet 文件中的 KUBELET_ARGS 后面指定，但是在 v1.12 中开始使用 config.yaml 文件，即所有的配置都可以放在 yaml 文件中，由于配置是兼容的，所以暂时也可以继续用以前的方式，其中有些参数仅支持在 config.yaml 文件中指定。</p>\n<p>config.yaml 文件的官方说明：<a href=\"https://kubernetes.io/docs/tasks/administer-cluster/kubelet-config-file/\" target=\"_blank\" rel=\"noopener\">Set Kubelet parameters via a config file</a></p>\n<p>一个例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: kubelet.config.k8s.io/v1beta1</span><br><span class=\"line\">kind: KubeletConfiguration</span><br><span class=\"line\">address: 0.0.0.0</span><br><span class=\"line\">- pods</span><br><span class=\"line\">eventBurst: 10</span><br><span class=\"line\">eventRecordQPS: 5</span><br><span class=\"line\">evictionHard:</span><br><span class=\"line\">  imagefs.available: 15%</span><br><span class=\"line\">  memory.available: 100Mi</span><br><span class=\"line\">  nodefs.available: 10%</span><br><span class=\"line\">  nodefs.inodesFree: 5%</span><br><span class=\"line\">evictionPressureTransitionPeriod: 5m0s</span><br><span class=\"line\">failSwapOn: true</span><br><span class=\"line\">fileCheckFrequency: 20s</span><br><span class=\"line\">healthzBindAddress: 127.0.0.1</span><br><span class=\"line\">healthzPort: 10248</span><br><span class=\"line\">httpCheckFrequency: 20s</span><br><span class=\"line\">imageGCHighThresholdPercent: 85</span><br><span class=\"line\">imageGCLowThresholdPercent: 80</span><br><span class=\"line\">imageMinimumGCAge: 2m0s</span><br><span class=\"line\">maxOpenFiles: 1000000</span><br><span class=\"line\">maxPods: 110</span><br><span class=\"line\">nodeLeaseDurationSeconds: 40</span><br><span class=\"line\">nodeStatusUpdateFrequency: 10s</span><br><span class=\"line\">oomScoreAdj: -999</span><br><span class=\"line\">podPidsLimit: -1</span><br><span class=\"line\">port: 10250</span><br><span class=\"line\">staticPodPath: /etc/kubernetes/manifests</span><br></pre></td></tr></table></figure>\n<p>将 kubelet 配置文件中的 LOG_LEVEL 参数改为大于等于 5 可以看到 config.yaml 中配置的定义，以方便排查问题：</p>\n<p><img src=\"http://cdn.tianfeiyu.com/iterm-1.png\" alt=\"config\"></p>\n<p>对应的日志输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I0228 16:14:14.064292  191819 server.go:260] KubeletConfiguration: </span><br><span class=\"line\">config.KubeletConfiguration&#123;TypeMeta:v1.TypeMeta&#123;Kind:&quot;&quot;, </span><br><span class=\"line\">APIVersion:&quot;&quot;&#125;, StaticPodPath:&quot;&quot;, Sync    </span><br><span class=\"line\">Frequency:v1.Duration&#123;Duration:60000000000&#125;, </span><br><span class=\"line\">FileCheckFrequency:v1.Duration&#123;Duration:20000000000&#125;,</span><br><span class=\"line\">HTTPCheckFrequency:v1.Duration&#123;Duration:20000000000&#125;, </span><br><span class=\"line\">StaticPodURL:&quot;&quot;, StaticPodURLHeader:map[string][]string(nil),</span><br><span class=\"line\">Address:&quot;0.0.0.0&quot;, Port:10250, </span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：kubelet 配置文件中 ARGS 中定义的参数会覆盖 config.yaml 中的定义。</p>\n</blockquote>\n<h3 id=\"3、feature-gates-中功能的使用\"><a href=\"#3、feature-gates-中功能的使用\" class=\"headerlink\" title=\"3、feature-gates 中功能的使用\"></a>3、feature-gates 中功能的使用</h3><p>v1.12 中 feature-gates 中许多功能默认为开启状态，需要根据实际场景选择，不必要的功能在配置文件中将其关闭。</p>\n<p>k8s 各版本中的 Feature 列表以及是否启用状态可以在 <a href=\"https://kubernetes.io/docs/reference/command-line-tools-reference/feature-gates/\" target=\"_blank\" rel=\"noopener\">Feature Gates</a> 中查看。</p>\n<h3 id=\"4、cadvisor-的使用\"><a href=\"#4、cadvisor-的使用\" class=\"headerlink\" title=\"4、cadvisor 的使用\"></a>4、cadvisor 的使用</h3><p>k8s 在 1.12 中将 cadvisor 从 kubelet 中移除了，若要使用 cadvisor，官方建议使用 DaemonSet 进行部署。由于我们一直从 cadvisor 获取容器的监控数据然后推送到自有的监控系统中进行展示，所以 cadvisor 还得继续使用。</p>\n<p>这是官方推荐的 cadvisor 部署方法，<a href=\"https://github.com/google/cadvisor/blob/master/deploy/kubernetes/README.md\" target=\"_blank\" rel=\"noopener\">cAdvisor Kubernetes Daemonset</a>，其中用了 <code>k8s.gcr.io/cadvisor:v0.30.2</code> 镜像，在我们的测试环境中，该镜像无法启动，报错 <code>/sys/fs/cgroup/cpuacct,cpu: no such file or directory</code>, 经查 cadvisor v0.30.2 版本的镜像使用 cgroup v2，v2 版本中已经没有了 cpuacct subsystem，而 linux kernel 4.5 以上的版本才支持 cgroup v2，与我们的实际场景不太相符，最后测试发现 v0.28.0 的镜像可以正常使用。</p>\n<p>由于要兼容之前的使用方式，cadvisor 在宿主机上需要启动 4194 端口，但是创建容器又要结合自身的网络方案，最终我们使用 hostnetwork 的方式部署。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: apps/v1</span><br><span class=\"line\">kind: DaemonSet</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: cadvisor</span><br><span class=\"line\">  namespace: kube-system</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app: cadvisor</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      name: cadvisor</span><br><span class=\"line\">  template:</span><br><span class=\"line\">    metadata:</span><br><span class=\"line\">      labels:</span><br><span class=\"line\">        name: cadvisor</span><br><span class=\"line\">    spec:</span><br><span class=\"line\">      hostNetwork: true</span><br><span class=\"line\">      tolerations:</span><br><span class=\"line\">      - key: node-role.kubernetes.io/master</span><br><span class=\"line\">        effect: NoSchedule</span><br><span class=\"line\">        key: enabledDiskSchedule</span><br><span class=\"line\">        value: &quot;true&quot;</span><br><span class=\"line\">        effect: NoSchedule</span><br><span class=\"line\">      containers:</span><br><span class=\"line\">      - name: cadvisor</span><br><span class=\"line\">        image: k8s.gcr.io/cadvisor:v0.28.0</span><br><span class=\"line\">        imagePullPolicy: IfNotPresent</span><br><span class=\"line\">        volumeMounts:</span><br><span class=\"line\">        - name: rootfs</span><br><span class=\"line\">          mountPath: /rootfs</span><br><span class=\"line\">          readOnly: true</span><br><span class=\"line\">        - name: var-run</span><br><span class=\"line\">          mountPath: /var/run</span><br><span class=\"line\">          readOnly: false</span><br><span class=\"line\">        - name: sys</span><br><span class=\"line\">          mountPath: /sys</span><br><span class=\"line\">          readOnly: true</span><br><span class=\"line\">        - name: docker</span><br><span class=\"line\">          mountPath: /var/lib/docker</span><br><span class=\"line\">          readOnly: true</span><br><span class=\"line\">        ports:</span><br><span class=\"line\">          - name: http</span><br><span class=\"line\">            containerPort: 4194</span><br><span class=\"line\">            protocol: TCP</span><br><span class=\"line\">        readinessProbe:</span><br><span class=\"line\">          tcpSocket:</span><br><span class=\"line\">            port: 4194</span><br><span class=\"line\">          initialDelaySeconds: 5</span><br><span class=\"line\">          periodSeconds: 10</span><br><span class=\"line\">        args:</span><br><span class=\"line\">          - --housekeeping_interval=10s</span><br><span class=\"line\">          - --port=4194</span><br><span class=\"line\">      terminationGracePeriodSeconds: 30</span><br><span class=\"line\">      volumes:</span><br><span class=\"line\">      - name: rootfs</span><br><span class=\"line\">        hostPath:</span><br><span class=\"line\">          path: /</span><br><span class=\"line\">      - name: var-run</span><br><span class=\"line\">        hostPath:</span><br><span class=\"line\">          path: /var/run</span><br><span class=\"line\">      - name: sys</span><br><span class=\"line\">        hostPath:</span><br><span class=\"line\">          path: /sys</span><br><span class=\"line\">      - name: docker</span><br><span class=\"line\">        hostPath:</span><br><span class=\"line\">          path: /var/lib/docker</span><br></pre></td></tr></table></figure>\n<p>官方建议使用 kustomize 进行部署，kustomize 是 k8s 的一个配置管理工具，此处暂不详细解释。</p>\n<blockquote>\n<p>注意：若集群中有打 taint 的宿主，需要在 yaml 文件中加上对应的 tolerations。</p>\n</blockquote>\n"},{"title":"kubeadm 安装 kubernetes","date":"2019-01-17T02:11:30.000Z","type":"kubeadm","_content":"\nkubeadm 是 Kubernetes 主推的部署工具之一，正在快速迭代开发中，当前版本为 GA，暂不建议用于部署生产环境，其先进的设计理念可以借鉴。\n\n## 一、kubeadm 原理介绍\n\nkubeadm 会在初始化的机器上首先部署 kubelet 服务，kubelet 创建 pod 的方式有三种，其中一种就是监控指定目下（/etc/kubernetes/manifests）容器状态的变化然后进行相应的操作。kubeadm 启动 kubelet 后会在 /etc/kubernetes/manifests 目录下创建出 etcd、kube-apiserver、kube-controller-manager、kube-scheduler 四个组件 static pod 的 yaml 文件，此时 kubelet 监测到该目录下有 yaml 文件便会将其创建为对应的 pod，最终 kube-apiserver、kube-controller-manager、kube-scheduler 以及 etcd 会以 static pod 的方式运行。\n\n\n> 本次安装 kubernetes 版本：v1.12.0\n\n当前宿主机系统与内核版本：\n```\n$ uname -r\n3.10.0-514.16.1.el7.x86_64\n\n$ cat /etc/redhat-release\nCentOS Linux release 7.2.1511 (Core)\n```\n## 二、安装前的准备工作\n```\n# 关闭swap\n$ sudo swapoff -a\n\n# 关闭selinux\n$ sed -i 's/SELINUX=permissive/SELINUX=disabled/' /etc/sysconfig/selinux \n$ setenforce 0\n\n# 关闭防火墙\n$ systemctl disable firewalld.service && systemctl stop firewalld.service\n\n# 配置转发相关参数\n$ cat << EOF >> /etc/sysctl.conf\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.bridge.bridge-nf-call-iptables = 1\nvm.swappiness=0\nEOF \n$ sysctl -p\n```\n\n## 三、安装 Docker CE \n \n> 本次安装的 docker 版本：docker-ce-18.06.1.ce\n\n```\n# Install Docker CE\n## Set up the repository\n### Install required packages.\nyum install yum-utils device-mapper-persistent-data lvm2\n\n### Add docker repository.\nyum-config-manager \\\n    --add-repo \\\n    https://download.docker.com/linux/centos/docker-ce.repo\n\n## Install docker ce.\nyum update && yum install docker-ce-18.06.1.ce\n\n## Create /etc/docker directory.\nmkdir /etc/docker\n\n# Setup daemon.\ncat > /etc/docker/daemon.json <<EOF\n{\n  \"exec-opts\": [\"native.cgroupdriver=systemd\"],\n  \"log-driver\": \"json-file\",\n  \"log-opts\": {\n    \"max-size\": \"100m\"\n  },\n  \"storage-driver\": \"overlay2\",\n  \"storage-opts\": [\n    \"overlay2.override_kernel_check=true\"\n  ]\n}\nEOF\n\nmkdir -p /etc/systemd/system/docker.service.d\n\n# Restart docker.\nsystemctl daemon-reload\nsystemctl restart docker\n```\n参考：https://kubernetes.io/docs/setup/cri/\n\n## 四、安装 kubernetes master 组件\n\n使用 kubeadm 初始化集群：\n```\n$ kubeadm init --kubernetes-version=v1.12.0 --pod-network-cidr=10.244.0.0/16\n[init] using Kubernetes version: v1.12.0\n[preflight] running pre-flight checks\n[preflight/images] Pulling images required for setting up a Kubernetes cluster\n[preflight/images] This might take a minute or two, depending on the speed of your internet connection\n[preflight/images] You can also perform this action in beforehand using 'kubeadm config images pull'\n[kubelet] Writing kubelet environment file with flags to file \"/var/lib/kubelet/kubeadm-flags.env\"\n[kubelet] Writing kubelet configuration to file \"/var/lib/kubelet/config.yaml\"\n[preflight] Activating the kubelet service\n[certificates] Using the existing front-proxy-client certificate and key.\n[certificates] Using the existing etcd/server certificate and key.\n[certificates] Using the existing etcd/peer certificate and key.\n[certificates] Using the existing etcd/healthcheck-client certificate and key.\n[certificates] Using the existing apiserver-etcd-client certificate and key.\n[certificates] Using the existing apiserver certificate and key.\n[certificates] Using the existing apiserver-kubelet-client certificate and key.\n[certificates] valid certificates and keys now exist in \"/etc/kubernetes/pki\"\n[certificates] Using the existing sa key.\n[kubeconfig] Using existing up-to-date KubeConfig file: \"/etc/kubernetes/admin.conf\"\n[kubeconfig] Using existing up-to-date KubeConfig file: \"/etc/kubernetes/kubelet.conf\"\n[kubeconfig] Using existing up-to-date KubeConfig file: \"/etc/kubernetes/controller-manager.conf\"\n[kubeconfig] Using existing up-to-date KubeConfig file: \"/etc/kubernetes/scheduler.conf\"\n[controlplane] wrote Static Pod manifest for component kube-apiserver to \"/etc/kubernetes/manifests/kube-apiserver.yaml\"\n[controlplane] wrote Static Pod manifest for component kube-controller-manager to \"/etc/kubernetes/manifests/kube-controller-manager.yaml\"\n[controlplane] wrote Static Pod manifest for component kube-scheduler to \"/etc/kubernetes/manifests/kube-scheduler.yaml\"\n[etcd] Wrote Static Pod manifest for a local etcd instance to \"/etc/kubernetes/manifests/etcd.yaml\"\n[init] waiting for the kubelet to boot up the control plane as Static Pods from directory \"/etc/kubernetes/manifests\"\n[init] this might take a minute or longer if the control plane images have to be pulled\n[apiclient] All control plane components are healthy after 14.002350 seconds\n[uploadconfig] storing the configuration used in ConfigMap \"kubeadm-config\" in the \"kube-system\" Namespace\n[kubelet] Creating a ConfigMap \"kubelet-config-1.12\" in namespace kube-system with the configuration for the kubelets in the cluster\n[markmaster] Marking the node 192.168.1.110 as master by adding the label \"node-role.kubernetes.io/master=''\"\n[markmaster] Marking the node 192.168.1.110 as master by adding the taints [node-role.kubernetes.io/master:NoSchedule]\n[patchnode] Uploading the CRI Socket information \"/var/run/dockershim.sock\" to the Node API object \"192.168.1.110\" as an annotation\n[bootstraptoken] using token: wu5hfy.lkuz9fih6hlqe1jt\n[bootstraptoken] configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials\n[bootstraptoken] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token\n[bootstraptoken] configured RBAC rules to allow certificate rotation for all node client certificates in the cluster\n[bootstraptoken] creating the \"cluster-info\" ConfigMap in the \"kube-public\" namespace\n[addons] Applied essential addon: CoreDNS\n[addons] Applied essential addon: kube-proxy\n\nYour Kubernetes master has initialized successfully!\n\nTo start using your cluster, you need to run the following as a regular user:\n\n  mkdir -p $HOME/.kube\n  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\n  sudo chown $(id -u):$(id -g) $HOME/.kube/config\n\nYou should now deploy a pod network to the cluster.\nRun \"kubectl apply -f [podnetwork].yaml\" with one of the options listed at:\n  https://kubernetes.io/docs/concepts/cluster-administration/addons/\n\nYou can now join any number of machines by running the following on each node\nas root:\n\n  kubeadm join 192.168.1.110:6443 --token wu5hfy.lkuz9fih6hlqe1jt --discovery-token-ca-cert-hash sha256:e8d2649fceae9d7f6de94af0b7e294680b87f7d1e207c75c3cb496841b12ec23\n\n```\n\n这个命令会自动执行以下步骤：\n\n- 系统状态检查\n- 生成 token\n- 生成自签名 CA 和 client 端证书\n- 生成 kubeconfig 用于 kubelet 连接 API server\n- 为 Master 组件生成 Static Pod manifests，并放到 /etc/kubernetes/manifests 目录中\n- 配置 RBAC 并设置 Master node 只运行控制平面组件\n- 创建附加服务，比如 kube-proxy 和 CoreDNS\n\n\n配置 kubetl 认证信息： \n```\n $ mkdir -p $HOME/.kube\n $ sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\n $ sudo chown $(id -u):$(id -g) $HOME/.kube/config\n```\n\n将本机作为 node 加入到 master 中：\n```\n$ kubeadm join 192.168.1.110:6443 --token wu5hfy.lkuz9fih6hlqe1jt --discovery-token-ca-cert-hash\n```\nkubeadm 默认 master 节点不作为 node 节点使用，初始化完成后会给 master 节点打上 taint 标签，若单机部署，使用以下命令去掉 taint 标签：\n```\n$ kubectl taint nodes --all node-role.kubernetes.io/master-\n```\n\n查看各组件是否正常运行：\n\n```\n$ kubectl get pod -n kube-system\nNAME                                     READY   STATUS             RESTARTS   AGE\ncoredns-99b9bb8bd-pgh5t                  1/1     Running            0          48m\netcd                                     1/1     Running            2          48m\nkube-apiserver                           1/1     Running            1          48m\nkube-controller-manager                  1/1     Running            0          49m\nkube-flannel-ds-amd64-b5rjg              1/1     Running            0          31m\nkube-proxy-c8ktg                         1/1     Running            0          48m\nkube-scheduler                           1/1     Running            2          48m\n```\n\n## 五、安装 kubernetes 网络\n\nkubernetes 本身是不提供网络方案的，但是有很多开源组件可以帮助我们打通容器和容器之间的网络，实现 Kubernetes 要求的网络模型。从实现原理上来说大致分为以下两种：\n- overlay 网络，通过封包解包的方式构造一个隧道，代表的方案有 flannel(udp/vxlan）、weave、calico(ipip)，openvswitch 等\n- 通过路由来实现(更改 iptables 等手段)，flannel(host-gw)，calico(bgp)，macvlan 等\n\n当然每种方案都有自己适合的场景，flannel 和 calico 是两种最常见的网络方案，我们要根据自己的实际需要进行选择。此次安装选择 flannel 网络：\n\n\n此操作也会为 flannel 创建对应的 RBAC 规则，flannel 会以 daemonset 的方式创建出来：\n```\n$ kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml\n```\n\n创建一个 pod 验证集群是否正常：\n\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx\n  labels:\n    name: nginx\nspec:\n  containers:\n  - name: nginx\n    image: nginx\n    ports:\n    - containerPort: 80\n```\n\n## 六、kubeadm 其他相关的操作\n\n1、删除安装:\n```\n$ kubeadm reset\n```\n2、版本升级\n```\n# 查看可升级的版本\n$ kubeadm upgrade plan\n\n# 升级至指定版本\n$ kubeadm upgrade apply [version]\n```\n>  1. 要执行升级，需要先将 kubeadm 升级到对应的版本；\n>  2. kubeadm 并不负责 kubelet 的升级，需要在升级完 master 组件后，手工对 kubelet 进行升级。\n\n\n## 七、创建过程中的一些 case 记录\n\n##### 1、flannel 容器启动报错：pod cidr not assgned\n\n需要在  /etc/kubernetes/manifests/kube-controller-manager.yaml 文件中添加以下配置：\n\n--allocate-node-cidrs=true\n--cluster-cidr=10.244.0.0/16\n\n参考：https://github.com/coreos/flannel/issues/728\n\n##### 2、coredns 容器启动失败报错：/proc/sys/net/ipv6/conf/eth0/accept_dad: no such file or directory\n\n```\n$ vim /etc/default/grub and change the value of kernel parameter ipv6.disable from 1 to 0 in line\n$ grub2-mkconfig -o /boot/grub2/grub.cfg\n$ shutdown -r now\n```\n参考：https://github.com/containernetworking/cni/issues/569\n\n##### 3、kubeadm 证书有效期问题\n\n默认情况下，kubeadm 会生成集群运行所需的所有证书，我们也可以通过提供自己的证书来覆盖此行为。要做到这一点，必须把它们放在 --cert-dir 参数或者配置文件中的 CertificatesDir 指定的目录（默认目录为 /etc/kubernetes/pki），如果存在一个给定的证书和密钥对，kubeadm 将会跳过生成步骤并且使用已存在的文件。例如，可以拷贝一个已有的 CA 到 /etc/kubernetes/pki/ca.crt 和 /etc/kubernetes/pki/ca.key，kubeadm 将会使用这个 CA 来签署其余的证书。所以只要我们自己提供一个有效期很长的证书去覆盖掉默认的证书就可以来避免这个的问题。\n\n##### 4、kubeadm join 时 token 无法生效\n\ntoken 的失效为24小时，若忘记或者 token 过期可以使用 `kubeadm token create` 重新生成 token。\n\n## 八、总结\n本篇文章讲述了使用 kubeadm 来搭建一个 kubernetes 集群，kubeadm 暂时还不建议用于生产环境，若部署生产环境请使用二进制文件。kubeadm 搭建出的集群还是有很多不完善的地方，比如，集群 master 组件的参数配置问题，官方默认的并不会满足需求，有许多参数需要根据实际情况进行修改。\n\n\n参考：\n[Creating a single master cluster with kubeadm](https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/)\n[kubeadm 工作原理](https://github.com/feiskyer/kubernetes-handbook/blob/master/components/kubeadm.md)\n[DockOne微信分享（一六三）：Kubernetes官方集群部署工具kubeadm原理解析](http://dockone.io/article/4645)\n[centos7.2 安装k8s v1.11.0](https://segmentfault.com/a/1190000015787725)\n\n","source":"_posts/kubeadm.md","raw":"---\ntitle: kubeadm 安装 kubernetes\ndate: 2019-01-17 10:11:30\ntags: \"kubeadm\"\ntype: \"kubeadm\"\n\n---\n\nkubeadm 是 Kubernetes 主推的部署工具之一，正在快速迭代开发中，当前版本为 GA，暂不建议用于部署生产环境，其先进的设计理念可以借鉴。\n\n## 一、kubeadm 原理介绍\n\nkubeadm 会在初始化的机器上首先部署 kubelet 服务，kubelet 创建 pod 的方式有三种，其中一种就是监控指定目下（/etc/kubernetes/manifests）容器状态的变化然后进行相应的操作。kubeadm 启动 kubelet 后会在 /etc/kubernetes/manifests 目录下创建出 etcd、kube-apiserver、kube-controller-manager、kube-scheduler 四个组件 static pod 的 yaml 文件，此时 kubelet 监测到该目录下有 yaml 文件便会将其创建为对应的 pod，最终 kube-apiserver、kube-controller-manager、kube-scheduler 以及 etcd 会以 static pod 的方式运行。\n\n\n> 本次安装 kubernetes 版本：v1.12.0\n\n当前宿主机系统与内核版本：\n```\n$ uname -r\n3.10.0-514.16.1.el7.x86_64\n\n$ cat /etc/redhat-release\nCentOS Linux release 7.2.1511 (Core)\n```\n## 二、安装前的准备工作\n```\n# 关闭swap\n$ sudo swapoff -a\n\n# 关闭selinux\n$ sed -i 's/SELINUX=permissive/SELINUX=disabled/' /etc/sysconfig/selinux \n$ setenforce 0\n\n# 关闭防火墙\n$ systemctl disable firewalld.service && systemctl stop firewalld.service\n\n# 配置转发相关参数\n$ cat << EOF >> /etc/sysctl.conf\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.bridge.bridge-nf-call-iptables = 1\nvm.swappiness=0\nEOF \n$ sysctl -p\n```\n\n## 三、安装 Docker CE \n \n> 本次安装的 docker 版本：docker-ce-18.06.1.ce\n\n```\n# Install Docker CE\n## Set up the repository\n### Install required packages.\nyum install yum-utils device-mapper-persistent-data lvm2\n\n### Add docker repository.\nyum-config-manager \\\n    --add-repo \\\n    https://download.docker.com/linux/centos/docker-ce.repo\n\n## Install docker ce.\nyum update && yum install docker-ce-18.06.1.ce\n\n## Create /etc/docker directory.\nmkdir /etc/docker\n\n# Setup daemon.\ncat > /etc/docker/daemon.json <<EOF\n{\n  \"exec-opts\": [\"native.cgroupdriver=systemd\"],\n  \"log-driver\": \"json-file\",\n  \"log-opts\": {\n    \"max-size\": \"100m\"\n  },\n  \"storage-driver\": \"overlay2\",\n  \"storage-opts\": [\n    \"overlay2.override_kernel_check=true\"\n  ]\n}\nEOF\n\nmkdir -p /etc/systemd/system/docker.service.d\n\n# Restart docker.\nsystemctl daemon-reload\nsystemctl restart docker\n```\n参考：https://kubernetes.io/docs/setup/cri/\n\n## 四、安装 kubernetes master 组件\n\n使用 kubeadm 初始化集群：\n```\n$ kubeadm init --kubernetes-version=v1.12.0 --pod-network-cidr=10.244.0.0/16\n[init] using Kubernetes version: v1.12.0\n[preflight] running pre-flight checks\n[preflight/images] Pulling images required for setting up a Kubernetes cluster\n[preflight/images] This might take a minute or two, depending on the speed of your internet connection\n[preflight/images] You can also perform this action in beforehand using 'kubeadm config images pull'\n[kubelet] Writing kubelet environment file with flags to file \"/var/lib/kubelet/kubeadm-flags.env\"\n[kubelet] Writing kubelet configuration to file \"/var/lib/kubelet/config.yaml\"\n[preflight] Activating the kubelet service\n[certificates] Using the existing front-proxy-client certificate and key.\n[certificates] Using the existing etcd/server certificate and key.\n[certificates] Using the existing etcd/peer certificate and key.\n[certificates] Using the existing etcd/healthcheck-client certificate and key.\n[certificates] Using the existing apiserver-etcd-client certificate and key.\n[certificates] Using the existing apiserver certificate and key.\n[certificates] Using the existing apiserver-kubelet-client certificate and key.\n[certificates] valid certificates and keys now exist in \"/etc/kubernetes/pki\"\n[certificates] Using the existing sa key.\n[kubeconfig] Using existing up-to-date KubeConfig file: \"/etc/kubernetes/admin.conf\"\n[kubeconfig] Using existing up-to-date KubeConfig file: \"/etc/kubernetes/kubelet.conf\"\n[kubeconfig] Using existing up-to-date KubeConfig file: \"/etc/kubernetes/controller-manager.conf\"\n[kubeconfig] Using existing up-to-date KubeConfig file: \"/etc/kubernetes/scheduler.conf\"\n[controlplane] wrote Static Pod manifest for component kube-apiserver to \"/etc/kubernetes/manifests/kube-apiserver.yaml\"\n[controlplane] wrote Static Pod manifest for component kube-controller-manager to \"/etc/kubernetes/manifests/kube-controller-manager.yaml\"\n[controlplane] wrote Static Pod manifest for component kube-scheduler to \"/etc/kubernetes/manifests/kube-scheduler.yaml\"\n[etcd] Wrote Static Pod manifest for a local etcd instance to \"/etc/kubernetes/manifests/etcd.yaml\"\n[init] waiting for the kubelet to boot up the control plane as Static Pods from directory \"/etc/kubernetes/manifests\"\n[init] this might take a minute or longer if the control plane images have to be pulled\n[apiclient] All control plane components are healthy after 14.002350 seconds\n[uploadconfig] storing the configuration used in ConfigMap \"kubeadm-config\" in the \"kube-system\" Namespace\n[kubelet] Creating a ConfigMap \"kubelet-config-1.12\" in namespace kube-system with the configuration for the kubelets in the cluster\n[markmaster] Marking the node 192.168.1.110 as master by adding the label \"node-role.kubernetes.io/master=''\"\n[markmaster] Marking the node 192.168.1.110 as master by adding the taints [node-role.kubernetes.io/master:NoSchedule]\n[patchnode] Uploading the CRI Socket information \"/var/run/dockershim.sock\" to the Node API object \"192.168.1.110\" as an annotation\n[bootstraptoken] using token: wu5hfy.lkuz9fih6hlqe1jt\n[bootstraptoken] configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials\n[bootstraptoken] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token\n[bootstraptoken] configured RBAC rules to allow certificate rotation for all node client certificates in the cluster\n[bootstraptoken] creating the \"cluster-info\" ConfigMap in the \"kube-public\" namespace\n[addons] Applied essential addon: CoreDNS\n[addons] Applied essential addon: kube-proxy\n\nYour Kubernetes master has initialized successfully!\n\nTo start using your cluster, you need to run the following as a regular user:\n\n  mkdir -p $HOME/.kube\n  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\n  sudo chown $(id -u):$(id -g) $HOME/.kube/config\n\nYou should now deploy a pod network to the cluster.\nRun \"kubectl apply -f [podnetwork].yaml\" with one of the options listed at:\n  https://kubernetes.io/docs/concepts/cluster-administration/addons/\n\nYou can now join any number of machines by running the following on each node\nas root:\n\n  kubeadm join 192.168.1.110:6443 --token wu5hfy.lkuz9fih6hlqe1jt --discovery-token-ca-cert-hash sha256:e8d2649fceae9d7f6de94af0b7e294680b87f7d1e207c75c3cb496841b12ec23\n\n```\n\n这个命令会自动执行以下步骤：\n\n- 系统状态检查\n- 生成 token\n- 生成自签名 CA 和 client 端证书\n- 生成 kubeconfig 用于 kubelet 连接 API server\n- 为 Master 组件生成 Static Pod manifests，并放到 /etc/kubernetes/manifests 目录中\n- 配置 RBAC 并设置 Master node 只运行控制平面组件\n- 创建附加服务，比如 kube-proxy 和 CoreDNS\n\n\n配置 kubetl 认证信息： \n```\n $ mkdir -p $HOME/.kube\n $ sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\n $ sudo chown $(id -u):$(id -g) $HOME/.kube/config\n```\n\n将本机作为 node 加入到 master 中：\n```\n$ kubeadm join 192.168.1.110:6443 --token wu5hfy.lkuz9fih6hlqe1jt --discovery-token-ca-cert-hash\n```\nkubeadm 默认 master 节点不作为 node 节点使用，初始化完成后会给 master 节点打上 taint 标签，若单机部署，使用以下命令去掉 taint 标签：\n```\n$ kubectl taint nodes --all node-role.kubernetes.io/master-\n```\n\n查看各组件是否正常运行：\n\n```\n$ kubectl get pod -n kube-system\nNAME                                     READY   STATUS             RESTARTS   AGE\ncoredns-99b9bb8bd-pgh5t                  1/1     Running            0          48m\netcd                                     1/1     Running            2          48m\nkube-apiserver                           1/1     Running            1          48m\nkube-controller-manager                  1/1     Running            0          49m\nkube-flannel-ds-amd64-b5rjg              1/1     Running            0          31m\nkube-proxy-c8ktg                         1/1     Running            0          48m\nkube-scheduler                           1/1     Running            2          48m\n```\n\n## 五、安装 kubernetes 网络\n\nkubernetes 本身是不提供网络方案的，但是有很多开源组件可以帮助我们打通容器和容器之间的网络，实现 Kubernetes 要求的网络模型。从实现原理上来说大致分为以下两种：\n- overlay 网络，通过封包解包的方式构造一个隧道，代表的方案有 flannel(udp/vxlan）、weave、calico(ipip)，openvswitch 等\n- 通过路由来实现(更改 iptables 等手段)，flannel(host-gw)，calico(bgp)，macvlan 等\n\n当然每种方案都有自己适合的场景，flannel 和 calico 是两种最常见的网络方案，我们要根据自己的实际需要进行选择。此次安装选择 flannel 网络：\n\n\n此操作也会为 flannel 创建对应的 RBAC 规则，flannel 会以 daemonset 的方式创建出来：\n```\n$ kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml\n```\n\n创建一个 pod 验证集群是否正常：\n\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx\n  labels:\n    name: nginx\nspec:\n  containers:\n  - name: nginx\n    image: nginx\n    ports:\n    - containerPort: 80\n```\n\n## 六、kubeadm 其他相关的操作\n\n1、删除安装:\n```\n$ kubeadm reset\n```\n2、版本升级\n```\n# 查看可升级的版本\n$ kubeadm upgrade plan\n\n# 升级至指定版本\n$ kubeadm upgrade apply [version]\n```\n>  1. 要执行升级，需要先将 kubeadm 升级到对应的版本；\n>  2. kubeadm 并不负责 kubelet 的升级，需要在升级完 master 组件后，手工对 kubelet 进行升级。\n\n\n## 七、创建过程中的一些 case 记录\n\n##### 1、flannel 容器启动报错：pod cidr not assgned\n\n需要在  /etc/kubernetes/manifests/kube-controller-manager.yaml 文件中添加以下配置：\n\n--allocate-node-cidrs=true\n--cluster-cidr=10.244.0.0/16\n\n参考：https://github.com/coreos/flannel/issues/728\n\n##### 2、coredns 容器启动失败报错：/proc/sys/net/ipv6/conf/eth0/accept_dad: no such file or directory\n\n```\n$ vim /etc/default/grub and change the value of kernel parameter ipv6.disable from 1 to 0 in line\n$ grub2-mkconfig -o /boot/grub2/grub.cfg\n$ shutdown -r now\n```\n参考：https://github.com/containernetworking/cni/issues/569\n\n##### 3、kubeadm 证书有效期问题\n\n默认情况下，kubeadm 会生成集群运行所需的所有证书，我们也可以通过提供自己的证书来覆盖此行为。要做到这一点，必须把它们放在 --cert-dir 参数或者配置文件中的 CertificatesDir 指定的目录（默认目录为 /etc/kubernetes/pki），如果存在一个给定的证书和密钥对，kubeadm 将会跳过生成步骤并且使用已存在的文件。例如，可以拷贝一个已有的 CA 到 /etc/kubernetes/pki/ca.crt 和 /etc/kubernetes/pki/ca.key，kubeadm 将会使用这个 CA 来签署其余的证书。所以只要我们自己提供一个有效期很长的证书去覆盖掉默认的证书就可以来避免这个的问题。\n\n##### 4、kubeadm join 时 token 无法生效\n\ntoken 的失效为24小时，若忘记或者 token 过期可以使用 `kubeadm token create` 重新生成 token。\n\n## 八、总结\n本篇文章讲述了使用 kubeadm 来搭建一个 kubernetes 集群，kubeadm 暂时还不建议用于生产环境，若部署生产环境请使用二进制文件。kubeadm 搭建出的集群还是有很多不完善的地方，比如，集群 master 组件的参数配置问题，官方默认的并不会满足需求，有许多参数需要根据实际情况进行修改。\n\n\n参考：\n[Creating a single master cluster with kubeadm](https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/)\n[kubeadm 工作原理](https://github.com/feiskyer/kubernetes-handbook/blob/master/components/kubeadm.md)\n[DockOne微信分享（一六三）：Kubernetes官方集群部署工具kubeadm原理解析](http://dockone.io/article/4645)\n[centos7.2 安装k8s v1.11.0](https://segmentfault.com/a/1190000015787725)\n\n","slug":"kubeadm","published":1,"updated":"2019-06-01T14:26:16.308Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjycnhjm5000r5vwnc62y2fmy","content":"<p>kubeadm 是 Kubernetes 主推的部署工具之一，正在快速迭代开发中，当前版本为 GA，暂不建议用于部署生产环境，其先进的设计理念可以借鉴。</p>\n<h2 id=\"一、kubeadm-原理介绍\"><a href=\"#一、kubeadm-原理介绍\" class=\"headerlink\" title=\"一、kubeadm 原理介绍\"></a>一、kubeadm 原理介绍</h2><p>kubeadm 会在初始化的机器上首先部署 kubelet 服务，kubelet 创建 pod 的方式有三种，其中一种就是监控指定目下（/etc/kubernetes/manifests）容器状态的变化然后进行相应的操作。kubeadm 启动 kubelet 后会在 /etc/kubernetes/manifests 目录下创建出 etcd、kube-apiserver、kube-controller-manager、kube-scheduler 四个组件 static pod 的 yaml 文件，此时 kubelet 监测到该目录下有 yaml 文件便会将其创建为对应的 pod，最终 kube-apiserver、kube-controller-manager、kube-scheduler 以及 etcd 会以 static pod 的方式运行。</p>\n<blockquote>\n<p>本次安装 kubernetes 版本：v1.12.0</p>\n</blockquote>\n<p>当前宿主机系统与内核版本：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ uname -r</span><br><span class=\"line\">3.10.0-514.16.1.el7.x86_64</span><br><span class=\"line\"></span><br><span class=\"line\">$ cat /etc/redhat-release</span><br><span class=\"line\">CentOS Linux release 7.2.1511 (Core)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"二、安装前的准备工作\"><a href=\"#二、安装前的准备工作\" class=\"headerlink\" title=\"二、安装前的准备工作\"></a>二、安装前的准备工作</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 关闭swap</span><br><span class=\"line\">$ sudo swapoff -a</span><br><span class=\"line\"></span><br><span class=\"line\"># 关闭selinux</span><br><span class=\"line\">$ sed -i &apos;s/SELINUX=permissive/SELINUX=disabled/&apos; /etc/sysconfig/selinux </span><br><span class=\"line\">$ setenforce 0</span><br><span class=\"line\"></span><br><span class=\"line\"># 关闭防火墙</span><br><span class=\"line\">$ systemctl disable firewalld.service &amp;&amp; systemctl stop firewalld.service</span><br><span class=\"line\"></span><br><span class=\"line\"># 配置转发相关参数</span><br><span class=\"line\">$ cat &lt;&lt; EOF &gt;&gt; /etc/sysctl.conf</span><br><span class=\"line\">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class=\"line\">net.bridge.bridge-nf-call-iptables = 1</span><br><span class=\"line\">vm.swappiness=0</span><br><span class=\"line\">EOF </span><br><span class=\"line\">$ sysctl -p</span><br></pre></td></tr></table></figure>\n<h2 id=\"三、安装-Docker-CE\"><a href=\"#三、安装-Docker-CE\" class=\"headerlink\" title=\"三、安装 Docker CE\"></a>三、安装 Docker CE</h2><blockquote>\n<p>本次安装的 docker 版本：docker-ce-18.06.1.ce</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Install Docker CE</span><br><span class=\"line\">## Set up the repository</span><br><span class=\"line\">### Install required packages.</span><br><span class=\"line\">yum install yum-utils device-mapper-persistent-data lvm2</span><br><span class=\"line\"></span><br><span class=\"line\">### Add docker repository.</span><br><span class=\"line\">yum-config-manager \\</span><br><span class=\"line\">    --add-repo \\</span><br><span class=\"line\">    https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class=\"line\"></span><br><span class=\"line\">## Install docker ce.</span><br><span class=\"line\">yum update &amp;&amp; yum install docker-ce-18.06.1.ce</span><br><span class=\"line\"></span><br><span class=\"line\">## Create /etc/docker directory.</span><br><span class=\"line\">mkdir /etc/docker</span><br><span class=\"line\"></span><br><span class=\"line\"># Setup daemon.</span><br><span class=\"line\">cat &gt; /etc/docker/daemon.json &lt;&lt;EOF</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],</span><br><span class=\"line\">  &quot;log-driver&quot;: &quot;json-file&quot;,</span><br><span class=\"line\">  &quot;log-opts&quot;: &#123;</span><br><span class=\"line\">    &quot;max-size&quot;: &quot;100m&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;storage-driver&quot;: &quot;overlay2&quot;,</span><br><span class=\"line\">  &quot;storage-opts&quot;: [</span><br><span class=\"line\">    &quot;overlay2.override_kernel_check=true&quot;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir -p /etc/systemd/system/docker.service.d</span><br><span class=\"line\"></span><br><span class=\"line\"># Restart docker.</span><br><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl restart docker</span><br></pre></td></tr></table></figure>\n<p>参考：<a href=\"https://kubernetes.io/docs/setup/cri/\" target=\"_blank\" rel=\"noopener\">https://kubernetes.io/docs/setup/cri/</a></p>\n<h2 id=\"四、安装-kubernetes-master-组件\"><a href=\"#四、安装-kubernetes-master-组件\" class=\"headerlink\" title=\"四、安装 kubernetes master 组件\"></a>四、安装 kubernetes master 组件</h2><p>使用 kubeadm 初始化集群：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubeadm init --kubernetes-version=v1.12.0 --pod-network-cidr=10.244.0.0/16</span><br><span class=\"line\">[init] using Kubernetes version: v1.12.0</span><br><span class=\"line\">[preflight] running pre-flight checks</span><br><span class=\"line\">[preflight/images] Pulling images required for setting up a Kubernetes cluster</span><br><span class=\"line\">[preflight/images] This might take a minute or two, depending on the speed of your internet connection</span><br><span class=\"line\">[preflight/images] You can also perform this action in beforehand using &apos;kubeadm config images pull&apos;</span><br><span class=\"line\">[kubelet] Writing kubelet environment file with flags to file &quot;/var/lib/kubelet/kubeadm-flags.env&quot;</span><br><span class=\"line\">[kubelet] Writing kubelet configuration to file &quot;/var/lib/kubelet/config.yaml&quot;</span><br><span class=\"line\">[preflight] Activating the kubelet service</span><br><span class=\"line\">[certificates] Using the existing front-proxy-client certificate and key.</span><br><span class=\"line\">[certificates] Using the existing etcd/server certificate and key.</span><br><span class=\"line\">[certificates] Using the existing etcd/peer certificate and key.</span><br><span class=\"line\">[certificates] Using the existing etcd/healthcheck-client certificate and key.</span><br><span class=\"line\">[certificates] Using the existing apiserver-etcd-client certificate and key.</span><br><span class=\"line\">[certificates] Using the existing apiserver certificate and key.</span><br><span class=\"line\">[certificates] Using the existing apiserver-kubelet-client certificate and key.</span><br><span class=\"line\">[certificates] valid certificates and keys now exist in &quot;/etc/kubernetes/pki&quot;</span><br><span class=\"line\">[certificates] Using the existing sa key.</span><br><span class=\"line\">[kubeconfig] Using existing up-to-date KubeConfig file: &quot;/etc/kubernetes/admin.conf&quot;</span><br><span class=\"line\">[kubeconfig] Using existing up-to-date KubeConfig file: &quot;/etc/kubernetes/kubelet.conf&quot;</span><br><span class=\"line\">[kubeconfig] Using existing up-to-date KubeConfig file: &quot;/etc/kubernetes/controller-manager.conf&quot;</span><br><span class=\"line\">[kubeconfig] Using existing up-to-date KubeConfig file: &quot;/etc/kubernetes/scheduler.conf&quot;</span><br><span class=\"line\">[controlplane] wrote Static Pod manifest for component kube-apiserver to &quot;/etc/kubernetes/manifests/kube-apiserver.yaml&quot;</span><br><span class=\"line\">[controlplane] wrote Static Pod manifest for component kube-controller-manager to &quot;/etc/kubernetes/manifests/kube-controller-manager.yaml&quot;</span><br><span class=\"line\">[controlplane] wrote Static Pod manifest for component kube-scheduler to &quot;/etc/kubernetes/manifests/kube-scheduler.yaml&quot;</span><br><span class=\"line\">[etcd] Wrote Static Pod manifest for a local etcd instance to &quot;/etc/kubernetes/manifests/etcd.yaml&quot;</span><br><span class=\"line\">[init] waiting for the kubelet to boot up the control plane as Static Pods from directory &quot;/etc/kubernetes/manifests&quot;</span><br><span class=\"line\">[init] this might take a minute or longer if the control plane images have to be pulled</span><br><span class=\"line\">[apiclient] All control plane components are healthy after 14.002350 seconds</span><br><span class=\"line\">[uploadconfig] storing the configuration used in ConfigMap &quot;kubeadm-config&quot; in the &quot;kube-system&quot; Namespace</span><br><span class=\"line\">[kubelet] Creating a ConfigMap &quot;kubelet-config-1.12&quot; in namespace kube-system with the configuration for the kubelets in the cluster</span><br><span class=\"line\">[markmaster] Marking the node 192.168.1.110 as master by adding the label &quot;node-role.kubernetes.io/master=&apos;&apos;&quot;</span><br><span class=\"line\">[markmaster] Marking the node 192.168.1.110 as master by adding the taints [node-role.kubernetes.io/master:NoSchedule]</span><br><span class=\"line\">[patchnode] Uploading the CRI Socket information &quot;/var/run/dockershim.sock&quot; to the Node API object &quot;192.168.1.110&quot; as an annotation</span><br><span class=\"line\">[bootstraptoken] using token: wu5hfy.lkuz9fih6hlqe1jt</span><br><span class=\"line\">[bootstraptoken] configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials</span><br><span class=\"line\">[bootstraptoken] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token</span><br><span class=\"line\">[bootstraptoken] configured RBAC rules to allow certificate rotation for all node client certificates in the cluster</span><br><span class=\"line\">[bootstraptoken] creating the &quot;cluster-info&quot; ConfigMap in the &quot;kube-public&quot; namespace</span><br><span class=\"line\">[addons] Applied essential addon: CoreDNS</span><br><span class=\"line\">[addons] Applied essential addon: kube-proxy</span><br><span class=\"line\"></span><br><span class=\"line\">Your Kubernetes master has initialized successfully!</span><br><span class=\"line\"></span><br><span class=\"line\">To start using your cluster, you need to run the following as a regular user:</span><br><span class=\"line\"></span><br><span class=\"line\">  mkdir -p $HOME/.kube</span><br><span class=\"line\">  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class=\"line\">  sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br><span class=\"line\"></span><br><span class=\"line\">You should now deploy a pod network to the cluster.</span><br><span class=\"line\">Run &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at:</span><br><span class=\"line\">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class=\"line\"></span><br><span class=\"line\">You can now join any number of machines by running the following on each node</span><br><span class=\"line\">as root:</span><br><span class=\"line\"></span><br><span class=\"line\">  kubeadm join 192.168.1.110:6443 --token wu5hfy.lkuz9fih6hlqe1jt --discovery-token-ca-cert-hash sha256:e8d2649fceae9d7f6de94af0b7e294680b87f7d1e207c75c3cb496841b12ec23</span><br></pre></td></tr></table></figure></p>\n<p>这个命令会自动执行以下步骤：</p>\n<ul>\n<li>系统状态检查</li>\n<li>生成 token</li>\n<li>生成自签名 CA 和 client 端证书</li>\n<li>生成 kubeconfig 用于 kubelet 连接 API server</li>\n<li>为 Master 组件生成 Static Pod manifests，并放到 /etc/kubernetes/manifests 目录中</li>\n<li>配置 RBAC 并设置 Master node 只运行控制平面组件</li>\n<li>创建附加服务，比如 kube-proxy 和 CoreDNS</li>\n</ul>\n<p>配置 kubetl 认证信息：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir -p $HOME/.kube</span><br><span class=\"line\">$ sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class=\"line\">$ sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br></pre></td></tr></table></figure></p>\n<p>将本机作为 node 加入到 master 中：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubeadm join 192.168.1.110:6443 --token wu5hfy.lkuz9fih6hlqe1jt --discovery-token-ca-cert-hash</span><br></pre></td></tr></table></figure></p>\n<p>kubeadm 默认 master 节点不作为 node 节点使用，初始化完成后会给 master 节点打上 taint 标签，若单机部署，使用以下命令去掉 taint 标签：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl taint nodes --all node-role.kubernetes.io/master-</span><br></pre></td></tr></table></figure></p>\n<p>查看各组件是否正常运行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get pod -n kube-system</span><br><span class=\"line\">NAME                                     READY   STATUS             RESTARTS   AGE</span><br><span class=\"line\">coredns-99b9bb8bd-pgh5t                  1/1     Running            0          48m</span><br><span class=\"line\">etcd                                     1/1     Running            2          48m</span><br><span class=\"line\">kube-apiserver                           1/1     Running            1          48m</span><br><span class=\"line\">kube-controller-manager                  1/1     Running            0          49m</span><br><span class=\"line\">kube-flannel-ds-amd64-b5rjg              1/1     Running            0          31m</span><br><span class=\"line\">kube-proxy-c8ktg                         1/1     Running            0          48m</span><br><span class=\"line\">kube-scheduler                           1/1     Running            2          48m</span><br></pre></td></tr></table></figure>\n<h2 id=\"五、安装-kubernetes-网络\"><a href=\"#五、安装-kubernetes-网络\" class=\"headerlink\" title=\"五、安装 kubernetes 网络\"></a>五、安装 kubernetes 网络</h2><p>kubernetes 本身是不提供网络方案的，但是有很多开源组件可以帮助我们打通容器和容器之间的网络，实现 Kubernetes 要求的网络模型。从实现原理上来说大致分为以下两种：</p>\n<ul>\n<li>overlay 网络，通过封包解包的方式构造一个隧道，代表的方案有 flannel(udp/vxlan）、weave、calico(ipip)，openvswitch 等</li>\n<li>通过路由来实现(更改 iptables 等手段)，flannel(host-gw)，calico(bgp)，macvlan 等</li>\n</ul>\n<p>当然每种方案都有自己适合的场景，flannel 和 calico 是两种最常见的网络方案，我们要根据自己的实际需要进行选择。此次安装选择 flannel 网络：</p>\n<p>此操作也会为 flannel 创建对应的 RBAC 规则，flannel 会以 daemonset 的方式创建出来：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br></pre></td></tr></table></figure></p>\n<p>创建一个 pod 验证集群是否正常：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Pod</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: nginx</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    name: nginx</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  containers:</span><br><span class=\"line\">  - name: nginx</span><br><span class=\"line\">    image: nginx</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">    - containerPort: 80</span><br></pre></td></tr></table></figure>\n<h2 id=\"六、kubeadm-其他相关的操作\"><a href=\"#六、kubeadm-其他相关的操作\" class=\"headerlink\" title=\"六、kubeadm 其他相关的操作\"></a>六、kubeadm 其他相关的操作</h2><p>1、删除安装:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubeadm reset</span><br></pre></td></tr></table></figure></p>\n<p>2、版本升级<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查看可升级的版本</span><br><span class=\"line\">$ kubeadm upgrade plan</span><br><span class=\"line\"></span><br><span class=\"line\"># 升级至指定版本</span><br><span class=\"line\">$ kubeadm upgrade apply [version]</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<ol>\n<li>要执行升级，需要先将 kubeadm 升级到对应的版本；</li>\n<li>kubeadm 并不负责 kubelet 的升级，需要在升级完 master 组件后，手工对 kubelet 进行升级。</li>\n</ol>\n</blockquote>\n<h2 id=\"七、创建过程中的一些-case-记录\"><a href=\"#七、创建过程中的一些-case-记录\" class=\"headerlink\" title=\"七、创建过程中的一些 case 记录\"></a>七、创建过程中的一些 case 记录</h2><h5 id=\"1、flannel-容器启动报错：pod-cidr-not-assgned\"><a href=\"#1、flannel-容器启动报错：pod-cidr-not-assgned\" class=\"headerlink\" title=\"1、flannel 容器启动报错：pod cidr not assgned\"></a>1、flannel 容器启动报错：pod cidr not assgned</h5><p>需要在  /etc/kubernetes/manifests/kube-controller-manager.yaml 文件中添加以下配置：</p>\n<p>–allocate-node-cidrs=true<br>–cluster-cidr=10.244.0.0/16</p>\n<p>参考：<a href=\"https://github.com/coreos/flannel/issues/728\" target=\"_blank\" rel=\"noopener\">https://github.com/coreos/flannel/issues/728</a></p>\n<h5 id=\"2、coredns-容器启动失败报错：-proc-sys-net-ipv6-conf-eth0-accept-dad-no-such-file-or-directory\"><a href=\"#2、coredns-容器启动失败报错：-proc-sys-net-ipv6-conf-eth0-accept-dad-no-such-file-or-directory\" class=\"headerlink\" title=\"2、coredns 容器启动失败报错：/proc/sys/net/ipv6/conf/eth0/accept_dad: no such file or directory\"></a>2、coredns 容器启动失败报错：/proc/sys/net/ipv6/conf/eth0/accept_dad: no such file or directory</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim /etc/default/grub and change the value of kernel parameter ipv6.disable from 1 to 0 in line</span><br><span class=\"line\">$ grub2-mkconfig -o /boot/grub2/grub.cfg</span><br><span class=\"line\">$ shutdown -r now</span><br></pre></td></tr></table></figure>\n<p>参考：<a href=\"https://github.com/containernetworking/cni/issues/569\" target=\"_blank\" rel=\"noopener\">https://github.com/containernetworking/cni/issues/569</a></p>\n<h5 id=\"3、kubeadm-证书有效期问题\"><a href=\"#3、kubeadm-证书有效期问题\" class=\"headerlink\" title=\"3、kubeadm 证书有效期问题\"></a>3、kubeadm 证书有效期问题</h5><p>默认情况下，kubeadm 会生成集群运行所需的所有证书，我们也可以通过提供自己的证书来覆盖此行为。要做到这一点，必须把它们放在 –cert-dir 参数或者配置文件中的 CertificatesDir 指定的目录（默认目录为 /etc/kubernetes/pki），如果存在一个给定的证书和密钥对，kubeadm 将会跳过生成步骤并且使用已存在的文件。例如，可以拷贝一个已有的 CA 到 /etc/kubernetes/pki/ca.crt 和 /etc/kubernetes/pki/ca.key，kubeadm 将会使用这个 CA 来签署其余的证书。所以只要我们自己提供一个有效期很长的证书去覆盖掉默认的证书就可以来避免这个的问题。</p>\n<h5 id=\"4、kubeadm-join-时-token-无法生效\"><a href=\"#4、kubeadm-join-时-token-无法生效\" class=\"headerlink\" title=\"4、kubeadm join 时 token 无法生效\"></a>4、kubeadm join 时 token 无法生效</h5><p>token 的失效为24小时，若忘记或者 token 过期可以使用 <code>kubeadm token create</code> 重新生成 token。</p>\n<h2 id=\"八、总结\"><a href=\"#八、总结\" class=\"headerlink\" title=\"八、总结\"></a>八、总结</h2><p>本篇文章讲述了使用 kubeadm 来搭建一个 kubernetes 集群，kubeadm 暂时还不建议用于生产环境，若部署生产环境请使用二进制文件。kubeadm 搭建出的集群还是有很多不完善的地方，比如，集群 master 组件的参数配置问题，官方默认的并不会满足需求，有许多参数需要根据实际情况进行修改。</p>\n<p>参考：<br><a href=\"https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/\" target=\"_blank\" rel=\"noopener\">Creating a single master cluster with kubeadm</a><br><a href=\"https://github.com/feiskyer/kubernetes-handbook/blob/master/components/kubeadm.md\" target=\"_blank\" rel=\"noopener\">kubeadm 工作原理</a><br><a href=\"http://dockone.io/article/4645\" target=\"_blank\" rel=\"noopener\">DockOne微信分享（一六三）：Kubernetes官方集群部署工具kubeadm原理解析</a><br><a href=\"https://segmentfault.com/a/1190000015787725\" target=\"_blank\" rel=\"noopener\">centos7.2 安装k8s v1.11.0</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>kubeadm 是 Kubernetes 主推的部署工具之一，正在快速迭代开发中，当前版本为 GA，暂不建议用于部署生产环境，其先进的设计理念可以借鉴。</p>\n<h2 id=\"一、kubeadm-原理介绍\"><a href=\"#一、kubeadm-原理介绍\" class=\"headerlink\" title=\"一、kubeadm 原理介绍\"></a>一、kubeadm 原理介绍</h2><p>kubeadm 会在初始化的机器上首先部署 kubelet 服务，kubelet 创建 pod 的方式有三种，其中一种就是监控指定目下（/etc/kubernetes/manifests）容器状态的变化然后进行相应的操作。kubeadm 启动 kubelet 后会在 /etc/kubernetes/manifests 目录下创建出 etcd、kube-apiserver、kube-controller-manager、kube-scheduler 四个组件 static pod 的 yaml 文件，此时 kubelet 监测到该目录下有 yaml 文件便会将其创建为对应的 pod，最终 kube-apiserver、kube-controller-manager、kube-scheduler 以及 etcd 会以 static pod 的方式运行。</p>\n<blockquote>\n<p>本次安装 kubernetes 版本：v1.12.0</p>\n</blockquote>\n<p>当前宿主机系统与内核版本：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ uname -r</span><br><span class=\"line\">3.10.0-514.16.1.el7.x86_64</span><br><span class=\"line\"></span><br><span class=\"line\">$ cat /etc/redhat-release</span><br><span class=\"line\">CentOS Linux release 7.2.1511 (Core)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"二、安装前的准备工作\"><a href=\"#二、安装前的准备工作\" class=\"headerlink\" title=\"二、安装前的准备工作\"></a>二、安装前的准备工作</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 关闭swap</span><br><span class=\"line\">$ sudo swapoff -a</span><br><span class=\"line\"></span><br><span class=\"line\"># 关闭selinux</span><br><span class=\"line\">$ sed -i &apos;s/SELINUX=permissive/SELINUX=disabled/&apos; /etc/sysconfig/selinux </span><br><span class=\"line\">$ setenforce 0</span><br><span class=\"line\"></span><br><span class=\"line\"># 关闭防火墙</span><br><span class=\"line\">$ systemctl disable firewalld.service &amp;&amp; systemctl stop firewalld.service</span><br><span class=\"line\"></span><br><span class=\"line\"># 配置转发相关参数</span><br><span class=\"line\">$ cat &lt;&lt; EOF &gt;&gt; /etc/sysctl.conf</span><br><span class=\"line\">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class=\"line\">net.bridge.bridge-nf-call-iptables = 1</span><br><span class=\"line\">vm.swappiness=0</span><br><span class=\"line\">EOF </span><br><span class=\"line\">$ sysctl -p</span><br></pre></td></tr></table></figure>\n<h2 id=\"三、安装-Docker-CE\"><a href=\"#三、安装-Docker-CE\" class=\"headerlink\" title=\"三、安装 Docker CE\"></a>三、安装 Docker CE</h2><blockquote>\n<p>本次安装的 docker 版本：docker-ce-18.06.1.ce</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Install Docker CE</span><br><span class=\"line\">## Set up the repository</span><br><span class=\"line\">### Install required packages.</span><br><span class=\"line\">yum install yum-utils device-mapper-persistent-data lvm2</span><br><span class=\"line\"></span><br><span class=\"line\">### Add docker repository.</span><br><span class=\"line\">yum-config-manager \\</span><br><span class=\"line\">    --add-repo \\</span><br><span class=\"line\">    https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class=\"line\"></span><br><span class=\"line\">## Install docker ce.</span><br><span class=\"line\">yum update &amp;&amp; yum install docker-ce-18.06.1.ce</span><br><span class=\"line\"></span><br><span class=\"line\">## Create /etc/docker directory.</span><br><span class=\"line\">mkdir /etc/docker</span><br><span class=\"line\"></span><br><span class=\"line\"># Setup daemon.</span><br><span class=\"line\">cat &gt; /etc/docker/daemon.json &lt;&lt;EOF</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],</span><br><span class=\"line\">  &quot;log-driver&quot;: &quot;json-file&quot;,</span><br><span class=\"line\">  &quot;log-opts&quot;: &#123;</span><br><span class=\"line\">    &quot;max-size&quot;: &quot;100m&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;storage-driver&quot;: &quot;overlay2&quot;,</span><br><span class=\"line\">  &quot;storage-opts&quot;: [</span><br><span class=\"line\">    &quot;overlay2.override_kernel_check=true&quot;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir -p /etc/systemd/system/docker.service.d</span><br><span class=\"line\"></span><br><span class=\"line\"># Restart docker.</span><br><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl restart docker</span><br></pre></td></tr></table></figure>\n<p>参考：<a href=\"https://kubernetes.io/docs/setup/cri/\" target=\"_blank\" rel=\"noopener\">https://kubernetes.io/docs/setup/cri/</a></p>\n<h2 id=\"四、安装-kubernetes-master-组件\"><a href=\"#四、安装-kubernetes-master-组件\" class=\"headerlink\" title=\"四、安装 kubernetes master 组件\"></a>四、安装 kubernetes master 组件</h2><p>使用 kubeadm 初始化集群：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubeadm init --kubernetes-version=v1.12.0 --pod-network-cidr=10.244.0.0/16</span><br><span class=\"line\">[init] using Kubernetes version: v1.12.0</span><br><span class=\"line\">[preflight] running pre-flight checks</span><br><span class=\"line\">[preflight/images] Pulling images required for setting up a Kubernetes cluster</span><br><span class=\"line\">[preflight/images] This might take a minute or two, depending on the speed of your internet connection</span><br><span class=\"line\">[preflight/images] You can also perform this action in beforehand using &apos;kubeadm config images pull&apos;</span><br><span class=\"line\">[kubelet] Writing kubelet environment file with flags to file &quot;/var/lib/kubelet/kubeadm-flags.env&quot;</span><br><span class=\"line\">[kubelet] Writing kubelet configuration to file &quot;/var/lib/kubelet/config.yaml&quot;</span><br><span class=\"line\">[preflight] Activating the kubelet service</span><br><span class=\"line\">[certificates] Using the existing front-proxy-client certificate and key.</span><br><span class=\"line\">[certificates] Using the existing etcd/server certificate and key.</span><br><span class=\"line\">[certificates] Using the existing etcd/peer certificate and key.</span><br><span class=\"line\">[certificates] Using the existing etcd/healthcheck-client certificate and key.</span><br><span class=\"line\">[certificates] Using the existing apiserver-etcd-client certificate and key.</span><br><span class=\"line\">[certificates] Using the existing apiserver certificate and key.</span><br><span class=\"line\">[certificates] Using the existing apiserver-kubelet-client certificate and key.</span><br><span class=\"line\">[certificates] valid certificates and keys now exist in &quot;/etc/kubernetes/pki&quot;</span><br><span class=\"line\">[certificates] Using the existing sa key.</span><br><span class=\"line\">[kubeconfig] Using existing up-to-date KubeConfig file: &quot;/etc/kubernetes/admin.conf&quot;</span><br><span class=\"line\">[kubeconfig] Using existing up-to-date KubeConfig file: &quot;/etc/kubernetes/kubelet.conf&quot;</span><br><span class=\"line\">[kubeconfig] Using existing up-to-date KubeConfig file: &quot;/etc/kubernetes/controller-manager.conf&quot;</span><br><span class=\"line\">[kubeconfig] Using existing up-to-date KubeConfig file: &quot;/etc/kubernetes/scheduler.conf&quot;</span><br><span class=\"line\">[controlplane] wrote Static Pod manifest for component kube-apiserver to &quot;/etc/kubernetes/manifests/kube-apiserver.yaml&quot;</span><br><span class=\"line\">[controlplane] wrote Static Pod manifest for component kube-controller-manager to &quot;/etc/kubernetes/manifests/kube-controller-manager.yaml&quot;</span><br><span class=\"line\">[controlplane] wrote Static Pod manifest for component kube-scheduler to &quot;/etc/kubernetes/manifests/kube-scheduler.yaml&quot;</span><br><span class=\"line\">[etcd] Wrote Static Pod manifest for a local etcd instance to &quot;/etc/kubernetes/manifests/etcd.yaml&quot;</span><br><span class=\"line\">[init] waiting for the kubelet to boot up the control plane as Static Pods from directory &quot;/etc/kubernetes/manifests&quot;</span><br><span class=\"line\">[init] this might take a minute or longer if the control plane images have to be pulled</span><br><span class=\"line\">[apiclient] All control plane components are healthy after 14.002350 seconds</span><br><span class=\"line\">[uploadconfig] storing the configuration used in ConfigMap &quot;kubeadm-config&quot; in the &quot;kube-system&quot; Namespace</span><br><span class=\"line\">[kubelet] Creating a ConfigMap &quot;kubelet-config-1.12&quot; in namespace kube-system with the configuration for the kubelets in the cluster</span><br><span class=\"line\">[markmaster] Marking the node 192.168.1.110 as master by adding the label &quot;node-role.kubernetes.io/master=&apos;&apos;&quot;</span><br><span class=\"line\">[markmaster] Marking the node 192.168.1.110 as master by adding the taints [node-role.kubernetes.io/master:NoSchedule]</span><br><span class=\"line\">[patchnode] Uploading the CRI Socket information &quot;/var/run/dockershim.sock&quot; to the Node API object &quot;192.168.1.110&quot; as an annotation</span><br><span class=\"line\">[bootstraptoken] using token: wu5hfy.lkuz9fih6hlqe1jt</span><br><span class=\"line\">[bootstraptoken] configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials</span><br><span class=\"line\">[bootstraptoken] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token</span><br><span class=\"line\">[bootstraptoken] configured RBAC rules to allow certificate rotation for all node client certificates in the cluster</span><br><span class=\"line\">[bootstraptoken] creating the &quot;cluster-info&quot; ConfigMap in the &quot;kube-public&quot; namespace</span><br><span class=\"line\">[addons] Applied essential addon: CoreDNS</span><br><span class=\"line\">[addons] Applied essential addon: kube-proxy</span><br><span class=\"line\"></span><br><span class=\"line\">Your Kubernetes master has initialized successfully!</span><br><span class=\"line\"></span><br><span class=\"line\">To start using your cluster, you need to run the following as a regular user:</span><br><span class=\"line\"></span><br><span class=\"line\">  mkdir -p $HOME/.kube</span><br><span class=\"line\">  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class=\"line\">  sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br><span class=\"line\"></span><br><span class=\"line\">You should now deploy a pod network to the cluster.</span><br><span class=\"line\">Run &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at:</span><br><span class=\"line\">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class=\"line\"></span><br><span class=\"line\">You can now join any number of machines by running the following on each node</span><br><span class=\"line\">as root:</span><br><span class=\"line\"></span><br><span class=\"line\">  kubeadm join 192.168.1.110:6443 --token wu5hfy.lkuz9fih6hlqe1jt --discovery-token-ca-cert-hash sha256:e8d2649fceae9d7f6de94af0b7e294680b87f7d1e207c75c3cb496841b12ec23</span><br></pre></td></tr></table></figure></p>\n<p>这个命令会自动执行以下步骤：</p>\n<ul>\n<li>系统状态检查</li>\n<li>生成 token</li>\n<li>生成自签名 CA 和 client 端证书</li>\n<li>生成 kubeconfig 用于 kubelet 连接 API server</li>\n<li>为 Master 组件生成 Static Pod manifests，并放到 /etc/kubernetes/manifests 目录中</li>\n<li>配置 RBAC 并设置 Master node 只运行控制平面组件</li>\n<li>创建附加服务，比如 kube-proxy 和 CoreDNS</li>\n</ul>\n<p>配置 kubetl 认证信息：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir -p $HOME/.kube</span><br><span class=\"line\">$ sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class=\"line\">$ sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br></pre></td></tr></table></figure></p>\n<p>将本机作为 node 加入到 master 中：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubeadm join 192.168.1.110:6443 --token wu5hfy.lkuz9fih6hlqe1jt --discovery-token-ca-cert-hash</span><br></pre></td></tr></table></figure></p>\n<p>kubeadm 默认 master 节点不作为 node 节点使用，初始化完成后会给 master 节点打上 taint 标签，若单机部署，使用以下命令去掉 taint 标签：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl taint nodes --all node-role.kubernetes.io/master-</span><br></pre></td></tr></table></figure></p>\n<p>查看各组件是否正常运行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get pod -n kube-system</span><br><span class=\"line\">NAME                                     READY   STATUS             RESTARTS   AGE</span><br><span class=\"line\">coredns-99b9bb8bd-pgh5t                  1/1     Running            0          48m</span><br><span class=\"line\">etcd                                     1/1     Running            2          48m</span><br><span class=\"line\">kube-apiserver                           1/1     Running            1          48m</span><br><span class=\"line\">kube-controller-manager                  1/1     Running            0          49m</span><br><span class=\"line\">kube-flannel-ds-amd64-b5rjg              1/1     Running            0          31m</span><br><span class=\"line\">kube-proxy-c8ktg                         1/1     Running            0          48m</span><br><span class=\"line\">kube-scheduler                           1/1     Running            2          48m</span><br></pre></td></tr></table></figure>\n<h2 id=\"五、安装-kubernetes-网络\"><a href=\"#五、安装-kubernetes-网络\" class=\"headerlink\" title=\"五、安装 kubernetes 网络\"></a>五、安装 kubernetes 网络</h2><p>kubernetes 本身是不提供网络方案的，但是有很多开源组件可以帮助我们打通容器和容器之间的网络，实现 Kubernetes 要求的网络模型。从实现原理上来说大致分为以下两种：</p>\n<ul>\n<li>overlay 网络，通过封包解包的方式构造一个隧道，代表的方案有 flannel(udp/vxlan）、weave、calico(ipip)，openvswitch 等</li>\n<li>通过路由来实现(更改 iptables 等手段)，flannel(host-gw)，calico(bgp)，macvlan 等</li>\n</ul>\n<p>当然每种方案都有自己适合的场景，flannel 和 calico 是两种最常见的网络方案，我们要根据自己的实际需要进行选择。此次安装选择 flannel 网络：</p>\n<p>此操作也会为 flannel 创建对应的 RBAC 规则，flannel 会以 daemonset 的方式创建出来：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br></pre></td></tr></table></figure></p>\n<p>创建一个 pod 验证集群是否正常：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Pod</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: nginx</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    name: nginx</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  containers:</span><br><span class=\"line\">  - name: nginx</span><br><span class=\"line\">    image: nginx</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">    - containerPort: 80</span><br></pre></td></tr></table></figure>\n<h2 id=\"六、kubeadm-其他相关的操作\"><a href=\"#六、kubeadm-其他相关的操作\" class=\"headerlink\" title=\"六、kubeadm 其他相关的操作\"></a>六、kubeadm 其他相关的操作</h2><p>1、删除安装:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubeadm reset</span><br></pre></td></tr></table></figure></p>\n<p>2、版本升级<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查看可升级的版本</span><br><span class=\"line\">$ kubeadm upgrade plan</span><br><span class=\"line\"></span><br><span class=\"line\"># 升级至指定版本</span><br><span class=\"line\">$ kubeadm upgrade apply [version]</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<ol>\n<li>要执行升级，需要先将 kubeadm 升级到对应的版本；</li>\n<li>kubeadm 并不负责 kubelet 的升级，需要在升级完 master 组件后，手工对 kubelet 进行升级。</li>\n</ol>\n</blockquote>\n<h2 id=\"七、创建过程中的一些-case-记录\"><a href=\"#七、创建过程中的一些-case-记录\" class=\"headerlink\" title=\"七、创建过程中的一些 case 记录\"></a>七、创建过程中的一些 case 记录</h2><h5 id=\"1、flannel-容器启动报错：pod-cidr-not-assgned\"><a href=\"#1、flannel-容器启动报错：pod-cidr-not-assgned\" class=\"headerlink\" title=\"1、flannel 容器启动报错：pod cidr not assgned\"></a>1、flannel 容器启动报错：pod cidr not assgned</h5><p>需要在  /etc/kubernetes/manifests/kube-controller-manager.yaml 文件中添加以下配置：</p>\n<p>–allocate-node-cidrs=true<br>–cluster-cidr=10.244.0.0/16</p>\n<p>参考：<a href=\"https://github.com/coreos/flannel/issues/728\" target=\"_blank\" rel=\"noopener\">https://github.com/coreos/flannel/issues/728</a></p>\n<h5 id=\"2、coredns-容器启动失败报错：-proc-sys-net-ipv6-conf-eth0-accept-dad-no-such-file-or-directory\"><a href=\"#2、coredns-容器启动失败报错：-proc-sys-net-ipv6-conf-eth0-accept-dad-no-such-file-or-directory\" class=\"headerlink\" title=\"2、coredns 容器启动失败报错：/proc/sys/net/ipv6/conf/eth0/accept_dad: no such file or directory\"></a>2、coredns 容器启动失败报错：/proc/sys/net/ipv6/conf/eth0/accept_dad: no such file or directory</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim /etc/default/grub and change the value of kernel parameter ipv6.disable from 1 to 0 in line</span><br><span class=\"line\">$ grub2-mkconfig -o /boot/grub2/grub.cfg</span><br><span class=\"line\">$ shutdown -r now</span><br></pre></td></tr></table></figure>\n<p>参考：<a href=\"https://github.com/containernetworking/cni/issues/569\" target=\"_blank\" rel=\"noopener\">https://github.com/containernetworking/cni/issues/569</a></p>\n<h5 id=\"3、kubeadm-证书有效期问题\"><a href=\"#3、kubeadm-证书有效期问题\" class=\"headerlink\" title=\"3、kubeadm 证书有效期问题\"></a>3、kubeadm 证书有效期问题</h5><p>默认情况下，kubeadm 会生成集群运行所需的所有证书，我们也可以通过提供自己的证书来覆盖此行为。要做到这一点，必须把它们放在 –cert-dir 参数或者配置文件中的 CertificatesDir 指定的目录（默认目录为 /etc/kubernetes/pki），如果存在一个给定的证书和密钥对，kubeadm 将会跳过生成步骤并且使用已存在的文件。例如，可以拷贝一个已有的 CA 到 /etc/kubernetes/pki/ca.crt 和 /etc/kubernetes/pki/ca.key，kubeadm 将会使用这个 CA 来签署其余的证书。所以只要我们自己提供一个有效期很长的证书去覆盖掉默认的证书就可以来避免这个的问题。</p>\n<h5 id=\"4、kubeadm-join-时-token-无法生效\"><a href=\"#4、kubeadm-join-时-token-无法生效\" class=\"headerlink\" title=\"4、kubeadm join 时 token 无法生效\"></a>4、kubeadm join 时 token 无法生效</h5><p>token 的失效为24小时，若忘记或者 token 过期可以使用 <code>kubeadm token create</code> 重新生成 token。</p>\n<h2 id=\"八、总结\"><a href=\"#八、总结\" class=\"headerlink\" title=\"八、总结\"></a>八、总结</h2><p>本篇文章讲述了使用 kubeadm 来搭建一个 kubernetes 集群，kubeadm 暂时还不建议用于生产环境，若部署生产环境请使用二进制文件。kubeadm 搭建出的集群还是有很多不完善的地方，比如，集群 master 组件的参数配置问题，官方默认的并不会满足需求，有许多参数需要根据实际情况进行修改。</p>\n<p>参考：<br><a href=\"https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/\" target=\"_blank\" rel=\"noopener\">Creating a single master cluster with kubeadm</a><br><a href=\"https://github.com/feiskyer/kubernetes-handbook/blob/master/components/kubeadm.md\" target=\"_blank\" rel=\"noopener\">kubeadm 工作原理</a><br><a href=\"http://dockone.io/article/4645\" target=\"_blank\" rel=\"noopener\">DockOne微信分享（一六三）：Kubernetes官方集群部署工具kubeadm原理解析</a><br><a href=\"https://segmentfault.com/a/1190000015787725\" target=\"_blank\" rel=\"noopener\">centos7.2 安装k8s v1.11.0</a></p>\n"},{"title":"kubernetes 中 kubeconfig 的用法","date":"2019-01-09T11:28:30.000Z","type":"kubeconfig","_content":"\n用于配置集群访问信息的文件叫作 kubeconfig 文件，在开启了 TLS 的集群中，每次与集群交互时都需要身份认证，生产环境一般使用证书进行认证，其认证所需要的信息会放在 kubeconfig 文件中。此外，k8s 的组件都可以使用 kubeconfig 连接 apiserver，[client-go ](https://github.com/kubernetes/client-go/blob/master/examples/create-update-delete-deployment/main.go)、operator、helm 等其他组件也使用 kubeconfig 访问 apiserver。\n\n## 一、kubeconfig 配置文件的生成\n\nkubeconfig 的一个示例：\n```\napiVersion: v1\nclusters:\n- cluster:\n    certificate-authority-data: xxx\n    server: https://xxx:6443\n  name: cluster1\n- cluster:\n    certificate-authority-data: xxx\n    server: https://xxx:6443\n  name: cluster2\ncontexts:\n- context:\n    cluster: cluster1\n    user: kubelet\n  name: cluster1-context\n- context:\n    cluster: cluster2\n    user: kubelet\n  name: cluster2-context\ncurrent-context: cluster1-context\nkind: Config\npreferences: {}\nusers:\n- name: kubelet\n  user:\n    client-certificate-data: xxx\n    client-key-data: xxx\n```\n\napiVersion 和 kind 标识客户端解析器的版本和模式，不应手动编辑。 preferences 指定可选（和当前未使用）的 kubectl 首选项。\n\n#### 1、clusters模块\ncluster中包含 kubernetes 集群的端点数据，包括 kubernetes apiserver 的完整 url 以及集群的证书颁发机构。\n\n可以使用 `kubectl config set-cluster` 添加或修改 cluster 条目。\n\n#### 2、users 模块\nuser 定义用于向 kubernetes 集群进行身份验证的客户端凭据。\n\n可用凭证有 `client-certificate、client-key、token 和 username/password`。 \n`username/password` 和 `token` 是二者只能选择一个，但 `client-certificate` 和 `client-key` 可以分别与它们组合。\n\n可以使用 `kubectl config set-credentials` 添加或者修改 user 条目。\n\n#### 3、contexts 模块\n\ncontext 定义了一个命名的`cluster、user、namespace`元组，用于使用提供的认证信息和命名空间将请求发送到指定的集群。\n\n三个都是可选的；\n仅使用 cluster、user、namespace 之一指定上下文，或指定`none`。 \n\n未指定的值或在加载的 kubeconfig 中没有相应条目的命名值将被替换为默认值。\n加载和合并 kubeconfig 文件的规则很简单，但有很多，具体可以查看[加载和合并kubeconfig规则](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/)。\n\n可以使用`kubectl config set-context`添加或修改上下文条目。\n\n#### 4、current-context 模块\n\ncurrent-context 是作为`cluster、user、namespace`元组的 key，\n当 kubectl 从该文件中加载配置的时候会被默认使用。\n\n可以在 kubectl 命令行里覆盖这些值，通过分别传入`--context=CONTEXT、--cluster=CLUSTER、--user=USER 和 --namespace=NAMESPACE`。\n以上示例中若不指定 context 则默认使用 cluster1-context。\n```\nkubectl  get node --kubeconfig=./kubeconfig --context=cluster2-context\n```\n可以使用 `kubectl config use-context` 更改 current-context。\n\n#### 5、kubectl 生成 kubeconfig 的示例\n\nkubectl 可以快速生成 kubeconfig，以下是一个示例：\n```\n$ kubectl config set-credentials myself --username=admin --password=secret\n$ kubectl config set-cluster local-server --server=http://localhost:8080\n$ kubectl config set-context default-context --cluster=local-server --user=myself\n$ kubectl config use-context cluster-context\n$ kubectl config set contexts.default-context.namespace the-right-prefix\n$ kubectl config view\n```\n\n若使用手写 kubeconfig 的方式，推荐一个工具 [kubeval](https://github.com/garethr/kubeval)，可以校验 kubernetes yaml 或 json 格式的配置文件是否正确。\n\n## 二、使用 kubeconfig 文件配置 kuebctl 跨集群认证\n\nkubectl 作为操作 k8s 的一个客户端工具，只要为 kubectl 提供连接 apiserver 的配置(kubeconfig)，kubectl 可以在任何地方操作该集群，当然，若 kubeconfig 文件中配置多个集群，kubectl 也可以轻松地在多个集群之间切换。\n\nkubectl 加载配置文件的顺序：\n1、kubectl 默认连接本机的 8080 端口\n2、从 $HOME/.kube 目录下查找文件名为 config 的文件\n3、通过设置环境变量 KUBECONFIG 或者通过设置去指定其它 kubeconfig 文件\n```\n# 设置 KUBECONFIG 的环境变量\nexport KUBECONFIG=/etc/kubernetes/kubeconfig/kubelet.kubeconfig\n# 指定 kubeconfig 文件\nkubectl get node --kubeconfig=/etc/kubernetes/kubeconfig/kubelet.kubeconfig\n# 使用不同的 context 在多个集群之间切换\nkubectl  get node --kubeconfig=./kubeconfig --context=cluster1-context\n```\n开篇的示例就是多集群认证方式配置的一种。\n\n参考：\nhttps://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/\nhttps://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/\n","source":"_posts/kubeconfig.md","raw":"---\ntitle: kubernetes 中 kubeconfig 的用法\ndate: 2019-01-09 19:28:30\ntags: \"kubeconfig\"\ntype: \"kubeconfig\"\n\n---\n\n用于配置集群访问信息的文件叫作 kubeconfig 文件，在开启了 TLS 的集群中，每次与集群交互时都需要身份认证，生产环境一般使用证书进行认证，其认证所需要的信息会放在 kubeconfig 文件中。此外，k8s 的组件都可以使用 kubeconfig 连接 apiserver，[client-go ](https://github.com/kubernetes/client-go/blob/master/examples/create-update-delete-deployment/main.go)、operator、helm 等其他组件也使用 kubeconfig 访问 apiserver。\n\n## 一、kubeconfig 配置文件的生成\n\nkubeconfig 的一个示例：\n```\napiVersion: v1\nclusters:\n- cluster:\n    certificate-authority-data: xxx\n    server: https://xxx:6443\n  name: cluster1\n- cluster:\n    certificate-authority-data: xxx\n    server: https://xxx:6443\n  name: cluster2\ncontexts:\n- context:\n    cluster: cluster1\n    user: kubelet\n  name: cluster1-context\n- context:\n    cluster: cluster2\n    user: kubelet\n  name: cluster2-context\ncurrent-context: cluster1-context\nkind: Config\npreferences: {}\nusers:\n- name: kubelet\n  user:\n    client-certificate-data: xxx\n    client-key-data: xxx\n```\n\napiVersion 和 kind 标识客户端解析器的版本和模式，不应手动编辑。 preferences 指定可选（和当前未使用）的 kubectl 首选项。\n\n#### 1、clusters模块\ncluster中包含 kubernetes 集群的端点数据，包括 kubernetes apiserver 的完整 url 以及集群的证书颁发机构。\n\n可以使用 `kubectl config set-cluster` 添加或修改 cluster 条目。\n\n#### 2、users 模块\nuser 定义用于向 kubernetes 集群进行身份验证的客户端凭据。\n\n可用凭证有 `client-certificate、client-key、token 和 username/password`。 \n`username/password` 和 `token` 是二者只能选择一个，但 `client-certificate` 和 `client-key` 可以分别与它们组合。\n\n可以使用 `kubectl config set-credentials` 添加或者修改 user 条目。\n\n#### 3、contexts 模块\n\ncontext 定义了一个命名的`cluster、user、namespace`元组，用于使用提供的认证信息和命名空间将请求发送到指定的集群。\n\n三个都是可选的；\n仅使用 cluster、user、namespace 之一指定上下文，或指定`none`。 \n\n未指定的值或在加载的 kubeconfig 中没有相应条目的命名值将被替换为默认值。\n加载和合并 kubeconfig 文件的规则很简单，但有很多，具体可以查看[加载和合并kubeconfig规则](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/)。\n\n可以使用`kubectl config set-context`添加或修改上下文条目。\n\n#### 4、current-context 模块\n\ncurrent-context 是作为`cluster、user、namespace`元组的 key，\n当 kubectl 从该文件中加载配置的时候会被默认使用。\n\n可以在 kubectl 命令行里覆盖这些值，通过分别传入`--context=CONTEXT、--cluster=CLUSTER、--user=USER 和 --namespace=NAMESPACE`。\n以上示例中若不指定 context 则默认使用 cluster1-context。\n```\nkubectl  get node --kubeconfig=./kubeconfig --context=cluster2-context\n```\n可以使用 `kubectl config use-context` 更改 current-context。\n\n#### 5、kubectl 生成 kubeconfig 的示例\n\nkubectl 可以快速生成 kubeconfig，以下是一个示例：\n```\n$ kubectl config set-credentials myself --username=admin --password=secret\n$ kubectl config set-cluster local-server --server=http://localhost:8080\n$ kubectl config set-context default-context --cluster=local-server --user=myself\n$ kubectl config use-context cluster-context\n$ kubectl config set contexts.default-context.namespace the-right-prefix\n$ kubectl config view\n```\n\n若使用手写 kubeconfig 的方式，推荐一个工具 [kubeval](https://github.com/garethr/kubeval)，可以校验 kubernetes yaml 或 json 格式的配置文件是否正确。\n\n## 二、使用 kubeconfig 文件配置 kuebctl 跨集群认证\n\nkubectl 作为操作 k8s 的一个客户端工具，只要为 kubectl 提供连接 apiserver 的配置(kubeconfig)，kubectl 可以在任何地方操作该集群，当然，若 kubeconfig 文件中配置多个集群，kubectl 也可以轻松地在多个集群之间切换。\n\nkubectl 加载配置文件的顺序：\n1、kubectl 默认连接本机的 8080 端口\n2、从 $HOME/.kube 目录下查找文件名为 config 的文件\n3、通过设置环境变量 KUBECONFIG 或者通过设置去指定其它 kubeconfig 文件\n```\n# 设置 KUBECONFIG 的环境变量\nexport KUBECONFIG=/etc/kubernetes/kubeconfig/kubelet.kubeconfig\n# 指定 kubeconfig 文件\nkubectl get node --kubeconfig=/etc/kubernetes/kubeconfig/kubelet.kubeconfig\n# 使用不同的 context 在多个集群之间切换\nkubectl  get node --kubeconfig=./kubeconfig --context=cluster1-context\n```\n开篇的示例就是多集群认证方式配置的一种。\n\n参考：\nhttps://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/\nhttps://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/\n","slug":"kubeconfig","published":1,"updated":"2019-06-01T14:26:16.309Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjycnhjm5000t5vwn79yl25ce","content":"<p>用于配置集群访问信息的文件叫作 kubeconfig 文件，在开启了 TLS 的集群中，每次与集群交互时都需要身份认证，生产环境一般使用证书进行认证，其认证所需要的信息会放在 kubeconfig 文件中。此外，k8s 的组件都可以使用 kubeconfig 连接 apiserver，<a href=\"https://github.com/kubernetes/client-go/blob/master/examples/create-update-delete-deployment/main.go\" target=\"_blank\" rel=\"noopener\">client-go </a>、operator、helm 等其他组件也使用 kubeconfig 访问 apiserver。</p>\n<h2 id=\"一、kubeconfig-配置文件的生成\"><a href=\"#一、kubeconfig-配置文件的生成\" class=\"headerlink\" title=\"一、kubeconfig 配置文件的生成\"></a>一、kubeconfig 配置文件的生成</h2><p>kubeconfig 的一个示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">clusters:</span><br><span class=\"line\">- cluster:</span><br><span class=\"line\">    certificate-authority-data: xxx</span><br><span class=\"line\">    server: https://xxx:6443</span><br><span class=\"line\">  name: cluster1</span><br><span class=\"line\">- cluster:</span><br><span class=\"line\">    certificate-authority-data: xxx</span><br><span class=\"line\">    server: https://xxx:6443</span><br><span class=\"line\">  name: cluster2</span><br><span class=\"line\">contexts:</span><br><span class=\"line\">- context:</span><br><span class=\"line\">    cluster: cluster1</span><br><span class=\"line\">    user: kubelet</span><br><span class=\"line\">  name: cluster1-context</span><br><span class=\"line\">- context:</span><br><span class=\"line\">    cluster: cluster2</span><br><span class=\"line\">    user: kubelet</span><br><span class=\"line\">  name: cluster2-context</span><br><span class=\"line\">current-context: cluster1-context</span><br><span class=\"line\">kind: Config</span><br><span class=\"line\">preferences: &#123;&#125;</span><br><span class=\"line\">users:</span><br><span class=\"line\">- name: kubelet</span><br><span class=\"line\">  user:</span><br><span class=\"line\">    client-certificate-data: xxx</span><br><span class=\"line\">    client-key-data: xxx</span><br></pre></td></tr></table></figure></p>\n<p>apiVersion 和 kind 标识客户端解析器的版本和模式，不应手动编辑。 preferences 指定可选（和当前未使用）的 kubectl 首选项。</p>\n<h4 id=\"1、clusters模块\"><a href=\"#1、clusters模块\" class=\"headerlink\" title=\"1、clusters模块\"></a>1、clusters模块</h4><p>cluster中包含 kubernetes 集群的端点数据，包括 kubernetes apiserver 的完整 url 以及集群的证书颁发机构。</p>\n<p>可以使用 <code>kubectl config set-cluster</code> 添加或修改 cluster 条目。</p>\n<h4 id=\"2、users-模块\"><a href=\"#2、users-模块\" class=\"headerlink\" title=\"2、users 模块\"></a>2、users 模块</h4><p>user 定义用于向 kubernetes 集群进行身份验证的客户端凭据。</p>\n<p>可用凭证有 <code>client-certificate、client-key、token 和 username/password</code>。<br><code>username/password</code> 和 <code>token</code> 是二者只能选择一个，但 <code>client-certificate</code> 和 <code>client-key</code> 可以分别与它们组合。</p>\n<p>可以使用 <code>kubectl config set-credentials</code> 添加或者修改 user 条目。</p>\n<h4 id=\"3、contexts-模块\"><a href=\"#3、contexts-模块\" class=\"headerlink\" title=\"3、contexts 模块\"></a>3、contexts 模块</h4><p>context 定义了一个命名的<code>cluster、user、namespace</code>元组，用于使用提供的认证信息和命名空间将请求发送到指定的集群。</p>\n<p>三个都是可选的；<br>仅使用 cluster、user、namespace 之一指定上下文，或指定<code>none</code>。 </p>\n<p>未指定的值或在加载的 kubeconfig 中没有相应条目的命名值将被替换为默认值。<br>加载和合并 kubeconfig 文件的规则很简单，但有很多，具体可以查看<a href=\"https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/\" target=\"_blank\" rel=\"noopener\">加载和合并kubeconfig规则</a>。</p>\n<p>可以使用<code>kubectl config set-context</code>添加或修改上下文条目。</p>\n<h4 id=\"4、current-context-模块\"><a href=\"#4、current-context-模块\" class=\"headerlink\" title=\"4、current-context 模块\"></a>4、current-context 模块</h4><p>current-context 是作为<code>cluster、user、namespace</code>元组的 key，<br>当 kubectl 从该文件中加载配置的时候会被默认使用。</p>\n<p>可以在 kubectl 命令行里覆盖这些值，通过分别传入<code>--context=CONTEXT、--cluster=CLUSTER、--user=USER 和 --namespace=NAMESPACE</code>。<br>以上示例中若不指定 context 则默认使用 cluster1-context。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl  get node --kubeconfig=./kubeconfig --context=cluster2-context</span><br></pre></td></tr></table></figure></p>\n<p>可以使用 <code>kubectl config use-context</code> 更改 current-context。</p>\n<h4 id=\"5、kubectl-生成-kubeconfig-的示例\"><a href=\"#5、kubectl-生成-kubeconfig-的示例\" class=\"headerlink\" title=\"5、kubectl 生成 kubeconfig 的示例\"></a>5、kubectl 生成 kubeconfig 的示例</h4><p>kubectl 可以快速生成 kubeconfig，以下是一个示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl config set-credentials myself --username=admin --password=secret</span><br><span class=\"line\">$ kubectl config set-cluster local-server --server=http://localhost:8080</span><br><span class=\"line\">$ kubectl config set-context default-context --cluster=local-server --user=myself</span><br><span class=\"line\">$ kubectl config use-context cluster-context</span><br><span class=\"line\">$ kubectl config set contexts.default-context.namespace the-right-prefix</span><br><span class=\"line\">$ kubectl config view</span><br></pre></td></tr></table></figure></p>\n<p>若使用手写 kubeconfig 的方式，推荐一个工具 <a href=\"https://github.com/garethr/kubeval\" target=\"_blank\" rel=\"noopener\">kubeval</a>，可以校验 kubernetes yaml 或 json 格式的配置文件是否正确。</p>\n<h2 id=\"二、使用-kubeconfig-文件配置-kuebctl-跨集群认证\"><a href=\"#二、使用-kubeconfig-文件配置-kuebctl-跨集群认证\" class=\"headerlink\" title=\"二、使用 kubeconfig 文件配置 kuebctl 跨集群认证\"></a>二、使用 kubeconfig 文件配置 kuebctl 跨集群认证</h2><p>kubectl 作为操作 k8s 的一个客户端工具，只要为 kubectl 提供连接 apiserver 的配置(kubeconfig)，kubectl 可以在任何地方操作该集群，当然，若 kubeconfig 文件中配置多个集群，kubectl 也可以轻松地在多个集群之间切换。</p>\n<p>kubectl 加载配置文件的顺序：<br>1、kubectl 默认连接本机的 8080 端口<br>2、从 $HOME/.kube 目录下查找文件名为 config 的文件<br>3、通过设置环境变量 KUBECONFIG 或者通过设置去指定其它 kubeconfig 文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 设置 KUBECONFIG 的环境变量</span><br><span class=\"line\">export KUBECONFIG=/etc/kubernetes/kubeconfig/kubelet.kubeconfig</span><br><span class=\"line\"># 指定 kubeconfig 文件</span><br><span class=\"line\">kubectl get node --kubeconfig=/etc/kubernetes/kubeconfig/kubelet.kubeconfig</span><br><span class=\"line\"># 使用不同的 context 在多个集群之间切换</span><br><span class=\"line\">kubectl  get node --kubeconfig=./kubeconfig --context=cluster1-context</span><br></pre></td></tr></table></figure></p>\n<p>开篇的示例就是多集群认证方式配置的一种。</p>\n<p>参考：<br><a href=\"https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/\" target=\"_blank\" rel=\"noopener\">https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/</a><br><a href=\"https://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/\" target=\"_blank\" rel=\"noopener\">https://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>用于配置集群访问信息的文件叫作 kubeconfig 文件，在开启了 TLS 的集群中，每次与集群交互时都需要身份认证，生产环境一般使用证书进行认证，其认证所需要的信息会放在 kubeconfig 文件中。此外，k8s 的组件都可以使用 kubeconfig 连接 apiserver，<a href=\"https://github.com/kubernetes/client-go/blob/master/examples/create-update-delete-deployment/main.go\" target=\"_blank\" rel=\"noopener\">client-go </a>、operator、helm 等其他组件也使用 kubeconfig 访问 apiserver。</p>\n<h2 id=\"一、kubeconfig-配置文件的生成\"><a href=\"#一、kubeconfig-配置文件的生成\" class=\"headerlink\" title=\"一、kubeconfig 配置文件的生成\"></a>一、kubeconfig 配置文件的生成</h2><p>kubeconfig 的一个示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">clusters:</span><br><span class=\"line\">- cluster:</span><br><span class=\"line\">    certificate-authority-data: xxx</span><br><span class=\"line\">    server: https://xxx:6443</span><br><span class=\"line\">  name: cluster1</span><br><span class=\"line\">- cluster:</span><br><span class=\"line\">    certificate-authority-data: xxx</span><br><span class=\"line\">    server: https://xxx:6443</span><br><span class=\"line\">  name: cluster2</span><br><span class=\"line\">contexts:</span><br><span class=\"line\">- context:</span><br><span class=\"line\">    cluster: cluster1</span><br><span class=\"line\">    user: kubelet</span><br><span class=\"line\">  name: cluster1-context</span><br><span class=\"line\">- context:</span><br><span class=\"line\">    cluster: cluster2</span><br><span class=\"line\">    user: kubelet</span><br><span class=\"line\">  name: cluster2-context</span><br><span class=\"line\">current-context: cluster1-context</span><br><span class=\"line\">kind: Config</span><br><span class=\"line\">preferences: &#123;&#125;</span><br><span class=\"line\">users:</span><br><span class=\"line\">- name: kubelet</span><br><span class=\"line\">  user:</span><br><span class=\"line\">    client-certificate-data: xxx</span><br><span class=\"line\">    client-key-data: xxx</span><br></pre></td></tr></table></figure></p>\n<p>apiVersion 和 kind 标识客户端解析器的版本和模式，不应手动编辑。 preferences 指定可选（和当前未使用）的 kubectl 首选项。</p>\n<h4 id=\"1、clusters模块\"><a href=\"#1、clusters模块\" class=\"headerlink\" title=\"1、clusters模块\"></a>1、clusters模块</h4><p>cluster中包含 kubernetes 集群的端点数据，包括 kubernetes apiserver 的完整 url 以及集群的证书颁发机构。</p>\n<p>可以使用 <code>kubectl config set-cluster</code> 添加或修改 cluster 条目。</p>\n<h4 id=\"2、users-模块\"><a href=\"#2、users-模块\" class=\"headerlink\" title=\"2、users 模块\"></a>2、users 模块</h4><p>user 定义用于向 kubernetes 集群进行身份验证的客户端凭据。</p>\n<p>可用凭证有 <code>client-certificate、client-key、token 和 username/password</code>。<br><code>username/password</code> 和 <code>token</code> 是二者只能选择一个，但 <code>client-certificate</code> 和 <code>client-key</code> 可以分别与它们组合。</p>\n<p>可以使用 <code>kubectl config set-credentials</code> 添加或者修改 user 条目。</p>\n<h4 id=\"3、contexts-模块\"><a href=\"#3、contexts-模块\" class=\"headerlink\" title=\"3、contexts 模块\"></a>3、contexts 模块</h4><p>context 定义了一个命名的<code>cluster、user、namespace</code>元组，用于使用提供的认证信息和命名空间将请求发送到指定的集群。</p>\n<p>三个都是可选的；<br>仅使用 cluster、user、namespace 之一指定上下文，或指定<code>none</code>。 </p>\n<p>未指定的值或在加载的 kubeconfig 中没有相应条目的命名值将被替换为默认值。<br>加载和合并 kubeconfig 文件的规则很简单，但有很多，具体可以查看<a href=\"https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/\" target=\"_blank\" rel=\"noopener\">加载和合并kubeconfig规则</a>。</p>\n<p>可以使用<code>kubectl config set-context</code>添加或修改上下文条目。</p>\n<h4 id=\"4、current-context-模块\"><a href=\"#4、current-context-模块\" class=\"headerlink\" title=\"4、current-context 模块\"></a>4、current-context 模块</h4><p>current-context 是作为<code>cluster、user、namespace</code>元组的 key，<br>当 kubectl 从该文件中加载配置的时候会被默认使用。</p>\n<p>可以在 kubectl 命令行里覆盖这些值，通过分别传入<code>--context=CONTEXT、--cluster=CLUSTER、--user=USER 和 --namespace=NAMESPACE</code>。<br>以上示例中若不指定 context 则默认使用 cluster1-context。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl  get node --kubeconfig=./kubeconfig --context=cluster2-context</span><br></pre></td></tr></table></figure></p>\n<p>可以使用 <code>kubectl config use-context</code> 更改 current-context。</p>\n<h4 id=\"5、kubectl-生成-kubeconfig-的示例\"><a href=\"#5、kubectl-生成-kubeconfig-的示例\" class=\"headerlink\" title=\"5、kubectl 生成 kubeconfig 的示例\"></a>5、kubectl 生成 kubeconfig 的示例</h4><p>kubectl 可以快速生成 kubeconfig，以下是一个示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl config set-credentials myself --username=admin --password=secret</span><br><span class=\"line\">$ kubectl config set-cluster local-server --server=http://localhost:8080</span><br><span class=\"line\">$ kubectl config set-context default-context --cluster=local-server --user=myself</span><br><span class=\"line\">$ kubectl config use-context cluster-context</span><br><span class=\"line\">$ kubectl config set contexts.default-context.namespace the-right-prefix</span><br><span class=\"line\">$ kubectl config view</span><br></pre></td></tr></table></figure></p>\n<p>若使用手写 kubeconfig 的方式，推荐一个工具 <a href=\"https://github.com/garethr/kubeval\" target=\"_blank\" rel=\"noopener\">kubeval</a>，可以校验 kubernetes yaml 或 json 格式的配置文件是否正确。</p>\n<h2 id=\"二、使用-kubeconfig-文件配置-kuebctl-跨集群认证\"><a href=\"#二、使用-kubeconfig-文件配置-kuebctl-跨集群认证\" class=\"headerlink\" title=\"二、使用 kubeconfig 文件配置 kuebctl 跨集群认证\"></a>二、使用 kubeconfig 文件配置 kuebctl 跨集群认证</h2><p>kubectl 作为操作 k8s 的一个客户端工具，只要为 kubectl 提供连接 apiserver 的配置(kubeconfig)，kubectl 可以在任何地方操作该集群，当然，若 kubeconfig 文件中配置多个集群，kubectl 也可以轻松地在多个集群之间切换。</p>\n<p>kubectl 加载配置文件的顺序：<br>1、kubectl 默认连接本机的 8080 端口<br>2、从 $HOME/.kube 目录下查找文件名为 config 的文件<br>3、通过设置环境变量 KUBECONFIG 或者通过设置去指定其它 kubeconfig 文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 设置 KUBECONFIG 的环境变量</span><br><span class=\"line\">export KUBECONFIG=/etc/kubernetes/kubeconfig/kubelet.kubeconfig</span><br><span class=\"line\"># 指定 kubeconfig 文件</span><br><span class=\"line\">kubectl get node --kubeconfig=/etc/kubernetes/kubeconfig/kubelet.kubeconfig</span><br><span class=\"line\"># 使用不同的 context 在多个集群之间切换</span><br><span class=\"line\">kubectl  get node --kubeconfig=./kubeconfig --context=cluster1-context</span><br></pre></td></tr></table></figure></p>\n<p>开篇的示例就是多集群认证方式配置的一种。</p>\n<p>参考：<br><a href=\"https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/\" target=\"_blank\" rel=\"noopener\">https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/</a><br><a href=\"https://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/\" target=\"_blank\" rel=\"noopener\">https://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/</a></p>\n"},{"title":"使用插件扩展 kubectl","date":"2019-05-16T03:20:30.000Z","type":"kubectl plugin","_content":"由于笔者所维护的集群规模较大，经常需要使用 kubectl 来排查一些问题，但是 kubectl 功能有限，有些操作还是需要写一个脚本对 kubectl 做一些封装才能达到目的。比如我经常做的一个操作就是排查一下线上哪些宿主的 cpu/memory request 使用率超过某个阈值，kubectl 并不能直接看到一个 master 下所有宿主的 request 使用率，但可以使用 `kubectl describe node xxx`查看某个宿主机的 request 使用率，所以只好写一个脚本来扫一遍了。\n\n```\n#!/bin/bash\n\necho -e \"node\\tcpu_requets  memory_requets\"\nfor i in `kubectl get node | grep -v NAME | awk '{print $1}'`;do\n    res=$(kubectl describe node $i  | grep -A 3 \"Resource\")\n    cpu_requets=$(echo ${res} | awk '{print $9}' | awk -F '%' '{print $1}' | awk -F '(' '{print $2}')\n    memory_requets=$(echo ${res} | awk '{print $14}' | awk -F '%' '{print $1}' | awk -F '(' '{print $2}')\n    echo -e \"$i\\t${cpu_requets} \\t${memory_requets}\"\ndone\n```\n\n类似的需求比较多，此处不一一列举，这种操作经常需要做，虽然写一个脚本也能完全搞定，但确实比较 low，也不便提供给别人使用，基于此了解到目前官方对 kubectl 的插件机制做了一些改进，对 kubectl 的扩展也比较容易，所以下文会带你了解一下 kubectl 的扩展功能。\n\n\n\n#### 一、编写 kubectl 插件\n\nkubectl 命令从 `v1.8.0` 版本开始支持插件机制，之后的版本中我们都可以对 `kubectl` 命令进行扩展，kubernetes 在 `v1.12` 以后插件可以直接是以 kubectl- 开头命令的一个二进制文件，插件机制在 `v1.14` 进入 GA 状态，这种改进是希望用户以二进制文件形式可以扩展自己的 kubectl 子命令。当然，kubectl 插件机制是与语言无关的，也就是说你可以用任何语言编写插件。\n\n\n\n如 [kubernetes 官方文档](https://kubernetes.io/docs/tasks/extend-kubectl/kubectl-plugins/)中描述，只要将二进制文件放在系统 PATH 下，kubectl 即可识别，二进制文件类似 `kubectl-foo-bar`，并且在使用时 kubectl 会匹配最长的二进制文件。\n\n官方建议使用  [k8s.io/cli-runtime](https://github.com/kubernetes/cli-runtime) 库进行编写，若你的插件需要支持一些命令行参数，可以参考使用，官方也给了一个例子 [sample-cli-plugin](https://github.com/kubernetes/sample-cli-plugin)。\n\n\n\n还是回到最初的问题，对于获取一个集群写所有 node 的资源使用率，笔者基于也编写了一个简单的插件。\n\n```\n// 安装插件\n\n$ CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o bin/kubectl-view-node-resource cmd/view-node-resource/main.go\n\n$ mv bin/kubectl-view-node-resource /usr/bin/   \n```\n\n\n\n使用 `kubectl plugin list` 查看 PATH 下有哪些可用的插件。\n\n```\n// 查看插件\n\n$ kubectl plugin list\nThe following kubectl-compatible plugins are available:\n\n/usr/bin/kubectl-view-node-resource\n```\n\n```\n// 使用插件\n\n$ kubectl view node taints --help\nA longer description that spans multiple lines and likely contains\nexamples and usage of using your application. For example:\nCobra is a CLI library for Go that empowers applications.\nThis application is a tool to generate the needed files\nto quickly create a Cobra application.\n\nUsage:\n  view-node-taints [flags]\n\nFlags:\n      --config string   config file (default is $HOME/.view-node-taints.yaml)\n  -h, --help            help for view-node-taints\n  -t, --toggle          Help message for toggle\n\n\n$ kubectl view node resource\n Name            PodCount  CPURequests  MemoryRequests  CPULimits     MemoryLimits\n 192.168.1.110   4         0 (0.00%)    6.4 (41.26%)    8 (100.00%)   16.0 (103.14%)\n```\n\n\n\n此外，还开发一个查看集群下所有 node taints 的插件，kubectl 支持查看宿主的 label，但是没有直接查看所有宿主 taints 的命令，插件效果如下：\n\n```\n$ kubectl view node taints\n Name            Status                       Age   Version                         Taints\n 192.168.1.110   Ready,SchedulingDisabled     49d   v1.8.1-35+9406f9d9909c61-dirty  enabledDiskSchedule=true:NoSchedule\n```\n\n> 插件代码地址：[kubectl-plugin](https://github.com/gosoon/kubectl-plugin)\n\n\n\n#### 二、kubectl 插件管理工具 krew\n\n上文讲了如何编写一个插件，但是官方也提供一个插件库并提供了一个插件管理工具 [krew](https://github.com/kubernetes-sigs/krew)  ，[krew](https://github.com/kubernetes-sigs/krew) 是 kubectl 插件的管理器，使用 krew 可以轻松的查找、安装和管理 kubectl 插件，它类似于 yum、apt、 dnf，krew 也可以帮助你将已写好的插件在多个平台上打包和分发，krew 自己也作为一个 kubectl 插件存在。\n\n> krew 仅支持在 v1.12 及之后的版本中使用。\n\n\n\n1、安装 krew\n\n```\n$ (\n  set -x; cd \"$(mktemp -d)\" &&\n  curl -fsSLO \"https://storage.googleapis.com/krew/v0.2.1/krew.{tar.gz,yaml}\" &&\n  tar zxvf krew.tar.gz &&\n  ./krew-\"$(uname | tr '[:upper:]' '[:lower:]')_amd64\" install \\\n    --manifest=krew.yaml --archive=krew.tar.gz\n)\n\n$ export PATH=\"${KREW_ROOT:-$HOME/.krew}/bin:$PATH\"\n```\n\n2、krew 的使用\n\n```\n$ kubectl krew search               \t\t\t\t\t\t\t\t# show all plugins\n$ kubectl krew install view-secret  \t\t\t\t\t\t\t\t# install a plugin named \"view-secret\"\n$ kubectl view-secret default-token-4cwvh           # use the plugin\n$ kubectl krew upgrade              \t\t\t\t\t\t\t\t# upgrade installed plugins\n$ kubectl krew remove view-secret   \t\t\t\t\t\t\t\t# uninstall a plugin\n```\n\n若想让你自己的插件加入到 krew 的索引中，可以参考：[how to package and publish a plugin for krew](https://github.com/kubernetes-sigs/krew/blob/master/docs/DEVELOPER_GUIDE.md)。\n\n\n\n参考：\n\n[kubectl 插件命明规范](https://github.com/kubernetes-sigs/krew/blob/master/docs/NAMING_GUIDE.md)\n\nhttps://kubernetes.io/docs/tasks/extend-kubectl/kubectl-plugins/\n\nhttps://github.com/gosoon/kubectl-plugin\n","source":"_posts/kubectl_plugin.md","raw":"---\ntitle: 使用插件扩展 kubectl\ndate: 2019-05-16 11:20:30\ntags: \"kubectl plugin\"\ntype: \"kubectl plugin\"\n\n---\n由于笔者所维护的集群规模较大，经常需要使用 kubectl 来排查一些问题，但是 kubectl 功能有限，有些操作还是需要写一个脚本对 kubectl 做一些封装才能达到目的。比如我经常做的一个操作就是排查一下线上哪些宿主的 cpu/memory request 使用率超过某个阈值，kubectl 并不能直接看到一个 master 下所有宿主的 request 使用率，但可以使用 `kubectl describe node xxx`查看某个宿主机的 request 使用率，所以只好写一个脚本来扫一遍了。\n\n```\n#!/bin/bash\n\necho -e \"node\\tcpu_requets  memory_requets\"\nfor i in `kubectl get node | grep -v NAME | awk '{print $1}'`;do\n    res=$(kubectl describe node $i  | grep -A 3 \"Resource\")\n    cpu_requets=$(echo ${res} | awk '{print $9}' | awk -F '%' '{print $1}' | awk -F '(' '{print $2}')\n    memory_requets=$(echo ${res} | awk '{print $14}' | awk -F '%' '{print $1}' | awk -F '(' '{print $2}')\n    echo -e \"$i\\t${cpu_requets} \\t${memory_requets}\"\ndone\n```\n\n类似的需求比较多，此处不一一列举，这种操作经常需要做，虽然写一个脚本也能完全搞定，但确实比较 low，也不便提供给别人使用，基于此了解到目前官方对 kubectl 的插件机制做了一些改进，对 kubectl 的扩展也比较容易，所以下文会带你了解一下 kubectl 的扩展功能。\n\n\n\n#### 一、编写 kubectl 插件\n\nkubectl 命令从 `v1.8.0` 版本开始支持插件机制，之后的版本中我们都可以对 `kubectl` 命令进行扩展，kubernetes 在 `v1.12` 以后插件可以直接是以 kubectl- 开头命令的一个二进制文件，插件机制在 `v1.14` 进入 GA 状态，这种改进是希望用户以二进制文件形式可以扩展自己的 kubectl 子命令。当然，kubectl 插件机制是与语言无关的，也就是说你可以用任何语言编写插件。\n\n\n\n如 [kubernetes 官方文档](https://kubernetes.io/docs/tasks/extend-kubectl/kubectl-plugins/)中描述，只要将二进制文件放在系统 PATH 下，kubectl 即可识别，二进制文件类似 `kubectl-foo-bar`，并且在使用时 kubectl 会匹配最长的二进制文件。\n\n官方建议使用  [k8s.io/cli-runtime](https://github.com/kubernetes/cli-runtime) 库进行编写，若你的插件需要支持一些命令行参数，可以参考使用，官方也给了一个例子 [sample-cli-plugin](https://github.com/kubernetes/sample-cli-plugin)。\n\n\n\n还是回到最初的问题，对于获取一个集群写所有 node 的资源使用率，笔者基于也编写了一个简单的插件。\n\n```\n// 安装插件\n\n$ CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o bin/kubectl-view-node-resource cmd/view-node-resource/main.go\n\n$ mv bin/kubectl-view-node-resource /usr/bin/   \n```\n\n\n\n使用 `kubectl plugin list` 查看 PATH 下有哪些可用的插件。\n\n```\n// 查看插件\n\n$ kubectl plugin list\nThe following kubectl-compatible plugins are available:\n\n/usr/bin/kubectl-view-node-resource\n```\n\n```\n// 使用插件\n\n$ kubectl view node taints --help\nA longer description that spans multiple lines and likely contains\nexamples and usage of using your application. For example:\nCobra is a CLI library for Go that empowers applications.\nThis application is a tool to generate the needed files\nto quickly create a Cobra application.\n\nUsage:\n  view-node-taints [flags]\n\nFlags:\n      --config string   config file (default is $HOME/.view-node-taints.yaml)\n  -h, --help            help for view-node-taints\n  -t, --toggle          Help message for toggle\n\n\n$ kubectl view node resource\n Name            PodCount  CPURequests  MemoryRequests  CPULimits     MemoryLimits\n 192.168.1.110   4         0 (0.00%)    6.4 (41.26%)    8 (100.00%)   16.0 (103.14%)\n```\n\n\n\n此外，还开发一个查看集群下所有 node taints 的插件，kubectl 支持查看宿主的 label，但是没有直接查看所有宿主 taints 的命令，插件效果如下：\n\n```\n$ kubectl view node taints\n Name            Status                       Age   Version                         Taints\n 192.168.1.110   Ready,SchedulingDisabled     49d   v1.8.1-35+9406f9d9909c61-dirty  enabledDiskSchedule=true:NoSchedule\n```\n\n> 插件代码地址：[kubectl-plugin](https://github.com/gosoon/kubectl-plugin)\n\n\n\n#### 二、kubectl 插件管理工具 krew\n\n上文讲了如何编写一个插件，但是官方也提供一个插件库并提供了一个插件管理工具 [krew](https://github.com/kubernetes-sigs/krew)  ，[krew](https://github.com/kubernetes-sigs/krew) 是 kubectl 插件的管理器，使用 krew 可以轻松的查找、安装和管理 kubectl 插件，它类似于 yum、apt、 dnf，krew 也可以帮助你将已写好的插件在多个平台上打包和分发，krew 自己也作为一个 kubectl 插件存在。\n\n> krew 仅支持在 v1.12 及之后的版本中使用。\n\n\n\n1、安装 krew\n\n```\n$ (\n  set -x; cd \"$(mktemp -d)\" &&\n  curl -fsSLO \"https://storage.googleapis.com/krew/v0.2.1/krew.{tar.gz,yaml}\" &&\n  tar zxvf krew.tar.gz &&\n  ./krew-\"$(uname | tr '[:upper:]' '[:lower:]')_amd64\" install \\\n    --manifest=krew.yaml --archive=krew.tar.gz\n)\n\n$ export PATH=\"${KREW_ROOT:-$HOME/.krew}/bin:$PATH\"\n```\n\n2、krew 的使用\n\n```\n$ kubectl krew search               \t\t\t\t\t\t\t\t# show all plugins\n$ kubectl krew install view-secret  \t\t\t\t\t\t\t\t# install a plugin named \"view-secret\"\n$ kubectl view-secret default-token-4cwvh           # use the plugin\n$ kubectl krew upgrade              \t\t\t\t\t\t\t\t# upgrade installed plugins\n$ kubectl krew remove view-secret   \t\t\t\t\t\t\t\t# uninstall a plugin\n```\n\n若想让你自己的插件加入到 krew 的索引中，可以参考：[how to package and publish a plugin for krew](https://github.com/kubernetes-sigs/krew/blob/master/docs/DEVELOPER_GUIDE.md)。\n\n\n\n参考：\n\n[kubectl 插件命明规范](https://github.com/kubernetes-sigs/krew/blob/master/docs/NAMING_GUIDE.md)\n\nhttps://kubernetes.io/docs/tasks/extend-kubectl/kubectl-plugins/\n\nhttps://github.com/gosoon/kubectl-plugin\n","slug":"kubectl_plugin","published":1,"updated":"2019-06-01T14:26:16.309Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjycnhjm6000v5vwn15apflki","content":"<p>由于笔者所维护的集群规模较大，经常需要使用 kubectl 来排查一些问题，但是 kubectl 功能有限，有些操作还是需要写一个脚本对 kubectl 做一些封装才能达到目的。比如我经常做的一个操作就是排查一下线上哪些宿主的 cpu/memory request 使用率超过某个阈值，kubectl 并不能直接看到一个 master 下所有宿主的 request 使用率，但可以使用 <code>kubectl describe node xxx</code>查看某个宿主机的 request 使用率，所以只好写一个脚本来扫一遍了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">echo -e &quot;node\\tcpu_requets  memory_requets&quot;</span><br><span class=\"line\">for i in `kubectl get node | grep -v NAME | awk &apos;&#123;print $1&#125;&apos;`;do</span><br><span class=\"line\">    res=$(kubectl describe node $i  | grep -A 3 &quot;Resource&quot;)</span><br><span class=\"line\">    cpu_requets=$(echo $&#123;res&#125; | awk &apos;&#123;print $9&#125;&apos; | awk -F &apos;%&apos; &apos;&#123;print $1&#125;&apos; | awk -F &apos;(&apos; &apos;&#123;print $2&#125;&apos;)</span><br><span class=\"line\">    memory_requets=$(echo $&#123;res&#125; | awk &apos;&#123;print $14&#125;&apos; | awk -F &apos;%&apos; &apos;&#123;print $1&#125;&apos; | awk -F &apos;(&apos; &apos;&#123;print $2&#125;&apos;)</span><br><span class=\"line\">    echo -e &quot;$i\\t$&#123;cpu_requets&#125; \\t$&#123;memory_requets&#125;&quot;</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<p>类似的需求比较多，此处不一一列举，这种操作经常需要做，虽然写一个脚本也能完全搞定，但确实比较 low，也不便提供给别人使用，基于此了解到目前官方对 kubectl 的插件机制做了一些改进，对 kubectl 的扩展也比较容易，所以下文会带你了解一下 kubectl 的扩展功能。</p>\n<h4 id=\"一、编写-kubectl-插件\"><a href=\"#一、编写-kubectl-插件\" class=\"headerlink\" title=\"一、编写 kubectl 插件\"></a>一、编写 kubectl 插件</h4><p>kubectl 命令从 <code>v1.8.0</code> 版本开始支持插件机制，之后的版本中我们都可以对 <code>kubectl</code> 命令进行扩展，kubernetes 在 <code>v1.12</code> 以后插件可以直接是以 kubectl- 开头命令的一个二进制文件，插件机制在 <code>v1.14</code> 进入 GA 状态，这种改进是希望用户以二进制文件形式可以扩展自己的 kubectl 子命令。当然，kubectl 插件机制是与语言无关的，也就是说你可以用任何语言编写插件。</p>\n<p>如 <a href=\"https://kubernetes.io/docs/tasks/extend-kubectl/kubectl-plugins/\" target=\"_blank\" rel=\"noopener\">kubernetes 官方文档</a>中描述，只要将二进制文件放在系统 PATH 下，kubectl 即可识别，二进制文件类似 <code>kubectl-foo-bar</code>，并且在使用时 kubectl 会匹配最长的二进制文件。</p>\n<p>官方建议使用  <a href=\"https://github.com/kubernetes/cli-runtime\" target=\"_blank\" rel=\"noopener\">k8s.io/cli-runtime</a> 库进行编写，若你的插件需要支持一些命令行参数，可以参考使用，官方也给了一个例子 <a href=\"https://github.com/kubernetes/sample-cli-plugin\" target=\"_blank\" rel=\"noopener\">sample-cli-plugin</a>。</p>\n<p>还是回到最初的问题，对于获取一个集群写所有 node 的资源使用率，笔者基于也编写了一个简单的插件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 安装插件</span><br><span class=\"line\"></span><br><span class=\"line\">$ CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o bin/kubectl-view-node-resource cmd/view-node-resource/main.go</span><br><span class=\"line\"></span><br><span class=\"line\">$ mv bin/kubectl-view-node-resource /usr/bin/</span><br></pre></td></tr></table></figure>\n<p>使用 <code>kubectl plugin list</code> 查看 PATH 下有哪些可用的插件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 查看插件</span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl plugin list</span><br><span class=\"line\">The following kubectl-compatible plugins are available:</span><br><span class=\"line\"></span><br><span class=\"line\">/usr/bin/kubectl-view-node-resource</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 使用插件</span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl view node taints --help</span><br><span class=\"line\">A longer description that spans multiple lines and likely contains</span><br><span class=\"line\">examples and usage of using your application. For example:</span><br><span class=\"line\">Cobra is a CLI library for Go that empowers applications.</span><br><span class=\"line\">This application is a tool to generate the needed files</span><br><span class=\"line\">to quickly create a Cobra application.</span><br><span class=\"line\"></span><br><span class=\"line\">Usage:</span><br><span class=\"line\">  view-node-taints [flags]</span><br><span class=\"line\"></span><br><span class=\"line\">Flags:</span><br><span class=\"line\">      --config string   config file (default is $HOME/.view-node-taints.yaml)</span><br><span class=\"line\">  -h, --help            help for view-node-taints</span><br><span class=\"line\">  -t, --toggle          Help message for toggle</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl view node resource</span><br><span class=\"line\"> Name            PodCount  CPURequests  MemoryRequests  CPULimits     MemoryLimits</span><br><span class=\"line\"> 192.168.1.110   4         0 (0.00%)    6.4 (41.26%)    8 (100.00%)   16.0 (103.14%)</span><br></pre></td></tr></table></figure>\n<p>此外，还开发一个查看集群下所有 node taints 的插件，kubectl 支持查看宿主的 label，但是没有直接查看所有宿主 taints 的命令，插件效果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl view node taints</span><br><span class=\"line\"> Name            Status                       Age   Version                         Taints</span><br><span class=\"line\"> 192.168.1.110   Ready,SchedulingDisabled     49d   v1.8.1-35+9406f9d9909c61-dirty  enabledDiskSchedule=true:NoSchedule</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>插件代码地址：<a href=\"https://github.com/gosoon/kubectl-plugin\" target=\"_blank\" rel=\"noopener\">kubectl-plugin</a></p>\n</blockquote>\n<h4 id=\"二、kubectl-插件管理工具-krew\"><a href=\"#二、kubectl-插件管理工具-krew\" class=\"headerlink\" title=\"二、kubectl 插件管理工具 krew\"></a>二、kubectl 插件管理工具 krew</h4><p>上文讲了如何编写一个插件，但是官方也提供一个插件库并提供了一个插件管理工具 <a href=\"https://github.com/kubernetes-sigs/krew\" target=\"_blank\" rel=\"noopener\">krew</a>  ，<a href=\"https://github.com/kubernetes-sigs/krew\" target=\"_blank\" rel=\"noopener\">krew</a> 是 kubectl 插件的管理器，使用 krew 可以轻松的查找、安装和管理 kubectl 插件，它类似于 yum、apt、 dnf，krew 也可以帮助你将已写好的插件在多个平台上打包和分发，krew 自己也作为一个 kubectl 插件存在。</p>\n<blockquote>\n<p>krew 仅支持在 v1.12 及之后的版本中使用。</p>\n</blockquote>\n<p>1、安装 krew</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ (</span><br><span class=\"line\">  set -x; cd &quot;$(mktemp -d)&quot; &amp;&amp;</span><br><span class=\"line\">  curl -fsSLO &quot;https://storage.googleapis.com/krew/v0.2.1/krew.&#123;tar.gz,yaml&#125;&quot; &amp;&amp;</span><br><span class=\"line\">  tar zxvf krew.tar.gz &amp;&amp;</span><br><span class=\"line\">  ./krew-&quot;$(uname | tr &apos;[:upper:]&apos; &apos;[:lower:]&apos;)_amd64&quot; install \\</span><br><span class=\"line\">    --manifest=krew.yaml --archive=krew.tar.gz</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">$ export PATH=&quot;$&#123;KREW_ROOT:-$HOME/.krew&#125;/bin:$PATH&quot;</span><br></pre></td></tr></table></figure>\n<p>2、krew 的使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl krew search               \t\t\t\t\t\t\t\t# show all plugins</span><br><span class=\"line\">$ kubectl krew install view-secret  \t\t\t\t\t\t\t\t# install a plugin named &quot;view-secret&quot;</span><br><span class=\"line\">$ kubectl view-secret default-token-4cwvh           # use the plugin</span><br><span class=\"line\">$ kubectl krew upgrade              \t\t\t\t\t\t\t\t# upgrade installed plugins</span><br><span class=\"line\">$ kubectl krew remove view-secret   \t\t\t\t\t\t\t\t# uninstall a plugin</span><br></pre></td></tr></table></figure>\n<p>若想让你自己的插件加入到 krew 的索引中，可以参考：<a href=\"https://github.com/kubernetes-sigs/krew/blob/master/docs/DEVELOPER_GUIDE.md\" target=\"_blank\" rel=\"noopener\">how to package and publish a plugin for krew</a>。</p>\n<p>参考：</p>\n<p><a href=\"https://github.com/kubernetes-sigs/krew/blob/master/docs/NAMING_GUIDE.md\" target=\"_blank\" rel=\"noopener\">kubectl 插件命明规范</a></p>\n<p><a href=\"https://kubernetes.io/docs/tasks/extend-kubectl/kubectl-plugins/\" target=\"_blank\" rel=\"noopener\">https://kubernetes.io/docs/tasks/extend-kubectl/kubectl-plugins/</a></p>\n<p><a href=\"https://github.com/gosoon/kubectl-plugin\" target=\"_blank\" rel=\"noopener\">https://github.com/gosoon/kubectl-plugin</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>由于笔者所维护的集群规模较大，经常需要使用 kubectl 来排查一些问题，但是 kubectl 功能有限，有些操作还是需要写一个脚本对 kubectl 做一些封装才能达到目的。比如我经常做的一个操作就是排查一下线上哪些宿主的 cpu/memory request 使用率超过某个阈值，kubectl 并不能直接看到一个 master 下所有宿主的 request 使用率，但可以使用 <code>kubectl describe node xxx</code>查看某个宿主机的 request 使用率，所以只好写一个脚本来扫一遍了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">echo -e &quot;node\\tcpu_requets  memory_requets&quot;</span><br><span class=\"line\">for i in `kubectl get node | grep -v NAME | awk &apos;&#123;print $1&#125;&apos;`;do</span><br><span class=\"line\">    res=$(kubectl describe node $i  | grep -A 3 &quot;Resource&quot;)</span><br><span class=\"line\">    cpu_requets=$(echo $&#123;res&#125; | awk &apos;&#123;print $9&#125;&apos; | awk -F &apos;%&apos; &apos;&#123;print $1&#125;&apos; | awk -F &apos;(&apos; &apos;&#123;print $2&#125;&apos;)</span><br><span class=\"line\">    memory_requets=$(echo $&#123;res&#125; | awk &apos;&#123;print $14&#125;&apos; | awk -F &apos;%&apos; &apos;&#123;print $1&#125;&apos; | awk -F &apos;(&apos; &apos;&#123;print $2&#125;&apos;)</span><br><span class=\"line\">    echo -e &quot;$i\\t$&#123;cpu_requets&#125; \\t$&#123;memory_requets&#125;&quot;</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<p>类似的需求比较多，此处不一一列举，这种操作经常需要做，虽然写一个脚本也能完全搞定，但确实比较 low，也不便提供给别人使用，基于此了解到目前官方对 kubectl 的插件机制做了一些改进，对 kubectl 的扩展也比较容易，所以下文会带你了解一下 kubectl 的扩展功能。</p>\n<h4 id=\"一、编写-kubectl-插件\"><a href=\"#一、编写-kubectl-插件\" class=\"headerlink\" title=\"一、编写 kubectl 插件\"></a>一、编写 kubectl 插件</h4><p>kubectl 命令从 <code>v1.8.0</code> 版本开始支持插件机制，之后的版本中我们都可以对 <code>kubectl</code> 命令进行扩展，kubernetes 在 <code>v1.12</code> 以后插件可以直接是以 kubectl- 开头命令的一个二进制文件，插件机制在 <code>v1.14</code> 进入 GA 状态，这种改进是希望用户以二进制文件形式可以扩展自己的 kubectl 子命令。当然，kubectl 插件机制是与语言无关的，也就是说你可以用任何语言编写插件。</p>\n<p>如 <a href=\"https://kubernetes.io/docs/tasks/extend-kubectl/kubectl-plugins/\" target=\"_blank\" rel=\"noopener\">kubernetes 官方文档</a>中描述，只要将二进制文件放在系统 PATH 下，kubectl 即可识别，二进制文件类似 <code>kubectl-foo-bar</code>，并且在使用时 kubectl 会匹配最长的二进制文件。</p>\n<p>官方建议使用  <a href=\"https://github.com/kubernetes/cli-runtime\" target=\"_blank\" rel=\"noopener\">k8s.io/cli-runtime</a> 库进行编写，若你的插件需要支持一些命令行参数，可以参考使用，官方也给了一个例子 <a href=\"https://github.com/kubernetes/sample-cli-plugin\" target=\"_blank\" rel=\"noopener\">sample-cli-plugin</a>。</p>\n<p>还是回到最初的问题，对于获取一个集群写所有 node 的资源使用率，笔者基于也编写了一个简单的插件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 安装插件</span><br><span class=\"line\"></span><br><span class=\"line\">$ CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o bin/kubectl-view-node-resource cmd/view-node-resource/main.go</span><br><span class=\"line\"></span><br><span class=\"line\">$ mv bin/kubectl-view-node-resource /usr/bin/</span><br></pre></td></tr></table></figure>\n<p>使用 <code>kubectl plugin list</code> 查看 PATH 下有哪些可用的插件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 查看插件</span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl plugin list</span><br><span class=\"line\">The following kubectl-compatible plugins are available:</span><br><span class=\"line\"></span><br><span class=\"line\">/usr/bin/kubectl-view-node-resource</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 使用插件</span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl view node taints --help</span><br><span class=\"line\">A longer description that spans multiple lines and likely contains</span><br><span class=\"line\">examples and usage of using your application. For example:</span><br><span class=\"line\">Cobra is a CLI library for Go that empowers applications.</span><br><span class=\"line\">This application is a tool to generate the needed files</span><br><span class=\"line\">to quickly create a Cobra application.</span><br><span class=\"line\"></span><br><span class=\"line\">Usage:</span><br><span class=\"line\">  view-node-taints [flags]</span><br><span class=\"line\"></span><br><span class=\"line\">Flags:</span><br><span class=\"line\">      --config string   config file (default is $HOME/.view-node-taints.yaml)</span><br><span class=\"line\">  -h, --help            help for view-node-taints</span><br><span class=\"line\">  -t, --toggle          Help message for toggle</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl view node resource</span><br><span class=\"line\"> Name            PodCount  CPURequests  MemoryRequests  CPULimits     MemoryLimits</span><br><span class=\"line\"> 192.168.1.110   4         0 (0.00%)    6.4 (41.26%)    8 (100.00%)   16.0 (103.14%)</span><br></pre></td></tr></table></figure>\n<p>此外，还开发一个查看集群下所有 node taints 的插件，kubectl 支持查看宿主的 label，但是没有直接查看所有宿主 taints 的命令，插件效果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl view node taints</span><br><span class=\"line\"> Name            Status                       Age   Version                         Taints</span><br><span class=\"line\"> 192.168.1.110   Ready,SchedulingDisabled     49d   v1.8.1-35+9406f9d9909c61-dirty  enabledDiskSchedule=true:NoSchedule</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>插件代码地址：<a href=\"https://github.com/gosoon/kubectl-plugin\" target=\"_blank\" rel=\"noopener\">kubectl-plugin</a></p>\n</blockquote>\n<h4 id=\"二、kubectl-插件管理工具-krew\"><a href=\"#二、kubectl-插件管理工具-krew\" class=\"headerlink\" title=\"二、kubectl 插件管理工具 krew\"></a>二、kubectl 插件管理工具 krew</h4><p>上文讲了如何编写一个插件，但是官方也提供一个插件库并提供了一个插件管理工具 <a href=\"https://github.com/kubernetes-sigs/krew\" target=\"_blank\" rel=\"noopener\">krew</a>  ，<a href=\"https://github.com/kubernetes-sigs/krew\" target=\"_blank\" rel=\"noopener\">krew</a> 是 kubectl 插件的管理器，使用 krew 可以轻松的查找、安装和管理 kubectl 插件，它类似于 yum、apt、 dnf，krew 也可以帮助你将已写好的插件在多个平台上打包和分发，krew 自己也作为一个 kubectl 插件存在。</p>\n<blockquote>\n<p>krew 仅支持在 v1.12 及之后的版本中使用。</p>\n</blockquote>\n<p>1、安装 krew</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ (</span><br><span class=\"line\">  set -x; cd &quot;$(mktemp -d)&quot; &amp;&amp;</span><br><span class=\"line\">  curl -fsSLO &quot;https://storage.googleapis.com/krew/v0.2.1/krew.&#123;tar.gz,yaml&#125;&quot; &amp;&amp;</span><br><span class=\"line\">  tar zxvf krew.tar.gz &amp;&amp;</span><br><span class=\"line\">  ./krew-&quot;$(uname | tr &apos;[:upper:]&apos; &apos;[:lower:]&apos;)_amd64&quot; install \\</span><br><span class=\"line\">    --manifest=krew.yaml --archive=krew.tar.gz</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">$ export PATH=&quot;$&#123;KREW_ROOT:-$HOME/.krew&#125;/bin:$PATH&quot;</span><br></pre></td></tr></table></figure>\n<p>2、krew 的使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl krew search               \t\t\t\t\t\t\t\t# show all plugins</span><br><span class=\"line\">$ kubectl krew install view-secret  \t\t\t\t\t\t\t\t# install a plugin named &quot;view-secret&quot;</span><br><span class=\"line\">$ kubectl view-secret default-token-4cwvh           # use the plugin</span><br><span class=\"line\">$ kubectl krew upgrade              \t\t\t\t\t\t\t\t# upgrade installed plugins</span><br><span class=\"line\">$ kubectl krew remove view-secret   \t\t\t\t\t\t\t\t# uninstall a plugin</span><br></pre></td></tr></table></figure>\n<p>若想让你自己的插件加入到 krew 的索引中，可以参考：<a href=\"https://github.com/kubernetes-sigs/krew/blob/master/docs/DEVELOPER_GUIDE.md\" target=\"_blank\" rel=\"noopener\">how to package and publish a plugin for krew</a>。</p>\n<p>参考：</p>\n<p><a href=\"https://github.com/kubernetes-sigs/krew/blob/master/docs/NAMING_GUIDE.md\" target=\"_blank\" rel=\"noopener\">kubectl 插件命明规范</a></p>\n<p><a href=\"https://kubernetes.io/docs/tasks/extend-kubectl/kubectl-plugins/\" target=\"_blank\" rel=\"noopener\">https://kubernetes.io/docs/tasks/extend-kubectl/kubectl-plugins/</a></p>\n<p><a href=\"https://github.com/gosoon/kubectl-plugin\" target=\"_blank\" rel=\"noopener\">https://github.com/gosoon/kubectl-plugin</a></p>\n"},{"title":"kubelet 架构浅析","date":"2018-12-16T09:35:30.000Z","type":"kubelet","_content":"\n## 一、概要\nkubelet 是运行在每个节点上的主要的“节点代理”，每个节点都会启动 kubelet进程，用来处理 Master 节点下发到本节点的任务，按照 PodSpec 描述来管理Pod 和其中的容器（PodSpec 是用来描述一个 pod 的 YAML 或者 JSON 对象）。\n\nkubelet 通过各种机制（主要通过 apiserver ）获取一组 PodSpec 并保证在这些 PodSpec 中描述的容器健康运行。\n\n## 二、kubelet 的主要功能\n\n1、kubelet  默认监听四个端口，分别为 10250 、10255、10248、4194。\n\n```\nLISTEN     0      128          *:10250                    *:*                   users:((\"kubelet\",pid=48500,fd=28))\nLISTEN     0      128          *:10255                    *:*                   users:((\"kubelet\",pid=48500,fd=26))\nLISTEN     0      128          *:4194                     *:*                   users:((\"kubelet\",pid=48500,fd=13))\nLISTEN     0      128    127.0.0.1:10248                    *:*                   users:((\"kubelet\",pid=48500,fd=23))\n```\n\n- 10250（kubelet API）：kubelet server 与 apiserver 通信的端口，定期请求 apiserver 获取自己所应当处理的任务，通过该端口可以访问获取 node 资源以及状态。\n\n- 10248（健康检查端口）：通过访问该端口可以判断 kubelet 是否正常工作, 通过 kubelet 的启动参数 `--healthz-port` 和 `--healthz-bind-address` 来指定监听的地址和端口。\n```\n  $ curl http://127.0.0.1:10248/healthz\n  ok\n```\n- 4194（cAdvisor 监听）：kublet 通过该端口可以获取到该节点的环境信息以及 node 上运行的容器状态等内容，访问 http://localhost:4194 可以看到 cAdvisor 的管理界面,通过 kubelet 的启动参数 `--cadvisor-port` 可以指定启动的端口。\n\n```\n  $ curl  http://127.0.0.1:4194/metrics\n```\n\n- 10255 （readonly API）：提供了 pod 和 node 的信息，接口以只读形式暴露出去，访问该端口不需要认证和鉴权。\n``` \n  //  获取 pod 的接口，与 apiserver 的 \n  // http://127.0.0.1:8080/api/v1/pods?fieldSelector=spec.nodeName=  接口类似\n  $ curl  http://127.0.0.1:10255/pods\n\n  // 节点信息接口,提供磁盘、网络、CPU、内存等信息\n  $ curl http://127.0.0.1:10255/spec/\n```\n\n2、kubelet 主要功能：\n\n- pod 管理：kubelet 定期从所监听的数据源获取节点上 pod/container 的期望状态（运行什么容器、运行的副本数量、网络或者存储如何配置等等），并调用对应的容器平台接口达到这个状态。\n\n- 容器健康检查：kubelet 创建了容器之后还要查看容器是否正常运行，如果容器运行出错，就要根据 pod 设置的重启策略进行处理。\n\n- 容器监控：kubelet 会监控所在节点的资源使用情况，并定时向 master 报告，资源使用数据都是通过 cAdvisor 获取的。知道整个集群所有节点的资源情况，对于 pod 的调度和正常运行至关重要。\n\n\n## 三、kubelet 组件中的模块\n\n ![kubelet 组件中的模块](http://cdn.tianfeiyu.com/kubelet-4.png)\n\n上图展示了 kubelet 组件中的模块以及模块间的划分。\n\n- 1、PLEG(Pod Lifecycle Event Generator）\nPLEG 是 kubelet 的核心模块,PLEG 会一直调用 container runtime 获取本节点 containers/sandboxes 的信息，并与自身维护的 pods cache 信息进行对比，生成对应的 PodLifecycleEvent，然后输出到 eventChannel 中，通过 eventChannel 发送到 kubelet syncLoop 进行消费，然后由 kubelet syncPod 来触发 pod 同步处理过程，最终达到用户的期望状态。\n\n- 2、cAdvisor \ncAdvisor（https://github.com/google/cadvisor）是 google 开发的容器监控工具，集成在 kubelet 中，起到收集本节点和容器的监控信息，大部分公司对容器的监控数据都是从 cAdvisor 中获取的 ，cAvisor 模块对外提供了 interface 接口，该接口也被 imageManager，OOMWatcher，containerManager 等所使用。\n\n- 3、OOMWatcher \n系统 OOM 的监听器，会与 cadvisor 模块之间建立 SystemOOM,通过 Watch方式从 cadvisor 那里收到的 OOM 信号，并产生相关事件。\n\n- 4、probeManager \nprobeManager 依赖于 statusManager,livenessManager,containerRefManager，会定时去监控 pod 中容器的健康状况，当前支持两种类型的探针：livenessProbe 和readinessProbe。\nlivenessProbe：用于判断容器是否存活，如果探测失败，kubelet 会 kill 掉该容器，并根据容器的重启策略做相应的处理。\nreadinessProbe：用于判断容器是否启动完成，将探测成功的容器加入到该 pod 所在 service 的 endpoints 中，反之则移除。readinessProbe 和 livenessProbe 有三种实现方式：http、tcp 以及 cmd。 \n\n- 5、statusManager \nstatusManager 负责维护状态信息，并把 pod 状态更新到 apiserver，但是它并不负责监控 pod 状态的变化，而是提供对应的接口供其他组件调用，比如 probeManager。\n\n- 6、containerRefManager\n容器引用的管理，相对简单的Manager，用来报告容器的创建，失败等事件，通过定义 map 来实现了 containerID 与 v1.ObjectReferece 容器引用的映射。\n\n- 7、evictionManager \n当节点的内存、磁盘或 inode 等资源不足时，达到了配置的 evict 策略， node 会变为 pressure 状态，此时 kubelet 会按照 qosClass 顺序来驱赶 pod，以此来保证节点的稳定性。可以通过配置 kubelet 启动参数 `--eviction-hard=` 来决定 evict 的策略值。\n\n- 8、imageGC \nimageGC 负责 node 节点的镜像回收，当本地的存放镜像的本地磁盘空间达到某阈值的时候，会触发镜像的回收，删除掉不被 pod 所使用的镜像，回收镜像的阈值可以通过 kubelet 的启动参数 `--image-gc-high-threshold` 和 `--image-gc-low-threshold` 来设置。\n\n- 9、containerGC \ncontainerGC 负责清理 node 节点上已消亡的 container，具体的 GC 操作由runtime 来实现。\n\n- 10、imageManager \n调用 kubecontainer 提供的PullImage/GetImageRef/ListImages/RemoveImage/ImageStates 方法来保证pod 运行所需要的镜像。\n\n- 11、volumeManager \n负责 node 节点上 pod 所使用 volume 的管理，volume 与 pod 的生命周期关联，负责 pod 创建删除过程中 volume 的 mount/umount/attach/detach 流程，kubernetes 采用 volume Plugins 的方式，实现存储卷的挂载等操作，内置几十种存储插件。\n\n- 12、containerManager \n负责 node 节点上运行的容器的 cgroup 配置信息，kubelet 启动参数如果指定 `--cgroups-per-qos` 的时候，kubelet 会启动 goroutine 来周期性的更新 pod 的 cgroup 信息，维护其正确性，该参数默认为 `true`，实现了 pod 的Guaranteed/BestEffort/Burstable 三种级别的 Qos。\n\n- 13、runtimeManager \ncontainerRuntime 负责 kubelet 与不同的 runtime 实现进行对接，实现对于底层 container 的操作，初始化之后得到的 runtime 实例将会被之前描述的组件所使用。可以通过 kubelet 的启动参数 `--container-runtime` 来定义是使用docker 还是 rkt，默认是 `docker`。\n\n- 14、podManager \npodManager 提供了接口来存储和访问 pod 的信息，维持 static pod 和 mirror pods 的关系，podManager 会被statusManager/volumeManager/runtimeManager 所调用，podManager 的接口处理流程里面会调用 secretManager 以及 configMapManager。 \n\n\n在 v1.12 中，kubelet 组件有18个 manager：\n\n```\ncertificateManager\ncgroupManager\ncontainerManager\ncpuManager\nnodeContainerManager\nconfigmapManager\ncontainerReferenceManager\nevictionManager\nnvidiaGpuManager\nimageGCManager\nkuberuntimeManager\nhostportManager\npodManager\nproberManager\nsecretManager\nstatusManager\nvolumeManager\t\ntokenManager\n```\n\n其中比较重要的模块后面会进行一一分析。\n\n\n参考：\n[微软资深工程师详解 K8S 容器运行时](https://juejin.im/entry/5bc71b3d6fb9a05cf23029b8)\n[kubernetes 简介： kubelet 和 pod](https://cizixs.com/2016/10/25/kubernetes-intro-kubelet/)\n[Kubelet 组件解析](https://blog.csdn.net/jettery/article/details/78891733)\n\n\n\n","source":"_posts/kubelet-modules.md","raw":"---\ntitle: kubelet 架构浅析\ndate: 2018-12-16 17:35:30\ntags: \"kubelet\"\ntype: \"kubelet\"\n\n---\n\n## 一、概要\nkubelet 是运行在每个节点上的主要的“节点代理”，每个节点都会启动 kubelet进程，用来处理 Master 节点下发到本节点的任务，按照 PodSpec 描述来管理Pod 和其中的容器（PodSpec 是用来描述一个 pod 的 YAML 或者 JSON 对象）。\n\nkubelet 通过各种机制（主要通过 apiserver ）获取一组 PodSpec 并保证在这些 PodSpec 中描述的容器健康运行。\n\n## 二、kubelet 的主要功能\n\n1、kubelet  默认监听四个端口，分别为 10250 、10255、10248、4194。\n\n```\nLISTEN     0      128          *:10250                    *:*                   users:((\"kubelet\",pid=48500,fd=28))\nLISTEN     0      128          *:10255                    *:*                   users:((\"kubelet\",pid=48500,fd=26))\nLISTEN     0      128          *:4194                     *:*                   users:((\"kubelet\",pid=48500,fd=13))\nLISTEN     0      128    127.0.0.1:10248                    *:*                   users:((\"kubelet\",pid=48500,fd=23))\n```\n\n- 10250（kubelet API）：kubelet server 与 apiserver 通信的端口，定期请求 apiserver 获取自己所应当处理的任务，通过该端口可以访问获取 node 资源以及状态。\n\n- 10248（健康检查端口）：通过访问该端口可以判断 kubelet 是否正常工作, 通过 kubelet 的启动参数 `--healthz-port` 和 `--healthz-bind-address` 来指定监听的地址和端口。\n```\n  $ curl http://127.0.0.1:10248/healthz\n  ok\n```\n- 4194（cAdvisor 监听）：kublet 通过该端口可以获取到该节点的环境信息以及 node 上运行的容器状态等内容，访问 http://localhost:4194 可以看到 cAdvisor 的管理界面,通过 kubelet 的启动参数 `--cadvisor-port` 可以指定启动的端口。\n\n```\n  $ curl  http://127.0.0.1:4194/metrics\n```\n\n- 10255 （readonly API）：提供了 pod 和 node 的信息，接口以只读形式暴露出去，访问该端口不需要认证和鉴权。\n``` \n  //  获取 pod 的接口，与 apiserver 的 \n  // http://127.0.0.1:8080/api/v1/pods?fieldSelector=spec.nodeName=  接口类似\n  $ curl  http://127.0.0.1:10255/pods\n\n  // 节点信息接口,提供磁盘、网络、CPU、内存等信息\n  $ curl http://127.0.0.1:10255/spec/\n```\n\n2、kubelet 主要功能：\n\n- pod 管理：kubelet 定期从所监听的数据源获取节点上 pod/container 的期望状态（运行什么容器、运行的副本数量、网络或者存储如何配置等等），并调用对应的容器平台接口达到这个状态。\n\n- 容器健康检查：kubelet 创建了容器之后还要查看容器是否正常运行，如果容器运行出错，就要根据 pod 设置的重启策略进行处理。\n\n- 容器监控：kubelet 会监控所在节点的资源使用情况，并定时向 master 报告，资源使用数据都是通过 cAdvisor 获取的。知道整个集群所有节点的资源情况，对于 pod 的调度和正常运行至关重要。\n\n\n## 三、kubelet 组件中的模块\n\n ![kubelet 组件中的模块](http://cdn.tianfeiyu.com/kubelet-4.png)\n\n上图展示了 kubelet 组件中的模块以及模块间的划分。\n\n- 1、PLEG(Pod Lifecycle Event Generator）\nPLEG 是 kubelet 的核心模块,PLEG 会一直调用 container runtime 获取本节点 containers/sandboxes 的信息，并与自身维护的 pods cache 信息进行对比，生成对应的 PodLifecycleEvent，然后输出到 eventChannel 中，通过 eventChannel 发送到 kubelet syncLoop 进行消费，然后由 kubelet syncPod 来触发 pod 同步处理过程，最终达到用户的期望状态。\n\n- 2、cAdvisor \ncAdvisor（https://github.com/google/cadvisor）是 google 开发的容器监控工具，集成在 kubelet 中，起到收集本节点和容器的监控信息，大部分公司对容器的监控数据都是从 cAdvisor 中获取的 ，cAvisor 模块对外提供了 interface 接口，该接口也被 imageManager，OOMWatcher，containerManager 等所使用。\n\n- 3、OOMWatcher \n系统 OOM 的监听器，会与 cadvisor 模块之间建立 SystemOOM,通过 Watch方式从 cadvisor 那里收到的 OOM 信号，并产生相关事件。\n\n- 4、probeManager \nprobeManager 依赖于 statusManager,livenessManager,containerRefManager，会定时去监控 pod 中容器的健康状况，当前支持两种类型的探针：livenessProbe 和readinessProbe。\nlivenessProbe：用于判断容器是否存活，如果探测失败，kubelet 会 kill 掉该容器，并根据容器的重启策略做相应的处理。\nreadinessProbe：用于判断容器是否启动完成，将探测成功的容器加入到该 pod 所在 service 的 endpoints 中，反之则移除。readinessProbe 和 livenessProbe 有三种实现方式：http、tcp 以及 cmd。 \n\n- 5、statusManager \nstatusManager 负责维护状态信息，并把 pod 状态更新到 apiserver，但是它并不负责监控 pod 状态的变化，而是提供对应的接口供其他组件调用，比如 probeManager。\n\n- 6、containerRefManager\n容器引用的管理，相对简单的Manager，用来报告容器的创建，失败等事件，通过定义 map 来实现了 containerID 与 v1.ObjectReferece 容器引用的映射。\n\n- 7、evictionManager \n当节点的内存、磁盘或 inode 等资源不足时，达到了配置的 evict 策略， node 会变为 pressure 状态，此时 kubelet 会按照 qosClass 顺序来驱赶 pod，以此来保证节点的稳定性。可以通过配置 kubelet 启动参数 `--eviction-hard=` 来决定 evict 的策略值。\n\n- 8、imageGC \nimageGC 负责 node 节点的镜像回收，当本地的存放镜像的本地磁盘空间达到某阈值的时候，会触发镜像的回收，删除掉不被 pod 所使用的镜像，回收镜像的阈值可以通过 kubelet 的启动参数 `--image-gc-high-threshold` 和 `--image-gc-low-threshold` 来设置。\n\n- 9、containerGC \ncontainerGC 负责清理 node 节点上已消亡的 container，具体的 GC 操作由runtime 来实现。\n\n- 10、imageManager \n调用 kubecontainer 提供的PullImage/GetImageRef/ListImages/RemoveImage/ImageStates 方法来保证pod 运行所需要的镜像。\n\n- 11、volumeManager \n负责 node 节点上 pod 所使用 volume 的管理，volume 与 pod 的生命周期关联，负责 pod 创建删除过程中 volume 的 mount/umount/attach/detach 流程，kubernetes 采用 volume Plugins 的方式，实现存储卷的挂载等操作，内置几十种存储插件。\n\n- 12、containerManager \n负责 node 节点上运行的容器的 cgroup 配置信息，kubelet 启动参数如果指定 `--cgroups-per-qos` 的时候，kubelet 会启动 goroutine 来周期性的更新 pod 的 cgroup 信息，维护其正确性，该参数默认为 `true`，实现了 pod 的Guaranteed/BestEffort/Burstable 三种级别的 Qos。\n\n- 13、runtimeManager \ncontainerRuntime 负责 kubelet 与不同的 runtime 实现进行对接，实现对于底层 container 的操作，初始化之后得到的 runtime 实例将会被之前描述的组件所使用。可以通过 kubelet 的启动参数 `--container-runtime` 来定义是使用docker 还是 rkt，默认是 `docker`。\n\n- 14、podManager \npodManager 提供了接口来存储和访问 pod 的信息，维持 static pod 和 mirror pods 的关系，podManager 会被statusManager/volumeManager/runtimeManager 所调用，podManager 的接口处理流程里面会调用 secretManager 以及 configMapManager。 \n\n\n在 v1.12 中，kubelet 组件有18个 manager：\n\n```\ncertificateManager\ncgroupManager\ncontainerManager\ncpuManager\nnodeContainerManager\nconfigmapManager\ncontainerReferenceManager\nevictionManager\nnvidiaGpuManager\nimageGCManager\nkuberuntimeManager\nhostportManager\npodManager\nproberManager\nsecretManager\nstatusManager\nvolumeManager\t\ntokenManager\n```\n\n其中比较重要的模块后面会进行一一分析。\n\n\n参考：\n[微软资深工程师详解 K8S 容器运行时](https://juejin.im/entry/5bc71b3d6fb9a05cf23029b8)\n[kubernetes 简介： kubelet 和 pod](https://cizixs.com/2016/10/25/kubernetes-intro-kubelet/)\n[Kubelet 组件解析](https://blog.csdn.net/jettery/article/details/78891733)\n\n\n\n","slug":"kubelet-modules","published":1,"updated":"2019-07-21T09:49:06.807Z","_id":"cjycnhjm7000w5vwn4z0ze4rl","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"一、概要\"><a href=\"#一、概要\" class=\"headerlink\" title=\"一、概要\"></a>一、概要</h2><p>kubelet 是运行在每个节点上的主要的“节点代理”，每个节点都会启动 kubelet进程，用来处理 Master 节点下发到本节点的任务，按照 PodSpec 描述来管理Pod 和其中的容器（PodSpec 是用来描述一个 pod 的 YAML 或者 JSON 对象）。</p>\n<p>kubelet 通过各种机制（主要通过 apiserver ）获取一组 PodSpec 并保证在这些 PodSpec 中描述的容器健康运行。</p>\n<h2 id=\"二、kubelet-的主要功能\"><a href=\"#二、kubelet-的主要功能\" class=\"headerlink\" title=\"二、kubelet 的主要功能\"></a>二、kubelet 的主要功能</h2><p>1、kubelet  默认监听四个端口，分别为 10250 、10255、10248、4194。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LISTEN     0      128          *:10250                    *:*                   users:((&quot;kubelet&quot;,pid=48500,fd=28))</span><br><span class=\"line\">LISTEN     0      128          *:10255                    *:*                   users:((&quot;kubelet&quot;,pid=48500,fd=26))</span><br><span class=\"line\">LISTEN     0      128          *:4194                     *:*                   users:((&quot;kubelet&quot;,pid=48500,fd=13))</span><br><span class=\"line\">LISTEN     0      128    127.0.0.1:10248                    *:*                   users:((&quot;kubelet&quot;,pid=48500,fd=23))</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>10250（kubelet API）：kubelet server 与 apiserver 通信的端口，定期请求 apiserver 获取自己所应当处理的任务，通过该端口可以访问获取 node 资源以及状态。</p>\n</li>\n<li><p>10248（健康检查端口）：通过访问该端口可以判断 kubelet 是否正常工作, 通过 kubelet 的启动参数 <code>--healthz-port</code> 和 <code>--healthz-bind-address</code> 来指定监听的地址和端口。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl http://127.0.0.1:10248/healthz</span><br><span class=\"line\">ok</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>4194（cAdvisor 监听）：kublet 通过该端口可以获取到该节点的环境信息以及 node 上运行的容器状态等内容，访问 <a href=\"http://localhost:4194\" target=\"_blank\" rel=\"noopener\">http://localhost:4194</a> 可以看到 cAdvisor 的管理界面,通过 kubelet 的启动参数 <code>--cadvisor-port</code> 可以指定启动的端口。</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl  http://127.0.0.1:4194/metrics</span><br></pre></td></tr></table></figure>\n<ul>\n<li>10255 （readonly API）：提供了 pod 和 node 的信息，接口以只读形式暴露出去，访问该端口不需要认证和鉴权。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//  获取 pod 的接口，与 apiserver 的 </span><br><span class=\"line\">// http://127.0.0.1:8080/api/v1/pods?fieldSelector=spec.nodeName=  接口类似</span><br><span class=\"line\">$ curl  http://127.0.0.1:10255/pods</span><br><span class=\"line\"></span><br><span class=\"line\">// 节点信息接口,提供磁盘、网络、CPU、内存等信息</span><br><span class=\"line\">$ curl http://127.0.0.1:10255/spec/</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>2、kubelet 主要功能：</p>\n<ul>\n<li><p>pod 管理：kubelet 定期从所监听的数据源获取节点上 pod/container 的期望状态（运行什么容器、运行的副本数量、网络或者存储如何配置等等），并调用对应的容器平台接口达到这个状态。</p>\n</li>\n<li><p>容器健康检查：kubelet 创建了容器之后还要查看容器是否正常运行，如果容器运行出错，就要根据 pod 设置的重启策略进行处理。</p>\n</li>\n<li><p>容器监控：kubelet 会监控所在节点的资源使用情况，并定时向 master 报告，资源使用数据都是通过 cAdvisor 获取的。知道整个集群所有节点的资源情况，对于 pod 的调度和正常运行至关重要。</p>\n</li>\n</ul>\n<h2 id=\"三、kubelet-组件中的模块\"><a href=\"#三、kubelet-组件中的模块\" class=\"headerlink\" title=\"三、kubelet 组件中的模块\"></a>三、kubelet 组件中的模块</h2><p> <img src=\"http://cdn.tianfeiyu.com/kubelet-4.png\" alt=\"kubelet 组件中的模块\"></p>\n<p>上图展示了 kubelet 组件中的模块以及模块间的划分。</p>\n<ul>\n<li><p>1、PLEG(Pod Lifecycle Event Generator）<br>PLEG 是 kubelet 的核心模块,PLEG 会一直调用 container runtime 获取本节点 containers/sandboxes 的信息，并与自身维护的 pods cache 信息进行对比，生成对应的 PodLifecycleEvent，然后输出到 eventChannel 中，通过 eventChannel 发送到 kubelet syncLoop 进行消费，然后由 kubelet syncPod 来触发 pod 同步处理过程，最终达到用户的期望状态。</p>\n</li>\n<li><p>2、cAdvisor<br>cAdvisor（<a href=\"https://github.com/google/cadvisor）是\" target=\"_blank\" rel=\"noopener\">https://github.com/google/cadvisor）是</a> google 开发的容器监控工具，集成在 kubelet 中，起到收集本节点和容器的监控信息，大部分公司对容器的监控数据都是从 cAdvisor 中获取的 ，cAvisor 模块对外提供了 interface 接口，该接口也被 imageManager，OOMWatcher，containerManager 等所使用。</p>\n</li>\n<li><p>3、OOMWatcher<br>系统 OOM 的监听器，会与 cadvisor 模块之间建立 SystemOOM,通过 Watch方式从 cadvisor 那里收到的 OOM 信号，并产生相关事件。</p>\n</li>\n<li><p>4、probeManager<br>probeManager 依赖于 statusManager,livenessManager,containerRefManager，会定时去监控 pod 中容器的健康状况，当前支持两种类型的探针：livenessProbe 和readinessProbe。<br>livenessProbe：用于判断容器是否存活，如果探测失败，kubelet 会 kill 掉该容器，并根据容器的重启策略做相应的处理。<br>readinessProbe：用于判断容器是否启动完成，将探测成功的容器加入到该 pod 所在 service 的 endpoints 中，反之则移除。readinessProbe 和 livenessProbe 有三种实现方式：http、tcp 以及 cmd。 </p>\n</li>\n<li><p>5、statusManager<br>statusManager 负责维护状态信息，并把 pod 状态更新到 apiserver，但是它并不负责监控 pod 状态的变化，而是提供对应的接口供其他组件调用，比如 probeManager。</p>\n</li>\n<li><p>6、containerRefManager<br>容器引用的管理，相对简单的Manager，用来报告容器的创建，失败等事件，通过定义 map 来实现了 containerID 与 v1.ObjectReferece 容器引用的映射。</p>\n</li>\n<li><p>7、evictionManager<br>当节点的内存、磁盘或 inode 等资源不足时，达到了配置的 evict 策略， node 会变为 pressure 状态，此时 kubelet 会按照 qosClass 顺序来驱赶 pod，以此来保证节点的稳定性。可以通过配置 kubelet 启动参数 <code>--eviction-hard=</code> 来决定 evict 的策略值。</p>\n</li>\n<li><p>8、imageGC<br>imageGC 负责 node 节点的镜像回收，当本地的存放镜像的本地磁盘空间达到某阈值的时候，会触发镜像的回收，删除掉不被 pod 所使用的镜像，回收镜像的阈值可以通过 kubelet 的启动参数 <code>--image-gc-high-threshold</code> 和 <code>--image-gc-low-threshold</code> 来设置。</p>\n</li>\n<li><p>9、containerGC<br>containerGC 负责清理 node 节点上已消亡的 container，具体的 GC 操作由runtime 来实现。</p>\n</li>\n<li><p>10、imageManager<br>调用 kubecontainer 提供的PullImage/GetImageRef/ListImages/RemoveImage/ImageStates 方法来保证pod 运行所需要的镜像。</p>\n</li>\n<li><p>11、volumeManager<br>负责 node 节点上 pod 所使用 volume 的管理，volume 与 pod 的生命周期关联，负责 pod 创建删除过程中 volume 的 mount/umount/attach/detach 流程，kubernetes 采用 volume Plugins 的方式，实现存储卷的挂载等操作，内置几十种存储插件。</p>\n</li>\n<li><p>12、containerManager<br>负责 node 节点上运行的容器的 cgroup 配置信息，kubelet 启动参数如果指定 <code>--cgroups-per-qos</code> 的时候，kubelet 会启动 goroutine 来周期性的更新 pod 的 cgroup 信息，维护其正确性，该参数默认为 <code>true</code>，实现了 pod 的Guaranteed/BestEffort/Burstable 三种级别的 Qos。</p>\n</li>\n<li><p>13、runtimeManager<br>containerRuntime 负责 kubelet 与不同的 runtime 实现进行对接，实现对于底层 container 的操作，初始化之后得到的 runtime 实例将会被之前描述的组件所使用。可以通过 kubelet 的启动参数 <code>--container-runtime</code> 来定义是使用docker 还是 rkt，默认是 <code>docker</code>。</p>\n</li>\n<li><p>14、podManager<br>podManager 提供了接口来存储和访问 pod 的信息，维持 static pod 和 mirror pods 的关系，podManager 会被statusManager/volumeManager/runtimeManager 所调用，podManager 的接口处理流程里面会调用 secretManager 以及 configMapManager。 </p>\n</li>\n</ul>\n<p>在 v1.12 中，kubelet 组件有18个 manager：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">certificateManager</span><br><span class=\"line\">cgroupManager</span><br><span class=\"line\">containerManager</span><br><span class=\"line\">cpuManager</span><br><span class=\"line\">nodeContainerManager</span><br><span class=\"line\">configmapManager</span><br><span class=\"line\">containerReferenceManager</span><br><span class=\"line\">evictionManager</span><br><span class=\"line\">nvidiaGpuManager</span><br><span class=\"line\">imageGCManager</span><br><span class=\"line\">kuberuntimeManager</span><br><span class=\"line\">hostportManager</span><br><span class=\"line\">podManager</span><br><span class=\"line\">proberManager</span><br><span class=\"line\">secretManager</span><br><span class=\"line\">statusManager</span><br><span class=\"line\">volumeManager\t</span><br><span class=\"line\">tokenManager</span><br></pre></td></tr></table></figure>\n<p>其中比较重要的模块后面会进行一一分析。</p>\n<p>参考：<br><a href=\"https://juejin.im/entry/5bc71b3d6fb9a05cf23029b8\" target=\"_blank\" rel=\"noopener\">微软资深工程师详解 K8S 容器运行时</a><br><a href=\"https://cizixs.com/2016/10/25/kubernetes-intro-kubelet/\" target=\"_blank\" rel=\"noopener\">kubernetes 简介： kubelet 和 pod</a><br><a href=\"https://blog.csdn.net/jettery/article/details/78891733\" target=\"_blank\" rel=\"noopener\">Kubelet 组件解析</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、概要\"><a href=\"#一、概要\" class=\"headerlink\" title=\"一、概要\"></a>一、概要</h2><p>kubelet 是运行在每个节点上的主要的“节点代理”，每个节点都会启动 kubelet进程，用来处理 Master 节点下发到本节点的任务，按照 PodSpec 描述来管理Pod 和其中的容器（PodSpec 是用来描述一个 pod 的 YAML 或者 JSON 对象）。</p>\n<p>kubelet 通过各种机制（主要通过 apiserver ）获取一组 PodSpec 并保证在这些 PodSpec 中描述的容器健康运行。</p>\n<h2 id=\"二、kubelet-的主要功能\"><a href=\"#二、kubelet-的主要功能\" class=\"headerlink\" title=\"二、kubelet 的主要功能\"></a>二、kubelet 的主要功能</h2><p>1、kubelet  默认监听四个端口，分别为 10250 、10255、10248、4194。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LISTEN     0      128          *:10250                    *:*                   users:((&quot;kubelet&quot;,pid=48500,fd=28))</span><br><span class=\"line\">LISTEN     0      128          *:10255                    *:*                   users:((&quot;kubelet&quot;,pid=48500,fd=26))</span><br><span class=\"line\">LISTEN     0      128          *:4194                     *:*                   users:((&quot;kubelet&quot;,pid=48500,fd=13))</span><br><span class=\"line\">LISTEN     0      128    127.0.0.1:10248                    *:*                   users:((&quot;kubelet&quot;,pid=48500,fd=23))</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>10250（kubelet API）：kubelet server 与 apiserver 通信的端口，定期请求 apiserver 获取自己所应当处理的任务，通过该端口可以访问获取 node 资源以及状态。</p>\n</li>\n<li><p>10248（健康检查端口）：通过访问该端口可以判断 kubelet 是否正常工作, 通过 kubelet 的启动参数 <code>--healthz-port</code> 和 <code>--healthz-bind-address</code> 来指定监听的地址和端口。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl http://127.0.0.1:10248/healthz</span><br><span class=\"line\">ok</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>4194（cAdvisor 监听）：kublet 通过该端口可以获取到该节点的环境信息以及 node 上运行的容器状态等内容，访问 <a href=\"http://localhost:4194\" target=\"_blank\" rel=\"noopener\">http://localhost:4194</a> 可以看到 cAdvisor 的管理界面,通过 kubelet 的启动参数 <code>--cadvisor-port</code> 可以指定启动的端口。</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl  http://127.0.0.1:4194/metrics</span><br></pre></td></tr></table></figure>\n<ul>\n<li>10255 （readonly API）：提供了 pod 和 node 的信息，接口以只读形式暴露出去，访问该端口不需要认证和鉴权。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//  获取 pod 的接口，与 apiserver 的 </span><br><span class=\"line\">// http://127.0.0.1:8080/api/v1/pods?fieldSelector=spec.nodeName=  接口类似</span><br><span class=\"line\">$ curl  http://127.0.0.1:10255/pods</span><br><span class=\"line\"></span><br><span class=\"line\">// 节点信息接口,提供磁盘、网络、CPU、内存等信息</span><br><span class=\"line\">$ curl http://127.0.0.1:10255/spec/</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>2、kubelet 主要功能：</p>\n<ul>\n<li><p>pod 管理：kubelet 定期从所监听的数据源获取节点上 pod/container 的期望状态（运行什么容器、运行的副本数量、网络或者存储如何配置等等），并调用对应的容器平台接口达到这个状态。</p>\n</li>\n<li><p>容器健康检查：kubelet 创建了容器之后还要查看容器是否正常运行，如果容器运行出错，就要根据 pod 设置的重启策略进行处理。</p>\n</li>\n<li><p>容器监控：kubelet 会监控所在节点的资源使用情况，并定时向 master 报告，资源使用数据都是通过 cAdvisor 获取的。知道整个集群所有节点的资源情况，对于 pod 的调度和正常运行至关重要。</p>\n</li>\n</ul>\n<h2 id=\"三、kubelet-组件中的模块\"><a href=\"#三、kubelet-组件中的模块\" class=\"headerlink\" title=\"三、kubelet 组件中的模块\"></a>三、kubelet 组件中的模块</h2><p> <img src=\"http://cdn.tianfeiyu.com/kubelet-4.png\" alt=\"kubelet 组件中的模块\"></p>\n<p>上图展示了 kubelet 组件中的模块以及模块间的划分。</p>\n<ul>\n<li><p>1、PLEG(Pod Lifecycle Event Generator）<br>PLEG 是 kubelet 的核心模块,PLEG 会一直调用 container runtime 获取本节点 containers/sandboxes 的信息，并与自身维护的 pods cache 信息进行对比，生成对应的 PodLifecycleEvent，然后输出到 eventChannel 中，通过 eventChannel 发送到 kubelet syncLoop 进行消费，然后由 kubelet syncPod 来触发 pod 同步处理过程，最终达到用户的期望状态。</p>\n</li>\n<li><p>2、cAdvisor<br>cAdvisor（<a href=\"https://github.com/google/cadvisor）是\" target=\"_blank\" rel=\"noopener\">https://github.com/google/cadvisor）是</a> google 开发的容器监控工具，集成在 kubelet 中，起到收集本节点和容器的监控信息，大部分公司对容器的监控数据都是从 cAdvisor 中获取的 ，cAvisor 模块对外提供了 interface 接口，该接口也被 imageManager，OOMWatcher，containerManager 等所使用。</p>\n</li>\n<li><p>3、OOMWatcher<br>系统 OOM 的监听器，会与 cadvisor 模块之间建立 SystemOOM,通过 Watch方式从 cadvisor 那里收到的 OOM 信号，并产生相关事件。</p>\n</li>\n<li><p>4、probeManager<br>probeManager 依赖于 statusManager,livenessManager,containerRefManager，会定时去监控 pod 中容器的健康状况，当前支持两种类型的探针：livenessProbe 和readinessProbe。<br>livenessProbe：用于判断容器是否存活，如果探测失败，kubelet 会 kill 掉该容器，并根据容器的重启策略做相应的处理。<br>readinessProbe：用于判断容器是否启动完成，将探测成功的容器加入到该 pod 所在 service 的 endpoints 中，反之则移除。readinessProbe 和 livenessProbe 有三种实现方式：http、tcp 以及 cmd。 </p>\n</li>\n<li><p>5、statusManager<br>statusManager 负责维护状态信息，并把 pod 状态更新到 apiserver，但是它并不负责监控 pod 状态的变化，而是提供对应的接口供其他组件调用，比如 probeManager。</p>\n</li>\n<li><p>6、containerRefManager<br>容器引用的管理，相对简单的Manager，用来报告容器的创建，失败等事件，通过定义 map 来实现了 containerID 与 v1.ObjectReferece 容器引用的映射。</p>\n</li>\n<li><p>7、evictionManager<br>当节点的内存、磁盘或 inode 等资源不足时，达到了配置的 evict 策略， node 会变为 pressure 状态，此时 kubelet 会按照 qosClass 顺序来驱赶 pod，以此来保证节点的稳定性。可以通过配置 kubelet 启动参数 <code>--eviction-hard=</code> 来决定 evict 的策略值。</p>\n</li>\n<li><p>8、imageGC<br>imageGC 负责 node 节点的镜像回收，当本地的存放镜像的本地磁盘空间达到某阈值的时候，会触发镜像的回收，删除掉不被 pod 所使用的镜像，回收镜像的阈值可以通过 kubelet 的启动参数 <code>--image-gc-high-threshold</code> 和 <code>--image-gc-low-threshold</code> 来设置。</p>\n</li>\n<li><p>9、containerGC<br>containerGC 负责清理 node 节点上已消亡的 container，具体的 GC 操作由runtime 来实现。</p>\n</li>\n<li><p>10、imageManager<br>调用 kubecontainer 提供的PullImage/GetImageRef/ListImages/RemoveImage/ImageStates 方法来保证pod 运行所需要的镜像。</p>\n</li>\n<li><p>11、volumeManager<br>负责 node 节点上 pod 所使用 volume 的管理，volume 与 pod 的生命周期关联，负责 pod 创建删除过程中 volume 的 mount/umount/attach/detach 流程，kubernetes 采用 volume Plugins 的方式，实现存储卷的挂载等操作，内置几十种存储插件。</p>\n</li>\n<li><p>12、containerManager<br>负责 node 节点上运行的容器的 cgroup 配置信息，kubelet 启动参数如果指定 <code>--cgroups-per-qos</code> 的时候，kubelet 会启动 goroutine 来周期性的更新 pod 的 cgroup 信息，维护其正确性，该参数默认为 <code>true</code>，实现了 pod 的Guaranteed/BestEffort/Burstable 三种级别的 Qos。</p>\n</li>\n<li><p>13、runtimeManager<br>containerRuntime 负责 kubelet 与不同的 runtime 实现进行对接，实现对于底层 container 的操作，初始化之后得到的 runtime 实例将会被之前描述的组件所使用。可以通过 kubelet 的启动参数 <code>--container-runtime</code> 来定义是使用docker 还是 rkt，默认是 <code>docker</code>。</p>\n</li>\n<li><p>14、podManager<br>podManager 提供了接口来存储和访问 pod 的信息，维持 static pod 和 mirror pods 的关系，podManager 会被statusManager/volumeManager/runtimeManager 所调用，podManager 的接口处理流程里面会调用 secretManager 以及 configMapManager。 </p>\n</li>\n</ul>\n<p>在 v1.12 中，kubelet 组件有18个 manager：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">certificateManager</span><br><span class=\"line\">cgroupManager</span><br><span class=\"line\">containerManager</span><br><span class=\"line\">cpuManager</span><br><span class=\"line\">nodeContainerManager</span><br><span class=\"line\">configmapManager</span><br><span class=\"line\">containerReferenceManager</span><br><span class=\"line\">evictionManager</span><br><span class=\"line\">nvidiaGpuManager</span><br><span class=\"line\">imageGCManager</span><br><span class=\"line\">kuberuntimeManager</span><br><span class=\"line\">hostportManager</span><br><span class=\"line\">podManager</span><br><span class=\"line\">proberManager</span><br><span class=\"line\">secretManager</span><br><span class=\"line\">statusManager</span><br><span class=\"line\">volumeManager\t</span><br><span class=\"line\">tokenManager</span><br></pre></td></tr></table></figure>\n<p>其中比较重要的模块后面会进行一一分析。</p>\n<p>参考：<br><a href=\"https://juejin.im/entry/5bc71b3d6fb9a05cf23029b8\" target=\"_blank\" rel=\"noopener\">微软资深工程师详解 K8S 容器运行时</a><br><a href=\"https://cizixs.com/2016/10/25/kubernetes-intro-kubelet/\" target=\"_blank\" rel=\"noopener\">kubernetes 简介： kubelet 和 pod</a><br><a href=\"https://blog.csdn.net/jettery/article/details/78891733\" target=\"_blank\" rel=\"noopener\">Kubelet 组件解析</a></p>\n"},{"title":"kubelet 创建 pod 的流程","date":"2019-01-03T00:15:30.000Z","type":"kubelet","_content":"上篇文章介绍了 [kubelet 的启动流程](http://blog.tianfeiyu.com/2018/12/23/kubelet_init/)，本篇文章主要介绍 kubelet 创建 pod 的流程。\n \n> kubernetes 版本： v1.12 \n\n![kubelet 工作原理](http://cdn.tianfeiyu.com/kubelet-1.png)\n\nkubelet 的工作核心就是在围绕着不同的生产者生产出来的不同的有关 pod 的消息来调用相应的消费者（不同的子模块）完成不同的行为(创建和删除 pod 等)，即图中的控制循环（SyncLoop），通过不同的事件驱动这个控制循环运行。\n\n\n本文仅分析新建 pod 的流程，当一个 pod 完成调度，与一个 node 绑定起来之后，这个 pod 就会触发 kubelet 在循环控制里注册的 handler，上图中的 HandlePods 部分。此时，通过检查 pod 在 kubelet 内存中的状态，kubelet 就能判断出这是一个新调度过来的 pod，从而触发 Handler 里的 ADD 事件对应的逻辑处理。然后 kubelet 会为这个 pod 生成对应的 podStatus，接着检查 pod 所声明的 volume 是不是准备好了，然后调用下层的容器运行时。如果是 update 事件的话，kubelet 就会根据 pod 对象具体的变更情况，调用下层的容器运行时进行容器的重建。\n\n## kubelet 创建 pod 的流程\n\n![kubelet 创建 pod 的流程](http://cdn.tianfeiyu.com/kubelet-2.png)\n\n\n### 1、kubelet 的控制循环（syncLoop）\n\nsyncLoop 中首先定义了一个 syncTicker 和 housekeepingTicker，即使没有需要更新的 pod 配置，kubelet 也会定时去做同步和清理 pod 的工作。然后在 for 循环中一直调用 syncLoopIteration，如果在每次循环过程中出现比较严重的错误，kubelet 会记录到 runtimeState 中，遇到错误就等待 5 秒中继续循环。\n\n\n```\nfunc (kl *Kubelet) syncLoop(updates <-chan kubetypes.PodUpdate, handler SyncHandler) {\n\tglog.Info(\"Starting kubelet main sync loop.\")\n\n\t// syncTicker 每秒检测一次是否有需要同步的 pod workers\n\tsyncTicker := time.NewTicker(time.Second)\n\tdefer syncTicker.Stop()\n\t// 每两秒检测一次是否有需要清理的 pod\n\thousekeepingTicker := time.NewTicker(housekeepingPeriod)\n\tdefer housekeepingTicker.Stop()\n\t// pod 的生命周期变化\n\tplegCh := kl.pleg.Watch()\n\tconst (\n\t\tbase   = 100 * time.Millisecond\n\t\tmax    = 5 * time.Second\n\t\tfactor = 2\n\t)\n\tduration := base\n\tfor {\n\t\tif rs := kl.runtimeState.runtimeErrors(); len(rs) != 0 {\n\t\t\ttime.Sleep(duration)\n\t\t\tduration = time.Duration(math.Min(float64(max), factor*float64(duration)))\n\t\t\tcontinue\n\t\t}\n        ...\n\n\t\tkl.syncLoopMonitor.Store(kl.clock.Now())\n\t\t// 第二个参数为 SyncHandler 类型，SyncHandler 是一个 interface，\n\t\t// 在该文件开头处定义\n\t\tif !kl.syncLoopIteration(updates, handler, syncTicker.C, housekeepingTicker.C, plegCh) {\n\t\t\tbreak\n\t\t}\n\t\tkl.syncLoopMonitor.Store(kl.clock.Now())\n\t}\n}\n```\n\n \n\n### 2、监听 pod 变化（syncLoopIteration） \n\nsyncLoopIteration 这个方法就会对多个管道进行遍历，发现任何一个管道有消息就交给 handler 去处理。它会从以下管道中获取消息：\n\n- configCh：该信息源由 kubeDeps 对象中的 PodConfig 子模块提供，该模块将同时 watch 3 个不同来源的 pod 信息的变化（file，http，apiserver），一旦某个来源的 pod 信息发生了更新（创建/更新/删除），这个 channel 中就会出现被更新的 pod 信息和更新的具体操作。\n- syncCh：定时器管道，每隔一秒去同步最新保存的 pod 状态\n- houseKeepingCh：housekeeping 事件的管道，做 pod 清理工作\n- plegCh：该信息源由 kubelet 对象中的 pleg 子模块提供，该模块主要用于周期性地向 container runtime 查询当前所有容器的状态，如果状态发生变化，则这个 channel 产生事件。\n- livenessManager.Updates()：健康检查发现某个 pod 不可用，kubelet 将根据 Pod 的restartPolicy 自动执行正确的操作\n\n\n```\nfunc (kl *Kubelet) syncLoopIteration(configCh <-chan kubetypes.PodUpdate, handler SyncHandler,\n\tsyncCh <-chan time.Time, housekeepingCh <-chan time.Time, plegCh <-chan *pleg.PodLifecycleEvent) bool {\n\tselect {\n\tcase u, open := <-configCh:\n\t\tif !open {\n\t\t\tglog.Errorf(\"Update channel is closed. Exiting the sync loop.\")\n\t\t\treturn false\n\t\t}\n\n\t\tswitch u.Op {\n\t\tcase kubetypes.ADD:\n\t\t\t...\n\t\tcase kubetypes.UPDATE:\n\t\t\t...\n\t\tcase kubetypes.REMOVE:\n\t\t\t...\n\t\tcase kubetypes.RECONCILE:\n\t\t\t...\n\t\tcase kubetypes.DELETE:\n\t\t\t...\n\t\tcase kubetypes.RESTORE:\n\t\t\t...\n\t\tcase kubetypes.SET:\n\t\t\t...\n\t\t}\n\t\t...\n\tcase e := <-plegCh:\n\t\t...\n\tcase <-syncCh:\n\t\t...\n\tcase update := <-kl.livenessManager.Updates():\n\t\t...\n\tcase <-housekeepingCh:\n\t\t...\n\t}\n\treturn true\n}\n```\n\n### 3、处理新增 pod（HandlePodAddtions）\n\n对于事件中的每个 pod，执行以下操作：\n\n- 1、把所有的 pod 按照创建日期进行排序，保证最先创建的 pod 会最先被处理\n- 2、把它加入到 podManager 中，podManager 子模块负责管理这台机器上的 pod 的信息，pod 和 mirrorPod 之间的对应关系等等。所有被管理的 pod 都要出现在里面，如果 podManager 中找不到某个 pod，就认为这个 pod 被删除了\n- 3、如果是 mirror pod 调用其单独的方法\n- 4、验证 pod 是否能在该节点运行，如果不可以直接拒绝\n- 5、通过 dispatchWork 把创建 pod 的工作下发给 podWorkers 子模块做异步处理\n- 6、在 probeManager 中添加 pod，如果 pod 中定义了 readiness 和 liveness 健康检查，启动 goroutine 定期进行检测\n\n```\nfunc (kl *Kubelet) HandlePodAdditions(pods []*v1.Pod) {\n\tstart := kl.clock.Now()\n\t// 对所有 pod 按照日期排序，保证最先创建的 pod 优先被处理\n\tsort.Sort(sliceutils.PodsByCreationTime(pods))\n\tfor _, pod := range pods {\n\t\tif kl.dnsConfigurer != nil && kl.dnsConfigurer.ResolverConfig != \"\" {\n\t\t\tkl.dnsConfigurer.CheckLimitsForResolvConf()\n\t\t}\n\t\texistingPods := kl.podManager.GetPods()\n\t\t// 把 pod 加入到 podManager 中\n\t\tkl.podManager.AddPod(pod)\n\n\t\t// 判断是否是 mirror pod（即 static pod）\n\t\tif kubepod.IsMirrorPod(pod) {\n\t\t\tkl.handleMirrorPod(pod, start)\n\t\t\tcontinue\n\t\t}\n\n\t\tif !kl.podIsTerminated(pod) {\n\t\t\tactivePods := kl.filterOutTerminatedPods(existingPods)\n\t\t\t// 通过 canAdmitPod 方法校验Pod能否在该计算节点创建(如:磁盘空间)\n\t\t\t// Check if we can admit the pod; if not, reject it.\n\t\t\tif ok, reason, message := kl.canAdmitPod(activePods, pod); !ok {\n\t\t\t\tkl.rejectPod(pod, reason, message)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t}\n\t\t\n\t\tmirrorPod, _ := kl.podManager.GetMirrorPodByPod(pod)\n\t\t// 通过 dispatchWork 分发 pod 做异步处理，dispatchWork 主要工作就是把接收到的参数封装成 UpdatePodOptions，调用 UpdatePod 方法.\n\t\tkl.dispatchWork(pod, kubetypes.SyncPodCreate, mirrorPod, start)\n\t\t// 在 probeManager 中添加 pod，如果 pod 中定义了 readiness 和 liveness 健康检查，启动 goroutine 定期进行检测\n\t\tkl.probeManager.AddPod(pod)\n\t}\n}\n```\n\n> static pod 是由 kubelet 直接管理的，k8s apiserver 并不会感知到 static pod 的存在，当然也不会和任何一个 rs 关联上，完全是由 kubelet 进程来监管，并在它异常时负责重启。Kubelet 会通过 apiserver 为每一个 static pod 创建一个对应的 mirror pod，如此以来就可以可以通过 kubectl 命令查看对应的 pod,并且可以通过 kubectl logs 命令直接查看到static pod 的日志信息。\n\n\n### 4、下发任务（dispatchWork）\n\ndispatchWorker 的主要作用是把某个对 Pod 的操作（创建/更新/删除）下发给 podWorkers。\n\n```\nfunc (kl *Kubelet) dispatchWork(pod *v1.Pod, syncType kubetypes.SyncPodType, mirrorPod *v1.Pod, start time.Time) {\n\tif kl.podIsTerminated(pod) {\n\t\tif pod.DeletionTimestamp != nil {\n\t\t\tkl.statusManager.TerminatePod(pod)\n\t\t}\n\t\treturn\n\t}\n\t// 落实在 podWorkers 中\n\tkl.podWorkers.UpdatePod(&UpdatePodOptions{\n\t\tPod:        pod,\n\t\tMirrorPod:  mirrorPod,\n\t\tUpdateType: syncType,\n\t\tOnCompleteFunc: func(err error) {\n\t\t\tif err != nil {\n\t\t\t\tmetrics.PodWorkerLatency.WithLabelValues(syncType.String()).Observe(metrics.SinceInMicroseconds(start))\n\t\t\t}\n\t\t},\n\t})\n\tif syncType == kubetypes.SyncPodCreate {\n\t\tmetrics.ContainersPerPodCount.Observe(float64(len(pod.Spec.Containers)))\n\t}\n}\n```\n\n\n### 5、更新事件的 channel（UpdatePod）\n\npodWorkers 子模块主要的作用就是处理针对每一个的 Pod 的更新事件，比如 Pod 的创建，删除，更新。而 podWorkers 采取的基本思路是：为每一个 Pod 都单独创建一个 goroutine 和更新事件的 channel，goroutine 会阻塞式的等待 channel 中的事件，并且对获取的事件进行处理。而 podWorkers 对象自身则主要负责对更新事件进行下发。\n\n\n```\nfunc (p *podWorkers) UpdatePod(options *UpdatePodOptions) {\n\tpod := options.Pod\n\tuid := pod.UID\n\tvar podUpdates chan UpdatePodOptions\n\tvar exists bool\n\n\tp.podLock.Lock()\n\tdefer p.podLock.Unlock()\n\n\t// 如果当前 pod 还没有启动过 goroutine ，则启动 goroutine，并且创建 channel\n\tif podUpdates, exists = p.podUpdates[uid]; !exists {\n\t\t// 创建 channel\n\t\tpodUpdates = make(chan UpdatePodOptions, 1)\n\t\tp.podUpdates[uid] = podUpdates\n\n\t\t// 启动 goroutine\n\t\tgo func() {\n\t\t\tdefer runtime.HandleCrash()\n\t\t\tp.managePodLoop(podUpdates)\n\t\t}()\n\t}\n\t// 下发更新事件\n\tif !p.isWorking[pod.UID] {\n\t\tp.isWorking[pod.UID] = true\n\t\tpodUpdates <- *options\n\t} else {\n\t\tupdate, found := p.lastUndeliveredWorkUpdate[pod.UID]\n\t\tif !found || update.UpdateType != kubetypes.SyncPodKill {\n\t\t\tp.lastUndeliveredWorkUpdate[pod.UID] = *options\n\t\t}\n\t}\n}\n```\n\n### 6、调用 syncPodFn 方法同步 pod（managePodLoop）\nmanagePodLoop 调用 syncPodFn 方法去同步 pod，syncPodFn 实际上就是kubelet.SyncPod。在完成这次 sync 动作之后，会调用 wrapUp 函数，这个函数将会做几件事情:\n\n- 将这个 pod 信息插入 kubelet 的 workQueue 队列中，等待下一次周期性的对这个 pod 的状态进行 sync\n- 将在这次 sync 期间堆积的没有能够来得及处理的最近一次 update 操作加入 goroutine 的事件 channel 中，立即处理。\n\n\n```\nfunc (p *podWorkers) managePodLoop(podUpdates <-chan UpdatePodOptions) {\n\tvar lastSyncTime time.Time\n\tfor update := range podUpdates {\n\t\terr := func() error {\n\t\t\tpodUID := update.Pod.UID\n\t\t\tstatus, err := p.podCache.GetNewerThan(podUID, lastSyncTime)\n\t\t\tif err != nil {\n\t\t\t\t...\n\t\t\t}\n\t\t\terr = p.syncPodFn(syncPodOptions{\n\t\t\t\tmirrorPod:      update.MirrorPod,\n\t\t\t\tpod:            update.Pod,\n\t\t\t\tpodStatus:      status,\n\t\t\t\tkillPodOptions: update.KillPodOptions,\n\t\t\t\tupdateType:     update.UpdateType,\n\t\t\t})\n\t\t\tlastSyncTime = time.Now()\n\t\t\treturn err\n\t\t}()\n\t\tif update.OnCompleteFunc != nil {\n\t\t\tupdate.OnCompleteFunc(err)\n\t\t}\n\t\tif err != nil {\n\t\t\t...\n\t\t}\n\t\tp.wrapUp(update.Pod.UID, err)\n\t}\n}\n```\n\n### 7、完成创建容器前的准备工作（SyncPod）\n\n在这个方法中，主要完成以下几件事情：\n\n- 如果是删除 pod，立即执行并返回\n- 同步 podStatus 到 kubelet.statusManager\n- 检查 pod 是否能运行在本节点，主要是权限检查（是否能使用主机网络模式，是否可以以 privileged 权限运行等）。如果没有权限，就删除本地旧的 pod 并返回错误信息\n- 创建 containerManagar 对象，并且创建 pod level cgroup，更新 Qos level cgroup\n- 如果是 static Pod，就创建或者更新对应的 mirrorPod\n- 创建 pod 的数据目录，存放 volume 和 plugin 信息,如果定义了 pv，等待所有的 volume mount 完成（volumeManager 会在后台做这些事情）,如果有 image secrets，去 apiserver 获取对应的 secrets 数据\n- 然后调用 kubelet.volumeManager 组件，等待它将 pod 所需要的所有外挂的 volume 都准备好。\n- 调用 container runtime 的 SyncPod 方法，去实现真正的容器创建逻辑\n\n这里所有的事情都和具体的容器没有关系，可以看到该方法是创建 pod 实体（即容器）之前需要完成的准备工作。\n\n```\nfunc (kl *Kubelet) syncPod(o syncPodOptions) error {\n\t// pull out the required options\n\tpod := o.pod\n\tmirrorPod := o.mirrorPod\n\tpodStatus := o.podStatus\n\tupdateType := o.updateType\n\n\t// 是否为 删除 pod\n\tif updateType == kubetypes.SyncPodKill {\n\t\t...\n\t}\n    ...\n\t// 检查 pod 是否能运行在本节点\n\trunnable := kl.canRunPod(pod)\n\tif !runnable.Admit {\n\t\t...\n\t}\n\n\t// 更新 pod 状态\n\tkl.statusManager.SetPodStatus(pod, apiPodStatus)\n\n\t// 如果 pod 非 running 状态则直接 kill 掉\n\tif !runnable.Admit || pod.DeletionTimestamp != nil || apiPodStatus.Phase == v1.PodFailed {\n\t\t...\n\t}\n\n\t// 加载网络插件\n\tif rs := kl.runtimeState.networkErrors(); len(rs) != 0 && !kubecontainer.IsHostNetworkPod(pod) {\n\t\t...\n\t}\n\n\tpcm := kl.containerManager.NewPodContainerManager()\n\tif !kl.podIsTerminated(pod) {\n\t\t...\n\t\t// 创建并更新 pod 的 cgroups\n\t\tif !(podKilled && pod.Spec.RestartPolicy == v1.RestartPolicyNever) {\n\t\t\tif !pcm.Exists(pod) {\n\t\t\t\t...\n\t\t\t}\n\t\t}\n\t}\n\n\t// 为 static pod 创建对应的 mirror pod\n\tif kubepod.IsStaticPod(pod) {\n\t\t...\n\t}\n\n\t// 创建数据目录\n\tif err := kl.makePodDataDirs(pod); err != nil {\n\t\t...\n\t}\n\n\t// 挂载 volume\n\tif !kl.podIsTerminated(pod) {\n\t\tif err := kl.volumeManager.WaitForAttachAndMount(pod); err != nil {\n\t\t\t...\n\t\t}\n\t}\n\n\t// 获取 secret 信息\n\tpullSecrets := kl.getPullSecretsForPod(pod)\n\n\t// 调用 containerRuntime 的 SyncPod 方法开始创建容器\n\tresult := kl.containerRuntime.SyncPod(pod, apiPodStatus, podStatus, pullSecrets, kl.backOff)\n\tkl.reasonCache.Update(pod.UID, result)\n\tif err := result.Error(); err != nil {\n\t\t...\n\t}\n\n\treturn nil\n}\n```\n\n\n### 8、创建容器\n\ncontainerRuntime（pkg/kubelet/kuberuntime）子模块的 SyncPod 函数才是真正完成 pod 内容器实体的创建。\nsyncPod 主要执行以下几个操作：\n- 1、计算 sandbox 和 container 是否发生变化\n- 2、创建 sandbox 容器\n- 3、启动 init 容器\n- 4、启动业务容器\n\ninitContainers 可以有多个，多个 container 严格按照顺序启动，只有当前一个 container 退出了以后，才开始启动下一个 container。\n\n```\nfunc (m *kubeGenericRuntimeManager) SyncPod(pod *v1.Pod, _ v1.PodStatus, podStatus *kubecontainer.PodStatus, pullSecrets []v1.Secret, backOff *flowcontrol.Backoff) (result kubecontainer.PodSyncResult) {\n\t// 1、计算 sandbox 和 container 是否发生变化\n\tpodContainerChanges := m.computePodActions(pod, podStatus)\n\tif podContainerChanges.CreateSandbox {\n\t\tref, err := ref.GetReference(legacyscheme.Scheme, pod)\n\t\tif err != nil {\n\t\t\tglog.Errorf(\"Couldn't make a ref to pod %q: '%v'\", format.Pod(pod), err)\n\t\t}\n\t\t...\n\t}\n\n\t// 2、kill 掉 sandbox 已经改变的 pod\n\tif podContainerChanges.KillPod {\n\t\t...\n\t} else {\n\t\t// 3、kill 掉非 running 状态的 containers\n\t\t...\n\t\tfor containerID, containerInfo := range podContainerChanges.ContainersToKill {\n\t\t\t...\n\t\t\tif err := m.killContainer(pod, containerID, containerInfo.name, containerInfo.message, nil); err != nil {\n\t\t\t\t...\n\t\t\t}\n\t\t}\n\t}\n\n\tm.pruneInitContainersBeforeStart(pod, podStatus)\n\tpodIP := \"\"\n\tif podStatus != nil {\n\t\tpodIP = podStatus.IP\n\t}\n\n\t// 4、创建 sandbox \n\tpodSandboxID := podContainerChanges.SandboxID\n\tif podContainerChanges.CreateSandbox {\n\t\tpodSandboxID, msg, err = m.createPodSandbox(pod, podContainerChanges.Attempt)\n\t\tif err != nil {\n\t\t\t...\n\t\t}\n\t\t...\n\t\tpodSandboxStatus, err := m.runtimeService.PodSandboxStatus(podSandboxID)\n\t\tif err != nil {\n\t\t\t...\n\t\t}\n\t\t// 如果 pod 网络是 host 模式，容器也相同；其他情况下，容器会使用 None 网络模式，让 kubelet 的网络插件自己进行网络配置\n\t\tif !kubecontainer.IsHostNetworkPod(pod) {\n\t\t\tpodIP = m.determinePodSandboxIP(pod.Namespace, pod.Name, podSandboxStatus)\n\t\t\tglog.V(4).Infof(\"Determined the ip %q for pod %q after sandbox changed\", podIP, format.Pod(pod))\n\t\t}\n\t}\n\n\tconfigPodSandboxResult := kubecontainer.NewSyncResult(kubecontainer.ConfigPodSandbox, podSandboxID)\n\tresult.AddSyncResult(configPodSandboxResult)\n\t// 获取 PodSandbox 的配置(如:metadata,clusterDNS,容器的端口映射等)\n\tpodSandboxConfig, err := m.generatePodSandboxConfig(pod, podContainerChanges.Attempt)\n\t...\n\n\t// 5、启动 init container\n\tif container := podContainerChanges.NextInitContainerToStart; container != nil {\n\t\t...\n\t\tif msg, err := m.startContainer(podSandboxID, podSandboxConfig, container, pod, podStatus, pullSecrets, podIP, kubecontainer.ContainerTypeInit); err != nil {\n\t\t\t...\n\t\t}\n\t}\n\n\t// 6、启动业务容器\n\tfor _, idx := range podContainerChanges.ContainersToStart {\n\t\t...\n\t\tif msg, err := m.startContainer(podSandboxID, podSandboxConfig, container, pod, podStatus, pullSecrets, podIP, kubecontainer.ContainerTypeRegular); err != nil {\n\t\t\t...\n\t\t}\n\t}\n\t\n\treturn\n}\n```\n\n\n### 9、启动容器\n\n最终由 startContainer 完成容器的启动，其主要有以下几个步骤：\n\n- 1、拉取镜像\n- 2、生成业务容器的配置信息\n- 3、调用 docker api 创建容器\n- 4、启动容器\n- 5、执行 post start hook\n\n\n```\nfunc (m *kubeGenericRuntimeManager) startContainer(podSandboxID string, podSandboxConfig *runtimeapi.PodSandboxConfig, container *v1.Container, pod *v1.Pod, podStatus *kubecontainer.PodStatus, pullSecrets []v1.Secret, podIP string, containerType kubecontainer.ContainerType) (string, error) {\n\t// 1、检查业务镜像是否存在，不存在则到 Docker Registry 或是 Private Registry 拉取镜像。\n\timageRef, msg, err := m.imagePuller.EnsureImageExists(pod, container, pullSecrets)\n\tif err != nil {\n\t\t...\n\t}\n\n\tref, err := kubecontainer.GenerateContainerRef(pod, container)\n\tif err != nil {\n\t\t...\n\t}\n\n\t// 设置 RestartCount \n\trestartCount := 0\n\tcontainerStatus := podStatus.FindContainerStatusByName(container.Name)\n\tif containerStatus != nil {\n\t\trestartCount = containerStatus.RestartCount + 1\n\t}\n\n\t// 2、生成业务容器的配置信息\n\tcontainerConfig, cleanupAction, err := m.generateContainerConfig(container, pod, restartCount, podIP, imageRef, containerType)\n\tif cleanupAction != nil {\n\t\tdefer cleanupAction()\n\t}\n\t...\n\n\t// 3、通过 client.CreateContainer 调用 docker api 创建业务容器\n\tcontainerID, err := m.runtimeService.CreateContainer(podSandboxID, containerConfig, podSandboxConfig)\n\tif err != nil {\n\t\t...\n\t}\n\terr = m.internalLifecycle.PreStartContainer(pod, container, containerID)\n\tif err != nil {\n\t\t...\n\t}\n\t...\n\n\t// 3、启动业务容器\n\terr = m.runtimeService.StartContainer(containerID)\n\tif err != nil {\n\t\t...\n\t}\n\n\tcontainerMeta := containerConfig.GetMetadata()\n\tsandboxMeta := podSandboxConfig.GetMetadata()\n\tlegacySymlink := legacyLogSymlink(containerID, containerMeta.Name, sandboxMeta.Name,\n\t\tsandboxMeta.Namespace)\n\tcontainerLog := filepath.Join(podSandboxConfig.LogDirectory, containerConfig.LogPath)\n\tif _, err := m.osInterface.Stat(containerLog); !os.IsNotExist(err) {\n\t\tif err := m.osInterface.Symlink(containerLog, legacySymlink); err != nil {\n\t\t\tglog.Errorf(\"Failed to create legacy symbolic link %q to container %q log %q: %v\",\n\t\t\t\tlegacySymlink, containerID, containerLog, err)\n\t\t}\n\t}\n\n\t// 4、执行 post start hook\n\tif container.Lifecycle != nil && container.Lifecycle.PostStart != nil {\n\t\tkubeContainerID := kubecontainer.ContainerID{\n\t\t\tType: m.runtimeName,\n\t\t\tID:   containerID,\n\t\t}\n\t\t// runner.Run 这个方法的主要作用就是在业务容器起来的时候，\n\t\t// 首先会执行一个 container hook(PostStart 和 PreStop),做一些预处理工作。\n\t\t// 只有 container hook 执行成功才会运行具体的业务服务，否则容器异常。\n\t\tmsg, handlerErr := m.runner.Run(kubeContainerID, pod, container, container.Lifecycle.PostStart)\n\t\tif handlerErr != nil {\n\t\t\t...\n\t\t}\n\t}\n\n\treturn \"\", nil\n}\n```\n\n\n## 总结\n\n本文主要讲述了 kubelet 从监听到容器调度至本节点再到创建容器的一个过程，kubelet 最终调用 docker api 来创建容器的。结合上篇文章，可以看出 kubelet 从启动到创建 pod 的一个清晰过程。\n\n\n参考：\n[k8s源码分析-kubelet](https://sycki.com/articles/kubernetes/k8s-code-kubelet)\n[Kubelet源码分析(一):启动流程分析](https://segmentfault.com/a/1190000008267351)\n[kubelet 源码分析：pod 新建流程](http://cizixs.com/2017/06/07/kubelet-source-code-analysis-part-2/)\n[kubelet创建Pod流程解析](https://fatsheep9146.github.io/2018/07/22/kubelet%E5%88%9B%E5%BB%BAPod%E6%B5%81%E7%A8%8B%E8%A7%A3%E6%9E%90/)\n[Kubelet: Pod Lifecycle Event Generator (PLEG) Design-\tproposals](https://github.com/kubernetes/community/blob/master/contributors/design-proposals/node/pod-lifecycle-event-generator.md)\n\n","source":"_posts/kubelet_create_pod.md","raw":"---\ntitle: kubelet 创建 pod 的流程\ndate: 2019-01-03 08:15:30\ntags: \"kubelet\"\ntype: \"kubelet\"\n\n---\n上篇文章介绍了 [kubelet 的启动流程](http://blog.tianfeiyu.com/2018/12/23/kubelet_init/)，本篇文章主要介绍 kubelet 创建 pod 的流程。\n \n> kubernetes 版本： v1.12 \n\n![kubelet 工作原理](http://cdn.tianfeiyu.com/kubelet-1.png)\n\nkubelet 的工作核心就是在围绕着不同的生产者生产出来的不同的有关 pod 的消息来调用相应的消费者（不同的子模块）完成不同的行为(创建和删除 pod 等)，即图中的控制循环（SyncLoop），通过不同的事件驱动这个控制循环运行。\n\n\n本文仅分析新建 pod 的流程，当一个 pod 完成调度，与一个 node 绑定起来之后，这个 pod 就会触发 kubelet 在循环控制里注册的 handler，上图中的 HandlePods 部分。此时，通过检查 pod 在 kubelet 内存中的状态，kubelet 就能判断出这是一个新调度过来的 pod，从而触发 Handler 里的 ADD 事件对应的逻辑处理。然后 kubelet 会为这个 pod 生成对应的 podStatus，接着检查 pod 所声明的 volume 是不是准备好了，然后调用下层的容器运行时。如果是 update 事件的话，kubelet 就会根据 pod 对象具体的变更情况，调用下层的容器运行时进行容器的重建。\n\n## kubelet 创建 pod 的流程\n\n![kubelet 创建 pod 的流程](http://cdn.tianfeiyu.com/kubelet-2.png)\n\n\n### 1、kubelet 的控制循环（syncLoop）\n\nsyncLoop 中首先定义了一个 syncTicker 和 housekeepingTicker，即使没有需要更新的 pod 配置，kubelet 也会定时去做同步和清理 pod 的工作。然后在 for 循环中一直调用 syncLoopIteration，如果在每次循环过程中出现比较严重的错误，kubelet 会记录到 runtimeState 中，遇到错误就等待 5 秒中继续循环。\n\n\n```\nfunc (kl *Kubelet) syncLoop(updates <-chan kubetypes.PodUpdate, handler SyncHandler) {\n\tglog.Info(\"Starting kubelet main sync loop.\")\n\n\t// syncTicker 每秒检测一次是否有需要同步的 pod workers\n\tsyncTicker := time.NewTicker(time.Second)\n\tdefer syncTicker.Stop()\n\t// 每两秒检测一次是否有需要清理的 pod\n\thousekeepingTicker := time.NewTicker(housekeepingPeriod)\n\tdefer housekeepingTicker.Stop()\n\t// pod 的生命周期变化\n\tplegCh := kl.pleg.Watch()\n\tconst (\n\t\tbase   = 100 * time.Millisecond\n\t\tmax    = 5 * time.Second\n\t\tfactor = 2\n\t)\n\tduration := base\n\tfor {\n\t\tif rs := kl.runtimeState.runtimeErrors(); len(rs) != 0 {\n\t\t\ttime.Sleep(duration)\n\t\t\tduration = time.Duration(math.Min(float64(max), factor*float64(duration)))\n\t\t\tcontinue\n\t\t}\n        ...\n\n\t\tkl.syncLoopMonitor.Store(kl.clock.Now())\n\t\t// 第二个参数为 SyncHandler 类型，SyncHandler 是一个 interface，\n\t\t// 在该文件开头处定义\n\t\tif !kl.syncLoopIteration(updates, handler, syncTicker.C, housekeepingTicker.C, plegCh) {\n\t\t\tbreak\n\t\t}\n\t\tkl.syncLoopMonitor.Store(kl.clock.Now())\n\t}\n}\n```\n\n \n\n### 2、监听 pod 变化（syncLoopIteration） \n\nsyncLoopIteration 这个方法就会对多个管道进行遍历，发现任何一个管道有消息就交给 handler 去处理。它会从以下管道中获取消息：\n\n- configCh：该信息源由 kubeDeps 对象中的 PodConfig 子模块提供，该模块将同时 watch 3 个不同来源的 pod 信息的变化（file，http，apiserver），一旦某个来源的 pod 信息发生了更新（创建/更新/删除），这个 channel 中就会出现被更新的 pod 信息和更新的具体操作。\n- syncCh：定时器管道，每隔一秒去同步最新保存的 pod 状态\n- houseKeepingCh：housekeeping 事件的管道，做 pod 清理工作\n- plegCh：该信息源由 kubelet 对象中的 pleg 子模块提供，该模块主要用于周期性地向 container runtime 查询当前所有容器的状态，如果状态发生变化，则这个 channel 产生事件。\n- livenessManager.Updates()：健康检查发现某个 pod 不可用，kubelet 将根据 Pod 的restartPolicy 自动执行正确的操作\n\n\n```\nfunc (kl *Kubelet) syncLoopIteration(configCh <-chan kubetypes.PodUpdate, handler SyncHandler,\n\tsyncCh <-chan time.Time, housekeepingCh <-chan time.Time, plegCh <-chan *pleg.PodLifecycleEvent) bool {\n\tselect {\n\tcase u, open := <-configCh:\n\t\tif !open {\n\t\t\tglog.Errorf(\"Update channel is closed. Exiting the sync loop.\")\n\t\t\treturn false\n\t\t}\n\n\t\tswitch u.Op {\n\t\tcase kubetypes.ADD:\n\t\t\t...\n\t\tcase kubetypes.UPDATE:\n\t\t\t...\n\t\tcase kubetypes.REMOVE:\n\t\t\t...\n\t\tcase kubetypes.RECONCILE:\n\t\t\t...\n\t\tcase kubetypes.DELETE:\n\t\t\t...\n\t\tcase kubetypes.RESTORE:\n\t\t\t...\n\t\tcase kubetypes.SET:\n\t\t\t...\n\t\t}\n\t\t...\n\tcase e := <-plegCh:\n\t\t...\n\tcase <-syncCh:\n\t\t...\n\tcase update := <-kl.livenessManager.Updates():\n\t\t...\n\tcase <-housekeepingCh:\n\t\t...\n\t}\n\treturn true\n}\n```\n\n### 3、处理新增 pod（HandlePodAddtions）\n\n对于事件中的每个 pod，执行以下操作：\n\n- 1、把所有的 pod 按照创建日期进行排序，保证最先创建的 pod 会最先被处理\n- 2、把它加入到 podManager 中，podManager 子模块负责管理这台机器上的 pod 的信息，pod 和 mirrorPod 之间的对应关系等等。所有被管理的 pod 都要出现在里面，如果 podManager 中找不到某个 pod，就认为这个 pod 被删除了\n- 3、如果是 mirror pod 调用其单独的方法\n- 4、验证 pod 是否能在该节点运行，如果不可以直接拒绝\n- 5、通过 dispatchWork 把创建 pod 的工作下发给 podWorkers 子模块做异步处理\n- 6、在 probeManager 中添加 pod，如果 pod 中定义了 readiness 和 liveness 健康检查，启动 goroutine 定期进行检测\n\n```\nfunc (kl *Kubelet) HandlePodAdditions(pods []*v1.Pod) {\n\tstart := kl.clock.Now()\n\t// 对所有 pod 按照日期排序，保证最先创建的 pod 优先被处理\n\tsort.Sort(sliceutils.PodsByCreationTime(pods))\n\tfor _, pod := range pods {\n\t\tif kl.dnsConfigurer != nil && kl.dnsConfigurer.ResolverConfig != \"\" {\n\t\t\tkl.dnsConfigurer.CheckLimitsForResolvConf()\n\t\t}\n\t\texistingPods := kl.podManager.GetPods()\n\t\t// 把 pod 加入到 podManager 中\n\t\tkl.podManager.AddPod(pod)\n\n\t\t// 判断是否是 mirror pod（即 static pod）\n\t\tif kubepod.IsMirrorPod(pod) {\n\t\t\tkl.handleMirrorPod(pod, start)\n\t\t\tcontinue\n\t\t}\n\n\t\tif !kl.podIsTerminated(pod) {\n\t\t\tactivePods := kl.filterOutTerminatedPods(existingPods)\n\t\t\t// 通过 canAdmitPod 方法校验Pod能否在该计算节点创建(如:磁盘空间)\n\t\t\t// Check if we can admit the pod; if not, reject it.\n\t\t\tif ok, reason, message := kl.canAdmitPod(activePods, pod); !ok {\n\t\t\t\tkl.rejectPod(pod, reason, message)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t}\n\t\t\n\t\tmirrorPod, _ := kl.podManager.GetMirrorPodByPod(pod)\n\t\t// 通过 dispatchWork 分发 pod 做异步处理，dispatchWork 主要工作就是把接收到的参数封装成 UpdatePodOptions，调用 UpdatePod 方法.\n\t\tkl.dispatchWork(pod, kubetypes.SyncPodCreate, mirrorPod, start)\n\t\t// 在 probeManager 中添加 pod，如果 pod 中定义了 readiness 和 liveness 健康检查，启动 goroutine 定期进行检测\n\t\tkl.probeManager.AddPod(pod)\n\t}\n}\n```\n\n> static pod 是由 kubelet 直接管理的，k8s apiserver 并不会感知到 static pod 的存在，当然也不会和任何一个 rs 关联上，完全是由 kubelet 进程来监管，并在它异常时负责重启。Kubelet 会通过 apiserver 为每一个 static pod 创建一个对应的 mirror pod，如此以来就可以可以通过 kubectl 命令查看对应的 pod,并且可以通过 kubectl logs 命令直接查看到static pod 的日志信息。\n\n\n### 4、下发任务（dispatchWork）\n\ndispatchWorker 的主要作用是把某个对 Pod 的操作（创建/更新/删除）下发给 podWorkers。\n\n```\nfunc (kl *Kubelet) dispatchWork(pod *v1.Pod, syncType kubetypes.SyncPodType, mirrorPod *v1.Pod, start time.Time) {\n\tif kl.podIsTerminated(pod) {\n\t\tif pod.DeletionTimestamp != nil {\n\t\t\tkl.statusManager.TerminatePod(pod)\n\t\t}\n\t\treturn\n\t}\n\t// 落实在 podWorkers 中\n\tkl.podWorkers.UpdatePod(&UpdatePodOptions{\n\t\tPod:        pod,\n\t\tMirrorPod:  mirrorPod,\n\t\tUpdateType: syncType,\n\t\tOnCompleteFunc: func(err error) {\n\t\t\tif err != nil {\n\t\t\t\tmetrics.PodWorkerLatency.WithLabelValues(syncType.String()).Observe(metrics.SinceInMicroseconds(start))\n\t\t\t}\n\t\t},\n\t})\n\tif syncType == kubetypes.SyncPodCreate {\n\t\tmetrics.ContainersPerPodCount.Observe(float64(len(pod.Spec.Containers)))\n\t}\n}\n```\n\n\n### 5、更新事件的 channel（UpdatePod）\n\npodWorkers 子模块主要的作用就是处理针对每一个的 Pod 的更新事件，比如 Pod 的创建，删除，更新。而 podWorkers 采取的基本思路是：为每一个 Pod 都单独创建一个 goroutine 和更新事件的 channel，goroutine 会阻塞式的等待 channel 中的事件，并且对获取的事件进行处理。而 podWorkers 对象自身则主要负责对更新事件进行下发。\n\n\n```\nfunc (p *podWorkers) UpdatePod(options *UpdatePodOptions) {\n\tpod := options.Pod\n\tuid := pod.UID\n\tvar podUpdates chan UpdatePodOptions\n\tvar exists bool\n\n\tp.podLock.Lock()\n\tdefer p.podLock.Unlock()\n\n\t// 如果当前 pod 还没有启动过 goroutine ，则启动 goroutine，并且创建 channel\n\tif podUpdates, exists = p.podUpdates[uid]; !exists {\n\t\t// 创建 channel\n\t\tpodUpdates = make(chan UpdatePodOptions, 1)\n\t\tp.podUpdates[uid] = podUpdates\n\n\t\t// 启动 goroutine\n\t\tgo func() {\n\t\t\tdefer runtime.HandleCrash()\n\t\t\tp.managePodLoop(podUpdates)\n\t\t}()\n\t}\n\t// 下发更新事件\n\tif !p.isWorking[pod.UID] {\n\t\tp.isWorking[pod.UID] = true\n\t\tpodUpdates <- *options\n\t} else {\n\t\tupdate, found := p.lastUndeliveredWorkUpdate[pod.UID]\n\t\tif !found || update.UpdateType != kubetypes.SyncPodKill {\n\t\t\tp.lastUndeliveredWorkUpdate[pod.UID] = *options\n\t\t}\n\t}\n}\n```\n\n### 6、调用 syncPodFn 方法同步 pod（managePodLoop）\nmanagePodLoop 调用 syncPodFn 方法去同步 pod，syncPodFn 实际上就是kubelet.SyncPod。在完成这次 sync 动作之后，会调用 wrapUp 函数，这个函数将会做几件事情:\n\n- 将这个 pod 信息插入 kubelet 的 workQueue 队列中，等待下一次周期性的对这个 pod 的状态进行 sync\n- 将在这次 sync 期间堆积的没有能够来得及处理的最近一次 update 操作加入 goroutine 的事件 channel 中，立即处理。\n\n\n```\nfunc (p *podWorkers) managePodLoop(podUpdates <-chan UpdatePodOptions) {\n\tvar lastSyncTime time.Time\n\tfor update := range podUpdates {\n\t\terr := func() error {\n\t\t\tpodUID := update.Pod.UID\n\t\t\tstatus, err := p.podCache.GetNewerThan(podUID, lastSyncTime)\n\t\t\tif err != nil {\n\t\t\t\t...\n\t\t\t}\n\t\t\terr = p.syncPodFn(syncPodOptions{\n\t\t\t\tmirrorPod:      update.MirrorPod,\n\t\t\t\tpod:            update.Pod,\n\t\t\t\tpodStatus:      status,\n\t\t\t\tkillPodOptions: update.KillPodOptions,\n\t\t\t\tupdateType:     update.UpdateType,\n\t\t\t})\n\t\t\tlastSyncTime = time.Now()\n\t\t\treturn err\n\t\t}()\n\t\tif update.OnCompleteFunc != nil {\n\t\t\tupdate.OnCompleteFunc(err)\n\t\t}\n\t\tif err != nil {\n\t\t\t...\n\t\t}\n\t\tp.wrapUp(update.Pod.UID, err)\n\t}\n}\n```\n\n### 7、完成创建容器前的准备工作（SyncPod）\n\n在这个方法中，主要完成以下几件事情：\n\n- 如果是删除 pod，立即执行并返回\n- 同步 podStatus 到 kubelet.statusManager\n- 检查 pod 是否能运行在本节点，主要是权限检查（是否能使用主机网络模式，是否可以以 privileged 权限运行等）。如果没有权限，就删除本地旧的 pod 并返回错误信息\n- 创建 containerManagar 对象，并且创建 pod level cgroup，更新 Qos level cgroup\n- 如果是 static Pod，就创建或者更新对应的 mirrorPod\n- 创建 pod 的数据目录，存放 volume 和 plugin 信息,如果定义了 pv，等待所有的 volume mount 完成（volumeManager 会在后台做这些事情）,如果有 image secrets，去 apiserver 获取对应的 secrets 数据\n- 然后调用 kubelet.volumeManager 组件，等待它将 pod 所需要的所有外挂的 volume 都准备好。\n- 调用 container runtime 的 SyncPod 方法，去实现真正的容器创建逻辑\n\n这里所有的事情都和具体的容器没有关系，可以看到该方法是创建 pod 实体（即容器）之前需要完成的准备工作。\n\n```\nfunc (kl *Kubelet) syncPod(o syncPodOptions) error {\n\t// pull out the required options\n\tpod := o.pod\n\tmirrorPod := o.mirrorPod\n\tpodStatus := o.podStatus\n\tupdateType := o.updateType\n\n\t// 是否为 删除 pod\n\tif updateType == kubetypes.SyncPodKill {\n\t\t...\n\t}\n    ...\n\t// 检查 pod 是否能运行在本节点\n\trunnable := kl.canRunPod(pod)\n\tif !runnable.Admit {\n\t\t...\n\t}\n\n\t// 更新 pod 状态\n\tkl.statusManager.SetPodStatus(pod, apiPodStatus)\n\n\t// 如果 pod 非 running 状态则直接 kill 掉\n\tif !runnable.Admit || pod.DeletionTimestamp != nil || apiPodStatus.Phase == v1.PodFailed {\n\t\t...\n\t}\n\n\t// 加载网络插件\n\tif rs := kl.runtimeState.networkErrors(); len(rs) != 0 && !kubecontainer.IsHostNetworkPod(pod) {\n\t\t...\n\t}\n\n\tpcm := kl.containerManager.NewPodContainerManager()\n\tif !kl.podIsTerminated(pod) {\n\t\t...\n\t\t// 创建并更新 pod 的 cgroups\n\t\tif !(podKilled && pod.Spec.RestartPolicy == v1.RestartPolicyNever) {\n\t\t\tif !pcm.Exists(pod) {\n\t\t\t\t...\n\t\t\t}\n\t\t}\n\t}\n\n\t// 为 static pod 创建对应的 mirror pod\n\tif kubepod.IsStaticPod(pod) {\n\t\t...\n\t}\n\n\t// 创建数据目录\n\tif err := kl.makePodDataDirs(pod); err != nil {\n\t\t...\n\t}\n\n\t// 挂载 volume\n\tif !kl.podIsTerminated(pod) {\n\t\tif err := kl.volumeManager.WaitForAttachAndMount(pod); err != nil {\n\t\t\t...\n\t\t}\n\t}\n\n\t// 获取 secret 信息\n\tpullSecrets := kl.getPullSecretsForPod(pod)\n\n\t// 调用 containerRuntime 的 SyncPod 方法开始创建容器\n\tresult := kl.containerRuntime.SyncPod(pod, apiPodStatus, podStatus, pullSecrets, kl.backOff)\n\tkl.reasonCache.Update(pod.UID, result)\n\tif err := result.Error(); err != nil {\n\t\t...\n\t}\n\n\treturn nil\n}\n```\n\n\n### 8、创建容器\n\ncontainerRuntime（pkg/kubelet/kuberuntime）子模块的 SyncPod 函数才是真正完成 pod 内容器实体的创建。\nsyncPod 主要执行以下几个操作：\n- 1、计算 sandbox 和 container 是否发生变化\n- 2、创建 sandbox 容器\n- 3、启动 init 容器\n- 4、启动业务容器\n\ninitContainers 可以有多个，多个 container 严格按照顺序启动，只有当前一个 container 退出了以后，才开始启动下一个 container。\n\n```\nfunc (m *kubeGenericRuntimeManager) SyncPod(pod *v1.Pod, _ v1.PodStatus, podStatus *kubecontainer.PodStatus, pullSecrets []v1.Secret, backOff *flowcontrol.Backoff) (result kubecontainer.PodSyncResult) {\n\t// 1、计算 sandbox 和 container 是否发生变化\n\tpodContainerChanges := m.computePodActions(pod, podStatus)\n\tif podContainerChanges.CreateSandbox {\n\t\tref, err := ref.GetReference(legacyscheme.Scheme, pod)\n\t\tif err != nil {\n\t\t\tglog.Errorf(\"Couldn't make a ref to pod %q: '%v'\", format.Pod(pod), err)\n\t\t}\n\t\t...\n\t}\n\n\t// 2、kill 掉 sandbox 已经改变的 pod\n\tif podContainerChanges.KillPod {\n\t\t...\n\t} else {\n\t\t// 3、kill 掉非 running 状态的 containers\n\t\t...\n\t\tfor containerID, containerInfo := range podContainerChanges.ContainersToKill {\n\t\t\t...\n\t\t\tif err := m.killContainer(pod, containerID, containerInfo.name, containerInfo.message, nil); err != nil {\n\t\t\t\t...\n\t\t\t}\n\t\t}\n\t}\n\n\tm.pruneInitContainersBeforeStart(pod, podStatus)\n\tpodIP := \"\"\n\tif podStatus != nil {\n\t\tpodIP = podStatus.IP\n\t}\n\n\t// 4、创建 sandbox \n\tpodSandboxID := podContainerChanges.SandboxID\n\tif podContainerChanges.CreateSandbox {\n\t\tpodSandboxID, msg, err = m.createPodSandbox(pod, podContainerChanges.Attempt)\n\t\tif err != nil {\n\t\t\t...\n\t\t}\n\t\t...\n\t\tpodSandboxStatus, err := m.runtimeService.PodSandboxStatus(podSandboxID)\n\t\tif err != nil {\n\t\t\t...\n\t\t}\n\t\t// 如果 pod 网络是 host 模式，容器也相同；其他情况下，容器会使用 None 网络模式，让 kubelet 的网络插件自己进行网络配置\n\t\tif !kubecontainer.IsHostNetworkPod(pod) {\n\t\t\tpodIP = m.determinePodSandboxIP(pod.Namespace, pod.Name, podSandboxStatus)\n\t\t\tglog.V(4).Infof(\"Determined the ip %q for pod %q after sandbox changed\", podIP, format.Pod(pod))\n\t\t}\n\t}\n\n\tconfigPodSandboxResult := kubecontainer.NewSyncResult(kubecontainer.ConfigPodSandbox, podSandboxID)\n\tresult.AddSyncResult(configPodSandboxResult)\n\t// 获取 PodSandbox 的配置(如:metadata,clusterDNS,容器的端口映射等)\n\tpodSandboxConfig, err := m.generatePodSandboxConfig(pod, podContainerChanges.Attempt)\n\t...\n\n\t// 5、启动 init container\n\tif container := podContainerChanges.NextInitContainerToStart; container != nil {\n\t\t...\n\t\tif msg, err := m.startContainer(podSandboxID, podSandboxConfig, container, pod, podStatus, pullSecrets, podIP, kubecontainer.ContainerTypeInit); err != nil {\n\t\t\t...\n\t\t}\n\t}\n\n\t// 6、启动业务容器\n\tfor _, idx := range podContainerChanges.ContainersToStart {\n\t\t...\n\t\tif msg, err := m.startContainer(podSandboxID, podSandboxConfig, container, pod, podStatus, pullSecrets, podIP, kubecontainer.ContainerTypeRegular); err != nil {\n\t\t\t...\n\t\t}\n\t}\n\t\n\treturn\n}\n```\n\n\n### 9、启动容器\n\n最终由 startContainer 完成容器的启动，其主要有以下几个步骤：\n\n- 1、拉取镜像\n- 2、生成业务容器的配置信息\n- 3、调用 docker api 创建容器\n- 4、启动容器\n- 5、执行 post start hook\n\n\n```\nfunc (m *kubeGenericRuntimeManager) startContainer(podSandboxID string, podSandboxConfig *runtimeapi.PodSandboxConfig, container *v1.Container, pod *v1.Pod, podStatus *kubecontainer.PodStatus, pullSecrets []v1.Secret, podIP string, containerType kubecontainer.ContainerType) (string, error) {\n\t// 1、检查业务镜像是否存在，不存在则到 Docker Registry 或是 Private Registry 拉取镜像。\n\timageRef, msg, err := m.imagePuller.EnsureImageExists(pod, container, pullSecrets)\n\tif err != nil {\n\t\t...\n\t}\n\n\tref, err := kubecontainer.GenerateContainerRef(pod, container)\n\tif err != nil {\n\t\t...\n\t}\n\n\t// 设置 RestartCount \n\trestartCount := 0\n\tcontainerStatus := podStatus.FindContainerStatusByName(container.Name)\n\tif containerStatus != nil {\n\t\trestartCount = containerStatus.RestartCount + 1\n\t}\n\n\t// 2、生成业务容器的配置信息\n\tcontainerConfig, cleanupAction, err := m.generateContainerConfig(container, pod, restartCount, podIP, imageRef, containerType)\n\tif cleanupAction != nil {\n\t\tdefer cleanupAction()\n\t}\n\t...\n\n\t// 3、通过 client.CreateContainer 调用 docker api 创建业务容器\n\tcontainerID, err := m.runtimeService.CreateContainer(podSandboxID, containerConfig, podSandboxConfig)\n\tif err != nil {\n\t\t...\n\t}\n\terr = m.internalLifecycle.PreStartContainer(pod, container, containerID)\n\tif err != nil {\n\t\t...\n\t}\n\t...\n\n\t// 3、启动业务容器\n\terr = m.runtimeService.StartContainer(containerID)\n\tif err != nil {\n\t\t...\n\t}\n\n\tcontainerMeta := containerConfig.GetMetadata()\n\tsandboxMeta := podSandboxConfig.GetMetadata()\n\tlegacySymlink := legacyLogSymlink(containerID, containerMeta.Name, sandboxMeta.Name,\n\t\tsandboxMeta.Namespace)\n\tcontainerLog := filepath.Join(podSandboxConfig.LogDirectory, containerConfig.LogPath)\n\tif _, err := m.osInterface.Stat(containerLog); !os.IsNotExist(err) {\n\t\tif err := m.osInterface.Symlink(containerLog, legacySymlink); err != nil {\n\t\t\tglog.Errorf(\"Failed to create legacy symbolic link %q to container %q log %q: %v\",\n\t\t\t\tlegacySymlink, containerID, containerLog, err)\n\t\t}\n\t}\n\n\t// 4、执行 post start hook\n\tif container.Lifecycle != nil && container.Lifecycle.PostStart != nil {\n\t\tkubeContainerID := kubecontainer.ContainerID{\n\t\t\tType: m.runtimeName,\n\t\t\tID:   containerID,\n\t\t}\n\t\t// runner.Run 这个方法的主要作用就是在业务容器起来的时候，\n\t\t// 首先会执行一个 container hook(PostStart 和 PreStop),做一些预处理工作。\n\t\t// 只有 container hook 执行成功才会运行具体的业务服务，否则容器异常。\n\t\tmsg, handlerErr := m.runner.Run(kubeContainerID, pod, container, container.Lifecycle.PostStart)\n\t\tif handlerErr != nil {\n\t\t\t...\n\t\t}\n\t}\n\n\treturn \"\", nil\n}\n```\n\n\n## 总结\n\n本文主要讲述了 kubelet 从监听到容器调度至本节点再到创建容器的一个过程，kubelet 最终调用 docker api 来创建容器的。结合上篇文章，可以看出 kubelet 从启动到创建 pod 的一个清晰过程。\n\n\n参考：\n[k8s源码分析-kubelet](https://sycki.com/articles/kubernetes/k8s-code-kubelet)\n[Kubelet源码分析(一):启动流程分析](https://segmentfault.com/a/1190000008267351)\n[kubelet 源码分析：pod 新建流程](http://cizixs.com/2017/06/07/kubelet-source-code-analysis-part-2/)\n[kubelet创建Pod流程解析](https://fatsheep9146.github.io/2018/07/22/kubelet%E5%88%9B%E5%BB%BAPod%E6%B5%81%E7%A8%8B%E8%A7%A3%E6%9E%90/)\n[Kubelet: Pod Lifecycle Event Generator (PLEG) Design-\tproposals](https://github.com/kubernetes/community/blob/master/contributors/design-proposals/node/pod-lifecycle-event-generator.md)\n\n","slug":"kubelet_create_pod","published":1,"updated":"2019-07-21T09:46:50.287Z","_id":"cjycnhjm8000y5vwn5phxdk7a","comments":1,"layout":"post","photos":[],"link":"","content":"<p>上篇文章介绍了 <a href=\"http://blog.tianfeiyu.com/2018/12/23/kubelet_init/\" target=\"_blank\" rel=\"noopener\">kubelet 的启动流程</a>，本篇文章主要介绍 kubelet 创建 pod 的流程。</p>\n<blockquote>\n<p>kubernetes 版本： v1.12 </p>\n</blockquote>\n<p><img src=\"http://cdn.tianfeiyu.com/kubelet-1.png\" alt=\"kubelet 工作原理\"></p>\n<p>kubelet 的工作核心就是在围绕着不同的生产者生产出来的不同的有关 pod 的消息来调用相应的消费者（不同的子模块）完成不同的行为(创建和删除 pod 等)，即图中的控制循环（SyncLoop），通过不同的事件驱动这个控制循环运行。</p>\n<p>本文仅分析新建 pod 的流程，当一个 pod 完成调度，与一个 node 绑定起来之后，这个 pod 就会触发 kubelet 在循环控制里注册的 handler，上图中的 HandlePods 部分。此时，通过检查 pod 在 kubelet 内存中的状态，kubelet 就能判断出这是一个新调度过来的 pod，从而触发 Handler 里的 ADD 事件对应的逻辑处理。然后 kubelet 会为这个 pod 生成对应的 podStatus，接着检查 pod 所声明的 volume 是不是准备好了，然后调用下层的容器运行时。如果是 update 事件的话，kubelet 就会根据 pod 对象具体的变更情况，调用下层的容器运行时进行容器的重建。</p>\n<h2 id=\"kubelet-创建-pod-的流程\"><a href=\"#kubelet-创建-pod-的流程\" class=\"headerlink\" title=\"kubelet 创建 pod 的流程\"></a>kubelet 创建 pod 的流程</h2><p><img src=\"http://cdn.tianfeiyu.com/kubelet-2.png\" alt=\"kubelet 创建 pod 的流程\"></p>\n<h3 id=\"1、kubelet-的控制循环（syncLoop）\"><a href=\"#1、kubelet-的控制循环（syncLoop）\" class=\"headerlink\" title=\"1、kubelet 的控制循环（syncLoop）\"></a>1、kubelet 的控制循环（syncLoop）</h3><p>syncLoop 中首先定义了一个 syncTicker 和 housekeepingTicker，即使没有需要更新的 pod 配置，kubelet 也会定时去做同步和清理 pod 的工作。然后在 for 循环中一直调用 syncLoopIteration，如果在每次循环过程中出现比较严重的错误，kubelet 会记录到 runtimeState 中，遇到错误就等待 5 秒中继续循环。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (kl *Kubelet) syncLoop(updates &lt;-chan kubetypes.PodUpdate, handler SyncHandler) &#123;</span><br><span class=\"line\">\tglog.Info(&quot;Starting kubelet main sync loop.&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">\t// syncTicker 每秒检测一次是否有需要同步的 pod workers</span><br><span class=\"line\">\tsyncTicker := time.NewTicker(time.Second)</span><br><span class=\"line\">\tdefer syncTicker.Stop()</span><br><span class=\"line\">\t// 每两秒检测一次是否有需要清理的 pod</span><br><span class=\"line\">\thousekeepingTicker := time.NewTicker(housekeepingPeriod)</span><br><span class=\"line\">\tdefer housekeepingTicker.Stop()</span><br><span class=\"line\">\t// pod 的生命周期变化</span><br><span class=\"line\">\tplegCh := kl.pleg.Watch()</span><br><span class=\"line\">\tconst (</span><br><span class=\"line\">\t\tbase   = 100 * time.Millisecond</span><br><span class=\"line\">\t\tmax    = 5 * time.Second</span><br><span class=\"line\">\t\tfactor = 2</span><br><span class=\"line\">\t)</span><br><span class=\"line\">\tduration := base</span><br><span class=\"line\">\tfor &#123;</span><br><span class=\"line\">\t\tif rs := kl.runtimeState.runtimeErrors(); len(rs) != 0 &#123;</span><br><span class=\"line\">\t\t\ttime.Sleep(duration)</span><br><span class=\"line\">\t\t\tduration = time.Duration(math.Min(float64(max), factor*float64(duration)))</span><br><span class=\"line\">\t\t\tcontinue</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">        ...</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tkl.syncLoopMonitor.Store(kl.clock.Now())</span><br><span class=\"line\">\t\t// 第二个参数为 SyncHandler 类型，SyncHandler 是一个 interface，</span><br><span class=\"line\">\t\t// 在该文件开头处定义</span><br><span class=\"line\">\t\tif !kl.syncLoopIteration(updates, handler, syncTicker.C, housekeepingTicker.C, plegCh) &#123;</span><br><span class=\"line\">\t\t\tbreak</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tkl.syncLoopMonitor.Store(kl.clock.Now())</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、监听-pod-变化（syncLoopIteration）\"><a href=\"#2、监听-pod-变化（syncLoopIteration）\" class=\"headerlink\" title=\"2、监听 pod 变化（syncLoopIteration）\"></a>2、监听 pod 变化（syncLoopIteration）</h3><p>syncLoopIteration 这个方法就会对多个管道进行遍历，发现任何一个管道有消息就交给 handler 去处理。它会从以下管道中获取消息：</p>\n<ul>\n<li>configCh：该信息源由 kubeDeps 对象中的 PodConfig 子模块提供，该模块将同时 watch 3 个不同来源的 pod 信息的变化（file，http，apiserver），一旦某个来源的 pod 信息发生了更新（创建/更新/删除），这个 channel 中就会出现被更新的 pod 信息和更新的具体操作。</li>\n<li>syncCh：定时器管道，每隔一秒去同步最新保存的 pod 状态</li>\n<li>houseKeepingCh：housekeeping 事件的管道，做 pod 清理工作</li>\n<li>plegCh：该信息源由 kubelet 对象中的 pleg 子模块提供，该模块主要用于周期性地向 container runtime 查询当前所有容器的状态，如果状态发生变化，则这个 channel 产生事件。</li>\n<li>livenessManager.Updates()：健康检查发现某个 pod 不可用，kubelet 将根据 Pod 的restartPolicy 自动执行正确的操作</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (kl *Kubelet) syncLoopIteration(configCh &lt;-chan kubetypes.PodUpdate, handler SyncHandler,</span><br><span class=\"line\">\tsyncCh &lt;-chan time.Time, housekeepingCh &lt;-chan time.Time, plegCh &lt;-chan *pleg.PodLifecycleEvent) bool &#123;</span><br><span class=\"line\">\tselect &#123;</span><br><span class=\"line\">\tcase u, open := &lt;-configCh:</span><br><span class=\"line\">\t\tif !open &#123;</span><br><span class=\"line\">\t\t\tglog.Errorf(&quot;Update channel is closed. Exiting the sync loop.&quot;)</span><br><span class=\"line\">\t\t\treturn false</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tswitch u.Op &#123;</span><br><span class=\"line\">\t\tcase kubetypes.ADD:</span><br><span class=\"line\">\t\t\t...</span><br><span class=\"line\">\t\tcase kubetypes.UPDATE:</span><br><span class=\"line\">\t\t\t...</span><br><span class=\"line\">\t\tcase kubetypes.REMOVE:</span><br><span class=\"line\">\t\t\t...</span><br><span class=\"line\">\t\tcase kubetypes.RECONCILE:</span><br><span class=\"line\">\t\t\t...</span><br><span class=\"line\">\t\tcase kubetypes.DELETE:</span><br><span class=\"line\">\t\t\t...</span><br><span class=\"line\">\t\tcase kubetypes.RESTORE:</span><br><span class=\"line\">\t\t\t...</span><br><span class=\"line\">\t\tcase kubetypes.SET:</span><br><span class=\"line\">\t\t\t...</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\tcase e := &lt;-plegCh:</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\tcase &lt;-syncCh:</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\tcase update := &lt;-kl.livenessManager.Updates():</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\tcase &lt;-housekeepingCh:</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn true</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3、处理新增-pod（HandlePodAddtions）\"><a href=\"#3、处理新增-pod（HandlePodAddtions）\" class=\"headerlink\" title=\"3、处理新增 pod（HandlePodAddtions）\"></a>3、处理新增 pod（HandlePodAddtions）</h3><p>对于事件中的每个 pod，执行以下操作：</p>\n<ul>\n<li>1、把所有的 pod 按照创建日期进行排序，保证最先创建的 pod 会最先被处理</li>\n<li>2、把它加入到 podManager 中，podManager 子模块负责管理这台机器上的 pod 的信息，pod 和 mirrorPod 之间的对应关系等等。所有被管理的 pod 都要出现在里面，如果 podManager 中找不到某个 pod，就认为这个 pod 被删除了</li>\n<li>3、如果是 mirror pod 调用其单独的方法</li>\n<li>4、验证 pod 是否能在该节点运行，如果不可以直接拒绝</li>\n<li>5、通过 dispatchWork 把创建 pod 的工作下发给 podWorkers 子模块做异步处理</li>\n<li>6、在 probeManager 中添加 pod，如果 pod 中定义了 readiness 和 liveness 健康检查，启动 goroutine 定期进行检测</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (kl *Kubelet) HandlePodAdditions(pods []*v1.Pod) &#123;</span><br><span class=\"line\">\tstart := kl.clock.Now()</span><br><span class=\"line\">\t// 对所有 pod 按照日期排序，保证最先创建的 pod 优先被处理</span><br><span class=\"line\">\tsort.Sort(sliceutils.PodsByCreationTime(pods))</span><br><span class=\"line\">\tfor _, pod := range pods &#123;</span><br><span class=\"line\">\t\tif kl.dnsConfigurer != nil &amp;&amp; kl.dnsConfigurer.ResolverConfig != &quot;&quot; &#123;</span><br><span class=\"line\">\t\t\tkl.dnsConfigurer.CheckLimitsForResolvConf()</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\texistingPods := kl.podManager.GetPods()</span><br><span class=\"line\">\t\t// 把 pod 加入到 podManager 中</span><br><span class=\"line\">\t\tkl.podManager.AddPod(pod)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// 判断是否是 mirror pod（即 static pod）</span><br><span class=\"line\">\t\tif kubepod.IsMirrorPod(pod) &#123;</span><br><span class=\"line\">\t\t\tkl.handleMirrorPod(pod, start)</span><br><span class=\"line\">\t\t\tcontinue</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tif !kl.podIsTerminated(pod) &#123;</span><br><span class=\"line\">\t\t\tactivePods := kl.filterOutTerminatedPods(existingPods)</span><br><span class=\"line\">\t\t\t// 通过 canAdmitPod 方法校验Pod能否在该计算节点创建(如:磁盘空间)</span><br><span class=\"line\">\t\t\t// Check if we can admit the pod; if not, reject it.</span><br><span class=\"line\">\t\t\tif ok, reason, message := kl.canAdmitPod(activePods, pod); !ok &#123;</span><br><span class=\"line\">\t\t\t\tkl.rejectPod(pod, reason, message)</span><br><span class=\"line\">\t\t\t\tcontinue</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tmirrorPod, _ := kl.podManager.GetMirrorPodByPod(pod)</span><br><span class=\"line\">\t\t// 通过 dispatchWork 分发 pod 做异步处理，dispatchWork 主要工作就是把接收到的参数封装成 UpdatePodOptions，调用 UpdatePod 方法.</span><br><span class=\"line\">\t\tkl.dispatchWork(pod, kubetypes.SyncPodCreate, mirrorPod, start)</span><br><span class=\"line\">\t\t// 在 probeManager 中添加 pod，如果 pod 中定义了 readiness 和 liveness 健康检查，启动 goroutine 定期进行检测</span><br><span class=\"line\">\t\tkl.probeManager.AddPod(pod)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>static pod 是由 kubelet 直接管理的，k8s apiserver 并不会感知到 static pod 的存在，当然也不会和任何一个 rs 关联上，完全是由 kubelet 进程来监管，并在它异常时负责重启。Kubelet 会通过 apiserver 为每一个 static pod 创建一个对应的 mirror pod，如此以来就可以可以通过 kubectl 命令查看对应的 pod,并且可以通过 kubectl logs 命令直接查看到static pod 的日志信息。</p>\n</blockquote>\n<h3 id=\"4、下发任务（dispatchWork）\"><a href=\"#4、下发任务（dispatchWork）\" class=\"headerlink\" title=\"4、下发任务（dispatchWork）\"></a>4、下发任务（dispatchWork）</h3><p>dispatchWorker 的主要作用是把某个对 Pod 的操作（创建/更新/删除）下发给 podWorkers。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (kl *Kubelet) dispatchWork(pod *v1.Pod, syncType kubetypes.SyncPodType, mirrorPod *v1.Pod, start time.Time) &#123;</span><br><span class=\"line\">\tif kl.podIsTerminated(pod) &#123;</span><br><span class=\"line\">\t\tif pod.DeletionTimestamp != nil &#123;</span><br><span class=\"line\">\t\t\tkl.statusManager.TerminatePod(pod)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t// 落实在 podWorkers 中</span><br><span class=\"line\">\tkl.podWorkers.UpdatePod(&amp;UpdatePodOptions&#123;</span><br><span class=\"line\">\t\tPod:        pod,</span><br><span class=\"line\">\t\tMirrorPod:  mirrorPod,</span><br><span class=\"line\">\t\tUpdateType: syncType,</span><br><span class=\"line\">\t\tOnCompleteFunc: func(err error) &#123;</span><br><span class=\"line\">\t\t\tif err != nil &#123;</span><br><span class=\"line\">\t\t\t\tmetrics.PodWorkerLatency.WithLabelValues(syncType.String()).Observe(metrics.SinceInMicroseconds(start))</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\tif syncType == kubetypes.SyncPodCreate &#123;</span><br><span class=\"line\">\t\tmetrics.ContainersPerPodCount.Observe(float64(len(pod.Spec.Containers)))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5、更新事件的-channel（UpdatePod）\"><a href=\"#5、更新事件的-channel（UpdatePod）\" class=\"headerlink\" title=\"5、更新事件的 channel（UpdatePod）\"></a>5、更新事件的 channel（UpdatePod）</h3><p>podWorkers 子模块主要的作用就是处理针对每一个的 Pod 的更新事件，比如 Pod 的创建，删除，更新。而 podWorkers 采取的基本思路是：为每一个 Pod 都单独创建一个 goroutine 和更新事件的 channel，goroutine 会阻塞式的等待 channel 中的事件，并且对获取的事件进行处理。而 podWorkers 对象自身则主要负责对更新事件进行下发。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (p *podWorkers) UpdatePod(options *UpdatePodOptions) &#123;</span><br><span class=\"line\">\tpod := options.Pod</span><br><span class=\"line\">\tuid := pod.UID</span><br><span class=\"line\">\tvar podUpdates chan UpdatePodOptions</span><br><span class=\"line\">\tvar exists bool</span><br><span class=\"line\"></span><br><span class=\"line\">\tp.podLock.Lock()</span><br><span class=\"line\">\tdefer p.podLock.Unlock()</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 如果当前 pod 还没有启动过 goroutine ，则启动 goroutine，并且创建 channel</span><br><span class=\"line\">\tif podUpdates, exists = p.podUpdates[uid]; !exists &#123;</span><br><span class=\"line\">\t\t// 创建 channel</span><br><span class=\"line\">\t\tpodUpdates = make(chan UpdatePodOptions, 1)</span><br><span class=\"line\">\t\tp.podUpdates[uid] = podUpdates</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// 启动 goroutine</span><br><span class=\"line\">\t\tgo func() &#123;</span><br><span class=\"line\">\t\t\tdefer runtime.HandleCrash()</span><br><span class=\"line\">\t\t\tp.managePodLoop(podUpdates)</span><br><span class=\"line\">\t\t&#125;()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t// 下发更新事件</span><br><span class=\"line\">\tif !p.isWorking[pod.UID] &#123;</span><br><span class=\"line\">\t\tp.isWorking[pod.UID] = true</span><br><span class=\"line\">\t\tpodUpdates &lt;- *options</span><br><span class=\"line\">\t&#125; else &#123;</span><br><span class=\"line\">\t\tupdate, found := p.lastUndeliveredWorkUpdate[pod.UID]</span><br><span class=\"line\">\t\tif !found || update.UpdateType != kubetypes.SyncPodKill &#123;</span><br><span class=\"line\">\t\t\tp.lastUndeliveredWorkUpdate[pod.UID] = *options</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6、调用-syncPodFn-方法同步-pod（managePodLoop）\"><a href=\"#6、调用-syncPodFn-方法同步-pod（managePodLoop）\" class=\"headerlink\" title=\"6、调用 syncPodFn 方法同步 pod（managePodLoop）\"></a>6、调用 syncPodFn 方法同步 pod（managePodLoop）</h3><p>managePodLoop 调用 syncPodFn 方法去同步 pod，syncPodFn 实际上就是kubelet.SyncPod。在完成这次 sync 动作之后，会调用 wrapUp 函数，这个函数将会做几件事情:</p>\n<ul>\n<li>将这个 pod 信息插入 kubelet 的 workQueue 队列中，等待下一次周期性的对这个 pod 的状态进行 sync</li>\n<li>将在这次 sync 期间堆积的没有能够来得及处理的最近一次 update 操作加入 goroutine 的事件 channel 中，立即处理。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (p *podWorkers) managePodLoop(podUpdates &lt;-chan UpdatePodOptions) &#123;</span><br><span class=\"line\">\tvar lastSyncTime time.Time</span><br><span class=\"line\">\tfor update := range podUpdates &#123;</span><br><span class=\"line\">\t\terr := func() error &#123;</span><br><span class=\"line\">\t\t\tpodUID := update.Pod.UID</span><br><span class=\"line\">\t\t\tstatus, err := p.podCache.GetNewerThan(podUID, lastSyncTime)</span><br><span class=\"line\">\t\t\tif err != nil &#123;</span><br><span class=\"line\">\t\t\t\t...</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\terr = p.syncPodFn(syncPodOptions&#123;</span><br><span class=\"line\">\t\t\t\tmirrorPod:      update.MirrorPod,</span><br><span class=\"line\">\t\t\t\tpod:            update.Pod,</span><br><span class=\"line\">\t\t\t\tpodStatus:      status,</span><br><span class=\"line\">\t\t\t\tkillPodOptions: update.KillPodOptions,</span><br><span class=\"line\">\t\t\t\tupdateType:     update.UpdateType,</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t\tlastSyncTime = time.Now()</span><br><span class=\"line\">\t\t\treturn err</span><br><span class=\"line\">\t\t&#125;()</span><br><span class=\"line\">\t\tif update.OnCompleteFunc != nil &#123;</span><br><span class=\"line\">\t\t\tupdate.OnCompleteFunc(err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif err != nil &#123;</span><br><span class=\"line\">\t\t\t...</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tp.wrapUp(update.Pod.UID, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"7、完成创建容器前的准备工作（SyncPod）\"><a href=\"#7、完成创建容器前的准备工作（SyncPod）\" class=\"headerlink\" title=\"7、完成创建容器前的准备工作（SyncPod）\"></a>7、完成创建容器前的准备工作（SyncPod）</h3><p>在这个方法中，主要完成以下几件事情：</p>\n<ul>\n<li>如果是删除 pod，立即执行并返回</li>\n<li>同步 podStatus 到 kubelet.statusManager</li>\n<li>检查 pod 是否能运行在本节点，主要是权限检查（是否能使用主机网络模式，是否可以以 privileged 权限运行等）。如果没有权限，就删除本地旧的 pod 并返回错误信息</li>\n<li>创建 containerManagar 对象，并且创建 pod level cgroup，更新 Qos level cgroup</li>\n<li>如果是 static Pod，就创建或者更新对应的 mirrorPod</li>\n<li>创建 pod 的数据目录，存放 volume 和 plugin 信息,如果定义了 pv，等待所有的 volume mount 完成（volumeManager 会在后台做这些事情）,如果有 image secrets，去 apiserver 获取对应的 secrets 数据</li>\n<li>然后调用 kubelet.volumeManager 组件，等待它将 pod 所需要的所有外挂的 volume 都准备好。</li>\n<li>调用 container runtime 的 SyncPod 方法，去实现真正的容器创建逻辑</li>\n</ul>\n<p>这里所有的事情都和具体的容器没有关系，可以看到该方法是创建 pod 实体（即容器）之前需要完成的准备工作。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (kl *Kubelet) syncPod(o syncPodOptions) error &#123;</span><br><span class=\"line\">\t// pull out the required options</span><br><span class=\"line\">\tpod := o.pod</span><br><span class=\"line\">\tmirrorPod := o.mirrorPod</span><br><span class=\"line\">\tpodStatus := o.podStatus</span><br><span class=\"line\">\tupdateType := o.updateType</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 是否为 删除 pod</span><br><span class=\"line\">\tif updateType == kubetypes.SyncPodKill &#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">\t// 检查 pod 是否能运行在本节点</span><br><span class=\"line\">\trunnable := kl.canRunPod(pod)</span><br><span class=\"line\">\tif !runnable.Admit &#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 更新 pod 状态</span><br><span class=\"line\">\tkl.statusManager.SetPodStatus(pod, apiPodStatus)</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 如果 pod 非 running 状态则直接 kill 掉</span><br><span class=\"line\">\tif !runnable.Admit || pod.DeletionTimestamp != nil || apiPodStatus.Phase == v1.PodFailed &#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 加载网络插件</span><br><span class=\"line\">\tif rs := kl.runtimeState.networkErrors(); len(rs) != 0 &amp;&amp; !kubecontainer.IsHostNetworkPod(pod) &#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpcm := kl.containerManager.NewPodContainerManager()</span><br><span class=\"line\">\tif !kl.podIsTerminated(pod) &#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t\t// 创建并更新 pod 的 cgroups</span><br><span class=\"line\">\t\tif !(podKilled &amp;&amp; pod.Spec.RestartPolicy == v1.RestartPolicyNever) &#123;</span><br><span class=\"line\">\t\t\tif !pcm.Exists(pod) &#123;</span><br><span class=\"line\">\t\t\t\t...</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 为 static pod 创建对应的 mirror pod</span><br><span class=\"line\">\tif kubepod.IsStaticPod(pod) &#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 创建数据目录</span><br><span class=\"line\">\tif err := kl.makePodDataDirs(pod); err != nil &#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 挂载 volume</span><br><span class=\"line\">\tif !kl.podIsTerminated(pod) &#123;</span><br><span class=\"line\">\t\tif err := kl.volumeManager.WaitForAttachAndMount(pod); err != nil &#123;</span><br><span class=\"line\">\t\t\t...</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 获取 secret 信息</span><br><span class=\"line\">\tpullSecrets := kl.getPullSecretsForPod(pod)</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 调用 containerRuntime 的 SyncPod 方法开始创建容器</span><br><span class=\"line\">\tresult := kl.containerRuntime.SyncPod(pod, apiPodStatus, podStatus, pullSecrets, kl.backOff)</span><br><span class=\"line\">\tkl.reasonCache.Update(pod.UID, result)</span><br><span class=\"line\">\tif err := result.Error(); err != nil &#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn nil</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"8、创建容器\"><a href=\"#8、创建容器\" class=\"headerlink\" title=\"8、创建容器\"></a>8、创建容器</h3><p>containerRuntime（pkg/kubelet/kuberuntime）子模块的 SyncPod 函数才是真正完成 pod 内容器实体的创建。<br>syncPod 主要执行以下几个操作：</p>\n<ul>\n<li>1、计算 sandbox 和 container 是否发生变化</li>\n<li>2、创建 sandbox 容器</li>\n<li>3、启动 init 容器</li>\n<li>4、启动业务容器</li>\n</ul>\n<p>initContainers 可以有多个，多个 container 严格按照顺序启动，只有当前一个 container 退出了以后，才开始启动下一个 container。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (m *kubeGenericRuntimeManager) SyncPod(pod *v1.Pod, _ v1.PodStatus, podStatus *kubecontainer.PodStatus, pullSecrets []v1.Secret, backOff *flowcontrol.Backoff) (result kubecontainer.PodSyncResult) &#123;</span><br><span class=\"line\">\t// 1、计算 sandbox 和 container 是否发生变化</span><br><span class=\"line\">\tpodContainerChanges := m.computePodActions(pod, podStatus)</span><br><span class=\"line\">\tif podContainerChanges.CreateSandbox &#123;</span><br><span class=\"line\">\t\tref, err := ref.GetReference(legacyscheme.Scheme, pod)</span><br><span class=\"line\">\t\tif err != nil &#123;</span><br><span class=\"line\">\t\t\tglog.Errorf(&quot;Couldn&apos;t make a ref to pod %q: &apos;%v&apos;&quot;, format.Pod(pod), err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 2、kill 掉 sandbox 已经改变的 pod</span><br><span class=\"line\">\tif podContainerChanges.KillPod &#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t&#125; else &#123;</span><br><span class=\"line\">\t\t// 3、kill 掉非 running 状态的 containers</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t\tfor containerID, containerInfo := range podContainerChanges.ContainersToKill &#123;</span><br><span class=\"line\">\t\t\t...</span><br><span class=\"line\">\t\t\tif err := m.killContainer(pod, containerID, containerInfo.name, containerInfo.message, nil); err != nil &#123;</span><br><span class=\"line\">\t\t\t\t...</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tm.pruneInitContainersBeforeStart(pod, podStatus)</span><br><span class=\"line\">\tpodIP := &quot;&quot;</span><br><span class=\"line\">\tif podStatus != nil &#123;</span><br><span class=\"line\">\t\tpodIP = podStatus.IP</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 4、创建 sandbox </span><br><span class=\"line\">\tpodSandboxID := podContainerChanges.SandboxID</span><br><span class=\"line\">\tif podContainerChanges.CreateSandbox &#123;</span><br><span class=\"line\">\t\tpodSandboxID, msg, err = m.createPodSandbox(pod, podContainerChanges.Attempt)</span><br><span class=\"line\">\t\tif err != nil &#123;</span><br><span class=\"line\">\t\t\t...</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t\tpodSandboxStatus, err := m.runtimeService.PodSandboxStatus(podSandboxID)</span><br><span class=\"line\">\t\tif err != nil &#123;</span><br><span class=\"line\">\t\t\t...</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t// 如果 pod 网络是 host 模式，容器也相同；其他情况下，容器会使用 None 网络模式，让 kubelet 的网络插件自己进行网络配置</span><br><span class=\"line\">\t\tif !kubecontainer.IsHostNetworkPod(pod) &#123;</span><br><span class=\"line\">\t\t\tpodIP = m.determinePodSandboxIP(pod.Namespace, pod.Name, podSandboxStatus)</span><br><span class=\"line\">\t\t\tglog.V(4).Infof(&quot;Determined the ip %q for pod %q after sandbox changed&quot;, podIP, format.Pod(pod))</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tconfigPodSandboxResult := kubecontainer.NewSyncResult(kubecontainer.ConfigPodSandbox, podSandboxID)</span><br><span class=\"line\">\tresult.AddSyncResult(configPodSandboxResult)</span><br><span class=\"line\">\t// 获取 PodSandbox 的配置(如:metadata,clusterDNS,容器的端口映射等)</span><br><span class=\"line\">\tpodSandboxConfig, err := m.generatePodSandboxConfig(pod, podContainerChanges.Attempt)</span><br><span class=\"line\">\t...</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 5、启动 init container</span><br><span class=\"line\">\tif container := podContainerChanges.NextInitContainerToStart; container != nil &#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t\tif msg, err := m.startContainer(podSandboxID, podSandboxConfig, container, pod, podStatus, pullSecrets, podIP, kubecontainer.ContainerTypeInit); err != nil &#123;</span><br><span class=\"line\">\t\t\t...</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 6、启动业务容器</span><br><span class=\"line\">\tfor _, idx := range podContainerChanges.ContainersToStart &#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t\tif msg, err := m.startContainer(podSandboxID, podSandboxConfig, container, pod, podStatus, pullSecrets, podIP, kubecontainer.ContainerTypeRegular); err != nil &#123;</span><br><span class=\"line\">\t\t\t...</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\treturn</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"9、启动容器\"><a href=\"#9、启动容器\" class=\"headerlink\" title=\"9、启动容器\"></a>9、启动容器</h3><p>最终由 startContainer 完成容器的启动，其主要有以下几个步骤：</p>\n<ul>\n<li>1、拉取镜像</li>\n<li>2、生成业务容器的配置信息</li>\n<li>3、调用 docker api 创建容器</li>\n<li>4、启动容器</li>\n<li>5、执行 post start hook</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (m *kubeGenericRuntimeManager) startContainer(podSandboxID string, podSandboxConfig *runtimeapi.PodSandboxConfig, container *v1.Container, pod *v1.Pod, podStatus *kubecontainer.PodStatus, pullSecrets []v1.Secret, podIP string, containerType kubecontainer.ContainerType) (string, error) &#123;</span><br><span class=\"line\">\t// 1、检查业务镜像是否存在，不存在则到 Docker Registry 或是 Private Registry 拉取镜像。</span><br><span class=\"line\">\timageRef, msg, err := m.imagePuller.EnsureImageExists(pod, container, pullSecrets)</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tref, err := kubecontainer.GenerateContainerRef(pod, container)</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 设置 RestartCount </span><br><span class=\"line\">\trestartCount := 0</span><br><span class=\"line\">\tcontainerStatus := podStatus.FindContainerStatusByName(container.Name)</span><br><span class=\"line\">\tif containerStatus != nil &#123;</span><br><span class=\"line\">\t\trestartCount = containerStatus.RestartCount + 1</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 2、生成业务容器的配置信息</span><br><span class=\"line\">\tcontainerConfig, cleanupAction, err := m.generateContainerConfig(container, pod, restartCount, podIP, imageRef, containerType)</span><br><span class=\"line\">\tif cleanupAction != nil &#123;</span><br><span class=\"line\">\t\tdefer cleanupAction()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t...</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 3、通过 client.CreateContainer 调用 docker api 创建业务容器</span><br><span class=\"line\">\tcontainerID, err := m.runtimeService.CreateContainer(podSandboxID, containerConfig, podSandboxConfig)</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\terr = m.internalLifecycle.PreStartContainer(pod, container, containerID)</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t...</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 3、启动业务容器</span><br><span class=\"line\">\terr = m.runtimeService.StartContainer(containerID)</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcontainerMeta := containerConfig.GetMetadata()</span><br><span class=\"line\">\tsandboxMeta := podSandboxConfig.GetMetadata()</span><br><span class=\"line\">\tlegacySymlink := legacyLogSymlink(containerID, containerMeta.Name, sandboxMeta.Name,</span><br><span class=\"line\">\t\tsandboxMeta.Namespace)</span><br><span class=\"line\">\tcontainerLog := filepath.Join(podSandboxConfig.LogDirectory, containerConfig.LogPath)</span><br><span class=\"line\">\tif _, err := m.osInterface.Stat(containerLog); !os.IsNotExist(err) &#123;</span><br><span class=\"line\">\t\tif err := m.osInterface.Symlink(containerLog, legacySymlink); err != nil &#123;</span><br><span class=\"line\">\t\t\tglog.Errorf(&quot;Failed to create legacy symbolic link %q to container %q log %q: %v&quot;,</span><br><span class=\"line\">\t\t\t\tlegacySymlink, containerID, containerLog, err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 4、执行 post start hook</span><br><span class=\"line\">\tif container.Lifecycle != nil &amp;&amp; container.Lifecycle.PostStart != nil &#123;</span><br><span class=\"line\">\t\tkubeContainerID := kubecontainer.ContainerID&#123;</span><br><span class=\"line\">\t\t\tType: m.runtimeName,</span><br><span class=\"line\">\t\t\tID:   containerID,</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t// runner.Run 这个方法的主要作用就是在业务容器起来的时候，</span><br><span class=\"line\">\t\t// 首先会执行一个 container hook(PostStart 和 PreStop),做一些预处理工作。</span><br><span class=\"line\">\t\t// 只有 container hook 执行成功才会运行具体的业务服务，否则容器异常。</span><br><span class=\"line\">\t\tmsg, handlerErr := m.runner.Run(kubeContainerID, pod, container, container.Lifecycle.PostStart)</span><br><span class=\"line\">\t\tif handlerErr != nil &#123;</span><br><span class=\"line\">\t\t\t...</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn &quot;&quot;, nil</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>本文主要讲述了 kubelet 从监听到容器调度至本节点再到创建容器的一个过程，kubelet 最终调用 docker api 来创建容器的。结合上篇文章，可以看出 kubelet 从启动到创建 pod 的一个清晰过程。</p>\n<p>参考：<br><a href=\"https://sycki.com/articles/kubernetes/k8s-code-kubelet\" target=\"_blank\" rel=\"noopener\">k8s源码分析-kubelet</a><br><a href=\"https://segmentfault.com/a/1190000008267351\" target=\"_blank\" rel=\"noopener\">Kubelet源码分析(一):启动流程分析</a><br><a href=\"http://cizixs.com/2017/06/07/kubelet-source-code-analysis-part-2/\" target=\"_blank\" rel=\"noopener\">kubelet 源码分析：pod 新建流程</a><br><a href=\"https://fatsheep9146.github.io/2018/07/22/kubelet%E5%88%9B%E5%BB%BAPod%E6%B5%81%E7%A8%8B%E8%A7%A3%E6%9E%90/\" target=\"_blank\" rel=\"noopener\">kubelet创建Pod流程解析</a><br><a href=\"https://github.com/kubernetes/community/blob/master/contributors/design-proposals/node/pod-lifecycle-event-generator.md\" target=\"_blank\" rel=\"noopener\">Kubelet: Pod Lifecycle Event Generator (PLEG) Design-    proposals</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>上篇文章介绍了 <a href=\"http://blog.tianfeiyu.com/2018/12/23/kubelet_init/\" target=\"_blank\" rel=\"noopener\">kubelet 的启动流程</a>，本篇文章主要介绍 kubelet 创建 pod 的流程。</p>\n<blockquote>\n<p>kubernetes 版本： v1.12 </p>\n</blockquote>\n<p><img src=\"http://cdn.tianfeiyu.com/kubelet-1.png\" alt=\"kubelet 工作原理\"></p>\n<p>kubelet 的工作核心就是在围绕着不同的生产者生产出来的不同的有关 pod 的消息来调用相应的消费者（不同的子模块）完成不同的行为(创建和删除 pod 等)，即图中的控制循环（SyncLoop），通过不同的事件驱动这个控制循环运行。</p>\n<p>本文仅分析新建 pod 的流程，当一个 pod 完成调度，与一个 node 绑定起来之后，这个 pod 就会触发 kubelet 在循环控制里注册的 handler，上图中的 HandlePods 部分。此时，通过检查 pod 在 kubelet 内存中的状态，kubelet 就能判断出这是一个新调度过来的 pod，从而触发 Handler 里的 ADD 事件对应的逻辑处理。然后 kubelet 会为这个 pod 生成对应的 podStatus，接着检查 pod 所声明的 volume 是不是准备好了，然后调用下层的容器运行时。如果是 update 事件的话，kubelet 就会根据 pod 对象具体的变更情况，调用下层的容器运行时进行容器的重建。</p>\n<h2 id=\"kubelet-创建-pod-的流程\"><a href=\"#kubelet-创建-pod-的流程\" class=\"headerlink\" title=\"kubelet 创建 pod 的流程\"></a>kubelet 创建 pod 的流程</h2><p><img src=\"http://cdn.tianfeiyu.com/kubelet-2.png\" alt=\"kubelet 创建 pod 的流程\"></p>\n<h3 id=\"1、kubelet-的控制循环（syncLoop）\"><a href=\"#1、kubelet-的控制循环（syncLoop）\" class=\"headerlink\" title=\"1、kubelet 的控制循环（syncLoop）\"></a>1、kubelet 的控制循环（syncLoop）</h3><p>syncLoop 中首先定义了一个 syncTicker 和 housekeepingTicker，即使没有需要更新的 pod 配置，kubelet 也会定时去做同步和清理 pod 的工作。然后在 for 循环中一直调用 syncLoopIteration，如果在每次循环过程中出现比较严重的错误，kubelet 会记录到 runtimeState 中，遇到错误就等待 5 秒中继续循环。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (kl *Kubelet) syncLoop(updates &lt;-chan kubetypes.PodUpdate, handler SyncHandler) &#123;</span><br><span class=\"line\">\tglog.Info(&quot;Starting kubelet main sync loop.&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">\t// syncTicker 每秒检测一次是否有需要同步的 pod workers</span><br><span class=\"line\">\tsyncTicker := time.NewTicker(time.Second)</span><br><span class=\"line\">\tdefer syncTicker.Stop()</span><br><span class=\"line\">\t// 每两秒检测一次是否有需要清理的 pod</span><br><span class=\"line\">\thousekeepingTicker := time.NewTicker(housekeepingPeriod)</span><br><span class=\"line\">\tdefer housekeepingTicker.Stop()</span><br><span class=\"line\">\t// pod 的生命周期变化</span><br><span class=\"line\">\tplegCh := kl.pleg.Watch()</span><br><span class=\"line\">\tconst (</span><br><span class=\"line\">\t\tbase   = 100 * time.Millisecond</span><br><span class=\"line\">\t\tmax    = 5 * time.Second</span><br><span class=\"line\">\t\tfactor = 2</span><br><span class=\"line\">\t)</span><br><span class=\"line\">\tduration := base</span><br><span class=\"line\">\tfor &#123;</span><br><span class=\"line\">\t\tif rs := kl.runtimeState.runtimeErrors(); len(rs) != 0 &#123;</span><br><span class=\"line\">\t\t\ttime.Sleep(duration)</span><br><span class=\"line\">\t\t\tduration = time.Duration(math.Min(float64(max), factor*float64(duration)))</span><br><span class=\"line\">\t\t\tcontinue</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">        ...</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tkl.syncLoopMonitor.Store(kl.clock.Now())</span><br><span class=\"line\">\t\t// 第二个参数为 SyncHandler 类型，SyncHandler 是一个 interface，</span><br><span class=\"line\">\t\t// 在该文件开头处定义</span><br><span class=\"line\">\t\tif !kl.syncLoopIteration(updates, handler, syncTicker.C, housekeepingTicker.C, plegCh) &#123;</span><br><span class=\"line\">\t\t\tbreak</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tkl.syncLoopMonitor.Store(kl.clock.Now())</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、监听-pod-变化（syncLoopIteration）\"><a href=\"#2、监听-pod-变化（syncLoopIteration）\" class=\"headerlink\" title=\"2、监听 pod 变化（syncLoopIteration）\"></a>2、监听 pod 变化（syncLoopIteration）</h3><p>syncLoopIteration 这个方法就会对多个管道进行遍历，发现任何一个管道有消息就交给 handler 去处理。它会从以下管道中获取消息：</p>\n<ul>\n<li>configCh：该信息源由 kubeDeps 对象中的 PodConfig 子模块提供，该模块将同时 watch 3 个不同来源的 pod 信息的变化（file，http，apiserver），一旦某个来源的 pod 信息发生了更新（创建/更新/删除），这个 channel 中就会出现被更新的 pod 信息和更新的具体操作。</li>\n<li>syncCh：定时器管道，每隔一秒去同步最新保存的 pod 状态</li>\n<li>houseKeepingCh：housekeeping 事件的管道，做 pod 清理工作</li>\n<li>plegCh：该信息源由 kubelet 对象中的 pleg 子模块提供，该模块主要用于周期性地向 container runtime 查询当前所有容器的状态，如果状态发生变化，则这个 channel 产生事件。</li>\n<li>livenessManager.Updates()：健康检查发现某个 pod 不可用，kubelet 将根据 Pod 的restartPolicy 自动执行正确的操作</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (kl *Kubelet) syncLoopIteration(configCh &lt;-chan kubetypes.PodUpdate, handler SyncHandler,</span><br><span class=\"line\">\tsyncCh &lt;-chan time.Time, housekeepingCh &lt;-chan time.Time, plegCh &lt;-chan *pleg.PodLifecycleEvent) bool &#123;</span><br><span class=\"line\">\tselect &#123;</span><br><span class=\"line\">\tcase u, open := &lt;-configCh:</span><br><span class=\"line\">\t\tif !open &#123;</span><br><span class=\"line\">\t\t\tglog.Errorf(&quot;Update channel is closed. Exiting the sync loop.&quot;)</span><br><span class=\"line\">\t\t\treturn false</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tswitch u.Op &#123;</span><br><span class=\"line\">\t\tcase kubetypes.ADD:</span><br><span class=\"line\">\t\t\t...</span><br><span class=\"line\">\t\tcase kubetypes.UPDATE:</span><br><span class=\"line\">\t\t\t...</span><br><span class=\"line\">\t\tcase kubetypes.REMOVE:</span><br><span class=\"line\">\t\t\t...</span><br><span class=\"line\">\t\tcase kubetypes.RECONCILE:</span><br><span class=\"line\">\t\t\t...</span><br><span class=\"line\">\t\tcase kubetypes.DELETE:</span><br><span class=\"line\">\t\t\t...</span><br><span class=\"line\">\t\tcase kubetypes.RESTORE:</span><br><span class=\"line\">\t\t\t...</span><br><span class=\"line\">\t\tcase kubetypes.SET:</span><br><span class=\"line\">\t\t\t...</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\tcase e := &lt;-plegCh:</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\tcase &lt;-syncCh:</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\tcase update := &lt;-kl.livenessManager.Updates():</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\tcase &lt;-housekeepingCh:</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn true</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3、处理新增-pod（HandlePodAddtions）\"><a href=\"#3、处理新增-pod（HandlePodAddtions）\" class=\"headerlink\" title=\"3、处理新增 pod（HandlePodAddtions）\"></a>3、处理新增 pod（HandlePodAddtions）</h3><p>对于事件中的每个 pod，执行以下操作：</p>\n<ul>\n<li>1、把所有的 pod 按照创建日期进行排序，保证最先创建的 pod 会最先被处理</li>\n<li>2、把它加入到 podManager 中，podManager 子模块负责管理这台机器上的 pod 的信息，pod 和 mirrorPod 之间的对应关系等等。所有被管理的 pod 都要出现在里面，如果 podManager 中找不到某个 pod，就认为这个 pod 被删除了</li>\n<li>3、如果是 mirror pod 调用其单独的方法</li>\n<li>4、验证 pod 是否能在该节点运行，如果不可以直接拒绝</li>\n<li>5、通过 dispatchWork 把创建 pod 的工作下发给 podWorkers 子模块做异步处理</li>\n<li>6、在 probeManager 中添加 pod，如果 pod 中定义了 readiness 和 liveness 健康检查，启动 goroutine 定期进行检测</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (kl *Kubelet) HandlePodAdditions(pods []*v1.Pod) &#123;</span><br><span class=\"line\">\tstart := kl.clock.Now()</span><br><span class=\"line\">\t// 对所有 pod 按照日期排序，保证最先创建的 pod 优先被处理</span><br><span class=\"line\">\tsort.Sort(sliceutils.PodsByCreationTime(pods))</span><br><span class=\"line\">\tfor _, pod := range pods &#123;</span><br><span class=\"line\">\t\tif kl.dnsConfigurer != nil &amp;&amp; kl.dnsConfigurer.ResolverConfig != &quot;&quot; &#123;</span><br><span class=\"line\">\t\t\tkl.dnsConfigurer.CheckLimitsForResolvConf()</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\texistingPods := kl.podManager.GetPods()</span><br><span class=\"line\">\t\t// 把 pod 加入到 podManager 中</span><br><span class=\"line\">\t\tkl.podManager.AddPod(pod)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// 判断是否是 mirror pod（即 static pod）</span><br><span class=\"line\">\t\tif kubepod.IsMirrorPod(pod) &#123;</span><br><span class=\"line\">\t\t\tkl.handleMirrorPod(pod, start)</span><br><span class=\"line\">\t\t\tcontinue</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tif !kl.podIsTerminated(pod) &#123;</span><br><span class=\"line\">\t\t\tactivePods := kl.filterOutTerminatedPods(existingPods)</span><br><span class=\"line\">\t\t\t// 通过 canAdmitPod 方法校验Pod能否在该计算节点创建(如:磁盘空间)</span><br><span class=\"line\">\t\t\t// Check if we can admit the pod; if not, reject it.</span><br><span class=\"line\">\t\t\tif ok, reason, message := kl.canAdmitPod(activePods, pod); !ok &#123;</span><br><span class=\"line\">\t\t\t\tkl.rejectPod(pod, reason, message)</span><br><span class=\"line\">\t\t\t\tcontinue</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tmirrorPod, _ := kl.podManager.GetMirrorPodByPod(pod)</span><br><span class=\"line\">\t\t// 通过 dispatchWork 分发 pod 做异步处理，dispatchWork 主要工作就是把接收到的参数封装成 UpdatePodOptions，调用 UpdatePod 方法.</span><br><span class=\"line\">\t\tkl.dispatchWork(pod, kubetypes.SyncPodCreate, mirrorPod, start)</span><br><span class=\"line\">\t\t// 在 probeManager 中添加 pod，如果 pod 中定义了 readiness 和 liveness 健康检查，启动 goroutine 定期进行检测</span><br><span class=\"line\">\t\tkl.probeManager.AddPod(pod)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>static pod 是由 kubelet 直接管理的，k8s apiserver 并不会感知到 static pod 的存在，当然也不会和任何一个 rs 关联上，完全是由 kubelet 进程来监管，并在它异常时负责重启。Kubelet 会通过 apiserver 为每一个 static pod 创建一个对应的 mirror pod，如此以来就可以可以通过 kubectl 命令查看对应的 pod,并且可以通过 kubectl logs 命令直接查看到static pod 的日志信息。</p>\n</blockquote>\n<h3 id=\"4、下发任务（dispatchWork）\"><a href=\"#4、下发任务（dispatchWork）\" class=\"headerlink\" title=\"4、下发任务（dispatchWork）\"></a>4、下发任务（dispatchWork）</h3><p>dispatchWorker 的主要作用是把某个对 Pod 的操作（创建/更新/删除）下发给 podWorkers。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (kl *Kubelet) dispatchWork(pod *v1.Pod, syncType kubetypes.SyncPodType, mirrorPod *v1.Pod, start time.Time) &#123;</span><br><span class=\"line\">\tif kl.podIsTerminated(pod) &#123;</span><br><span class=\"line\">\t\tif pod.DeletionTimestamp != nil &#123;</span><br><span class=\"line\">\t\t\tkl.statusManager.TerminatePod(pod)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t// 落实在 podWorkers 中</span><br><span class=\"line\">\tkl.podWorkers.UpdatePod(&amp;UpdatePodOptions&#123;</span><br><span class=\"line\">\t\tPod:        pod,</span><br><span class=\"line\">\t\tMirrorPod:  mirrorPod,</span><br><span class=\"line\">\t\tUpdateType: syncType,</span><br><span class=\"line\">\t\tOnCompleteFunc: func(err error) &#123;</span><br><span class=\"line\">\t\t\tif err != nil &#123;</span><br><span class=\"line\">\t\t\t\tmetrics.PodWorkerLatency.WithLabelValues(syncType.String()).Observe(metrics.SinceInMicroseconds(start))</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\tif syncType == kubetypes.SyncPodCreate &#123;</span><br><span class=\"line\">\t\tmetrics.ContainersPerPodCount.Observe(float64(len(pod.Spec.Containers)))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5、更新事件的-channel（UpdatePod）\"><a href=\"#5、更新事件的-channel（UpdatePod）\" class=\"headerlink\" title=\"5、更新事件的 channel（UpdatePod）\"></a>5、更新事件的 channel（UpdatePod）</h3><p>podWorkers 子模块主要的作用就是处理针对每一个的 Pod 的更新事件，比如 Pod 的创建，删除，更新。而 podWorkers 采取的基本思路是：为每一个 Pod 都单独创建一个 goroutine 和更新事件的 channel，goroutine 会阻塞式的等待 channel 中的事件，并且对获取的事件进行处理。而 podWorkers 对象自身则主要负责对更新事件进行下发。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (p *podWorkers) UpdatePod(options *UpdatePodOptions) &#123;</span><br><span class=\"line\">\tpod := options.Pod</span><br><span class=\"line\">\tuid := pod.UID</span><br><span class=\"line\">\tvar podUpdates chan UpdatePodOptions</span><br><span class=\"line\">\tvar exists bool</span><br><span class=\"line\"></span><br><span class=\"line\">\tp.podLock.Lock()</span><br><span class=\"line\">\tdefer p.podLock.Unlock()</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 如果当前 pod 还没有启动过 goroutine ，则启动 goroutine，并且创建 channel</span><br><span class=\"line\">\tif podUpdates, exists = p.podUpdates[uid]; !exists &#123;</span><br><span class=\"line\">\t\t// 创建 channel</span><br><span class=\"line\">\t\tpodUpdates = make(chan UpdatePodOptions, 1)</span><br><span class=\"line\">\t\tp.podUpdates[uid] = podUpdates</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// 启动 goroutine</span><br><span class=\"line\">\t\tgo func() &#123;</span><br><span class=\"line\">\t\t\tdefer runtime.HandleCrash()</span><br><span class=\"line\">\t\t\tp.managePodLoop(podUpdates)</span><br><span class=\"line\">\t\t&#125;()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t// 下发更新事件</span><br><span class=\"line\">\tif !p.isWorking[pod.UID] &#123;</span><br><span class=\"line\">\t\tp.isWorking[pod.UID] = true</span><br><span class=\"line\">\t\tpodUpdates &lt;- *options</span><br><span class=\"line\">\t&#125; else &#123;</span><br><span class=\"line\">\t\tupdate, found := p.lastUndeliveredWorkUpdate[pod.UID]</span><br><span class=\"line\">\t\tif !found || update.UpdateType != kubetypes.SyncPodKill &#123;</span><br><span class=\"line\">\t\t\tp.lastUndeliveredWorkUpdate[pod.UID] = *options</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6、调用-syncPodFn-方法同步-pod（managePodLoop）\"><a href=\"#6、调用-syncPodFn-方法同步-pod（managePodLoop）\" class=\"headerlink\" title=\"6、调用 syncPodFn 方法同步 pod（managePodLoop）\"></a>6、调用 syncPodFn 方法同步 pod（managePodLoop）</h3><p>managePodLoop 调用 syncPodFn 方法去同步 pod，syncPodFn 实际上就是kubelet.SyncPod。在完成这次 sync 动作之后，会调用 wrapUp 函数，这个函数将会做几件事情:</p>\n<ul>\n<li>将这个 pod 信息插入 kubelet 的 workQueue 队列中，等待下一次周期性的对这个 pod 的状态进行 sync</li>\n<li>将在这次 sync 期间堆积的没有能够来得及处理的最近一次 update 操作加入 goroutine 的事件 channel 中，立即处理。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (p *podWorkers) managePodLoop(podUpdates &lt;-chan UpdatePodOptions) &#123;</span><br><span class=\"line\">\tvar lastSyncTime time.Time</span><br><span class=\"line\">\tfor update := range podUpdates &#123;</span><br><span class=\"line\">\t\terr := func() error &#123;</span><br><span class=\"line\">\t\t\tpodUID := update.Pod.UID</span><br><span class=\"line\">\t\t\tstatus, err := p.podCache.GetNewerThan(podUID, lastSyncTime)</span><br><span class=\"line\">\t\t\tif err != nil &#123;</span><br><span class=\"line\">\t\t\t\t...</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\terr = p.syncPodFn(syncPodOptions&#123;</span><br><span class=\"line\">\t\t\t\tmirrorPod:      update.MirrorPod,</span><br><span class=\"line\">\t\t\t\tpod:            update.Pod,</span><br><span class=\"line\">\t\t\t\tpodStatus:      status,</span><br><span class=\"line\">\t\t\t\tkillPodOptions: update.KillPodOptions,</span><br><span class=\"line\">\t\t\t\tupdateType:     update.UpdateType,</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t\tlastSyncTime = time.Now()</span><br><span class=\"line\">\t\t\treturn err</span><br><span class=\"line\">\t\t&#125;()</span><br><span class=\"line\">\t\tif update.OnCompleteFunc != nil &#123;</span><br><span class=\"line\">\t\t\tupdate.OnCompleteFunc(err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif err != nil &#123;</span><br><span class=\"line\">\t\t\t...</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tp.wrapUp(update.Pod.UID, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"7、完成创建容器前的准备工作（SyncPod）\"><a href=\"#7、完成创建容器前的准备工作（SyncPod）\" class=\"headerlink\" title=\"7、完成创建容器前的准备工作（SyncPod）\"></a>7、完成创建容器前的准备工作（SyncPod）</h3><p>在这个方法中，主要完成以下几件事情：</p>\n<ul>\n<li>如果是删除 pod，立即执行并返回</li>\n<li>同步 podStatus 到 kubelet.statusManager</li>\n<li>检查 pod 是否能运行在本节点，主要是权限检查（是否能使用主机网络模式，是否可以以 privileged 权限运行等）。如果没有权限，就删除本地旧的 pod 并返回错误信息</li>\n<li>创建 containerManagar 对象，并且创建 pod level cgroup，更新 Qos level cgroup</li>\n<li>如果是 static Pod，就创建或者更新对应的 mirrorPod</li>\n<li>创建 pod 的数据目录，存放 volume 和 plugin 信息,如果定义了 pv，等待所有的 volume mount 完成（volumeManager 会在后台做这些事情）,如果有 image secrets，去 apiserver 获取对应的 secrets 数据</li>\n<li>然后调用 kubelet.volumeManager 组件，等待它将 pod 所需要的所有外挂的 volume 都准备好。</li>\n<li>调用 container runtime 的 SyncPod 方法，去实现真正的容器创建逻辑</li>\n</ul>\n<p>这里所有的事情都和具体的容器没有关系，可以看到该方法是创建 pod 实体（即容器）之前需要完成的准备工作。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (kl *Kubelet) syncPod(o syncPodOptions) error &#123;</span><br><span class=\"line\">\t// pull out the required options</span><br><span class=\"line\">\tpod := o.pod</span><br><span class=\"line\">\tmirrorPod := o.mirrorPod</span><br><span class=\"line\">\tpodStatus := o.podStatus</span><br><span class=\"line\">\tupdateType := o.updateType</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 是否为 删除 pod</span><br><span class=\"line\">\tif updateType == kubetypes.SyncPodKill &#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">\t// 检查 pod 是否能运行在本节点</span><br><span class=\"line\">\trunnable := kl.canRunPod(pod)</span><br><span class=\"line\">\tif !runnable.Admit &#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 更新 pod 状态</span><br><span class=\"line\">\tkl.statusManager.SetPodStatus(pod, apiPodStatus)</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 如果 pod 非 running 状态则直接 kill 掉</span><br><span class=\"line\">\tif !runnable.Admit || pod.DeletionTimestamp != nil || apiPodStatus.Phase == v1.PodFailed &#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 加载网络插件</span><br><span class=\"line\">\tif rs := kl.runtimeState.networkErrors(); len(rs) != 0 &amp;&amp; !kubecontainer.IsHostNetworkPod(pod) &#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpcm := kl.containerManager.NewPodContainerManager()</span><br><span class=\"line\">\tif !kl.podIsTerminated(pod) &#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t\t// 创建并更新 pod 的 cgroups</span><br><span class=\"line\">\t\tif !(podKilled &amp;&amp; pod.Spec.RestartPolicy == v1.RestartPolicyNever) &#123;</span><br><span class=\"line\">\t\t\tif !pcm.Exists(pod) &#123;</span><br><span class=\"line\">\t\t\t\t...</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 为 static pod 创建对应的 mirror pod</span><br><span class=\"line\">\tif kubepod.IsStaticPod(pod) &#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 创建数据目录</span><br><span class=\"line\">\tif err := kl.makePodDataDirs(pod); err != nil &#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 挂载 volume</span><br><span class=\"line\">\tif !kl.podIsTerminated(pod) &#123;</span><br><span class=\"line\">\t\tif err := kl.volumeManager.WaitForAttachAndMount(pod); err != nil &#123;</span><br><span class=\"line\">\t\t\t...</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 获取 secret 信息</span><br><span class=\"line\">\tpullSecrets := kl.getPullSecretsForPod(pod)</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 调用 containerRuntime 的 SyncPod 方法开始创建容器</span><br><span class=\"line\">\tresult := kl.containerRuntime.SyncPod(pod, apiPodStatus, podStatus, pullSecrets, kl.backOff)</span><br><span class=\"line\">\tkl.reasonCache.Update(pod.UID, result)</span><br><span class=\"line\">\tif err := result.Error(); err != nil &#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn nil</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"8、创建容器\"><a href=\"#8、创建容器\" class=\"headerlink\" title=\"8、创建容器\"></a>8、创建容器</h3><p>containerRuntime（pkg/kubelet/kuberuntime）子模块的 SyncPod 函数才是真正完成 pod 内容器实体的创建。<br>syncPod 主要执行以下几个操作：</p>\n<ul>\n<li>1、计算 sandbox 和 container 是否发生变化</li>\n<li>2、创建 sandbox 容器</li>\n<li>3、启动 init 容器</li>\n<li>4、启动业务容器</li>\n</ul>\n<p>initContainers 可以有多个，多个 container 严格按照顺序启动，只有当前一个 container 退出了以后，才开始启动下一个 container。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (m *kubeGenericRuntimeManager) SyncPod(pod *v1.Pod, _ v1.PodStatus, podStatus *kubecontainer.PodStatus, pullSecrets []v1.Secret, backOff *flowcontrol.Backoff) (result kubecontainer.PodSyncResult) &#123;</span><br><span class=\"line\">\t// 1、计算 sandbox 和 container 是否发生变化</span><br><span class=\"line\">\tpodContainerChanges := m.computePodActions(pod, podStatus)</span><br><span class=\"line\">\tif podContainerChanges.CreateSandbox &#123;</span><br><span class=\"line\">\t\tref, err := ref.GetReference(legacyscheme.Scheme, pod)</span><br><span class=\"line\">\t\tif err != nil &#123;</span><br><span class=\"line\">\t\t\tglog.Errorf(&quot;Couldn&apos;t make a ref to pod %q: &apos;%v&apos;&quot;, format.Pod(pod), err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 2、kill 掉 sandbox 已经改变的 pod</span><br><span class=\"line\">\tif podContainerChanges.KillPod &#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t&#125; else &#123;</span><br><span class=\"line\">\t\t// 3、kill 掉非 running 状态的 containers</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t\tfor containerID, containerInfo := range podContainerChanges.ContainersToKill &#123;</span><br><span class=\"line\">\t\t\t...</span><br><span class=\"line\">\t\t\tif err := m.killContainer(pod, containerID, containerInfo.name, containerInfo.message, nil); err != nil &#123;</span><br><span class=\"line\">\t\t\t\t...</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tm.pruneInitContainersBeforeStart(pod, podStatus)</span><br><span class=\"line\">\tpodIP := &quot;&quot;</span><br><span class=\"line\">\tif podStatus != nil &#123;</span><br><span class=\"line\">\t\tpodIP = podStatus.IP</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 4、创建 sandbox </span><br><span class=\"line\">\tpodSandboxID := podContainerChanges.SandboxID</span><br><span class=\"line\">\tif podContainerChanges.CreateSandbox &#123;</span><br><span class=\"line\">\t\tpodSandboxID, msg, err = m.createPodSandbox(pod, podContainerChanges.Attempt)</span><br><span class=\"line\">\t\tif err != nil &#123;</span><br><span class=\"line\">\t\t\t...</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t\tpodSandboxStatus, err := m.runtimeService.PodSandboxStatus(podSandboxID)</span><br><span class=\"line\">\t\tif err != nil &#123;</span><br><span class=\"line\">\t\t\t...</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t// 如果 pod 网络是 host 模式，容器也相同；其他情况下，容器会使用 None 网络模式，让 kubelet 的网络插件自己进行网络配置</span><br><span class=\"line\">\t\tif !kubecontainer.IsHostNetworkPod(pod) &#123;</span><br><span class=\"line\">\t\t\tpodIP = m.determinePodSandboxIP(pod.Namespace, pod.Name, podSandboxStatus)</span><br><span class=\"line\">\t\t\tglog.V(4).Infof(&quot;Determined the ip %q for pod %q after sandbox changed&quot;, podIP, format.Pod(pod))</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tconfigPodSandboxResult := kubecontainer.NewSyncResult(kubecontainer.ConfigPodSandbox, podSandboxID)</span><br><span class=\"line\">\tresult.AddSyncResult(configPodSandboxResult)</span><br><span class=\"line\">\t// 获取 PodSandbox 的配置(如:metadata,clusterDNS,容器的端口映射等)</span><br><span class=\"line\">\tpodSandboxConfig, err := m.generatePodSandboxConfig(pod, podContainerChanges.Attempt)</span><br><span class=\"line\">\t...</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 5、启动 init container</span><br><span class=\"line\">\tif container := podContainerChanges.NextInitContainerToStart; container != nil &#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t\tif msg, err := m.startContainer(podSandboxID, podSandboxConfig, container, pod, podStatus, pullSecrets, podIP, kubecontainer.ContainerTypeInit); err != nil &#123;</span><br><span class=\"line\">\t\t\t...</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 6、启动业务容器</span><br><span class=\"line\">\tfor _, idx := range podContainerChanges.ContainersToStart &#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t\tif msg, err := m.startContainer(podSandboxID, podSandboxConfig, container, pod, podStatus, pullSecrets, podIP, kubecontainer.ContainerTypeRegular); err != nil &#123;</span><br><span class=\"line\">\t\t\t...</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\treturn</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"9、启动容器\"><a href=\"#9、启动容器\" class=\"headerlink\" title=\"9、启动容器\"></a>9、启动容器</h3><p>最终由 startContainer 完成容器的启动，其主要有以下几个步骤：</p>\n<ul>\n<li>1、拉取镜像</li>\n<li>2、生成业务容器的配置信息</li>\n<li>3、调用 docker api 创建容器</li>\n<li>4、启动容器</li>\n<li>5、执行 post start hook</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (m *kubeGenericRuntimeManager) startContainer(podSandboxID string, podSandboxConfig *runtimeapi.PodSandboxConfig, container *v1.Container, pod *v1.Pod, podStatus *kubecontainer.PodStatus, pullSecrets []v1.Secret, podIP string, containerType kubecontainer.ContainerType) (string, error) &#123;</span><br><span class=\"line\">\t// 1、检查业务镜像是否存在，不存在则到 Docker Registry 或是 Private Registry 拉取镜像。</span><br><span class=\"line\">\timageRef, msg, err := m.imagePuller.EnsureImageExists(pod, container, pullSecrets)</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tref, err := kubecontainer.GenerateContainerRef(pod, container)</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 设置 RestartCount </span><br><span class=\"line\">\trestartCount := 0</span><br><span class=\"line\">\tcontainerStatus := podStatus.FindContainerStatusByName(container.Name)</span><br><span class=\"line\">\tif containerStatus != nil &#123;</span><br><span class=\"line\">\t\trestartCount = containerStatus.RestartCount + 1</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 2、生成业务容器的配置信息</span><br><span class=\"line\">\tcontainerConfig, cleanupAction, err := m.generateContainerConfig(container, pod, restartCount, podIP, imageRef, containerType)</span><br><span class=\"line\">\tif cleanupAction != nil &#123;</span><br><span class=\"line\">\t\tdefer cleanupAction()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t...</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 3、通过 client.CreateContainer 调用 docker api 创建业务容器</span><br><span class=\"line\">\tcontainerID, err := m.runtimeService.CreateContainer(podSandboxID, containerConfig, podSandboxConfig)</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\terr = m.internalLifecycle.PreStartContainer(pod, container, containerID)</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t...</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 3、启动业务容器</span><br><span class=\"line\">\terr = m.runtimeService.StartContainer(containerID)</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcontainerMeta := containerConfig.GetMetadata()</span><br><span class=\"line\">\tsandboxMeta := podSandboxConfig.GetMetadata()</span><br><span class=\"line\">\tlegacySymlink := legacyLogSymlink(containerID, containerMeta.Name, sandboxMeta.Name,</span><br><span class=\"line\">\t\tsandboxMeta.Namespace)</span><br><span class=\"line\">\tcontainerLog := filepath.Join(podSandboxConfig.LogDirectory, containerConfig.LogPath)</span><br><span class=\"line\">\tif _, err := m.osInterface.Stat(containerLog); !os.IsNotExist(err) &#123;</span><br><span class=\"line\">\t\tif err := m.osInterface.Symlink(containerLog, legacySymlink); err != nil &#123;</span><br><span class=\"line\">\t\t\tglog.Errorf(&quot;Failed to create legacy symbolic link %q to container %q log %q: %v&quot;,</span><br><span class=\"line\">\t\t\t\tlegacySymlink, containerID, containerLog, err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 4、执行 post start hook</span><br><span class=\"line\">\tif container.Lifecycle != nil &amp;&amp; container.Lifecycle.PostStart != nil &#123;</span><br><span class=\"line\">\t\tkubeContainerID := kubecontainer.ContainerID&#123;</span><br><span class=\"line\">\t\t\tType: m.runtimeName,</span><br><span class=\"line\">\t\t\tID:   containerID,</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t// runner.Run 这个方法的主要作用就是在业务容器起来的时候，</span><br><span class=\"line\">\t\t// 首先会执行一个 container hook(PostStart 和 PreStop),做一些预处理工作。</span><br><span class=\"line\">\t\t// 只有 container hook 执行成功才会运行具体的业务服务，否则容器异常。</span><br><span class=\"line\">\t\tmsg, handlerErr := m.runner.Run(kubeContainerID, pod, container, container.Lifecycle.PostStart)</span><br><span class=\"line\">\t\tif handlerErr != nil &#123;</span><br><span class=\"line\">\t\t\t...</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn &quot;&quot;, nil</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>本文主要讲述了 kubelet 从监听到容器调度至本节点再到创建容器的一个过程，kubelet 最终调用 docker api 来创建容器的。结合上篇文章，可以看出 kubelet 从启动到创建 pod 的一个清晰过程。</p>\n<p>参考：<br><a href=\"https://sycki.com/articles/kubernetes/k8s-code-kubelet\" target=\"_blank\" rel=\"noopener\">k8s源码分析-kubelet</a><br><a href=\"https://segmentfault.com/a/1190000008267351\" target=\"_blank\" rel=\"noopener\">Kubelet源码分析(一):启动流程分析</a><br><a href=\"http://cizixs.com/2017/06/07/kubelet-source-code-analysis-part-2/\" target=\"_blank\" rel=\"noopener\">kubelet 源码分析：pod 新建流程</a><br><a href=\"https://fatsheep9146.github.io/2018/07/22/kubelet%E5%88%9B%E5%BB%BAPod%E6%B5%81%E7%A8%8B%E8%A7%A3%E6%9E%90/\" target=\"_blank\" rel=\"noopener\">kubelet创建Pod流程解析</a><br><a href=\"https://github.com/kubernetes/community/blob/master/contributors/design-proposals/node/pod-lifecycle-event-generator.md\" target=\"_blank\" rel=\"noopener\">Kubelet: Pod Lifecycle Event Generator (PLEG) Design-    proposals</a></p>\n"},{"title":"kubelet 启动流程分析","date":"2018-12-23T13:22:30.000Z","type":"kubelet","_content":"\n上篇文章（[kubelet 架构浅析](https://blog.tianfeiyu.com/2018/12/16/kubelet-modules/) ）已经介绍过 kubelet 在整个集群架构中的功能以及自身各模块的用途，本篇文章主要介绍 kubelet 的启动流程。\n\n > kubernetes 版本： v1.12 \n\n\n## kubelet 启动流程\n\nkubelet 代码结构:\n\n```\n➜  kubernetes git:(release-1.12) ✗ tree cmd/kubelet\ncmd/kubelet\n├── BUILD\n├── OWNERS\n├── app\n│   ├── BUILD\n│   ├── OWNERS\n│   ├── auth.go\n│   ├── init_others.go\n│   ├── init_windows.go\n│   ├── options\n│   │   ├── BUILD\n│   │   ├── container_runtime.go\n│   │   ├── globalflags.go\n│   │   ├── globalflags_linux.go\n│   │   ├── globalflags_other.go\n│   │   ├── options.go\n│   │   ├── options_test.go\n│   │   ├── osflags_others.go\n│   │   └── osflags_windows.go\n│   ├── plugins.go\n│   ├── server.go\n│   ├── server_linux.go\n│   ├── server_test.go\n│   └── server_unsupported.go\n└── kubelet.go\n\n2 directories, 22 files\n```\n\n![kubelet 启动流程时序图](http://cdn.tianfeiyu.com/kubelet-3.png)\n\n#### 1、kubelet 入口函数 main（cmd/kubelet/kubelet.go）\n\n```\nfunc main() {\n\trand.Seed(time.Now().UTC().UnixNano())\n\n\tcommand := app.NewKubeletCommand(server.SetupSignalHandler())\n\tlogs.InitLogs()\n\tdefer logs.FlushLogs()\n\n\tif err := command.Execute(); err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"%v\\n\", err)\n\t\tos.Exit(1)\n\t}\n}\n```\n\n#### 2、初始化 kubelet 配置（cmd/kubelet/app/server.go）\n\nNewKubeletCommand() 函数主要负责获取配置文件中的参数，校验参数以及为参数设置默认值。  \n\n```\n// NewKubeletCommand creates a *cobra.Command object with default parameters\nfunc NewKubeletCommand(stopCh <-chan struct{}) *cobra.Command {\n    cleanFlagSet := pflag.NewFlagSet(componentKubelet, pflag.ContinueOnError)\n    cleanFlagSet.SetNormalizeFunc(flag.WordSepNormalizeFunc)\n    // Kubelet配置分两部分:\n    // KubeletFlag: 指那些不允许在 kubelet 运行时进行修改的配置集，或者不能在集群中各个 Nodes 之间共享的配置集。\n    // KubeletConfiguration: 指可以在集群中各个Nodes之间共享的配置集，可以进行动态配置。\n    kubeletFlags := options.NewKubeletFlags()\n\tkubeletConfig, err := options.NewKubeletConfiguration()\n\t...\n\tcmd := &cobra.Command{\n\t\t...\n\t\tRun: func(cmd *cobra.Command, args []string) {\n\t\t\t// 读取 kubelet 配置文件\n\t\t\tif configFile := kubeletFlags.KubeletConfigFile; len(configFile) > 0 {\n\t\t\t\tkubeletConfig, err = loadConfigFile(configFile)\n\t\t\t\tif err != nil {\n\t\t\t\t\tglog.Fatal(err)\n\t\t\t\t}\n\t\t\t\t...\n\t\t\t}\n\t\t\t// 校验 kubelet 参数\n\t\t\tif err := kubeletconfigvalidation.ValidateKubeletConfiguration(kubeletConfig); err != nil {\n\t\t\t\tglog.Fatal(err)\n\t\t\t}\n\t\t\t...\n\t\t\t// 此处初始化了 kubeletDeps\n\t\t\tkubeletDeps, err := UnsecuredDependencies(kubeletServer)\n\t\t\tif err != nil {\n\t\t\t\tglog.Fatal(err)\n\t\t\t}\n\t\t\t...\n\t\t\t// 启动程序\n\t\t\tif err := Run(kubeletServer, kubeletDeps, stopCh); err != nil {\n\t\t\t\tglog.Fatal(err)\n\t\t\t}\n\t\t},\n\t}\n    ...\n\treturn cmd\n}\n```\nkubeletDeps 包含 kubelet 运行所必须的配置，是为了实现 dependency injection，其目的是为了把 kubelet 依赖的组件对象作为参数传进来，这样可以控制 kubelet 的行为。主要包括监控功能（cadvisor），cgroup 管理功能（containerManager）等。\n\nNewKubeletCommand() 会调用 Run() 函数，Run() 中主要调用 run() 函数进行一些准备事项。\n\n#### 3、创建和 apiserver 通信的对象（cmd/kubelet/app/server.go）\n\nrun() 函数的主要功能：\n\n- 1、创建 kubeClient，evnetClient 用来和 apiserver 通信。创建 heartbeatClient 向 apiserver 上报心跳状态。\n- 2、为 kubeDeps 设定一些默认值。\n- 3、启动监听 Healthz 端口的 http server，默认端口是 10248。\n\n```\nfunc run(s *options.KubeletServer, kubeDeps *kubelet.Dependencies, stopCh <-chan struct{}) (err error) {\n\t...\n\t// 判断 kubelet 的启动模式\n\tif standaloneMode {\n\t...\n\t} else if kubeDeps.KubeClient == nil || kubeDeps.EventClient == nil || kubeDeps.HeartbeatClient == nil || kubeDeps.DynamicKubeClient == nil {\n\t\t...\n\t\t// 创建对象 kubeClient\n\t\tkubeClient, err = clientset.NewForConfig(clientConfig)\n\n\t\t...\n        // 创建对象 evnetClient\n\t\teventClient, err = v1core.NewForConfig(&eventClientConfig)\n\t\t...\n\t\t// heartbeatClient 上报状态\n\t\theartbeatClient, err = clientset.NewForConfig(&heartbeatClientConfig)\n\t\t...\n\t}\n\n\t// 为 kubeDeps 设定一些默认值\n\tif kubeDeps.Auth == nil {\n\t\t\tauth, err := BuildAuth(nodeName, kubeDeps.KubeClient, s.KubeletConfiguration)\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tkubeDeps.Auth = auth\n\t\t}\n\n\t\tif kubeDeps.CAdvisorInterface == nil {\n\t\t\timageFsInfoProvider := cadvisor.NewImageFsInfoProvider(s.ContainerRuntime, s.RemoteRuntimeEndpoint)\n\t\t\tkubeDeps.CAdvisorInterface, err = cadvisor.New(imageFsInfoProvider, s.RootDirectory, cadvisor.UsingLegacyCadvisorStats(s.ContainerRuntime, s.RemoteRuntimeEndpoint))\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\t}\n\n\t// \n\tif err := RunKubelet(s, kubeDeps, s.RunOnce); err != nil {\n\t\t\treturn err\n\t}\n\t...\n\t// 启动监听 Healthz 端口的 http server  \n\tif s.HealthzPort > 0 {\n\t\thealthz.DefaultHealthz()\n\t\tgo wait.Until(func() {\n\t\t\terr := http.ListenAndServe(net.JoinHostPort(s.HealthzBindAddress, strconv.Itoa(int(s.HealthzPort))), nil)\n\t\t\tif err != nil {\n\t\t\t\tglog.Errorf(\"Starting health server failed: %v\", err)\n\t\t\t}\n\t\t}, 5*time.Second, wait.NeverStop)\n\t}\n\t...\n}\n```\nkubelet 对 pod 资源的获取方式有三种：第一种是通过文件获得，文件一般放在 /etc/kubernetes/manifests 目录下面；第二种也是通过文件过得，只不过文件是通过 URL 获取的；第三种是通过 watch kube-apiserver 获取。其中前两种模式下，我们称 kubelet 运行在 standalone 模式下，运行在 standalone 模式下的 kubelet 一般用于调试某些功能。\n\nrun() 中调用 RunKubelet() 函数进行后续操作。\n\n#### 4、初始化 kubelet 组件内部的模块（cmd/kubelet/app/server.go）\n\nRunKubelet()  主要功能：\n\n- 1、初始化 kubelet 组件中的各个模块，创建出 kubelet 对象。\n- 2、启动垃圾回收服务。\n\n```\nfunc RunKubelet(kubeServer *options.KubeletServer, kubeDeps *kubelet.Dependencies, runOnce bool) error {\n    ...\n\n \t// 初始化 kubelet 内部模块\n\tk, err := CreateAndInitKubelet(&kubeServer.KubeletConfiguration,\n\t\tkubeDeps,\n\t\t&kubeServer.ContainerRuntimeOptions,\n\t\tkubeServer.ContainerRuntime,\n\t\tkubeServer.RuntimeCgroups,\n\t\tkubeServer.HostnameOverride,\n\t\tkubeServer.NodeIP,\n\t\tkubeServer.ProviderID,\n\t\tkubeServer.CloudProvider,\n\t\tkubeServer.CertDirectory,\n\t\tkubeServer.RootDirectory,\n\t\tkubeServer.RegisterNode,\n\t\tkubeServer.RegisterWithTaints,\n\t\tkubeServer.AllowedUnsafeSysctls,\n\t\tkubeServer.RemoteRuntimeEndpoint,\n\t\tkubeServer.RemoteImageEndpoint,\n\t\tkubeServer.ExperimentalMounterPath,\n\t\tkubeServer.ExperimentalKernelMemcgNotification,\n\t\tkubeServer.ExperimentalCheckNodeCapabilitiesBeforeMount,\n\t\tkubeServer.ExperimentalNodeAllocatableIgnoreEvictionThreshold,\n\t\tkubeServer.MinimumGCAge,\n\t\tkubeServer.MaxPerPodContainerCount,\n\t\tkubeServer.MaxContainerCount,\n\t\tkubeServer.MasterServiceNamespace,\n\t\tkubeServer.RegisterSchedulable,\n\t\tkubeServer.NonMasqueradeCIDR,\n\t\tkubeServer.KeepTerminatedPodVolumes,\n\t\tkubeServer.NodeLabels,\n\t\tkubeServer.SeccompProfileRoot,\n\t\tkubeServer.BootstrapCheckpointPath,\n\t\tkubeServer.NodeStatusMaxImages)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to create kubelet: %v\", err)\n\t}\n\n\t...\n\tif runOnce {\n\t\tif _, err := k.RunOnce(podCfg.Updates()); err != nil {\n\t\t\treturn fmt.Errorf(\"runonce failed: %v\", err)\n\t\t}\n\t\tglog.Infof(\"Started kubelet as runonce\")\n\t} else {\n        // \n\t\tstartKubelet(k, podCfg, &kubeServer.KubeletConfiguration, kubeDeps, kubeServer.EnableServer)\n\t\tglog.Infof(\"Started kubelet\")\n\t}\n\n}\n```\n\n\n```\nfunc CreateAndInitKubelet(...){\n\t// NewMainKubelet 实例化一个 kubelet 对象，并对 kubelet 内部各个模块进行初始化\n\tk, err = kubelet.NewMainKubelet(kubeCfg,\n\t\tkubeDeps,\n\t\tcrOptions,\n\t\tcontainerRuntime,\n\t\truntimeCgroups,\n\t\thostnameOverride,\n\t\tnodeIP,\n\t\tproviderID,\n\t\tcloudProvider,\n\t\tcertDirectory,\n\t\trootDirectory,\n\t\tregisterNode,\n\t\tregisterWithTaints,\n\t\tallowedUnsafeSysctls,\n\t\tremoteRuntimeEndpoint,\n\t\tremoteImageEndpoint,\n\t\texperimentalMounterPath,\n\t\texperimentalKernelMemcgNotification,\n\t\texperimentalCheckNodeCapabilitiesBeforeMount,\n\t\texperimentalNodeAllocatableIgnoreEvictionThreshold,\n\t\tminimumGCAge,\n\t\tmaxPerPodContainerCount,\n\t\tmaxContainerCount,\n\t\tmasterServiceNamespace,\n\t\tregisterSchedulable,\n\t\tnonMasqueradeCIDR,\n\t\tkeepTerminatedPodVolumes,\n\t\tnodeLabels,\n\t\tseccompProfileRoot,\n\t\tbootstrapCheckpointPath,\n\t\tnodeStatusMaxImages)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// 通知 apiserver kubelet 启动了\n\tk.BirthCry()\n\t// 启动垃圾回收服务\n\tk.StartGarbageCollection()\n\n\treturn k, nil\n\n}\n```\n\n```\nfunc NewMainKubelet(kubeCfg *kubeletconfiginternal.KubeletConfiguration,...){\n    ...\n\tif kubeDeps.PodConfig == nil {\n\t\tvar err error\n\t\t// 初始化 makePodSourceConfig，监听 pod 元数据的来源(FILE, URL, api-server)，将不同 source 的 pod configuration 合并到一个结构中\n\t\tkubeDeps.PodConfig, err = makePodSourceConfig(kubeCfg, kubeDeps, nodeName, bootstrapCheckpointPath)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n    \n    // kubelet 服务端口，默认 10250\n\tdaemonEndpoints := &v1.NodeDaemonEndpoints{\n\t\tKubeletEndpoint: v1.DaemonEndpoint{Port: kubeCfg.Port},\n\t}\n\n\t// 使用 reflector 把 ListWatch 得到的服务信息实时同步到 serviceStore 对象中\n\tserviceIndexer := cache.NewIndexer(cache.MetaNamespaceKeyFunc, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc})\n\tif kubeDeps.KubeClient != nil {\n\t\tserviceLW := cache.NewListWatchFromClient(kubeDeps.KubeClient.CoreV1().RESTClient(), \"services\", metav1.NamespaceAll, fields.Everything())\n\t\tr := cache.NewReflector(serviceLW, &v1.Service{}, serviceIndexer, 0)\n\t\tgo r.Run(wait.NeverStop)\n\t}\n\tserviceLister := corelisters.NewServiceLister(serviceIndexer)\n\n\t// 使用 reflector 把 ListWatch 得到的节点信息实时同步到  nodeStore 对象中\n\tnodeIndexer := cache.NewIndexer(cache.MetaNamespaceKeyFunc, cache.Indexers{})\n\tif kubeDeps.KubeClient != nil {\n\t\tfieldSelector := fields.Set{api.ObjectNameField: string(nodeName)}.AsSelector()\n\t\tnodeLW := cache.NewListWatchFromClient(kubeDeps.KubeClient.CoreV1().RESTClient(), \"nodes\", metav1.NamespaceAll, fieldSelector)\n\t\tr := cache.NewReflector(nodeLW, &v1.Node{}, nodeIndexer, 0)\n\t\tgo r.Run(wait.NeverStop)\n\t}\n\tnodeInfo := &predicates.CachedNodeInfo{NodeLister: corelisters.NewNodeLister(nodeIndexer)}\n\n\t...\n\t// node 资源不足时的驱逐策略的设定\n\tthresholds, err := eviction.ParseThresholdConfig(enforceNodeAllocatable, kubeCfg.EvictionHard, kubeCfg.EvictionSoft, kubeCfg.EvictionSoftGracePeriod, kubeCfg.EvictionMinimumReclaim)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tevictionConfig := eviction.Config{\n\t\tPressureTransitionPeriod: kubeCfg.EvictionPressureTransitionPeriod.Duration,\n\t\tMaxPodGracePeriodSeconds: int64(kubeCfg.EvictionMaxPodGracePeriod),\n\t\tThresholds:               thresholds,\n\t\tKernelMemcgNotification:  experimentalKernelMemcgNotification,\n\t\tPodCgroupRoot:            kubeDeps.ContainerManager.GetPodCgroupRoot(),\n\t}\n    ...\n    // 容器引用的管理\n\tcontainerRefManager := kubecontainer.NewRefManager()\n    // oom 监控\n\toomWatcher := NewOOMWatcher(kubeDeps.CAdvisorInterface, kubeDeps.Recorder)\n\n\t// 根据配置信息和各种对象创建 Kubelet 实例\n\tklet := &Kubelet{\n\t\thostname:                       hostname,\n\t\thostnameOverridden:             len(hostnameOverride) > 0,\n\t\tnodeName:                       nodeName,\n\t\t...\n\t}\n\t\n\t// 从 cAdvisor 获取当前机器的信息\n\tmachineInfo, err := klet.cadvisor.MachineInfo()\n\n\t// 对 pod 的管理（如: 增删改等）\n\tklet.podManager = kubepod.NewBasicPodManager(kubepod.NewBasicMirrorClient(klet.kubeClient), secretManager, configMapManager, checkpointManager)\n\n\t// 容器运行时管理\n\truntime, err := kuberuntime.NewKubeGenericRuntimeManager(...)\n\n\t// pleg\n\tklet.pleg = pleg.NewGenericPLEG(klet.containerRuntime, plegChannelCapacity, plegRelistPeriod, klet.podCache, clock.RealClock{})\n\n\t// 创建 containerGC 对象，进行周期性的容器清理工作\n\tcontainerGC, err := kubecontainer.NewContainerGC(klet.containerRuntime, containerGCPolicy, klet.sourcesReady)\n\n\t// 创建 imageManager 管理镜像\n\timageManager, err := images.NewImageGCManager(klet.containerRuntime, klet.StatsProvider, kubeDeps.Recorder, nodeRef, imageGCPolicy, crOptions.PodSandboxImage)\n\t\n\t// statusManager 实时检测节点上 pod 的状态，并更新到 apiserver 对应的 pod\n\tklet.statusManager = status.NewManager(klet.kubeClient, klet.podManager, klet)\n\n\t// 探针管理\n\tklet.probeManager = prober.NewManager(...)\n\n    // token 管理\n\ttokenManager := token.NewManager(kubeDeps.KubeClient)\n\n\t// 磁盘管理\n\tklet.volumeManager = volumemanager.NewVolumeManager()\n\t\n\t// 将 syncPod() 注入到 podWorkers 中\n\tklet.podWorkers = newPodWorkers(klet.syncPod, kubeDeps.Recorder, klet.workQueue, klet.resyncInterval, backOffPeriod, klet.podCache)\n\n\t// 容器驱逐策略管理\n\tevictionManager, evictionAdmitHandler := eviction.NewManager(klet.resourceAnalyzer, evictionConfig, killPodNow(klet.podWorkers, kubeDeps.Recorder), klet.imageManager, klet.containerGC, kubeDeps.Recorder, nodeRef, klet.clock)\n    ...\n}\n```\nRunKubelet 最后会调用 startKubelet() 进行后续的操作。\n\n#### 5、启动 kubelet 内部的模块及服务（cmd/kubelet/app/server.go）\nstartKubelet()  的主要功能：\n\n- 1、以 goroutine 方式启动 kubelet 中的各个模块。\n- 2、启动 kubelet http server。\n\n\n```\nfunc startKubelet(k kubelet.Bootstrap, podCfg *config.PodConfig, kubeCfg *kubeletconfiginternal.KubeletConfiguration, kubeDeps *kubelet.Dependencies, enableServer bool) {\n\tgo wait.Until(func() {\n\t\t// 以 goroutine 方式启动 kubelet 中的各个模块\n\t\tk.Run(podCfg.Updates())\n\t}, 0, wait.NeverStop)\n\n\t// 启动 kubelet http server\t\n\tif enableServer {\n\t\tgo k.ListenAndServe(net.ParseIP(kubeCfg.Address), uint(kubeCfg.Port), kubeDeps.TLSOptions, kubeDeps.Auth, kubeCfg.EnableDebuggingHandlers, kubeCfg.EnableContentionProfiling)\n\n\t}\n\tif kubeCfg.ReadOnlyPort > 0 {\n\t\tgo k.ListenAndServeReadOnly(net.ParseIP(kubeCfg.Address), uint(kubeCfg.ReadOnlyPort))\n\t}\n}\n```\n\n```\n// Run starts the kubelet reacting to config updates\nfunc (kl *Kubelet) Run(updates <-chan kubetypes.PodUpdate) {\n\tif kl.logServer == nil {\n\t\tkl.logServer = http.StripPrefix(\"/logs/\", http.FileServer(http.Dir(\"/var/log/\")))\n\t}\n\tif kl.kubeClient == nil {\n\t\tglog.Warning(\"No api server defined - no node status update will be sent.\")\n\t}\n\n\t// Start the cloud provider sync manager\n\tif kl.cloudResourceSyncManager != nil {\n\t\tgo kl.cloudResourceSyncManager.Run(wait.NeverStop)\n\t}\n\n\tif err := kl.initializeModules(); err != nil {\n\t\tkl.recorder.Eventf(kl.nodeRef, v1.EventTypeWarning, events.KubeletSetupFailed, err.Error())\n\t\tglog.Fatal(err)\n\t}\n\n\t// Start volume manager\n\tgo kl.volumeManager.Run(kl.sourcesReady, wait.NeverStop)\n\n\tif kl.kubeClient != nil {\n\t\t// Start syncing node status immediately, this may set up things the runtime needs to run.\n\t\tgo wait.Until(kl.syncNodeStatus, kl.nodeStatusUpdateFrequency, wait.NeverStop)\n\t\tgo kl.fastStatusUpdateOnce()\n\n\t\t// start syncing lease\n\t\tif utilfeature.DefaultFeatureGate.Enabled(features.NodeLease) {\n\t\t\tgo kl.nodeLeaseController.Run(wait.NeverStop)\n\t\t}\n\t}\n\tgo wait.Until(kl.updateRuntimeUp, 5*time.Second, wait.NeverStop)\n\n\t// Start loop to sync iptables util rules\n\tif kl.makeIPTablesUtilChains {\n\t\tgo wait.Until(kl.syncNetworkUtil, 1*time.Minute, wait.NeverStop)\n\t}\n\n\t// Start a goroutine responsible for killing pods (that are not properly\n\t// handled by pod workers).\n\tgo wait.Until(kl.podKiller, 1*time.Second, wait.NeverStop)\n\n\t// Start component sync loops.\n\tkl.statusManager.Start()\n\tkl.probeManager.Start()\n\n\t// Start syncing RuntimeClasses if enabled.\n\tif kl.runtimeClassManager != nil {\n\t\tgo kl.runtimeClassManager.Run(wait.NeverStop)\n\t}\n\n\t// Start the pod lifecycle event generator.\n\tkl.pleg.Start()\n\n\tkl.syncLoop(updates, kl)\n}\n```\nsyncLoop 是 kubelet 的主循环方法，它从不同的管道(FILE,URL, API-SERVER)监听 pod 的变化，并把它们汇聚起来。当有新的变化发生时，它会调用对应的函数，保证 Pod 处于期望的状态。\n\n\n```\nfunc (kl *Kubelet) syncLoop(updates <-chan kubetypes.PodUpdate, handler SyncHandler) {\n\tglog.Info(\"Starting kubelet main sync loop.\")\n\n\t// syncTicker 每秒检测一次是否有需要同步的 pod workers\n\tsyncTicker := time.NewTicker(time.Second)\n\tdefer syncTicker.Stop()\n\thousekeepingTicker := time.NewTicker(housekeepingPeriod)\n\tdefer housekeepingTicker.Stop()\n\tplegCh := kl.pleg.Watch()\n\tconst (\n\t\tbase   = 100 * time.Millisecond\n\t\tmax    = 5 * time.Second\n\t\tfactor = 2\n\t)\n\tduration := base\n\tfor {\n\t\tif rs := kl.runtimeState.runtimeErrors(); len(rs) != 0 {\n\t\t\tglog.Infof(\"skipping pod synchronization - %v\", rs)\n\t\t\t// exponential backoff\n\t\t\ttime.Sleep(duration)\n\t\t\tduration = time.Duration(math.Min(float64(max), factor*float64(duration)))\n\t\t\tcontinue\n\t\t}\n\t\t// reset backoff if we have a success\n\t\tduration = base\n\n\t\tkl.syncLoopMonitor.Store(kl.clock.Now())\n\t\t// \n\t\tif !kl.syncLoopIteration(updates, handler, syncTicker.C, housekeepingTicker.C, plegCh) {\n\t\t\tbreak\n\t\t}\n\t\tkl.syncLoopMonitor.Store(kl.clock.Now())\n\t}\n}\n```\n\nsyncLoopIteration()  方法对多个管道进行遍历，如果 pod 发生变化，则会调用相应的 Handler，在 Handler 中通过调用 dispatchWork 分发任务。\n\n\n## 总结\n\n本篇文章主要讲述了 kubelet 组件从加载配置到初始化内部的各个模块再到启动 kubelet 服务的整个流程，上面的时序图能清楚的看到函数之间的调用关系，但是其中每个组件具体的工作方式以及组件之间的交互方式还不得而知，后面会一探究竟。\n\n参考：\n[kubernetes node components – kubelet](http://www.sel.zju.edu.cn/?p=595)\n[Kubelet 源码分析(一):启动流程分析](https://segmentfault.com/a/1190000008267351)\n[kubelet 源码分析：启动流程](https://cizixs.com/2017/06/06/kubelet-source-code-analysis-part-1/)\n[kubernetes 的 kubelet 的工作过程](https://www.lijiaocn.com/%E9%A1%B9%E7%9B%AE/2017/05/02/Kubernetes-kubelet.html)\n[kubelet 内部实现解析](https://fatsheep9146.github.io/2018/07/08/kubelet%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0%E8%A7%A3%E6%9E%90/)\n","source":"_posts/kubelet_init.md","raw":"---\ntitle: kubelet 启动流程分析\ndate: 2018-12-23 21:22:30\ntags: \"kubelet\"\ntype: \"kubelet\"\n\n---\n\n上篇文章（[kubelet 架构浅析](https://blog.tianfeiyu.com/2018/12/16/kubelet-modules/) ）已经介绍过 kubelet 在整个集群架构中的功能以及自身各模块的用途，本篇文章主要介绍 kubelet 的启动流程。\n\n > kubernetes 版本： v1.12 \n\n\n## kubelet 启动流程\n\nkubelet 代码结构:\n\n```\n➜  kubernetes git:(release-1.12) ✗ tree cmd/kubelet\ncmd/kubelet\n├── BUILD\n├── OWNERS\n├── app\n│   ├── BUILD\n│   ├── OWNERS\n│   ├── auth.go\n│   ├── init_others.go\n│   ├── init_windows.go\n│   ├── options\n│   │   ├── BUILD\n│   │   ├── container_runtime.go\n│   │   ├── globalflags.go\n│   │   ├── globalflags_linux.go\n│   │   ├── globalflags_other.go\n│   │   ├── options.go\n│   │   ├── options_test.go\n│   │   ├── osflags_others.go\n│   │   └── osflags_windows.go\n│   ├── plugins.go\n│   ├── server.go\n│   ├── server_linux.go\n│   ├── server_test.go\n│   └── server_unsupported.go\n└── kubelet.go\n\n2 directories, 22 files\n```\n\n![kubelet 启动流程时序图](http://cdn.tianfeiyu.com/kubelet-3.png)\n\n#### 1、kubelet 入口函数 main（cmd/kubelet/kubelet.go）\n\n```\nfunc main() {\n\trand.Seed(time.Now().UTC().UnixNano())\n\n\tcommand := app.NewKubeletCommand(server.SetupSignalHandler())\n\tlogs.InitLogs()\n\tdefer logs.FlushLogs()\n\n\tif err := command.Execute(); err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"%v\\n\", err)\n\t\tos.Exit(1)\n\t}\n}\n```\n\n#### 2、初始化 kubelet 配置（cmd/kubelet/app/server.go）\n\nNewKubeletCommand() 函数主要负责获取配置文件中的参数，校验参数以及为参数设置默认值。  \n\n```\n// NewKubeletCommand creates a *cobra.Command object with default parameters\nfunc NewKubeletCommand(stopCh <-chan struct{}) *cobra.Command {\n    cleanFlagSet := pflag.NewFlagSet(componentKubelet, pflag.ContinueOnError)\n    cleanFlagSet.SetNormalizeFunc(flag.WordSepNormalizeFunc)\n    // Kubelet配置分两部分:\n    // KubeletFlag: 指那些不允许在 kubelet 运行时进行修改的配置集，或者不能在集群中各个 Nodes 之间共享的配置集。\n    // KubeletConfiguration: 指可以在集群中各个Nodes之间共享的配置集，可以进行动态配置。\n    kubeletFlags := options.NewKubeletFlags()\n\tkubeletConfig, err := options.NewKubeletConfiguration()\n\t...\n\tcmd := &cobra.Command{\n\t\t...\n\t\tRun: func(cmd *cobra.Command, args []string) {\n\t\t\t// 读取 kubelet 配置文件\n\t\t\tif configFile := kubeletFlags.KubeletConfigFile; len(configFile) > 0 {\n\t\t\t\tkubeletConfig, err = loadConfigFile(configFile)\n\t\t\t\tif err != nil {\n\t\t\t\t\tglog.Fatal(err)\n\t\t\t\t}\n\t\t\t\t...\n\t\t\t}\n\t\t\t// 校验 kubelet 参数\n\t\t\tif err := kubeletconfigvalidation.ValidateKubeletConfiguration(kubeletConfig); err != nil {\n\t\t\t\tglog.Fatal(err)\n\t\t\t}\n\t\t\t...\n\t\t\t// 此处初始化了 kubeletDeps\n\t\t\tkubeletDeps, err := UnsecuredDependencies(kubeletServer)\n\t\t\tif err != nil {\n\t\t\t\tglog.Fatal(err)\n\t\t\t}\n\t\t\t...\n\t\t\t// 启动程序\n\t\t\tif err := Run(kubeletServer, kubeletDeps, stopCh); err != nil {\n\t\t\t\tglog.Fatal(err)\n\t\t\t}\n\t\t},\n\t}\n    ...\n\treturn cmd\n}\n```\nkubeletDeps 包含 kubelet 运行所必须的配置，是为了实现 dependency injection，其目的是为了把 kubelet 依赖的组件对象作为参数传进来，这样可以控制 kubelet 的行为。主要包括监控功能（cadvisor），cgroup 管理功能（containerManager）等。\n\nNewKubeletCommand() 会调用 Run() 函数，Run() 中主要调用 run() 函数进行一些准备事项。\n\n#### 3、创建和 apiserver 通信的对象（cmd/kubelet/app/server.go）\n\nrun() 函数的主要功能：\n\n- 1、创建 kubeClient，evnetClient 用来和 apiserver 通信。创建 heartbeatClient 向 apiserver 上报心跳状态。\n- 2、为 kubeDeps 设定一些默认值。\n- 3、启动监听 Healthz 端口的 http server，默认端口是 10248。\n\n```\nfunc run(s *options.KubeletServer, kubeDeps *kubelet.Dependencies, stopCh <-chan struct{}) (err error) {\n\t...\n\t// 判断 kubelet 的启动模式\n\tif standaloneMode {\n\t...\n\t} else if kubeDeps.KubeClient == nil || kubeDeps.EventClient == nil || kubeDeps.HeartbeatClient == nil || kubeDeps.DynamicKubeClient == nil {\n\t\t...\n\t\t// 创建对象 kubeClient\n\t\tkubeClient, err = clientset.NewForConfig(clientConfig)\n\n\t\t...\n        // 创建对象 evnetClient\n\t\teventClient, err = v1core.NewForConfig(&eventClientConfig)\n\t\t...\n\t\t// heartbeatClient 上报状态\n\t\theartbeatClient, err = clientset.NewForConfig(&heartbeatClientConfig)\n\t\t...\n\t}\n\n\t// 为 kubeDeps 设定一些默认值\n\tif kubeDeps.Auth == nil {\n\t\t\tauth, err := BuildAuth(nodeName, kubeDeps.KubeClient, s.KubeletConfiguration)\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tkubeDeps.Auth = auth\n\t\t}\n\n\t\tif kubeDeps.CAdvisorInterface == nil {\n\t\t\timageFsInfoProvider := cadvisor.NewImageFsInfoProvider(s.ContainerRuntime, s.RemoteRuntimeEndpoint)\n\t\t\tkubeDeps.CAdvisorInterface, err = cadvisor.New(imageFsInfoProvider, s.RootDirectory, cadvisor.UsingLegacyCadvisorStats(s.ContainerRuntime, s.RemoteRuntimeEndpoint))\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\t}\n\n\t// \n\tif err := RunKubelet(s, kubeDeps, s.RunOnce); err != nil {\n\t\t\treturn err\n\t}\n\t...\n\t// 启动监听 Healthz 端口的 http server  \n\tif s.HealthzPort > 0 {\n\t\thealthz.DefaultHealthz()\n\t\tgo wait.Until(func() {\n\t\t\terr := http.ListenAndServe(net.JoinHostPort(s.HealthzBindAddress, strconv.Itoa(int(s.HealthzPort))), nil)\n\t\t\tif err != nil {\n\t\t\t\tglog.Errorf(\"Starting health server failed: %v\", err)\n\t\t\t}\n\t\t}, 5*time.Second, wait.NeverStop)\n\t}\n\t...\n}\n```\nkubelet 对 pod 资源的获取方式有三种：第一种是通过文件获得，文件一般放在 /etc/kubernetes/manifests 目录下面；第二种也是通过文件过得，只不过文件是通过 URL 获取的；第三种是通过 watch kube-apiserver 获取。其中前两种模式下，我们称 kubelet 运行在 standalone 模式下，运行在 standalone 模式下的 kubelet 一般用于调试某些功能。\n\nrun() 中调用 RunKubelet() 函数进行后续操作。\n\n#### 4、初始化 kubelet 组件内部的模块（cmd/kubelet/app/server.go）\n\nRunKubelet()  主要功能：\n\n- 1、初始化 kubelet 组件中的各个模块，创建出 kubelet 对象。\n- 2、启动垃圾回收服务。\n\n```\nfunc RunKubelet(kubeServer *options.KubeletServer, kubeDeps *kubelet.Dependencies, runOnce bool) error {\n    ...\n\n \t// 初始化 kubelet 内部模块\n\tk, err := CreateAndInitKubelet(&kubeServer.KubeletConfiguration,\n\t\tkubeDeps,\n\t\t&kubeServer.ContainerRuntimeOptions,\n\t\tkubeServer.ContainerRuntime,\n\t\tkubeServer.RuntimeCgroups,\n\t\tkubeServer.HostnameOverride,\n\t\tkubeServer.NodeIP,\n\t\tkubeServer.ProviderID,\n\t\tkubeServer.CloudProvider,\n\t\tkubeServer.CertDirectory,\n\t\tkubeServer.RootDirectory,\n\t\tkubeServer.RegisterNode,\n\t\tkubeServer.RegisterWithTaints,\n\t\tkubeServer.AllowedUnsafeSysctls,\n\t\tkubeServer.RemoteRuntimeEndpoint,\n\t\tkubeServer.RemoteImageEndpoint,\n\t\tkubeServer.ExperimentalMounterPath,\n\t\tkubeServer.ExperimentalKernelMemcgNotification,\n\t\tkubeServer.ExperimentalCheckNodeCapabilitiesBeforeMount,\n\t\tkubeServer.ExperimentalNodeAllocatableIgnoreEvictionThreshold,\n\t\tkubeServer.MinimumGCAge,\n\t\tkubeServer.MaxPerPodContainerCount,\n\t\tkubeServer.MaxContainerCount,\n\t\tkubeServer.MasterServiceNamespace,\n\t\tkubeServer.RegisterSchedulable,\n\t\tkubeServer.NonMasqueradeCIDR,\n\t\tkubeServer.KeepTerminatedPodVolumes,\n\t\tkubeServer.NodeLabels,\n\t\tkubeServer.SeccompProfileRoot,\n\t\tkubeServer.BootstrapCheckpointPath,\n\t\tkubeServer.NodeStatusMaxImages)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to create kubelet: %v\", err)\n\t}\n\n\t...\n\tif runOnce {\n\t\tif _, err := k.RunOnce(podCfg.Updates()); err != nil {\n\t\t\treturn fmt.Errorf(\"runonce failed: %v\", err)\n\t\t}\n\t\tglog.Infof(\"Started kubelet as runonce\")\n\t} else {\n        // \n\t\tstartKubelet(k, podCfg, &kubeServer.KubeletConfiguration, kubeDeps, kubeServer.EnableServer)\n\t\tglog.Infof(\"Started kubelet\")\n\t}\n\n}\n```\n\n\n```\nfunc CreateAndInitKubelet(...){\n\t// NewMainKubelet 实例化一个 kubelet 对象，并对 kubelet 内部各个模块进行初始化\n\tk, err = kubelet.NewMainKubelet(kubeCfg,\n\t\tkubeDeps,\n\t\tcrOptions,\n\t\tcontainerRuntime,\n\t\truntimeCgroups,\n\t\thostnameOverride,\n\t\tnodeIP,\n\t\tproviderID,\n\t\tcloudProvider,\n\t\tcertDirectory,\n\t\trootDirectory,\n\t\tregisterNode,\n\t\tregisterWithTaints,\n\t\tallowedUnsafeSysctls,\n\t\tremoteRuntimeEndpoint,\n\t\tremoteImageEndpoint,\n\t\texperimentalMounterPath,\n\t\texperimentalKernelMemcgNotification,\n\t\texperimentalCheckNodeCapabilitiesBeforeMount,\n\t\texperimentalNodeAllocatableIgnoreEvictionThreshold,\n\t\tminimumGCAge,\n\t\tmaxPerPodContainerCount,\n\t\tmaxContainerCount,\n\t\tmasterServiceNamespace,\n\t\tregisterSchedulable,\n\t\tnonMasqueradeCIDR,\n\t\tkeepTerminatedPodVolumes,\n\t\tnodeLabels,\n\t\tseccompProfileRoot,\n\t\tbootstrapCheckpointPath,\n\t\tnodeStatusMaxImages)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// 通知 apiserver kubelet 启动了\n\tk.BirthCry()\n\t// 启动垃圾回收服务\n\tk.StartGarbageCollection()\n\n\treturn k, nil\n\n}\n```\n\n```\nfunc NewMainKubelet(kubeCfg *kubeletconfiginternal.KubeletConfiguration,...){\n    ...\n\tif kubeDeps.PodConfig == nil {\n\t\tvar err error\n\t\t// 初始化 makePodSourceConfig，监听 pod 元数据的来源(FILE, URL, api-server)，将不同 source 的 pod configuration 合并到一个结构中\n\t\tkubeDeps.PodConfig, err = makePodSourceConfig(kubeCfg, kubeDeps, nodeName, bootstrapCheckpointPath)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n    \n    // kubelet 服务端口，默认 10250\n\tdaemonEndpoints := &v1.NodeDaemonEndpoints{\n\t\tKubeletEndpoint: v1.DaemonEndpoint{Port: kubeCfg.Port},\n\t}\n\n\t// 使用 reflector 把 ListWatch 得到的服务信息实时同步到 serviceStore 对象中\n\tserviceIndexer := cache.NewIndexer(cache.MetaNamespaceKeyFunc, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc})\n\tif kubeDeps.KubeClient != nil {\n\t\tserviceLW := cache.NewListWatchFromClient(kubeDeps.KubeClient.CoreV1().RESTClient(), \"services\", metav1.NamespaceAll, fields.Everything())\n\t\tr := cache.NewReflector(serviceLW, &v1.Service{}, serviceIndexer, 0)\n\t\tgo r.Run(wait.NeverStop)\n\t}\n\tserviceLister := corelisters.NewServiceLister(serviceIndexer)\n\n\t// 使用 reflector 把 ListWatch 得到的节点信息实时同步到  nodeStore 对象中\n\tnodeIndexer := cache.NewIndexer(cache.MetaNamespaceKeyFunc, cache.Indexers{})\n\tif kubeDeps.KubeClient != nil {\n\t\tfieldSelector := fields.Set{api.ObjectNameField: string(nodeName)}.AsSelector()\n\t\tnodeLW := cache.NewListWatchFromClient(kubeDeps.KubeClient.CoreV1().RESTClient(), \"nodes\", metav1.NamespaceAll, fieldSelector)\n\t\tr := cache.NewReflector(nodeLW, &v1.Node{}, nodeIndexer, 0)\n\t\tgo r.Run(wait.NeverStop)\n\t}\n\tnodeInfo := &predicates.CachedNodeInfo{NodeLister: corelisters.NewNodeLister(nodeIndexer)}\n\n\t...\n\t// node 资源不足时的驱逐策略的设定\n\tthresholds, err := eviction.ParseThresholdConfig(enforceNodeAllocatable, kubeCfg.EvictionHard, kubeCfg.EvictionSoft, kubeCfg.EvictionSoftGracePeriod, kubeCfg.EvictionMinimumReclaim)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tevictionConfig := eviction.Config{\n\t\tPressureTransitionPeriod: kubeCfg.EvictionPressureTransitionPeriod.Duration,\n\t\tMaxPodGracePeriodSeconds: int64(kubeCfg.EvictionMaxPodGracePeriod),\n\t\tThresholds:               thresholds,\n\t\tKernelMemcgNotification:  experimentalKernelMemcgNotification,\n\t\tPodCgroupRoot:            kubeDeps.ContainerManager.GetPodCgroupRoot(),\n\t}\n    ...\n    // 容器引用的管理\n\tcontainerRefManager := kubecontainer.NewRefManager()\n    // oom 监控\n\toomWatcher := NewOOMWatcher(kubeDeps.CAdvisorInterface, kubeDeps.Recorder)\n\n\t// 根据配置信息和各种对象创建 Kubelet 实例\n\tklet := &Kubelet{\n\t\thostname:                       hostname,\n\t\thostnameOverridden:             len(hostnameOverride) > 0,\n\t\tnodeName:                       nodeName,\n\t\t...\n\t}\n\t\n\t// 从 cAdvisor 获取当前机器的信息\n\tmachineInfo, err := klet.cadvisor.MachineInfo()\n\n\t// 对 pod 的管理（如: 增删改等）\n\tklet.podManager = kubepod.NewBasicPodManager(kubepod.NewBasicMirrorClient(klet.kubeClient), secretManager, configMapManager, checkpointManager)\n\n\t// 容器运行时管理\n\truntime, err := kuberuntime.NewKubeGenericRuntimeManager(...)\n\n\t// pleg\n\tklet.pleg = pleg.NewGenericPLEG(klet.containerRuntime, plegChannelCapacity, plegRelistPeriod, klet.podCache, clock.RealClock{})\n\n\t// 创建 containerGC 对象，进行周期性的容器清理工作\n\tcontainerGC, err := kubecontainer.NewContainerGC(klet.containerRuntime, containerGCPolicy, klet.sourcesReady)\n\n\t// 创建 imageManager 管理镜像\n\timageManager, err := images.NewImageGCManager(klet.containerRuntime, klet.StatsProvider, kubeDeps.Recorder, nodeRef, imageGCPolicy, crOptions.PodSandboxImage)\n\t\n\t// statusManager 实时检测节点上 pod 的状态，并更新到 apiserver 对应的 pod\n\tklet.statusManager = status.NewManager(klet.kubeClient, klet.podManager, klet)\n\n\t// 探针管理\n\tklet.probeManager = prober.NewManager(...)\n\n    // token 管理\n\ttokenManager := token.NewManager(kubeDeps.KubeClient)\n\n\t// 磁盘管理\n\tklet.volumeManager = volumemanager.NewVolumeManager()\n\t\n\t// 将 syncPod() 注入到 podWorkers 中\n\tklet.podWorkers = newPodWorkers(klet.syncPod, kubeDeps.Recorder, klet.workQueue, klet.resyncInterval, backOffPeriod, klet.podCache)\n\n\t// 容器驱逐策略管理\n\tevictionManager, evictionAdmitHandler := eviction.NewManager(klet.resourceAnalyzer, evictionConfig, killPodNow(klet.podWorkers, kubeDeps.Recorder), klet.imageManager, klet.containerGC, kubeDeps.Recorder, nodeRef, klet.clock)\n    ...\n}\n```\nRunKubelet 最后会调用 startKubelet() 进行后续的操作。\n\n#### 5、启动 kubelet 内部的模块及服务（cmd/kubelet/app/server.go）\nstartKubelet()  的主要功能：\n\n- 1、以 goroutine 方式启动 kubelet 中的各个模块。\n- 2、启动 kubelet http server。\n\n\n```\nfunc startKubelet(k kubelet.Bootstrap, podCfg *config.PodConfig, kubeCfg *kubeletconfiginternal.KubeletConfiguration, kubeDeps *kubelet.Dependencies, enableServer bool) {\n\tgo wait.Until(func() {\n\t\t// 以 goroutine 方式启动 kubelet 中的各个模块\n\t\tk.Run(podCfg.Updates())\n\t}, 0, wait.NeverStop)\n\n\t// 启动 kubelet http server\t\n\tif enableServer {\n\t\tgo k.ListenAndServe(net.ParseIP(kubeCfg.Address), uint(kubeCfg.Port), kubeDeps.TLSOptions, kubeDeps.Auth, kubeCfg.EnableDebuggingHandlers, kubeCfg.EnableContentionProfiling)\n\n\t}\n\tif kubeCfg.ReadOnlyPort > 0 {\n\t\tgo k.ListenAndServeReadOnly(net.ParseIP(kubeCfg.Address), uint(kubeCfg.ReadOnlyPort))\n\t}\n}\n```\n\n```\n// Run starts the kubelet reacting to config updates\nfunc (kl *Kubelet) Run(updates <-chan kubetypes.PodUpdate) {\n\tif kl.logServer == nil {\n\t\tkl.logServer = http.StripPrefix(\"/logs/\", http.FileServer(http.Dir(\"/var/log/\")))\n\t}\n\tif kl.kubeClient == nil {\n\t\tglog.Warning(\"No api server defined - no node status update will be sent.\")\n\t}\n\n\t// Start the cloud provider sync manager\n\tif kl.cloudResourceSyncManager != nil {\n\t\tgo kl.cloudResourceSyncManager.Run(wait.NeverStop)\n\t}\n\n\tif err := kl.initializeModules(); err != nil {\n\t\tkl.recorder.Eventf(kl.nodeRef, v1.EventTypeWarning, events.KubeletSetupFailed, err.Error())\n\t\tglog.Fatal(err)\n\t}\n\n\t// Start volume manager\n\tgo kl.volumeManager.Run(kl.sourcesReady, wait.NeverStop)\n\n\tif kl.kubeClient != nil {\n\t\t// Start syncing node status immediately, this may set up things the runtime needs to run.\n\t\tgo wait.Until(kl.syncNodeStatus, kl.nodeStatusUpdateFrequency, wait.NeverStop)\n\t\tgo kl.fastStatusUpdateOnce()\n\n\t\t// start syncing lease\n\t\tif utilfeature.DefaultFeatureGate.Enabled(features.NodeLease) {\n\t\t\tgo kl.nodeLeaseController.Run(wait.NeverStop)\n\t\t}\n\t}\n\tgo wait.Until(kl.updateRuntimeUp, 5*time.Second, wait.NeverStop)\n\n\t// Start loop to sync iptables util rules\n\tif kl.makeIPTablesUtilChains {\n\t\tgo wait.Until(kl.syncNetworkUtil, 1*time.Minute, wait.NeverStop)\n\t}\n\n\t// Start a goroutine responsible for killing pods (that are not properly\n\t// handled by pod workers).\n\tgo wait.Until(kl.podKiller, 1*time.Second, wait.NeverStop)\n\n\t// Start component sync loops.\n\tkl.statusManager.Start()\n\tkl.probeManager.Start()\n\n\t// Start syncing RuntimeClasses if enabled.\n\tif kl.runtimeClassManager != nil {\n\t\tgo kl.runtimeClassManager.Run(wait.NeverStop)\n\t}\n\n\t// Start the pod lifecycle event generator.\n\tkl.pleg.Start()\n\n\tkl.syncLoop(updates, kl)\n}\n```\nsyncLoop 是 kubelet 的主循环方法，它从不同的管道(FILE,URL, API-SERVER)监听 pod 的变化，并把它们汇聚起来。当有新的变化发生时，它会调用对应的函数，保证 Pod 处于期望的状态。\n\n\n```\nfunc (kl *Kubelet) syncLoop(updates <-chan kubetypes.PodUpdate, handler SyncHandler) {\n\tglog.Info(\"Starting kubelet main sync loop.\")\n\n\t// syncTicker 每秒检测一次是否有需要同步的 pod workers\n\tsyncTicker := time.NewTicker(time.Second)\n\tdefer syncTicker.Stop()\n\thousekeepingTicker := time.NewTicker(housekeepingPeriod)\n\tdefer housekeepingTicker.Stop()\n\tplegCh := kl.pleg.Watch()\n\tconst (\n\t\tbase   = 100 * time.Millisecond\n\t\tmax    = 5 * time.Second\n\t\tfactor = 2\n\t)\n\tduration := base\n\tfor {\n\t\tif rs := kl.runtimeState.runtimeErrors(); len(rs) != 0 {\n\t\t\tglog.Infof(\"skipping pod synchronization - %v\", rs)\n\t\t\t// exponential backoff\n\t\t\ttime.Sleep(duration)\n\t\t\tduration = time.Duration(math.Min(float64(max), factor*float64(duration)))\n\t\t\tcontinue\n\t\t}\n\t\t// reset backoff if we have a success\n\t\tduration = base\n\n\t\tkl.syncLoopMonitor.Store(kl.clock.Now())\n\t\t// \n\t\tif !kl.syncLoopIteration(updates, handler, syncTicker.C, housekeepingTicker.C, plegCh) {\n\t\t\tbreak\n\t\t}\n\t\tkl.syncLoopMonitor.Store(kl.clock.Now())\n\t}\n}\n```\n\nsyncLoopIteration()  方法对多个管道进行遍历，如果 pod 发生变化，则会调用相应的 Handler，在 Handler 中通过调用 dispatchWork 分发任务。\n\n\n## 总结\n\n本篇文章主要讲述了 kubelet 组件从加载配置到初始化内部的各个模块再到启动 kubelet 服务的整个流程，上面的时序图能清楚的看到函数之间的调用关系，但是其中每个组件具体的工作方式以及组件之间的交互方式还不得而知，后面会一探究竟。\n\n参考：\n[kubernetes node components – kubelet](http://www.sel.zju.edu.cn/?p=595)\n[Kubelet 源码分析(一):启动流程分析](https://segmentfault.com/a/1190000008267351)\n[kubelet 源码分析：启动流程](https://cizixs.com/2017/06/06/kubelet-source-code-analysis-part-1/)\n[kubernetes 的 kubelet 的工作过程](https://www.lijiaocn.com/%E9%A1%B9%E7%9B%AE/2017/05/02/Kubernetes-kubelet.html)\n[kubelet 内部实现解析](https://fatsheep9146.github.io/2018/07/08/kubelet%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0%E8%A7%A3%E6%9E%90/)\n","slug":"kubelet_init","published":1,"updated":"2019-07-21T09:47:36.619Z","_id":"cjycnhjm8000z5vwnt0r4ob4g","comments":1,"layout":"post","photos":[],"link":"","content":"<p>上篇文章（<a href=\"https://blog.tianfeiyu.com/2018/12/16/kubelet-modules/\" target=\"_blank\" rel=\"noopener\">kubelet 架构浅析</a> ）已经介绍过 kubelet 在整个集群架构中的功能以及自身各模块的用途，本篇文章主要介绍 kubelet 的启动流程。</p>\n<blockquote>\n<p>kubernetes 版本： v1.12 </p>\n</blockquote>\n<h2 id=\"kubelet-启动流程\"><a href=\"#kubelet-启动流程\" class=\"headerlink\" title=\"kubelet 启动流程\"></a>kubelet 启动流程</h2><p>kubelet 代码结构:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  kubernetes git:(release-1.12) ✗ tree cmd/kubelet</span><br><span class=\"line\">cmd/kubelet</span><br><span class=\"line\">├── BUILD</span><br><span class=\"line\">├── OWNERS</span><br><span class=\"line\">├── app</span><br><span class=\"line\">│   ├── BUILD</span><br><span class=\"line\">│   ├── OWNERS</span><br><span class=\"line\">│   ├── auth.go</span><br><span class=\"line\">│   ├── init_others.go</span><br><span class=\"line\">│   ├── init_windows.go</span><br><span class=\"line\">│   ├── options</span><br><span class=\"line\">│   │   ├── BUILD</span><br><span class=\"line\">│   │   ├── container_runtime.go</span><br><span class=\"line\">│   │   ├── globalflags.go</span><br><span class=\"line\">│   │   ├── globalflags_linux.go</span><br><span class=\"line\">│   │   ├── globalflags_other.go</span><br><span class=\"line\">│   │   ├── options.go</span><br><span class=\"line\">│   │   ├── options_test.go</span><br><span class=\"line\">│   │   ├── osflags_others.go</span><br><span class=\"line\">│   │   └── osflags_windows.go</span><br><span class=\"line\">│   ├── plugins.go</span><br><span class=\"line\">│   ├── server.go</span><br><span class=\"line\">│   ├── server_linux.go</span><br><span class=\"line\">│   ├── server_test.go</span><br><span class=\"line\">│   └── server_unsupported.go</span><br><span class=\"line\">└── kubelet.go</span><br><span class=\"line\"></span><br><span class=\"line\">2 directories, 22 files</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://cdn.tianfeiyu.com/kubelet-3.png\" alt=\"kubelet 启动流程时序图\"></p>\n<h4 id=\"1、kubelet-入口函数-main（cmd-kubelet-kubelet-go）\"><a href=\"#1、kubelet-入口函数-main（cmd-kubelet-kubelet-go）\" class=\"headerlink\" title=\"1、kubelet 入口函数 main（cmd/kubelet/kubelet.go）\"></a>1、kubelet 入口函数 main（cmd/kubelet/kubelet.go）</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\trand.Seed(time.Now().UTC().UnixNano())</span><br><span class=\"line\"></span><br><span class=\"line\">\tcommand := app.NewKubeletCommand(server.SetupSignalHandler())</span><br><span class=\"line\">\tlogs.InitLogs()</span><br><span class=\"line\">\tdefer logs.FlushLogs()</span><br><span class=\"line\"></span><br><span class=\"line\">\tif err := command.Execute(); err != nil &#123;</span><br><span class=\"line\">\t\tfmt.Fprintf(os.Stderr, &quot;%v\\n&quot;, err)</span><br><span class=\"line\">\t\tos.Exit(1)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2、初始化-kubelet-配置（cmd-kubelet-app-server-go）\"><a href=\"#2、初始化-kubelet-配置（cmd-kubelet-app-server-go）\" class=\"headerlink\" title=\"2、初始化 kubelet 配置（cmd/kubelet/app/server.go）\"></a>2、初始化 kubelet 配置（cmd/kubelet/app/server.go）</h4><p>NewKubeletCommand() 函数主要负责获取配置文件中的参数，校验参数以及为参数设置默认值。  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// NewKubeletCommand creates a *cobra.Command object with default parameters</span><br><span class=\"line\">func NewKubeletCommand(stopCh &lt;-chan struct&#123;&#125;) *cobra.Command &#123;</span><br><span class=\"line\">    cleanFlagSet := pflag.NewFlagSet(componentKubelet, pflag.ContinueOnError)</span><br><span class=\"line\">    cleanFlagSet.SetNormalizeFunc(flag.WordSepNormalizeFunc)</span><br><span class=\"line\">    // Kubelet配置分两部分:</span><br><span class=\"line\">    // KubeletFlag: 指那些不允许在 kubelet 运行时进行修改的配置集，或者不能在集群中各个 Nodes 之间共享的配置集。</span><br><span class=\"line\">    // KubeletConfiguration: 指可以在集群中各个Nodes之间共享的配置集，可以进行动态配置。</span><br><span class=\"line\">    kubeletFlags := options.NewKubeletFlags()</span><br><span class=\"line\">\tkubeletConfig, err := options.NewKubeletConfiguration()</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\tcmd := &amp;cobra.Command&#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t\tRun: func(cmd *cobra.Command, args []string) &#123;</span><br><span class=\"line\">\t\t\t// 读取 kubelet 配置文件</span><br><span class=\"line\">\t\t\tif configFile := kubeletFlags.KubeletConfigFile; len(configFile) &gt; 0 &#123;</span><br><span class=\"line\">\t\t\t\tkubeletConfig, err = loadConfigFile(configFile)</span><br><span class=\"line\">\t\t\t\tif err != nil &#123;</span><br><span class=\"line\">\t\t\t\t\tglog.Fatal(err)</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t...</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t// 校验 kubelet 参数</span><br><span class=\"line\">\t\t\tif err := kubeletconfigvalidation.ValidateKubeletConfiguration(kubeletConfig); err != nil &#123;</span><br><span class=\"line\">\t\t\t\tglog.Fatal(err)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t...</span><br><span class=\"line\">\t\t\t// 此处初始化了 kubeletDeps</span><br><span class=\"line\">\t\t\tkubeletDeps, err := UnsecuredDependencies(kubeletServer)</span><br><span class=\"line\">\t\t\tif err != nil &#123;</span><br><span class=\"line\">\t\t\t\tglog.Fatal(err)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t...</span><br><span class=\"line\">\t\t\t// 启动程序</span><br><span class=\"line\">\t\t\tif err := Run(kubeletServer, kubeletDeps, stopCh); err != nil &#123;</span><br><span class=\"line\">\t\t\t\tglog.Fatal(err)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">\treturn cmd</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>kubeletDeps 包含 kubelet 运行所必须的配置，是为了实现 dependency injection，其目的是为了把 kubelet 依赖的组件对象作为参数传进来，这样可以控制 kubelet 的行为。主要包括监控功能（cadvisor），cgroup 管理功能（containerManager）等。</p>\n<p>NewKubeletCommand() 会调用 Run() 函数，Run() 中主要调用 run() 函数进行一些准备事项。</p>\n<h4 id=\"3、创建和-apiserver-通信的对象（cmd-kubelet-app-server-go）\"><a href=\"#3、创建和-apiserver-通信的对象（cmd-kubelet-app-server-go）\" class=\"headerlink\" title=\"3、创建和 apiserver 通信的对象（cmd/kubelet/app/server.go）\"></a>3、创建和 apiserver 通信的对象（cmd/kubelet/app/server.go）</h4><p>run() 函数的主要功能：</p>\n<ul>\n<li>1、创建 kubeClient，evnetClient 用来和 apiserver 通信。创建 heartbeatClient 向 apiserver 上报心跳状态。</li>\n<li>2、为 kubeDeps 设定一些默认值。</li>\n<li>3、启动监听 Healthz 端口的 http server，默认端口是 10248。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func run(s *options.KubeletServer, kubeDeps *kubelet.Dependencies, stopCh &lt;-chan struct&#123;&#125;) (err error) &#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t// 判断 kubelet 的启动模式</span><br><span class=\"line\">\tif standaloneMode &#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t&#125; else if kubeDeps.KubeClient == nil || kubeDeps.EventClient == nil || kubeDeps.HeartbeatClient == nil || kubeDeps.DynamicKubeClient == nil &#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t\t// 创建对象 kubeClient</span><br><span class=\"line\">\t\tkubeClient, err = clientset.NewForConfig(clientConfig)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">        // 创建对象 evnetClient</span><br><span class=\"line\">\t\teventClient, err = v1core.NewForConfig(&amp;eventClientConfig)</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t\t// heartbeatClient 上报状态</span><br><span class=\"line\">\t\theartbeatClient, err = clientset.NewForConfig(&amp;heartbeatClientConfig)</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 为 kubeDeps 设定一些默认值</span><br><span class=\"line\">\tif kubeDeps.Auth == nil &#123;</span><br><span class=\"line\">\t\t\tauth, err := BuildAuth(nodeName, kubeDeps.KubeClient, s.KubeletConfiguration)</span><br><span class=\"line\">\t\t\tif err != nil &#123;</span><br><span class=\"line\">\t\t\t\treturn err</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tkubeDeps.Auth = auth</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tif kubeDeps.CAdvisorInterface == nil &#123;</span><br><span class=\"line\">\t\t\timageFsInfoProvider := cadvisor.NewImageFsInfoProvider(s.ContainerRuntime, s.RemoteRuntimeEndpoint)</span><br><span class=\"line\">\t\t\tkubeDeps.CAdvisorInterface, err = cadvisor.New(imageFsInfoProvider, s.RootDirectory, cadvisor.UsingLegacyCadvisorStats(s.ContainerRuntime, s.RemoteRuntimeEndpoint))</span><br><span class=\"line\">\t\t\tif err != nil &#123;</span><br><span class=\"line\">\t\t\t\treturn err</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// </span><br><span class=\"line\">\tif err := RunKubelet(s, kubeDeps, s.RunOnce); err != nil &#123;</span><br><span class=\"line\">\t\t\treturn err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t// 启动监听 Healthz 端口的 http server  </span><br><span class=\"line\">\tif s.HealthzPort &gt; 0 &#123;</span><br><span class=\"line\">\t\thealthz.DefaultHealthz()</span><br><span class=\"line\">\t\tgo wait.Until(func() &#123;</span><br><span class=\"line\">\t\t\terr := http.ListenAndServe(net.JoinHostPort(s.HealthzBindAddress, strconv.Itoa(int(s.HealthzPort))), nil)</span><br><span class=\"line\">\t\t\tif err != nil &#123;</span><br><span class=\"line\">\t\t\t\tglog.Errorf(&quot;Starting health server failed: %v&quot;, err)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;, 5*time.Second, wait.NeverStop)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>kubelet 对 pod 资源的获取方式有三种：第一种是通过文件获得，文件一般放在 /etc/kubernetes/manifests 目录下面；第二种也是通过文件过得，只不过文件是通过 URL 获取的；第三种是通过 watch kube-apiserver 获取。其中前两种模式下，我们称 kubelet 运行在 standalone 模式下，运行在 standalone 模式下的 kubelet 一般用于调试某些功能。</p>\n<p>run() 中调用 RunKubelet() 函数进行后续操作。</p>\n<h4 id=\"4、初始化-kubelet-组件内部的模块（cmd-kubelet-app-server-go）\"><a href=\"#4、初始化-kubelet-组件内部的模块（cmd-kubelet-app-server-go）\" class=\"headerlink\" title=\"4、初始化 kubelet 组件内部的模块（cmd/kubelet/app/server.go）\"></a>4、初始化 kubelet 组件内部的模块（cmd/kubelet/app/server.go）</h4><p>RunKubelet()  主要功能：</p>\n<ul>\n<li>1、初始化 kubelet 组件中的各个模块，创建出 kubelet 对象。</li>\n<li>2、启动垃圾回收服务。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func RunKubelet(kubeServer *options.KubeletServer, kubeDeps *kubelet.Dependencies, runOnce bool) error &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\"> \t// 初始化 kubelet 内部模块</span><br><span class=\"line\">\tk, err := CreateAndInitKubelet(&amp;kubeServer.KubeletConfiguration,</span><br><span class=\"line\">\t\tkubeDeps,</span><br><span class=\"line\">\t\t&amp;kubeServer.ContainerRuntimeOptions,</span><br><span class=\"line\">\t\tkubeServer.ContainerRuntime,</span><br><span class=\"line\">\t\tkubeServer.RuntimeCgroups,</span><br><span class=\"line\">\t\tkubeServer.HostnameOverride,</span><br><span class=\"line\">\t\tkubeServer.NodeIP,</span><br><span class=\"line\">\t\tkubeServer.ProviderID,</span><br><span class=\"line\">\t\tkubeServer.CloudProvider,</span><br><span class=\"line\">\t\tkubeServer.CertDirectory,</span><br><span class=\"line\">\t\tkubeServer.RootDirectory,</span><br><span class=\"line\">\t\tkubeServer.RegisterNode,</span><br><span class=\"line\">\t\tkubeServer.RegisterWithTaints,</span><br><span class=\"line\">\t\tkubeServer.AllowedUnsafeSysctls,</span><br><span class=\"line\">\t\tkubeServer.RemoteRuntimeEndpoint,</span><br><span class=\"line\">\t\tkubeServer.RemoteImageEndpoint,</span><br><span class=\"line\">\t\tkubeServer.ExperimentalMounterPath,</span><br><span class=\"line\">\t\tkubeServer.ExperimentalKernelMemcgNotification,</span><br><span class=\"line\">\t\tkubeServer.ExperimentalCheckNodeCapabilitiesBeforeMount,</span><br><span class=\"line\">\t\tkubeServer.ExperimentalNodeAllocatableIgnoreEvictionThreshold,</span><br><span class=\"line\">\t\tkubeServer.MinimumGCAge,</span><br><span class=\"line\">\t\tkubeServer.MaxPerPodContainerCount,</span><br><span class=\"line\">\t\tkubeServer.MaxContainerCount,</span><br><span class=\"line\">\t\tkubeServer.MasterServiceNamespace,</span><br><span class=\"line\">\t\tkubeServer.RegisterSchedulable,</span><br><span class=\"line\">\t\tkubeServer.NonMasqueradeCIDR,</span><br><span class=\"line\">\t\tkubeServer.KeepTerminatedPodVolumes,</span><br><span class=\"line\">\t\tkubeServer.NodeLabels,</span><br><span class=\"line\">\t\tkubeServer.SeccompProfileRoot,</span><br><span class=\"line\">\t\tkubeServer.BootstrapCheckpointPath,</span><br><span class=\"line\">\t\tkubeServer.NodeStatusMaxImages)</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\treturn fmt.Errorf(&quot;failed to create kubelet: %v&quot;, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t...</span><br><span class=\"line\">\tif runOnce &#123;</span><br><span class=\"line\">\t\tif _, err := k.RunOnce(podCfg.Updates()); err != nil &#123;</span><br><span class=\"line\">\t\t\treturn fmt.Errorf(&quot;runonce failed: %v&quot;, err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tglog.Infof(&quot;Started kubelet as runonce&quot;)</span><br><span class=\"line\">\t&#125; else &#123;</span><br><span class=\"line\">        // </span><br><span class=\"line\">\t\tstartKubelet(k, podCfg, &amp;kubeServer.KubeletConfiguration, kubeDeps, kubeServer.EnableServer)</span><br><span class=\"line\">\t\tglog.Infof(&quot;Started kubelet&quot;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func CreateAndInitKubelet(...)&#123;</span><br><span class=\"line\">\t// NewMainKubelet 实例化一个 kubelet 对象，并对 kubelet 内部各个模块进行初始化</span><br><span class=\"line\">\tk, err = kubelet.NewMainKubelet(kubeCfg,</span><br><span class=\"line\">\t\tkubeDeps,</span><br><span class=\"line\">\t\tcrOptions,</span><br><span class=\"line\">\t\tcontainerRuntime,</span><br><span class=\"line\">\t\truntimeCgroups,</span><br><span class=\"line\">\t\thostnameOverride,</span><br><span class=\"line\">\t\tnodeIP,</span><br><span class=\"line\">\t\tproviderID,</span><br><span class=\"line\">\t\tcloudProvider,</span><br><span class=\"line\">\t\tcertDirectory,</span><br><span class=\"line\">\t\trootDirectory,</span><br><span class=\"line\">\t\tregisterNode,</span><br><span class=\"line\">\t\tregisterWithTaints,</span><br><span class=\"line\">\t\tallowedUnsafeSysctls,</span><br><span class=\"line\">\t\tremoteRuntimeEndpoint,</span><br><span class=\"line\">\t\tremoteImageEndpoint,</span><br><span class=\"line\">\t\texperimentalMounterPath,</span><br><span class=\"line\">\t\texperimentalKernelMemcgNotification,</span><br><span class=\"line\">\t\texperimentalCheckNodeCapabilitiesBeforeMount,</span><br><span class=\"line\">\t\texperimentalNodeAllocatableIgnoreEvictionThreshold,</span><br><span class=\"line\">\t\tminimumGCAge,</span><br><span class=\"line\">\t\tmaxPerPodContainerCount,</span><br><span class=\"line\">\t\tmaxContainerCount,</span><br><span class=\"line\">\t\tmasterServiceNamespace,</span><br><span class=\"line\">\t\tregisterSchedulable,</span><br><span class=\"line\">\t\tnonMasqueradeCIDR,</span><br><span class=\"line\">\t\tkeepTerminatedPodVolumes,</span><br><span class=\"line\">\t\tnodeLabels,</span><br><span class=\"line\">\t\tseccompProfileRoot,</span><br><span class=\"line\">\t\tbootstrapCheckpointPath,</span><br><span class=\"line\">\t\tnodeStatusMaxImages)</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\treturn nil, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 通知 apiserver kubelet 启动了</span><br><span class=\"line\">\tk.BirthCry()</span><br><span class=\"line\">\t// 启动垃圾回收服务</span><br><span class=\"line\">\tk.StartGarbageCollection()</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn k, nil</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func NewMainKubelet(kubeCfg *kubeletconfiginternal.KubeletConfiguration,...)&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">\tif kubeDeps.PodConfig == nil &#123;</span><br><span class=\"line\">\t\tvar err error</span><br><span class=\"line\">\t\t// 初始化 makePodSourceConfig，监听 pod 元数据的来源(FILE, URL, api-server)，将不同 source 的 pod configuration 合并到一个结构中</span><br><span class=\"line\">\t\tkubeDeps.PodConfig, err = makePodSourceConfig(kubeCfg, kubeDeps, nodeName, bootstrapCheckpointPath)</span><br><span class=\"line\">\t\tif err != nil &#123;</span><br><span class=\"line\">\t\t\treturn nil, err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    // kubelet 服务端口，默认 10250</span><br><span class=\"line\">\tdaemonEndpoints := &amp;v1.NodeDaemonEndpoints&#123;</span><br><span class=\"line\">\t\tKubeletEndpoint: v1.DaemonEndpoint&#123;Port: kubeCfg.Port&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 使用 reflector 把 ListWatch 得到的服务信息实时同步到 serviceStore 对象中</span><br><span class=\"line\">\tserviceIndexer := cache.NewIndexer(cache.MetaNamespaceKeyFunc, cache.Indexers&#123;cache.NamespaceIndex: cache.MetaNamespaceIndexFunc&#125;)</span><br><span class=\"line\">\tif kubeDeps.KubeClient != nil &#123;</span><br><span class=\"line\">\t\tserviceLW := cache.NewListWatchFromClient(kubeDeps.KubeClient.CoreV1().RESTClient(), &quot;services&quot;, metav1.NamespaceAll, fields.Everything())</span><br><span class=\"line\">\t\tr := cache.NewReflector(serviceLW, &amp;v1.Service&#123;&#125;, serviceIndexer, 0)</span><br><span class=\"line\">\t\tgo r.Run(wait.NeverStop)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tserviceLister := corelisters.NewServiceLister(serviceIndexer)</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 使用 reflector 把 ListWatch 得到的节点信息实时同步到  nodeStore 对象中</span><br><span class=\"line\">\tnodeIndexer := cache.NewIndexer(cache.MetaNamespaceKeyFunc, cache.Indexers&#123;&#125;)</span><br><span class=\"line\">\tif kubeDeps.KubeClient != nil &#123;</span><br><span class=\"line\">\t\tfieldSelector := fields.Set&#123;api.ObjectNameField: string(nodeName)&#125;.AsSelector()</span><br><span class=\"line\">\t\tnodeLW := cache.NewListWatchFromClient(kubeDeps.KubeClient.CoreV1().RESTClient(), &quot;nodes&quot;, metav1.NamespaceAll, fieldSelector)</span><br><span class=\"line\">\t\tr := cache.NewReflector(nodeLW, &amp;v1.Node&#123;&#125;, nodeIndexer, 0)</span><br><span class=\"line\">\t\tgo r.Run(wait.NeverStop)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tnodeInfo := &amp;predicates.CachedNodeInfo&#123;NodeLister: corelisters.NewNodeLister(nodeIndexer)&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t// node 资源不足时的驱逐策略的设定</span><br><span class=\"line\">\tthresholds, err := eviction.ParseThresholdConfig(enforceNodeAllocatable, kubeCfg.EvictionHard, kubeCfg.EvictionSoft, kubeCfg.EvictionSoftGracePeriod, kubeCfg.EvictionMinimumReclaim)</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\treturn nil, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tevictionConfig := eviction.Config&#123;</span><br><span class=\"line\">\t\tPressureTransitionPeriod: kubeCfg.EvictionPressureTransitionPeriod.Duration,</span><br><span class=\"line\">\t\tMaxPodGracePeriodSeconds: int64(kubeCfg.EvictionMaxPodGracePeriod),</span><br><span class=\"line\">\t\tThresholds:               thresholds,</span><br><span class=\"line\">\t\tKernelMemcgNotification:  experimentalKernelMemcgNotification,</span><br><span class=\"line\">\t\tPodCgroupRoot:            kubeDeps.ContainerManager.GetPodCgroupRoot(),</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    // 容器引用的管理</span><br><span class=\"line\">\tcontainerRefManager := kubecontainer.NewRefManager()</span><br><span class=\"line\">    // oom 监控</span><br><span class=\"line\">\toomWatcher := NewOOMWatcher(kubeDeps.CAdvisorInterface, kubeDeps.Recorder)</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 根据配置信息和各种对象创建 Kubelet 实例</span><br><span class=\"line\">\tklet := &amp;Kubelet&#123;</span><br><span class=\"line\">\t\thostname:                       hostname,</span><br><span class=\"line\">\t\thostnameOverridden:             len(hostnameOverride) &gt; 0,</span><br><span class=\"line\">\t\tnodeName:                       nodeName,</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// 从 cAdvisor 获取当前机器的信息</span><br><span class=\"line\">\tmachineInfo, err := klet.cadvisor.MachineInfo()</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 对 pod 的管理（如: 增删改等）</span><br><span class=\"line\">\tklet.podManager = kubepod.NewBasicPodManager(kubepod.NewBasicMirrorClient(klet.kubeClient), secretManager, configMapManager, checkpointManager)</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 容器运行时管理</span><br><span class=\"line\">\truntime, err := kuberuntime.NewKubeGenericRuntimeManager(...)</span><br><span class=\"line\"></span><br><span class=\"line\">\t// pleg</span><br><span class=\"line\">\tklet.pleg = pleg.NewGenericPLEG(klet.containerRuntime, plegChannelCapacity, plegRelistPeriod, klet.podCache, clock.RealClock&#123;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 创建 containerGC 对象，进行周期性的容器清理工作</span><br><span class=\"line\">\tcontainerGC, err := kubecontainer.NewContainerGC(klet.containerRuntime, containerGCPolicy, klet.sourcesReady)</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 创建 imageManager 管理镜像</span><br><span class=\"line\">\timageManager, err := images.NewImageGCManager(klet.containerRuntime, klet.StatsProvider, kubeDeps.Recorder, nodeRef, imageGCPolicy, crOptions.PodSandboxImage)</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// statusManager 实时检测节点上 pod 的状态，并更新到 apiserver 对应的 pod</span><br><span class=\"line\">\tklet.statusManager = status.NewManager(klet.kubeClient, klet.podManager, klet)</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 探针管理</span><br><span class=\"line\">\tklet.probeManager = prober.NewManager(...)</span><br><span class=\"line\"></span><br><span class=\"line\">    // token 管理</span><br><span class=\"line\">\ttokenManager := token.NewManager(kubeDeps.KubeClient)</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 磁盘管理</span><br><span class=\"line\">\tklet.volumeManager = volumemanager.NewVolumeManager()</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// 将 syncPod() 注入到 podWorkers 中</span><br><span class=\"line\">\tklet.podWorkers = newPodWorkers(klet.syncPod, kubeDeps.Recorder, klet.workQueue, klet.resyncInterval, backOffPeriod, klet.podCache)</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 容器驱逐策略管理</span><br><span class=\"line\">\tevictionManager, evictionAdmitHandler := eviction.NewManager(klet.resourceAnalyzer, evictionConfig, killPodNow(klet.podWorkers, kubeDeps.Recorder), klet.imageManager, klet.containerGC, kubeDeps.Recorder, nodeRef, klet.clock)</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>RunKubelet 最后会调用 startKubelet() 进行后续的操作。</p>\n<h4 id=\"5、启动-kubelet-内部的模块及服务（cmd-kubelet-app-server-go）\"><a href=\"#5、启动-kubelet-内部的模块及服务（cmd-kubelet-app-server-go）\" class=\"headerlink\" title=\"5、启动 kubelet 内部的模块及服务（cmd/kubelet/app/server.go）\"></a>5、启动 kubelet 内部的模块及服务（cmd/kubelet/app/server.go）</h4><p>startKubelet()  的主要功能：</p>\n<ul>\n<li>1、以 goroutine 方式启动 kubelet 中的各个模块。</li>\n<li>2、启动 kubelet http server。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func startKubelet(k kubelet.Bootstrap, podCfg *config.PodConfig, kubeCfg *kubeletconfiginternal.KubeletConfiguration, kubeDeps *kubelet.Dependencies, enableServer bool) &#123;</span><br><span class=\"line\">\tgo wait.Until(func() &#123;</span><br><span class=\"line\">\t\t// 以 goroutine 方式启动 kubelet 中的各个模块</span><br><span class=\"line\">\t\tk.Run(podCfg.Updates())</span><br><span class=\"line\">\t&#125;, 0, wait.NeverStop)</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 启动 kubelet http server\t</span><br><span class=\"line\">\tif enableServer &#123;</span><br><span class=\"line\">\t\tgo k.ListenAndServe(net.ParseIP(kubeCfg.Address), uint(kubeCfg.Port), kubeDeps.TLSOptions, kubeDeps.Auth, kubeCfg.EnableDebuggingHandlers, kubeCfg.EnableContentionProfiling)</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tif kubeCfg.ReadOnlyPort &gt; 0 &#123;</span><br><span class=\"line\">\t\tgo k.ListenAndServeReadOnly(net.ParseIP(kubeCfg.Address), uint(kubeCfg.ReadOnlyPort))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Run starts the kubelet reacting to config updates</span><br><span class=\"line\">func (kl *Kubelet) Run(updates &lt;-chan kubetypes.PodUpdate) &#123;</span><br><span class=\"line\">\tif kl.logServer == nil &#123;</span><br><span class=\"line\">\t\tkl.logServer = http.StripPrefix(&quot;/logs/&quot;, http.FileServer(http.Dir(&quot;/var/log/&quot;)))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tif kl.kubeClient == nil &#123;</span><br><span class=\"line\">\t\tglog.Warning(&quot;No api server defined - no node status update will be sent.&quot;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// Start the cloud provider sync manager</span><br><span class=\"line\">\tif kl.cloudResourceSyncManager != nil &#123;</span><br><span class=\"line\">\t\tgo kl.cloudResourceSyncManager.Run(wait.NeverStop)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tif err := kl.initializeModules(); err != nil &#123;</span><br><span class=\"line\">\t\tkl.recorder.Eventf(kl.nodeRef, v1.EventTypeWarning, events.KubeletSetupFailed, err.Error())</span><br><span class=\"line\">\t\tglog.Fatal(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// Start volume manager</span><br><span class=\"line\">\tgo kl.volumeManager.Run(kl.sourcesReady, wait.NeverStop)</span><br><span class=\"line\"></span><br><span class=\"line\">\tif kl.kubeClient != nil &#123;</span><br><span class=\"line\">\t\t// Start syncing node status immediately, this may set up things the runtime needs to run.</span><br><span class=\"line\">\t\tgo wait.Until(kl.syncNodeStatus, kl.nodeStatusUpdateFrequency, wait.NeverStop)</span><br><span class=\"line\">\t\tgo kl.fastStatusUpdateOnce()</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// start syncing lease</span><br><span class=\"line\">\t\tif utilfeature.DefaultFeatureGate.Enabled(features.NodeLease) &#123;</span><br><span class=\"line\">\t\t\tgo kl.nodeLeaseController.Run(wait.NeverStop)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tgo wait.Until(kl.updateRuntimeUp, 5*time.Second, wait.NeverStop)</span><br><span class=\"line\"></span><br><span class=\"line\">\t// Start loop to sync iptables util rules</span><br><span class=\"line\">\tif kl.makeIPTablesUtilChains &#123;</span><br><span class=\"line\">\t\tgo wait.Until(kl.syncNetworkUtil, 1*time.Minute, wait.NeverStop)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// Start a goroutine responsible for killing pods (that are not properly</span><br><span class=\"line\">\t// handled by pod workers).</span><br><span class=\"line\">\tgo wait.Until(kl.podKiller, 1*time.Second, wait.NeverStop)</span><br><span class=\"line\"></span><br><span class=\"line\">\t// Start component sync loops.</span><br><span class=\"line\">\tkl.statusManager.Start()</span><br><span class=\"line\">\tkl.probeManager.Start()</span><br><span class=\"line\"></span><br><span class=\"line\">\t// Start syncing RuntimeClasses if enabled.</span><br><span class=\"line\">\tif kl.runtimeClassManager != nil &#123;</span><br><span class=\"line\">\t\tgo kl.runtimeClassManager.Run(wait.NeverStop)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// Start the pod lifecycle event generator.</span><br><span class=\"line\">\tkl.pleg.Start()</span><br><span class=\"line\"></span><br><span class=\"line\">\tkl.syncLoop(updates, kl)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>syncLoop 是 kubelet 的主循环方法，它从不同的管道(FILE,URL, API-SERVER)监听 pod 的变化，并把它们汇聚起来。当有新的变化发生时，它会调用对应的函数，保证 Pod 处于期望的状态。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (kl *Kubelet) syncLoop(updates &lt;-chan kubetypes.PodUpdate, handler SyncHandler) &#123;</span><br><span class=\"line\">\tglog.Info(&quot;Starting kubelet main sync loop.&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">\t// syncTicker 每秒检测一次是否有需要同步的 pod workers</span><br><span class=\"line\">\tsyncTicker := time.NewTicker(time.Second)</span><br><span class=\"line\">\tdefer syncTicker.Stop()</span><br><span class=\"line\">\thousekeepingTicker := time.NewTicker(housekeepingPeriod)</span><br><span class=\"line\">\tdefer housekeepingTicker.Stop()</span><br><span class=\"line\">\tplegCh := kl.pleg.Watch()</span><br><span class=\"line\">\tconst (</span><br><span class=\"line\">\t\tbase   = 100 * time.Millisecond</span><br><span class=\"line\">\t\tmax    = 5 * time.Second</span><br><span class=\"line\">\t\tfactor = 2</span><br><span class=\"line\">\t)</span><br><span class=\"line\">\tduration := base</span><br><span class=\"line\">\tfor &#123;</span><br><span class=\"line\">\t\tif rs := kl.runtimeState.runtimeErrors(); len(rs) != 0 &#123;</span><br><span class=\"line\">\t\t\tglog.Infof(&quot;skipping pod synchronization - %v&quot;, rs)</span><br><span class=\"line\">\t\t\t// exponential backoff</span><br><span class=\"line\">\t\t\ttime.Sleep(duration)</span><br><span class=\"line\">\t\t\tduration = time.Duration(math.Min(float64(max), factor*float64(duration)))</span><br><span class=\"line\">\t\t\tcontinue</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t// reset backoff if we have a success</span><br><span class=\"line\">\t\tduration = base</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tkl.syncLoopMonitor.Store(kl.clock.Now())</span><br><span class=\"line\">\t\t// </span><br><span class=\"line\">\t\tif !kl.syncLoopIteration(updates, handler, syncTicker.C, housekeepingTicker.C, plegCh) &#123;</span><br><span class=\"line\">\t\t\tbreak</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tkl.syncLoopMonitor.Store(kl.clock.Now())</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>syncLoopIteration()  方法对多个管道进行遍历，如果 pod 发生变化，则会调用相应的 Handler，在 Handler 中通过调用 dispatchWork 分发任务。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>本篇文章主要讲述了 kubelet 组件从加载配置到初始化内部的各个模块再到启动 kubelet 服务的整个流程，上面的时序图能清楚的看到函数之间的调用关系，但是其中每个组件具体的工作方式以及组件之间的交互方式还不得而知，后面会一探究竟。</p>\n<p>参考：<br><a href=\"http://www.sel.zju.edu.cn/?p=595\" target=\"_blank\" rel=\"noopener\">kubernetes node components – kubelet</a><br><a href=\"https://segmentfault.com/a/1190000008267351\" target=\"_blank\" rel=\"noopener\">Kubelet 源码分析(一):启动流程分析</a><br><a href=\"https://cizixs.com/2017/06/06/kubelet-source-code-analysis-part-1/\" target=\"_blank\" rel=\"noopener\">kubelet 源码分析：启动流程</a><br><a href=\"https://www.lijiaocn.com/%E9%A1%B9%E7%9B%AE/2017/05/02/Kubernetes-kubelet.html\" target=\"_blank\" rel=\"noopener\">kubernetes 的 kubelet 的工作过程</a><br><a href=\"https://fatsheep9146.github.io/2018/07/08/kubelet%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0%E8%A7%A3%E6%9E%90/\" target=\"_blank\" rel=\"noopener\">kubelet 内部实现解析</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>上篇文章（<a href=\"https://blog.tianfeiyu.com/2018/12/16/kubelet-modules/\" target=\"_blank\" rel=\"noopener\">kubelet 架构浅析</a> ）已经介绍过 kubelet 在整个集群架构中的功能以及自身各模块的用途，本篇文章主要介绍 kubelet 的启动流程。</p>\n<blockquote>\n<p>kubernetes 版本： v1.12 </p>\n</blockquote>\n<h2 id=\"kubelet-启动流程\"><a href=\"#kubelet-启动流程\" class=\"headerlink\" title=\"kubelet 启动流程\"></a>kubelet 启动流程</h2><p>kubelet 代码结构:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  kubernetes git:(release-1.12) ✗ tree cmd/kubelet</span><br><span class=\"line\">cmd/kubelet</span><br><span class=\"line\">├── BUILD</span><br><span class=\"line\">├── OWNERS</span><br><span class=\"line\">├── app</span><br><span class=\"line\">│   ├── BUILD</span><br><span class=\"line\">│   ├── OWNERS</span><br><span class=\"line\">│   ├── auth.go</span><br><span class=\"line\">│   ├── init_others.go</span><br><span class=\"line\">│   ├── init_windows.go</span><br><span class=\"line\">│   ├── options</span><br><span class=\"line\">│   │   ├── BUILD</span><br><span class=\"line\">│   │   ├── container_runtime.go</span><br><span class=\"line\">│   │   ├── globalflags.go</span><br><span class=\"line\">│   │   ├── globalflags_linux.go</span><br><span class=\"line\">│   │   ├── globalflags_other.go</span><br><span class=\"line\">│   │   ├── options.go</span><br><span class=\"line\">│   │   ├── options_test.go</span><br><span class=\"line\">│   │   ├── osflags_others.go</span><br><span class=\"line\">│   │   └── osflags_windows.go</span><br><span class=\"line\">│   ├── plugins.go</span><br><span class=\"line\">│   ├── server.go</span><br><span class=\"line\">│   ├── server_linux.go</span><br><span class=\"line\">│   ├── server_test.go</span><br><span class=\"line\">│   └── server_unsupported.go</span><br><span class=\"line\">└── kubelet.go</span><br><span class=\"line\"></span><br><span class=\"line\">2 directories, 22 files</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://cdn.tianfeiyu.com/kubelet-3.png\" alt=\"kubelet 启动流程时序图\"></p>\n<h4 id=\"1、kubelet-入口函数-main（cmd-kubelet-kubelet-go）\"><a href=\"#1、kubelet-入口函数-main（cmd-kubelet-kubelet-go）\" class=\"headerlink\" title=\"1、kubelet 入口函数 main（cmd/kubelet/kubelet.go）\"></a>1、kubelet 入口函数 main（cmd/kubelet/kubelet.go）</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\trand.Seed(time.Now().UTC().UnixNano())</span><br><span class=\"line\"></span><br><span class=\"line\">\tcommand := app.NewKubeletCommand(server.SetupSignalHandler())</span><br><span class=\"line\">\tlogs.InitLogs()</span><br><span class=\"line\">\tdefer logs.FlushLogs()</span><br><span class=\"line\"></span><br><span class=\"line\">\tif err := command.Execute(); err != nil &#123;</span><br><span class=\"line\">\t\tfmt.Fprintf(os.Stderr, &quot;%v\\n&quot;, err)</span><br><span class=\"line\">\t\tos.Exit(1)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2、初始化-kubelet-配置（cmd-kubelet-app-server-go）\"><a href=\"#2、初始化-kubelet-配置（cmd-kubelet-app-server-go）\" class=\"headerlink\" title=\"2、初始化 kubelet 配置（cmd/kubelet/app/server.go）\"></a>2、初始化 kubelet 配置（cmd/kubelet/app/server.go）</h4><p>NewKubeletCommand() 函数主要负责获取配置文件中的参数，校验参数以及为参数设置默认值。  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// NewKubeletCommand creates a *cobra.Command object with default parameters</span><br><span class=\"line\">func NewKubeletCommand(stopCh &lt;-chan struct&#123;&#125;) *cobra.Command &#123;</span><br><span class=\"line\">    cleanFlagSet := pflag.NewFlagSet(componentKubelet, pflag.ContinueOnError)</span><br><span class=\"line\">    cleanFlagSet.SetNormalizeFunc(flag.WordSepNormalizeFunc)</span><br><span class=\"line\">    // Kubelet配置分两部分:</span><br><span class=\"line\">    // KubeletFlag: 指那些不允许在 kubelet 运行时进行修改的配置集，或者不能在集群中各个 Nodes 之间共享的配置集。</span><br><span class=\"line\">    // KubeletConfiguration: 指可以在集群中各个Nodes之间共享的配置集，可以进行动态配置。</span><br><span class=\"line\">    kubeletFlags := options.NewKubeletFlags()</span><br><span class=\"line\">\tkubeletConfig, err := options.NewKubeletConfiguration()</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\tcmd := &amp;cobra.Command&#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t\tRun: func(cmd *cobra.Command, args []string) &#123;</span><br><span class=\"line\">\t\t\t// 读取 kubelet 配置文件</span><br><span class=\"line\">\t\t\tif configFile := kubeletFlags.KubeletConfigFile; len(configFile) &gt; 0 &#123;</span><br><span class=\"line\">\t\t\t\tkubeletConfig, err = loadConfigFile(configFile)</span><br><span class=\"line\">\t\t\t\tif err != nil &#123;</span><br><span class=\"line\">\t\t\t\t\tglog.Fatal(err)</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t...</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t// 校验 kubelet 参数</span><br><span class=\"line\">\t\t\tif err := kubeletconfigvalidation.ValidateKubeletConfiguration(kubeletConfig); err != nil &#123;</span><br><span class=\"line\">\t\t\t\tglog.Fatal(err)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t...</span><br><span class=\"line\">\t\t\t// 此处初始化了 kubeletDeps</span><br><span class=\"line\">\t\t\tkubeletDeps, err := UnsecuredDependencies(kubeletServer)</span><br><span class=\"line\">\t\t\tif err != nil &#123;</span><br><span class=\"line\">\t\t\t\tglog.Fatal(err)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t...</span><br><span class=\"line\">\t\t\t// 启动程序</span><br><span class=\"line\">\t\t\tif err := Run(kubeletServer, kubeletDeps, stopCh); err != nil &#123;</span><br><span class=\"line\">\t\t\t\tglog.Fatal(err)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">\treturn cmd</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>kubeletDeps 包含 kubelet 运行所必须的配置，是为了实现 dependency injection，其目的是为了把 kubelet 依赖的组件对象作为参数传进来，这样可以控制 kubelet 的行为。主要包括监控功能（cadvisor），cgroup 管理功能（containerManager）等。</p>\n<p>NewKubeletCommand() 会调用 Run() 函数，Run() 中主要调用 run() 函数进行一些准备事项。</p>\n<h4 id=\"3、创建和-apiserver-通信的对象（cmd-kubelet-app-server-go）\"><a href=\"#3、创建和-apiserver-通信的对象（cmd-kubelet-app-server-go）\" class=\"headerlink\" title=\"3、创建和 apiserver 通信的对象（cmd/kubelet/app/server.go）\"></a>3、创建和 apiserver 通信的对象（cmd/kubelet/app/server.go）</h4><p>run() 函数的主要功能：</p>\n<ul>\n<li>1、创建 kubeClient，evnetClient 用来和 apiserver 通信。创建 heartbeatClient 向 apiserver 上报心跳状态。</li>\n<li>2、为 kubeDeps 设定一些默认值。</li>\n<li>3、启动监听 Healthz 端口的 http server，默认端口是 10248。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func run(s *options.KubeletServer, kubeDeps *kubelet.Dependencies, stopCh &lt;-chan struct&#123;&#125;) (err error) &#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t// 判断 kubelet 的启动模式</span><br><span class=\"line\">\tif standaloneMode &#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t&#125; else if kubeDeps.KubeClient == nil || kubeDeps.EventClient == nil || kubeDeps.HeartbeatClient == nil || kubeDeps.DynamicKubeClient == nil &#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t\t// 创建对象 kubeClient</span><br><span class=\"line\">\t\tkubeClient, err = clientset.NewForConfig(clientConfig)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">        // 创建对象 evnetClient</span><br><span class=\"line\">\t\teventClient, err = v1core.NewForConfig(&amp;eventClientConfig)</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t\t// heartbeatClient 上报状态</span><br><span class=\"line\">\t\theartbeatClient, err = clientset.NewForConfig(&amp;heartbeatClientConfig)</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 为 kubeDeps 设定一些默认值</span><br><span class=\"line\">\tif kubeDeps.Auth == nil &#123;</span><br><span class=\"line\">\t\t\tauth, err := BuildAuth(nodeName, kubeDeps.KubeClient, s.KubeletConfiguration)</span><br><span class=\"line\">\t\t\tif err != nil &#123;</span><br><span class=\"line\">\t\t\t\treturn err</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tkubeDeps.Auth = auth</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tif kubeDeps.CAdvisorInterface == nil &#123;</span><br><span class=\"line\">\t\t\timageFsInfoProvider := cadvisor.NewImageFsInfoProvider(s.ContainerRuntime, s.RemoteRuntimeEndpoint)</span><br><span class=\"line\">\t\t\tkubeDeps.CAdvisorInterface, err = cadvisor.New(imageFsInfoProvider, s.RootDirectory, cadvisor.UsingLegacyCadvisorStats(s.ContainerRuntime, s.RemoteRuntimeEndpoint))</span><br><span class=\"line\">\t\t\tif err != nil &#123;</span><br><span class=\"line\">\t\t\t\treturn err</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// </span><br><span class=\"line\">\tif err := RunKubelet(s, kubeDeps, s.RunOnce); err != nil &#123;</span><br><span class=\"line\">\t\t\treturn err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t// 启动监听 Healthz 端口的 http server  </span><br><span class=\"line\">\tif s.HealthzPort &gt; 0 &#123;</span><br><span class=\"line\">\t\thealthz.DefaultHealthz()</span><br><span class=\"line\">\t\tgo wait.Until(func() &#123;</span><br><span class=\"line\">\t\t\terr := http.ListenAndServe(net.JoinHostPort(s.HealthzBindAddress, strconv.Itoa(int(s.HealthzPort))), nil)</span><br><span class=\"line\">\t\t\tif err != nil &#123;</span><br><span class=\"line\">\t\t\t\tglog.Errorf(&quot;Starting health server failed: %v&quot;, err)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;, 5*time.Second, wait.NeverStop)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>kubelet 对 pod 资源的获取方式有三种：第一种是通过文件获得，文件一般放在 /etc/kubernetes/manifests 目录下面；第二种也是通过文件过得，只不过文件是通过 URL 获取的；第三种是通过 watch kube-apiserver 获取。其中前两种模式下，我们称 kubelet 运行在 standalone 模式下，运行在 standalone 模式下的 kubelet 一般用于调试某些功能。</p>\n<p>run() 中调用 RunKubelet() 函数进行后续操作。</p>\n<h4 id=\"4、初始化-kubelet-组件内部的模块（cmd-kubelet-app-server-go）\"><a href=\"#4、初始化-kubelet-组件内部的模块（cmd-kubelet-app-server-go）\" class=\"headerlink\" title=\"4、初始化 kubelet 组件内部的模块（cmd/kubelet/app/server.go）\"></a>4、初始化 kubelet 组件内部的模块（cmd/kubelet/app/server.go）</h4><p>RunKubelet()  主要功能：</p>\n<ul>\n<li>1、初始化 kubelet 组件中的各个模块，创建出 kubelet 对象。</li>\n<li>2、启动垃圾回收服务。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func RunKubelet(kubeServer *options.KubeletServer, kubeDeps *kubelet.Dependencies, runOnce bool) error &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\"> \t// 初始化 kubelet 内部模块</span><br><span class=\"line\">\tk, err := CreateAndInitKubelet(&amp;kubeServer.KubeletConfiguration,</span><br><span class=\"line\">\t\tkubeDeps,</span><br><span class=\"line\">\t\t&amp;kubeServer.ContainerRuntimeOptions,</span><br><span class=\"line\">\t\tkubeServer.ContainerRuntime,</span><br><span class=\"line\">\t\tkubeServer.RuntimeCgroups,</span><br><span class=\"line\">\t\tkubeServer.HostnameOverride,</span><br><span class=\"line\">\t\tkubeServer.NodeIP,</span><br><span class=\"line\">\t\tkubeServer.ProviderID,</span><br><span class=\"line\">\t\tkubeServer.CloudProvider,</span><br><span class=\"line\">\t\tkubeServer.CertDirectory,</span><br><span class=\"line\">\t\tkubeServer.RootDirectory,</span><br><span class=\"line\">\t\tkubeServer.RegisterNode,</span><br><span class=\"line\">\t\tkubeServer.RegisterWithTaints,</span><br><span class=\"line\">\t\tkubeServer.AllowedUnsafeSysctls,</span><br><span class=\"line\">\t\tkubeServer.RemoteRuntimeEndpoint,</span><br><span class=\"line\">\t\tkubeServer.RemoteImageEndpoint,</span><br><span class=\"line\">\t\tkubeServer.ExperimentalMounterPath,</span><br><span class=\"line\">\t\tkubeServer.ExperimentalKernelMemcgNotification,</span><br><span class=\"line\">\t\tkubeServer.ExperimentalCheckNodeCapabilitiesBeforeMount,</span><br><span class=\"line\">\t\tkubeServer.ExperimentalNodeAllocatableIgnoreEvictionThreshold,</span><br><span class=\"line\">\t\tkubeServer.MinimumGCAge,</span><br><span class=\"line\">\t\tkubeServer.MaxPerPodContainerCount,</span><br><span class=\"line\">\t\tkubeServer.MaxContainerCount,</span><br><span class=\"line\">\t\tkubeServer.MasterServiceNamespace,</span><br><span class=\"line\">\t\tkubeServer.RegisterSchedulable,</span><br><span class=\"line\">\t\tkubeServer.NonMasqueradeCIDR,</span><br><span class=\"line\">\t\tkubeServer.KeepTerminatedPodVolumes,</span><br><span class=\"line\">\t\tkubeServer.NodeLabels,</span><br><span class=\"line\">\t\tkubeServer.SeccompProfileRoot,</span><br><span class=\"line\">\t\tkubeServer.BootstrapCheckpointPath,</span><br><span class=\"line\">\t\tkubeServer.NodeStatusMaxImages)</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\treturn fmt.Errorf(&quot;failed to create kubelet: %v&quot;, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t...</span><br><span class=\"line\">\tif runOnce &#123;</span><br><span class=\"line\">\t\tif _, err := k.RunOnce(podCfg.Updates()); err != nil &#123;</span><br><span class=\"line\">\t\t\treturn fmt.Errorf(&quot;runonce failed: %v&quot;, err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tglog.Infof(&quot;Started kubelet as runonce&quot;)</span><br><span class=\"line\">\t&#125; else &#123;</span><br><span class=\"line\">        // </span><br><span class=\"line\">\t\tstartKubelet(k, podCfg, &amp;kubeServer.KubeletConfiguration, kubeDeps, kubeServer.EnableServer)</span><br><span class=\"line\">\t\tglog.Infof(&quot;Started kubelet&quot;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func CreateAndInitKubelet(...)&#123;</span><br><span class=\"line\">\t// NewMainKubelet 实例化一个 kubelet 对象，并对 kubelet 内部各个模块进行初始化</span><br><span class=\"line\">\tk, err = kubelet.NewMainKubelet(kubeCfg,</span><br><span class=\"line\">\t\tkubeDeps,</span><br><span class=\"line\">\t\tcrOptions,</span><br><span class=\"line\">\t\tcontainerRuntime,</span><br><span class=\"line\">\t\truntimeCgroups,</span><br><span class=\"line\">\t\thostnameOverride,</span><br><span class=\"line\">\t\tnodeIP,</span><br><span class=\"line\">\t\tproviderID,</span><br><span class=\"line\">\t\tcloudProvider,</span><br><span class=\"line\">\t\tcertDirectory,</span><br><span class=\"line\">\t\trootDirectory,</span><br><span class=\"line\">\t\tregisterNode,</span><br><span class=\"line\">\t\tregisterWithTaints,</span><br><span class=\"line\">\t\tallowedUnsafeSysctls,</span><br><span class=\"line\">\t\tremoteRuntimeEndpoint,</span><br><span class=\"line\">\t\tremoteImageEndpoint,</span><br><span class=\"line\">\t\texperimentalMounterPath,</span><br><span class=\"line\">\t\texperimentalKernelMemcgNotification,</span><br><span class=\"line\">\t\texperimentalCheckNodeCapabilitiesBeforeMount,</span><br><span class=\"line\">\t\texperimentalNodeAllocatableIgnoreEvictionThreshold,</span><br><span class=\"line\">\t\tminimumGCAge,</span><br><span class=\"line\">\t\tmaxPerPodContainerCount,</span><br><span class=\"line\">\t\tmaxContainerCount,</span><br><span class=\"line\">\t\tmasterServiceNamespace,</span><br><span class=\"line\">\t\tregisterSchedulable,</span><br><span class=\"line\">\t\tnonMasqueradeCIDR,</span><br><span class=\"line\">\t\tkeepTerminatedPodVolumes,</span><br><span class=\"line\">\t\tnodeLabels,</span><br><span class=\"line\">\t\tseccompProfileRoot,</span><br><span class=\"line\">\t\tbootstrapCheckpointPath,</span><br><span class=\"line\">\t\tnodeStatusMaxImages)</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\treturn nil, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 通知 apiserver kubelet 启动了</span><br><span class=\"line\">\tk.BirthCry()</span><br><span class=\"line\">\t// 启动垃圾回收服务</span><br><span class=\"line\">\tk.StartGarbageCollection()</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn k, nil</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func NewMainKubelet(kubeCfg *kubeletconfiginternal.KubeletConfiguration,...)&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">\tif kubeDeps.PodConfig == nil &#123;</span><br><span class=\"line\">\t\tvar err error</span><br><span class=\"line\">\t\t// 初始化 makePodSourceConfig，监听 pod 元数据的来源(FILE, URL, api-server)，将不同 source 的 pod configuration 合并到一个结构中</span><br><span class=\"line\">\t\tkubeDeps.PodConfig, err = makePodSourceConfig(kubeCfg, kubeDeps, nodeName, bootstrapCheckpointPath)</span><br><span class=\"line\">\t\tif err != nil &#123;</span><br><span class=\"line\">\t\t\treturn nil, err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    // kubelet 服务端口，默认 10250</span><br><span class=\"line\">\tdaemonEndpoints := &amp;v1.NodeDaemonEndpoints&#123;</span><br><span class=\"line\">\t\tKubeletEndpoint: v1.DaemonEndpoint&#123;Port: kubeCfg.Port&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 使用 reflector 把 ListWatch 得到的服务信息实时同步到 serviceStore 对象中</span><br><span class=\"line\">\tserviceIndexer := cache.NewIndexer(cache.MetaNamespaceKeyFunc, cache.Indexers&#123;cache.NamespaceIndex: cache.MetaNamespaceIndexFunc&#125;)</span><br><span class=\"line\">\tif kubeDeps.KubeClient != nil &#123;</span><br><span class=\"line\">\t\tserviceLW := cache.NewListWatchFromClient(kubeDeps.KubeClient.CoreV1().RESTClient(), &quot;services&quot;, metav1.NamespaceAll, fields.Everything())</span><br><span class=\"line\">\t\tr := cache.NewReflector(serviceLW, &amp;v1.Service&#123;&#125;, serviceIndexer, 0)</span><br><span class=\"line\">\t\tgo r.Run(wait.NeverStop)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tserviceLister := corelisters.NewServiceLister(serviceIndexer)</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 使用 reflector 把 ListWatch 得到的节点信息实时同步到  nodeStore 对象中</span><br><span class=\"line\">\tnodeIndexer := cache.NewIndexer(cache.MetaNamespaceKeyFunc, cache.Indexers&#123;&#125;)</span><br><span class=\"line\">\tif kubeDeps.KubeClient != nil &#123;</span><br><span class=\"line\">\t\tfieldSelector := fields.Set&#123;api.ObjectNameField: string(nodeName)&#125;.AsSelector()</span><br><span class=\"line\">\t\tnodeLW := cache.NewListWatchFromClient(kubeDeps.KubeClient.CoreV1().RESTClient(), &quot;nodes&quot;, metav1.NamespaceAll, fieldSelector)</span><br><span class=\"line\">\t\tr := cache.NewReflector(nodeLW, &amp;v1.Node&#123;&#125;, nodeIndexer, 0)</span><br><span class=\"line\">\t\tgo r.Run(wait.NeverStop)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tnodeInfo := &amp;predicates.CachedNodeInfo&#123;NodeLister: corelisters.NewNodeLister(nodeIndexer)&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t// node 资源不足时的驱逐策略的设定</span><br><span class=\"line\">\tthresholds, err := eviction.ParseThresholdConfig(enforceNodeAllocatable, kubeCfg.EvictionHard, kubeCfg.EvictionSoft, kubeCfg.EvictionSoftGracePeriod, kubeCfg.EvictionMinimumReclaim)</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\treturn nil, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tevictionConfig := eviction.Config&#123;</span><br><span class=\"line\">\t\tPressureTransitionPeriod: kubeCfg.EvictionPressureTransitionPeriod.Duration,</span><br><span class=\"line\">\t\tMaxPodGracePeriodSeconds: int64(kubeCfg.EvictionMaxPodGracePeriod),</span><br><span class=\"line\">\t\tThresholds:               thresholds,</span><br><span class=\"line\">\t\tKernelMemcgNotification:  experimentalKernelMemcgNotification,</span><br><span class=\"line\">\t\tPodCgroupRoot:            kubeDeps.ContainerManager.GetPodCgroupRoot(),</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    // 容器引用的管理</span><br><span class=\"line\">\tcontainerRefManager := kubecontainer.NewRefManager()</span><br><span class=\"line\">    // oom 监控</span><br><span class=\"line\">\toomWatcher := NewOOMWatcher(kubeDeps.CAdvisorInterface, kubeDeps.Recorder)</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 根据配置信息和各种对象创建 Kubelet 实例</span><br><span class=\"line\">\tklet := &amp;Kubelet&#123;</span><br><span class=\"line\">\t\thostname:                       hostname,</span><br><span class=\"line\">\t\thostnameOverridden:             len(hostnameOverride) &gt; 0,</span><br><span class=\"line\">\t\tnodeName:                       nodeName,</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// 从 cAdvisor 获取当前机器的信息</span><br><span class=\"line\">\tmachineInfo, err := klet.cadvisor.MachineInfo()</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 对 pod 的管理（如: 增删改等）</span><br><span class=\"line\">\tklet.podManager = kubepod.NewBasicPodManager(kubepod.NewBasicMirrorClient(klet.kubeClient), secretManager, configMapManager, checkpointManager)</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 容器运行时管理</span><br><span class=\"line\">\truntime, err := kuberuntime.NewKubeGenericRuntimeManager(...)</span><br><span class=\"line\"></span><br><span class=\"line\">\t// pleg</span><br><span class=\"line\">\tklet.pleg = pleg.NewGenericPLEG(klet.containerRuntime, plegChannelCapacity, plegRelistPeriod, klet.podCache, clock.RealClock&#123;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 创建 containerGC 对象，进行周期性的容器清理工作</span><br><span class=\"line\">\tcontainerGC, err := kubecontainer.NewContainerGC(klet.containerRuntime, containerGCPolicy, klet.sourcesReady)</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 创建 imageManager 管理镜像</span><br><span class=\"line\">\timageManager, err := images.NewImageGCManager(klet.containerRuntime, klet.StatsProvider, kubeDeps.Recorder, nodeRef, imageGCPolicy, crOptions.PodSandboxImage)</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// statusManager 实时检测节点上 pod 的状态，并更新到 apiserver 对应的 pod</span><br><span class=\"line\">\tklet.statusManager = status.NewManager(klet.kubeClient, klet.podManager, klet)</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 探针管理</span><br><span class=\"line\">\tklet.probeManager = prober.NewManager(...)</span><br><span class=\"line\"></span><br><span class=\"line\">    // token 管理</span><br><span class=\"line\">\ttokenManager := token.NewManager(kubeDeps.KubeClient)</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 磁盘管理</span><br><span class=\"line\">\tklet.volumeManager = volumemanager.NewVolumeManager()</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// 将 syncPod() 注入到 podWorkers 中</span><br><span class=\"line\">\tklet.podWorkers = newPodWorkers(klet.syncPod, kubeDeps.Recorder, klet.workQueue, klet.resyncInterval, backOffPeriod, klet.podCache)</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 容器驱逐策略管理</span><br><span class=\"line\">\tevictionManager, evictionAdmitHandler := eviction.NewManager(klet.resourceAnalyzer, evictionConfig, killPodNow(klet.podWorkers, kubeDeps.Recorder), klet.imageManager, klet.containerGC, kubeDeps.Recorder, nodeRef, klet.clock)</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>RunKubelet 最后会调用 startKubelet() 进行后续的操作。</p>\n<h4 id=\"5、启动-kubelet-内部的模块及服务（cmd-kubelet-app-server-go）\"><a href=\"#5、启动-kubelet-内部的模块及服务（cmd-kubelet-app-server-go）\" class=\"headerlink\" title=\"5、启动 kubelet 内部的模块及服务（cmd/kubelet/app/server.go）\"></a>5、启动 kubelet 内部的模块及服务（cmd/kubelet/app/server.go）</h4><p>startKubelet()  的主要功能：</p>\n<ul>\n<li>1、以 goroutine 方式启动 kubelet 中的各个模块。</li>\n<li>2、启动 kubelet http server。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func startKubelet(k kubelet.Bootstrap, podCfg *config.PodConfig, kubeCfg *kubeletconfiginternal.KubeletConfiguration, kubeDeps *kubelet.Dependencies, enableServer bool) &#123;</span><br><span class=\"line\">\tgo wait.Until(func() &#123;</span><br><span class=\"line\">\t\t// 以 goroutine 方式启动 kubelet 中的各个模块</span><br><span class=\"line\">\t\tk.Run(podCfg.Updates())</span><br><span class=\"line\">\t&#125;, 0, wait.NeverStop)</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 启动 kubelet http server\t</span><br><span class=\"line\">\tif enableServer &#123;</span><br><span class=\"line\">\t\tgo k.ListenAndServe(net.ParseIP(kubeCfg.Address), uint(kubeCfg.Port), kubeDeps.TLSOptions, kubeDeps.Auth, kubeCfg.EnableDebuggingHandlers, kubeCfg.EnableContentionProfiling)</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tif kubeCfg.ReadOnlyPort &gt; 0 &#123;</span><br><span class=\"line\">\t\tgo k.ListenAndServeReadOnly(net.ParseIP(kubeCfg.Address), uint(kubeCfg.ReadOnlyPort))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Run starts the kubelet reacting to config updates</span><br><span class=\"line\">func (kl *Kubelet) Run(updates &lt;-chan kubetypes.PodUpdate) &#123;</span><br><span class=\"line\">\tif kl.logServer == nil &#123;</span><br><span class=\"line\">\t\tkl.logServer = http.StripPrefix(&quot;/logs/&quot;, http.FileServer(http.Dir(&quot;/var/log/&quot;)))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tif kl.kubeClient == nil &#123;</span><br><span class=\"line\">\t\tglog.Warning(&quot;No api server defined - no node status update will be sent.&quot;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// Start the cloud provider sync manager</span><br><span class=\"line\">\tif kl.cloudResourceSyncManager != nil &#123;</span><br><span class=\"line\">\t\tgo kl.cloudResourceSyncManager.Run(wait.NeverStop)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tif err := kl.initializeModules(); err != nil &#123;</span><br><span class=\"line\">\t\tkl.recorder.Eventf(kl.nodeRef, v1.EventTypeWarning, events.KubeletSetupFailed, err.Error())</span><br><span class=\"line\">\t\tglog.Fatal(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// Start volume manager</span><br><span class=\"line\">\tgo kl.volumeManager.Run(kl.sourcesReady, wait.NeverStop)</span><br><span class=\"line\"></span><br><span class=\"line\">\tif kl.kubeClient != nil &#123;</span><br><span class=\"line\">\t\t// Start syncing node status immediately, this may set up things the runtime needs to run.</span><br><span class=\"line\">\t\tgo wait.Until(kl.syncNodeStatus, kl.nodeStatusUpdateFrequency, wait.NeverStop)</span><br><span class=\"line\">\t\tgo kl.fastStatusUpdateOnce()</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// start syncing lease</span><br><span class=\"line\">\t\tif utilfeature.DefaultFeatureGate.Enabled(features.NodeLease) &#123;</span><br><span class=\"line\">\t\t\tgo kl.nodeLeaseController.Run(wait.NeverStop)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tgo wait.Until(kl.updateRuntimeUp, 5*time.Second, wait.NeverStop)</span><br><span class=\"line\"></span><br><span class=\"line\">\t// Start loop to sync iptables util rules</span><br><span class=\"line\">\tif kl.makeIPTablesUtilChains &#123;</span><br><span class=\"line\">\t\tgo wait.Until(kl.syncNetworkUtil, 1*time.Minute, wait.NeverStop)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// Start a goroutine responsible for killing pods (that are not properly</span><br><span class=\"line\">\t// handled by pod workers).</span><br><span class=\"line\">\tgo wait.Until(kl.podKiller, 1*time.Second, wait.NeverStop)</span><br><span class=\"line\"></span><br><span class=\"line\">\t// Start component sync loops.</span><br><span class=\"line\">\tkl.statusManager.Start()</span><br><span class=\"line\">\tkl.probeManager.Start()</span><br><span class=\"line\"></span><br><span class=\"line\">\t// Start syncing RuntimeClasses if enabled.</span><br><span class=\"line\">\tif kl.runtimeClassManager != nil &#123;</span><br><span class=\"line\">\t\tgo kl.runtimeClassManager.Run(wait.NeverStop)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// Start the pod lifecycle event generator.</span><br><span class=\"line\">\tkl.pleg.Start()</span><br><span class=\"line\"></span><br><span class=\"line\">\tkl.syncLoop(updates, kl)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>syncLoop 是 kubelet 的主循环方法，它从不同的管道(FILE,URL, API-SERVER)监听 pod 的变化，并把它们汇聚起来。当有新的变化发生时，它会调用对应的函数，保证 Pod 处于期望的状态。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (kl *Kubelet) syncLoop(updates &lt;-chan kubetypes.PodUpdate, handler SyncHandler) &#123;</span><br><span class=\"line\">\tglog.Info(&quot;Starting kubelet main sync loop.&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">\t// syncTicker 每秒检测一次是否有需要同步的 pod workers</span><br><span class=\"line\">\tsyncTicker := time.NewTicker(time.Second)</span><br><span class=\"line\">\tdefer syncTicker.Stop()</span><br><span class=\"line\">\thousekeepingTicker := time.NewTicker(housekeepingPeriod)</span><br><span class=\"line\">\tdefer housekeepingTicker.Stop()</span><br><span class=\"line\">\tplegCh := kl.pleg.Watch()</span><br><span class=\"line\">\tconst (</span><br><span class=\"line\">\t\tbase   = 100 * time.Millisecond</span><br><span class=\"line\">\t\tmax    = 5 * time.Second</span><br><span class=\"line\">\t\tfactor = 2</span><br><span class=\"line\">\t)</span><br><span class=\"line\">\tduration := base</span><br><span class=\"line\">\tfor &#123;</span><br><span class=\"line\">\t\tif rs := kl.runtimeState.runtimeErrors(); len(rs) != 0 &#123;</span><br><span class=\"line\">\t\t\tglog.Infof(&quot;skipping pod synchronization - %v&quot;, rs)</span><br><span class=\"line\">\t\t\t// exponential backoff</span><br><span class=\"line\">\t\t\ttime.Sleep(duration)</span><br><span class=\"line\">\t\t\tduration = time.Duration(math.Min(float64(max), factor*float64(duration)))</span><br><span class=\"line\">\t\t\tcontinue</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t// reset backoff if we have a success</span><br><span class=\"line\">\t\tduration = base</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tkl.syncLoopMonitor.Store(kl.clock.Now())</span><br><span class=\"line\">\t\t// </span><br><span class=\"line\">\t\tif !kl.syncLoopIteration(updates, handler, syncTicker.C, housekeepingTicker.C, plegCh) &#123;</span><br><span class=\"line\">\t\t\tbreak</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tkl.syncLoopMonitor.Store(kl.clock.Now())</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>syncLoopIteration()  方法对多个管道进行遍历，如果 pod 发生变化，则会调用相应的 Handler，在 Handler 中通过调用 dispatchWork 分发任务。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>本篇文章主要讲述了 kubelet 组件从加载配置到初始化内部的各个模块再到启动 kubelet 服务的整个流程，上面的时序图能清楚的看到函数之间的调用关系，但是其中每个组件具体的工作方式以及组件之间的交互方式还不得而知，后面会一探究竟。</p>\n<p>参考：<br><a href=\"http://www.sel.zju.edu.cn/?p=595\" target=\"_blank\" rel=\"noopener\">kubernetes node components – kubelet</a><br><a href=\"https://segmentfault.com/a/1190000008267351\" target=\"_blank\" rel=\"noopener\">Kubelet 源码分析(一):启动流程分析</a><br><a href=\"https://cizixs.com/2017/06/06/kubelet-source-code-analysis-part-1/\" target=\"_blank\" rel=\"noopener\">kubelet 源码分析：启动流程</a><br><a href=\"https://www.lijiaocn.com/%E9%A1%B9%E7%9B%AE/2017/05/02/Kubernetes-kubelet.html\" target=\"_blank\" rel=\"noopener\">kubernetes 的 kubelet 的工作过程</a><br><a href=\"https://fatsheep9146.github.io/2018/07/08/kubelet%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0%E8%A7%A3%E6%9E%90/\" target=\"_blank\" rel=\"noopener\">kubelet 内部实现解析</a></p>\n"},{"title":"kubernetes 常用 API","date":"2018-09-02T05:13:00.000Z","type":"kubernetes","_content":"\nkubectl  的所有操作都是调用 kube-apisever 的 API 实现的，所以其子命令都有相应的 API，每次在调用 kubectl 时使用参数  -v=9  可以看调用的相关 API，例：\n `$ kubectl get node -v=9` \n\n以下为 kubernetes 开发中常用的 API：\n![deployment 常用 API](http://cdn.tianfeiyu.com/deploy-1.png)\n\n![statefulset 常用 API](http://cdn.tianfeiyu.com/sts-1.png)\n\n![pod 常用 API](http://cdn.tianfeiyu.com/pod-1.png)\n\n\n![service 常用 API](http://cdn.tianfeiyu.com/service-1.png)\n\n![endpoints 常用 API](http://cdn.tianfeiyu.com/endpoints-1.png)\n\n![namespace 常用 API](http://cdn.tianfeiyu.com/namespace-1.png)\n\n![node 常用 API](http://cdn.tianfeiyu.com/nodes-1.png)\n\n![pv 常用 API](http://cdn.tianfeiyu.com/pv-1.png)\n\n Markdown 表格显示过大，此仅以图片格式展示。\n\n","source":"_posts/kubernetes-api.md","raw":"---\ntitle: kubernetes 常用 API\ndate: 2018-09-02 13:13:00\ntype: \"kubernetes\"\n\n---\n\nkubectl  的所有操作都是调用 kube-apisever 的 API 实现的，所以其子命令都有相应的 API，每次在调用 kubectl 时使用参数  -v=9  可以看调用的相关 API，例：\n `$ kubectl get node -v=9` \n\n以下为 kubernetes 开发中常用的 API：\n![deployment 常用 API](http://cdn.tianfeiyu.com/deploy-1.png)\n\n![statefulset 常用 API](http://cdn.tianfeiyu.com/sts-1.png)\n\n![pod 常用 API](http://cdn.tianfeiyu.com/pod-1.png)\n\n\n![service 常用 API](http://cdn.tianfeiyu.com/service-1.png)\n\n![endpoints 常用 API](http://cdn.tianfeiyu.com/endpoints-1.png)\n\n![namespace 常用 API](http://cdn.tianfeiyu.com/namespace-1.png)\n\n![node 常用 API](http://cdn.tianfeiyu.com/nodes-1.png)\n\n![pv 常用 API](http://cdn.tianfeiyu.com/pv-1.png)\n\n Markdown 表格显示过大，此仅以图片格式展示。\n\n","slug":"kubernetes-api","published":1,"updated":"2019-07-21T09:55:13.515Z","_id":"cjycnhjm900115vwnwv0okqzl","comments":1,"layout":"post","photos":[],"link":"","content":"<p>kubectl  的所有操作都是调用 kube-apisever 的 API 实现的，所以其子命令都有相应的 API，每次在调用 kubectl 时使用参数  -v=9  可以看调用的相关 API，例：<br> <code>$ kubectl get node -v=9</code> </p>\n<p>以下为 kubernetes 开发中常用的 API：<br><img src=\"http://cdn.tianfeiyu.com/deploy-1.png\" alt=\"deployment 常用 API\"></p>\n<p><img src=\"http://cdn.tianfeiyu.com/sts-1.png\" alt=\"statefulset 常用 API\"></p>\n<p><img src=\"http://cdn.tianfeiyu.com/pod-1.png\" alt=\"pod 常用 API\"></p>\n<p><img src=\"http://cdn.tianfeiyu.com/service-1.png\" alt=\"service 常用 API\"></p>\n<p><img src=\"http://cdn.tianfeiyu.com/endpoints-1.png\" alt=\"endpoints 常用 API\"></p>\n<p><img src=\"http://cdn.tianfeiyu.com/namespace-1.png\" alt=\"namespace 常用 API\"></p>\n<p><img src=\"http://cdn.tianfeiyu.com/nodes-1.png\" alt=\"node 常用 API\"></p>\n<p><img src=\"http://cdn.tianfeiyu.com/pv-1.png\" alt=\"pv 常用 API\"></p>\n<p> Markdown 表格显示过大，此仅以图片格式展示。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>kubectl  的所有操作都是调用 kube-apisever 的 API 实现的，所以其子命令都有相应的 API，每次在调用 kubectl 时使用参数  -v=9  可以看调用的相关 API，例：<br> <code>$ kubectl get node -v=9</code> </p>\n<p>以下为 kubernetes 开发中常用的 API：<br><img src=\"http://cdn.tianfeiyu.com/deploy-1.png\" alt=\"deployment 常用 API\"></p>\n<p><img src=\"http://cdn.tianfeiyu.com/sts-1.png\" alt=\"statefulset 常用 API\"></p>\n<p><img src=\"http://cdn.tianfeiyu.com/pod-1.png\" alt=\"pod 常用 API\"></p>\n<p><img src=\"http://cdn.tianfeiyu.com/service-1.png\" alt=\"service 常用 API\"></p>\n<p><img src=\"http://cdn.tianfeiyu.com/endpoints-1.png\" alt=\"endpoints 常用 API\"></p>\n<p><img src=\"http://cdn.tianfeiyu.com/namespace-1.png\" alt=\"namespace 常用 API\"></p>\n<p><img src=\"http://cdn.tianfeiyu.com/nodes-1.png\" alt=\"node 常用 API\"></p>\n<p><img src=\"http://cdn.tianfeiyu.com/pv-1.png\" alt=\"pv 常用 API\"></p>\n<p> Markdown 表格显示过大，此仅以图片格式展示。</p>\n"},{"title":"kubernetes 学习笔记","date":"2017-02-12T14:58:00.000Z","type":"kubernetes","_content":"\n1 月初办理了入职手续，所在的团队是搞私有云的，目前只有小规模的应用，所采用 **kubernetes + docker** 技术栈，年前所做的事情也不算多，熟悉了 kubernetes 的架构，自己搭建单机版的 kubernetes，以及在程序中调用 kubernetes 的 `API` 进行某些操作。\n\n\n## 1，kubernetes 搭建\n\n[kubernetes](https://github.com/kubernetes/kubernetes) 是 google 的一个开源软件，其社区活跃量远超 **Mesos，Coreos** 的，若想深入学习建议参考**《kubernetes 权威指南》**，我们团队的人都是从这本书学起的，作为一个新技术，会踩到的坑非常多，以下提及的是我学习过程中整理的部分资料。\n\n\n![kubernetes 架构图](http://cdn.tianfeiyu.com/bank.png)\n\n\nkubernetes 是一个分布式系统，所以它有多个组件，并且需要安装在多个节点，一般来说有三个节点，etcd，master 和 minion，但是每个节点却又有多台机器，etcd 作为高性能存储服务，一般独立为一个节点，当然容错是必不可少的，官方建议集群使用奇数个节点，我们的线下集群使用 3 个节点。etcd 的学习可以参考 **gitbook** 上面某大神的一本书 一 [etcd3学习笔记](https://skyao.gitbooks.io/leaning-etcd3/content/documentation/leaning/)。master 端需要安装 kube-apiserver、kube-controller-manager和kube-scheduler 组件，minion 节点需要部署 kubelet、kube-proxy、docker 组件。\n\n> 注意：内核版本 > 3.10 的系统才支持 kubernetes，所以一般安装在centos 7 上。 \n\netcd 节点：\n\t\n\t# yum install -y etcd \n\t# systemctl start etcd  \n\nmaster 节点：\n\n\t# yum install -y kubernetes-master\n\t# systemctl start kube-apiserver \n\t# systemctl start kube-controller-manager \n\t# systemctl start kube-scheduler \n\nminion 节点：\n\n\t# yum install -y kubernetes  docker\n\t# systemctl start kubelet \n\t# systemctl start kube-proxy \n\t# systemctl start docker \n\t\n\n## 2，kubernetes 版本升级\n\n以前一直以为公司会追求稳定性，在软件和系统的选取方便会优先考虑稳定的版本。但是来了公司才发现，某些软件出了新版本后，若有期待的功能并且在掌控范围内都会及时更新，所以也协助过导师更新了线下集群的 minion 节点。\n\n下面是 minion 节点的升级操作，master 节点的操作类似。首先需要下载 [kubernetes-server-linux-amd64.tar.gz](https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG.md#downloads-for-v160-alpha1)  这个包，下载你所要更新到的版本。\n\n**升级步骤**：\n\n- 1，先关掉 docker 服务。docker 关闭后，当前节点的 pod 随之会被调度到其他节点上\n- 2，备份二进制程序（kubectl,kube-proxy）\n- 3，将解压后的二进制程序覆盖以前的版本\n- 4，最后重新启动服务\n\n\t\n\t# systemctl stop docker\n\t# which kubectl kube-proxy \n\t/usr/bin/kubectl\n\t/usr/bin/kube-proxy\n\n\t# cp /usr/bin/{kubectl,kube-proxy} /tmp/\n\t# yes | cp bin/{kubectl,kube-proxy} /usr/bin/\n\t\n\t# systemctl status {kubectl,kube-proxy}\n\n\t# systemctl start docker \n\n\n## 3，kubeconfig 使用\n\n若你使用的 kubelet 版本为 1.4，使用 `systemctl status kubelet`  会看到这样一句话：\n\n\t--api-servers option is deprecated for kubelet, so I am now trying to deploy with simply using --kubeconfig=/etc/kubernetes/node-kubeconfig.yaml\n\n使用 kuconfig 是为了将所有的命令行启动选项放在一个文件中方便使用。由于我们已经升级到了 1.5，所以也得升级此功能，首先需要写一个 kubeconfig 的 yaml 文件，其 [官方文档](http://kubernetes.io/docs/user-guide/kubeconfig-file/) 有格式说明， 本人已将其翻译，翻译文档见下文。\n\n**kubeconfig** 文件示例：\n\n\t\tapiVersion: v1\n\t\tclusters:\n\t\t- cluster:\n\t\t    server: http://localhost:8080\n\t\t  name: local-server\n\t\tcontexts:\n\t\t- context:\n\t\t    cluster: local-server\n\t\t    namespace: the-right-prefix\n\t\t    user: myself\n\t\t  name: default-context\n\t\tcurrent-context: default-context\n\t\tkind: Config\n\t\tpreferences: {}\n\t\tusers:\n\t\t- name: myself\n\t\t  user:\n\t\t    password: secret\n\t\t    username: admin\n\n---\n\n\t   # kubelet --kubeconfig=/etc/kubernetes/config --require-kubeconfig=true\n\n\nkubeconfig 参数：设置 kubelet 配置文件路径，这个配置文件用来告诉 kubelet 组件 api-server 组件的位置，默认路径是。\n\nrequire-kubeconfig 参数：这是一个布尔类型参数，可以设置成true 或者 false，如果设置成 true，那么表示启用 kubeconfig 参数，从 kubeconfig 参数设置的配置文件中查找 api-server 组件，如果设置成 false，那么表示使用 kubelet 另外一个参数 “api-servers” 来查找 api-server 组件位置。\n\n关于 kubeconfig 的一个 **issue**，[Kubelet won't read apiserver from kubeconfig](https://github.com/kubernetes/kubernetes/issues/36745)。\n\n**升级步骤**，当然前提是你的 kubelet 版本已经到了 1.5：\n\n* 1，关闭 kubelet、kube-proxy 服务；\n* 2，注释掉 `/etc/kubernetes/kubelet` 文件中下面这一行:\n\n    `KUBELET_API_SERVER=\"--api-servers=http://127.0.0.1:8080\"`\n\n然后在 **KUBELET_ARGS** 中添加： \n\n\t--kubeconfig=/etc/kubernetes/kubeconfig --require-kubeconfig=true\n\n这里的路径是你 yaml 文件放置的路径。 \n\n- 3，重新启动刚关掉的两个服务\n\n---\n## 4，以下为 [kubeconfig 配置官方文档](https://kubernetes.io/docs/user-guide/kubeconfig-file/)的翻译\n\n### kubernetes 中的验证对于不同的群体可以使用不同的方法.\n\n* 运行 kubelet 可能有的一种认证方式（即证书）。\n* 用户可能有不同的认证方式（即 token）。\n* 管理员可以为每个用户提供一个证书列表。\n* 可能会有多个集群，但我们想在一个地方定义它们 - 使用户能够用自己的证书并重用相同的全局配置。 \n\n因此为了在多个集群之间轻松切换，对于多个用户，定义了一个 kubeconfig 文件。\n\n此文件包含一系列认证机制和与 nicknames 有关的群集连接信息。它还引入了认证信息元组（用户）和集群连接信息的概念，被称为上下文也与 nickname 相关联。\n\n如果明确指定，也可以允许使用多个 kubeconfig 文件。在运行时，它们被合并加载并覆盖从命令行指定的选项（参见下面的规则）。\n\n### 相关讨论\n\n\thttp://issue.k8s.io/1755\n\n### kubeconfig 文件的组件 \n\nkubeconfig 文件示例：\n\n\tcurrent-context: federal-context\n\tapiVersion: v1\n\tclusters:\n\t- cluster:\n\t    api-version: v1\n\t    server: http://cow.org:8080\n\t  name: cow-cluster\n\t- cluster:\n\t    certificate-authority: path/to/my/cafile\n\t    server: https://horse.org:4443\n\t  name: horse-cluster\n\t- cluster:\n\t    insecure-skip-tls-verify: true\n\t    server: https://pig.org:443\n\t  name: pig-cluster\n\tcontexts:\n\t- context:\n\t    cluster: horse-cluster\n\t    namespace: chisel-ns\n\t    user: green-user\n\t  name: federal-context\n\t- context:\n\t    cluster: pig-cluster\n\t    namespace: saw-ns\n\t    user: black-user\n\t  name: queen-anne-context\n\tkind: Config\n\tpreferences:\n\t  colors: true\n\tusers:\n\t- name: blue-user\n\t  user:\n\t    token: blue-token\n\t- name: green-user\n\t  user:\n\t    client-certificate: path/to/my/client/cert\n\t    client-key: path/to/my/client/key\n\n### 组件的解释\n\n#### cluster\n\n\tclusters:\n\t- cluster:\n\t    certificate-authority: path/to/my/cafile\n\t    server: https://horse.org:4443\n\t  name: horse-cluster\n\t- cluster:\n\t    insecure-skip-tls-verify: true\n\t    server: https://pig.org:443\n\t  name: pig-cluster\n\n\ncluster 包含 kubernetes 集群的 endpoint 数据。它包括 kubernetes apiserver 完全限定的 URL，以及集群的证书颁发机构或 insecure-skip-tls-verify：true，如果集群的服务证书未由系统信任的证书颁发机构签名。集群有一个名称（nickname），该名称用作此 kubeconfig 文件中的字典键。你可以使用 kubectl config set-cluster 添加或修改集群条目。\n\n#### user\n\n\tusers:\n\t- name: blue-user\n\t  user:\n\t    token: blue-token\n\t- name: green-user\n\t  user:\n\t    client-certificate: path/to/my/client/cert\n\t    client-key: path/to/my/client/key\n\n用户定义用于向 Kubernetes 集群进行身份验证的客户端凭证。在 kubeconfig 被加载/合并之后，用户具有在用户条目列表中充当其键的名称（nickname）。可用的凭证是客户端证书，客户端密钥，令牌和用户名/密码。用户名/密码和令牌是互斥的，但客户端证书和密钥可以与它们组合。你可以使用 kubectl config set-credentials 添加或修改用户条目。\n\n### context\n\n\tcontexts:\n\t- context:\n\t    cluster: horse-cluster\n\t    namespace: chisel-ns\n\t    user: green-user\n\t  name: federal-context\n\ncontext 定义 cluster,user,namespace 元组的名称，用来向指定的集群使用提供的认证信息和命名空间向指定的集群发送请求。\n三个都是可选的，仅指定 cluster，user，namespace 中的一个也是可用的，或者指定为 none。未指定的值或命名值，在加载的 kubeconfig 中没有对应的条目（例如，如果context 在上面的 kubeconfig 文件指定为 pink-user ）将被替换为默认值。有关覆盖/合并行为，请参阅下面的加载/合并规则。你可以使用 kubectl config set-context 添加或修改上下文条目。\n\n#### current-context\n\n\tcurrent-context: federal-context\n\ncurrent-context 是 cluster,user,namespace 中的 nickname 或者 ‘key’，kubectl 在从此文件加载配置时将使用默认值。通过给 kubelett 传递 --context=CONTEXT, --cluster=CLUSTER, --user=USER, and/or --namespace=NAMESPACE 可以从命令行覆盖任何值。你可以使用 kubectl config use-context 更改当前上下文。\n\n#### 杂项\n\n\tapiVersion: v1\n\tkind: Config\n\tpreferences:\n\t  colors: true\n\napiVersion 和 kind 标识客户端要解析的版本和模式，不应手动编辑。\npreferences 指定选项(和当前未使用的) kubectl preferences.\n\n### 查看 kubeconfig 文件\n\nkubectl config view 会显示当前的 kubeconfig 配置。默认情况下，它会显示所有加载的 kubeconfig 配置， 你可以通过 --minify 选项来过滤与 current-context 相关的设置。请参见 kubectl config view 的其他选项。\n\n### 创建你的 kubeconfig 文件\n\n注意，如果你通过 kube-up.sh 部署 k8s，则不需要创建 kubeconfig 文件，脚本将为你创建。\n\n在任何情况下，可以轻松地使用此文件作为模板来创建自己的 kubeconfig 文件。\n\n因此，让我们快速浏览上述文件的基础知识，以便可以根据需要轻松修改...\n\n以上文件可能对应于使用--token-auth-file = tokens.csv 选项启动的 api 服务器，其中 tokens.csv文件看起来像这样：\n\t\n\tblue-user,blue-user,1\n\tmister-red,mister-red,2\n\n此外，由于不同用户使用不同的验证机制，api-server 可能已经启动其他的身份验证选项（有许多这样的选项，在制作 kubeconfig 文件之前确保你理解所关心的，因为没有人需要实现所有可能的认证方案）。\n\n* 由于 current-context 的用户是 “green-user”，因此任何使用此 kubeconfig 文件的客户端自然都能够成功登录 api-server，因为我们提供了 “green-user” 的客户端凭据。\n* 类似地，我们也可以选择改变 current-context 的值为 “blue-user”。\n* \n在上述情况下，“green-user” 将必须通过提供证书登录，而 “blue-user” 只需提供 token。所有的这些信息将由我们处理通过\n\n\n### 加载和合并规则\n\n加载和合并 kubeconfig 文件的规则很简单，但有很多。最终配置按照以下顺序构建：\n\n1，从磁盘获取 kubeconfig。通过以下层次结构和合并规则完成：\n如果设置了 CommandLineLocation（kubeconfig 命令行选项的值），则仅使用此文件，不合并。只允许此标志的一个实例。\n\n否则，如果 EnvVarLocation（$KUBECONFIG 的值）可用，将其用作应合并的文件列表。根据以下规则将文件合并在一起。将忽略空文件名。文件内容不能反序列化则产生错误。设置特定值或映射密钥的第一个文件将被使用，并且值或映射密钥永远不会更改。这意味着设置CurrentContext 的第一个文件将保留其 context。也意味着如果两个文件指定 “red-user”,，则仅使用来自第一个文件的 “red-user” 的值。来自第二个 “red-user” 文件的非冲突条目也将被丢弃。\n\n对于其他的，使用 HomeDirectoryLocation（~/.kube/config）也不会被合并。\n\n2，此链中第一个被匹配的 context 将被使用：\n\n* 1，命令行参数 - 命令行选项中 context 的值\n* 2，合并文件中的 current-context\n* 3，此段允许为空\n\n3，确定要使用的集群信息和用户。在此处，也可能没有 context。这个链中第一次使用的会被构建。（运行两次，一次为用户，一次为集群）：\n\n* 1，命令行参数 - user 是用户名，cluster 是集群名\n* 2，如果存在 context 则使用\n* 3，允许为空\n\n4，确定要使用的实际集群信息。在此处，也可能没有集群信息。基于链构建每个集群信息（首次使用的）：\n\n* 1，命令行参数 - server，api-version，certificate-authority 和 insecure-skip-tls-verify\n* 2，如果存在集群信息并且该属性的值存在，则使用它。\n* 3，如果没有 server 位置则出错。\n\n5，确定要使用的实际用户信息。用户构建使用与集群信息相同的规则，但每个用户只能具有一种认证方法：\n\n* 1，加载优先级为 1）命令行参数，2） kubeconfig 的用户字段\n* 2，命令行参数：客户端证书，客户端密钥，用户名，密码和 token。\n* 3，如果两者有冲突则失败\n\n6，对于仍然缺失的信息，使用默认值并尽可能提示输入身份验证信息。\n\n7，kubeconfig 文件中的所有文件引用都是相对于 kubeconfig 文件本身的位置解析的。当文件引用显示在命令行上时，它们被视为相对于当前工作目录。当路径保存在 ~/.kube/config 中时，相对路径和绝对路径被分别存储。\n\nkubeconfig 文件中的任何路径都是相对于 kubeconfig 文件本身的位置解析的。\n\n\n### 通过 kubectl config <subcommand> 操作 kubeconfig\n\n为了更容易地操作 kubeconfig 文件，可以使用 kubectl config 的子命令。请参见 kubectl/kubectl_config.md 获取帮助。\n\n例如：\n\n\t$ kubectl config set-credentials myself --username=admin --password=secret\n\t$ kubectl config set-cluster local-server --server=http://localhost:8080\n\t$ kubectl config set-context default-context --cluster=local-server --user=myself\n\t$ kubectl config use-context default-context\n\t$ kubectl config set contexts.default-context.namespace the-right-prefix\n\t$ kubectl config view\n\n输出：\n\n\tapiVersion: v1\n\tclusters:\n\t- cluster:\n\t    server: http://localhost:8080\n\t  name: local-server\n\tcontexts:\n\t- context:\n\t    cluster: local-server\n\t    namespace: the-right-prefix\n\t    user: myself\n\t  name: default-context\n\tcurrent-context: default-context\n\tkind: Config\n\tpreferences: {}\n\tusers:\n\t- name: myself\n\t  user:\n\t    password: secret\n\t    username: admin\n\n一个 kubeconfig 文件类似这样：\n\n\tapiVersion: v1\n\tclusters:\n\t- cluster:\n\t    server: http://localhost:8080\n\t  name: local-server\n\tcontexts:\n\t- context:\n\t    cluster: local-server\n\t    namespace: the-right-prefix\n\t    user: myself\n\t  name: default-context\n\tcurrent-context: default-context\n\tkind: Config\n\tpreferences: {}\n\tusers:\n\t- name: myself\n\t  user:\n\t    password: secret\n\t    username: admin\n\n示例文件的命令操作：\n\n\t$ kubectl config set preferences.colors true\n\t$ kubectl config set-cluster cow-cluster --server=http://cow.org:8080 --api-version=v1\n\t$ kubectl config set-cluster horse-cluster --server=https://horse.org:4443 --certificate-authority=path/to/my/cafile\n\t$ kubectl config set-cluster pig-cluster --server=https://pig.org:443 --insecure-skip-tls-verify=true\n\t$ kubectl config set-credentials blue-user --token=blue-token\n\t$ kubectl config set-credentials green-user --client-certificate=path/to/my/client/cert --client-key=path/to/my/client/key\n\t$ kubectl config set-context queen-anne-context --cluster=pig-cluster --user=black-user --namespace=saw-ns\n\t$ kubectl config set-context federal-context --cluster=horse-cluster --user=green-user --namespace=chisel-ns\n\t$ kubectl config use-context federal-context\n\n最后的总结：\n\n所以，看完这些，你就可以快速开始创建自己的 kubeconfig 文件了：\n\n* 仔细查看并了解 api-server 如何启动：了解你的安全策略后，然后才能设计 kubeconfig 文件以便于身份验证\n* 将上面的代码段替换为你集群的 api-server endpoint 的信息。\n* 确保 api-server 已启动，以至少向其提供一个用户（例如：green-user）凭证。当然，你必须查看 api-server 文档，以确定以目前最好的技术提供详细的身份验证信息。\n","source":"_posts/kubernetes-learn.md","raw":"---\ntitle: kubernetes 学习笔记\ndate: 2017-02-12 22:58:00\ntype: \"kubernetes\"\n\n---\n\n1 月初办理了入职手续，所在的团队是搞私有云的，目前只有小规模的应用，所采用 **kubernetes + docker** 技术栈，年前所做的事情也不算多，熟悉了 kubernetes 的架构，自己搭建单机版的 kubernetes，以及在程序中调用 kubernetes 的 `API` 进行某些操作。\n\n\n## 1，kubernetes 搭建\n\n[kubernetes](https://github.com/kubernetes/kubernetes) 是 google 的一个开源软件，其社区活跃量远超 **Mesos，Coreos** 的，若想深入学习建议参考**《kubernetes 权威指南》**，我们团队的人都是从这本书学起的，作为一个新技术，会踩到的坑非常多，以下提及的是我学习过程中整理的部分资料。\n\n\n![kubernetes 架构图](http://cdn.tianfeiyu.com/bank.png)\n\n\nkubernetes 是一个分布式系统，所以它有多个组件，并且需要安装在多个节点，一般来说有三个节点，etcd，master 和 minion，但是每个节点却又有多台机器，etcd 作为高性能存储服务，一般独立为一个节点，当然容错是必不可少的，官方建议集群使用奇数个节点，我们的线下集群使用 3 个节点。etcd 的学习可以参考 **gitbook** 上面某大神的一本书 一 [etcd3学习笔记](https://skyao.gitbooks.io/leaning-etcd3/content/documentation/leaning/)。master 端需要安装 kube-apiserver、kube-controller-manager和kube-scheduler 组件，minion 节点需要部署 kubelet、kube-proxy、docker 组件。\n\n> 注意：内核版本 > 3.10 的系统才支持 kubernetes，所以一般安装在centos 7 上。 \n\netcd 节点：\n\t\n\t# yum install -y etcd \n\t# systemctl start etcd  \n\nmaster 节点：\n\n\t# yum install -y kubernetes-master\n\t# systemctl start kube-apiserver \n\t# systemctl start kube-controller-manager \n\t# systemctl start kube-scheduler \n\nminion 节点：\n\n\t# yum install -y kubernetes  docker\n\t# systemctl start kubelet \n\t# systemctl start kube-proxy \n\t# systemctl start docker \n\t\n\n## 2，kubernetes 版本升级\n\n以前一直以为公司会追求稳定性，在软件和系统的选取方便会优先考虑稳定的版本。但是来了公司才发现，某些软件出了新版本后，若有期待的功能并且在掌控范围内都会及时更新，所以也协助过导师更新了线下集群的 minion 节点。\n\n下面是 minion 节点的升级操作，master 节点的操作类似。首先需要下载 [kubernetes-server-linux-amd64.tar.gz](https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG.md#downloads-for-v160-alpha1)  这个包，下载你所要更新到的版本。\n\n**升级步骤**：\n\n- 1，先关掉 docker 服务。docker 关闭后，当前节点的 pod 随之会被调度到其他节点上\n- 2，备份二进制程序（kubectl,kube-proxy）\n- 3，将解压后的二进制程序覆盖以前的版本\n- 4，最后重新启动服务\n\n\t\n\t# systemctl stop docker\n\t# which kubectl kube-proxy \n\t/usr/bin/kubectl\n\t/usr/bin/kube-proxy\n\n\t# cp /usr/bin/{kubectl,kube-proxy} /tmp/\n\t# yes | cp bin/{kubectl,kube-proxy} /usr/bin/\n\t\n\t# systemctl status {kubectl,kube-proxy}\n\n\t# systemctl start docker \n\n\n## 3，kubeconfig 使用\n\n若你使用的 kubelet 版本为 1.4，使用 `systemctl status kubelet`  会看到这样一句话：\n\n\t--api-servers option is deprecated for kubelet, so I am now trying to deploy with simply using --kubeconfig=/etc/kubernetes/node-kubeconfig.yaml\n\n使用 kuconfig 是为了将所有的命令行启动选项放在一个文件中方便使用。由于我们已经升级到了 1.5，所以也得升级此功能，首先需要写一个 kubeconfig 的 yaml 文件，其 [官方文档](http://kubernetes.io/docs/user-guide/kubeconfig-file/) 有格式说明， 本人已将其翻译，翻译文档见下文。\n\n**kubeconfig** 文件示例：\n\n\t\tapiVersion: v1\n\t\tclusters:\n\t\t- cluster:\n\t\t    server: http://localhost:8080\n\t\t  name: local-server\n\t\tcontexts:\n\t\t- context:\n\t\t    cluster: local-server\n\t\t    namespace: the-right-prefix\n\t\t    user: myself\n\t\t  name: default-context\n\t\tcurrent-context: default-context\n\t\tkind: Config\n\t\tpreferences: {}\n\t\tusers:\n\t\t- name: myself\n\t\t  user:\n\t\t    password: secret\n\t\t    username: admin\n\n---\n\n\t   # kubelet --kubeconfig=/etc/kubernetes/config --require-kubeconfig=true\n\n\nkubeconfig 参数：设置 kubelet 配置文件路径，这个配置文件用来告诉 kubelet 组件 api-server 组件的位置，默认路径是。\n\nrequire-kubeconfig 参数：这是一个布尔类型参数，可以设置成true 或者 false，如果设置成 true，那么表示启用 kubeconfig 参数，从 kubeconfig 参数设置的配置文件中查找 api-server 组件，如果设置成 false，那么表示使用 kubelet 另外一个参数 “api-servers” 来查找 api-server 组件位置。\n\n关于 kubeconfig 的一个 **issue**，[Kubelet won't read apiserver from kubeconfig](https://github.com/kubernetes/kubernetes/issues/36745)。\n\n**升级步骤**，当然前提是你的 kubelet 版本已经到了 1.5：\n\n* 1，关闭 kubelet、kube-proxy 服务；\n* 2，注释掉 `/etc/kubernetes/kubelet` 文件中下面这一行:\n\n    `KUBELET_API_SERVER=\"--api-servers=http://127.0.0.1:8080\"`\n\n然后在 **KUBELET_ARGS** 中添加： \n\n\t--kubeconfig=/etc/kubernetes/kubeconfig --require-kubeconfig=true\n\n这里的路径是你 yaml 文件放置的路径。 \n\n- 3，重新启动刚关掉的两个服务\n\n---\n## 4，以下为 [kubeconfig 配置官方文档](https://kubernetes.io/docs/user-guide/kubeconfig-file/)的翻译\n\n### kubernetes 中的验证对于不同的群体可以使用不同的方法.\n\n* 运行 kubelet 可能有的一种认证方式（即证书）。\n* 用户可能有不同的认证方式（即 token）。\n* 管理员可以为每个用户提供一个证书列表。\n* 可能会有多个集群，但我们想在一个地方定义它们 - 使用户能够用自己的证书并重用相同的全局配置。 \n\n因此为了在多个集群之间轻松切换，对于多个用户，定义了一个 kubeconfig 文件。\n\n此文件包含一系列认证机制和与 nicknames 有关的群集连接信息。它还引入了认证信息元组（用户）和集群连接信息的概念，被称为上下文也与 nickname 相关联。\n\n如果明确指定，也可以允许使用多个 kubeconfig 文件。在运行时，它们被合并加载并覆盖从命令行指定的选项（参见下面的规则）。\n\n### 相关讨论\n\n\thttp://issue.k8s.io/1755\n\n### kubeconfig 文件的组件 \n\nkubeconfig 文件示例：\n\n\tcurrent-context: federal-context\n\tapiVersion: v1\n\tclusters:\n\t- cluster:\n\t    api-version: v1\n\t    server: http://cow.org:8080\n\t  name: cow-cluster\n\t- cluster:\n\t    certificate-authority: path/to/my/cafile\n\t    server: https://horse.org:4443\n\t  name: horse-cluster\n\t- cluster:\n\t    insecure-skip-tls-verify: true\n\t    server: https://pig.org:443\n\t  name: pig-cluster\n\tcontexts:\n\t- context:\n\t    cluster: horse-cluster\n\t    namespace: chisel-ns\n\t    user: green-user\n\t  name: federal-context\n\t- context:\n\t    cluster: pig-cluster\n\t    namespace: saw-ns\n\t    user: black-user\n\t  name: queen-anne-context\n\tkind: Config\n\tpreferences:\n\t  colors: true\n\tusers:\n\t- name: blue-user\n\t  user:\n\t    token: blue-token\n\t- name: green-user\n\t  user:\n\t    client-certificate: path/to/my/client/cert\n\t    client-key: path/to/my/client/key\n\n### 组件的解释\n\n#### cluster\n\n\tclusters:\n\t- cluster:\n\t    certificate-authority: path/to/my/cafile\n\t    server: https://horse.org:4443\n\t  name: horse-cluster\n\t- cluster:\n\t    insecure-skip-tls-verify: true\n\t    server: https://pig.org:443\n\t  name: pig-cluster\n\n\ncluster 包含 kubernetes 集群的 endpoint 数据。它包括 kubernetes apiserver 完全限定的 URL，以及集群的证书颁发机构或 insecure-skip-tls-verify：true，如果集群的服务证书未由系统信任的证书颁发机构签名。集群有一个名称（nickname），该名称用作此 kubeconfig 文件中的字典键。你可以使用 kubectl config set-cluster 添加或修改集群条目。\n\n#### user\n\n\tusers:\n\t- name: blue-user\n\t  user:\n\t    token: blue-token\n\t- name: green-user\n\t  user:\n\t    client-certificate: path/to/my/client/cert\n\t    client-key: path/to/my/client/key\n\n用户定义用于向 Kubernetes 集群进行身份验证的客户端凭证。在 kubeconfig 被加载/合并之后，用户具有在用户条目列表中充当其键的名称（nickname）。可用的凭证是客户端证书，客户端密钥，令牌和用户名/密码。用户名/密码和令牌是互斥的，但客户端证书和密钥可以与它们组合。你可以使用 kubectl config set-credentials 添加或修改用户条目。\n\n### context\n\n\tcontexts:\n\t- context:\n\t    cluster: horse-cluster\n\t    namespace: chisel-ns\n\t    user: green-user\n\t  name: federal-context\n\ncontext 定义 cluster,user,namespace 元组的名称，用来向指定的集群使用提供的认证信息和命名空间向指定的集群发送请求。\n三个都是可选的，仅指定 cluster，user，namespace 中的一个也是可用的，或者指定为 none。未指定的值或命名值，在加载的 kubeconfig 中没有对应的条目（例如，如果context 在上面的 kubeconfig 文件指定为 pink-user ）将被替换为默认值。有关覆盖/合并行为，请参阅下面的加载/合并规则。你可以使用 kubectl config set-context 添加或修改上下文条目。\n\n#### current-context\n\n\tcurrent-context: federal-context\n\ncurrent-context 是 cluster,user,namespace 中的 nickname 或者 ‘key’，kubectl 在从此文件加载配置时将使用默认值。通过给 kubelett 传递 --context=CONTEXT, --cluster=CLUSTER, --user=USER, and/or --namespace=NAMESPACE 可以从命令行覆盖任何值。你可以使用 kubectl config use-context 更改当前上下文。\n\n#### 杂项\n\n\tapiVersion: v1\n\tkind: Config\n\tpreferences:\n\t  colors: true\n\napiVersion 和 kind 标识客户端要解析的版本和模式，不应手动编辑。\npreferences 指定选项(和当前未使用的) kubectl preferences.\n\n### 查看 kubeconfig 文件\n\nkubectl config view 会显示当前的 kubeconfig 配置。默认情况下，它会显示所有加载的 kubeconfig 配置， 你可以通过 --minify 选项来过滤与 current-context 相关的设置。请参见 kubectl config view 的其他选项。\n\n### 创建你的 kubeconfig 文件\n\n注意，如果你通过 kube-up.sh 部署 k8s，则不需要创建 kubeconfig 文件，脚本将为你创建。\n\n在任何情况下，可以轻松地使用此文件作为模板来创建自己的 kubeconfig 文件。\n\n因此，让我们快速浏览上述文件的基础知识，以便可以根据需要轻松修改...\n\n以上文件可能对应于使用--token-auth-file = tokens.csv 选项启动的 api 服务器，其中 tokens.csv文件看起来像这样：\n\t\n\tblue-user,blue-user,1\n\tmister-red,mister-red,2\n\n此外，由于不同用户使用不同的验证机制，api-server 可能已经启动其他的身份验证选项（有许多这样的选项，在制作 kubeconfig 文件之前确保你理解所关心的，因为没有人需要实现所有可能的认证方案）。\n\n* 由于 current-context 的用户是 “green-user”，因此任何使用此 kubeconfig 文件的客户端自然都能够成功登录 api-server，因为我们提供了 “green-user” 的客户端凭据。\n* 类似地，我们也可以选择改变 current-context 的值为 “blue-user”。\n* \n在上述情况下，“green-user” 将必须通过提供证书登录，而 “blue-user” 只需提供 token。所有的这些信息将由我们处理通过\n\n\n### 加载和合并规则\n\n加载和合并 kubeconfig 文件的规则很简单，但有很多。最终配置按照以下顺序构建：\n\n1，从磁盘获取 kubeconfig。通过以下层次结构和合并规则完成：\n如果设置了 CommandLineLocation（kubeconfig 命令行选项的值），则仅使用此文件，不合并。只允许此标志的一个实例。\n\n否则，如果 EnvVarLocation（$KUBECONFIG 的值）可用，将其用作应合并的文件列表。根据以下规则将文件合并在一起。将忽略空文件名。文件内容不能反序列化则产生错误。设置特定值或映射密钥的第一个文件将被使用，并且值或映射密钥永远不会更改。这意味着设置CurrentContext 的第一个文件将保留其 context。也意味着如果两个文件指定 “red-user”,，则仅使用来自第一个文件的 “red-user” 的值。来自第二个 “red-user” 文件的非冲突条目也将被丢弃。\n\n对于其他的，使用 HomeDirectoryLocation（~/.kube/config）也不会被合并。\n\n2，此链中第一个被匹配的 context 将被使用：\n\n* 1，命令行参数 - 命令行选项中 context 的值\n* 2，合并文件中的 current-context\n* 3，此段允许为空\n\n3，确定要使用的集群信息和用户。在此处，也可能没有 context。这个链中第一次使用的会被构建。（运行两次，一次为用户，一次为集群）：\n\n* 1，命令行参数 - user 是用户名，cluster 是集群名\n* 2，如果存在 context 则使用\n* 3，允许为空\n\n4，确定要使用的实际集群信息。在此处，也可能没有集群信息。基于链构建每个集群信息（首次使用的）：\n\n* 1，命令行参数 - server，api-version，certificate-authority 和 insecure-skip-tls-verify\n* 2，如果存在集群信息并且该属性的值存在，则使用它。\n* 3，如果没有 server 位置则出错。\n\n5，确定要使用的实际用户信息。用户构建使用与集群信息相同的规则，但每个用户只能具有一种认证方法：\n\n* 1，加载优先级为 1）命令行参数，2） kubeconfig 的用户字段\n* 2，命令行参数：客户端证书，客户端密钥，用户名，密码和 token。\n* 3，如果两者有冲突则失败\n\n6，对于仍然缺失的信息，使用默认值并尽可能提示输入身份验证信息。\n\n7，kubeconfig 文件中的所有文件引用都是相对于 kubeconfig 文件本身的位置解析的。当文件引用显示在命令行上时，它们被视为相对于当前工作目录。当路径保存在 ~/.kube/config 中时，相对路径和绝对路径被分别存储。\n\nkubeconfig 文件中的任何路径都是相对于 kubeconfig 文件本身的位置解析的。\n\n\n### 通过 kubectl config <subcommand> 操作 kubeconfig\n\n为了更容易地操作 kubeconfig 文件，可以使用 kubectl config 的子命令。请参见 kubectl/kubectl_config.md 获取帮助。\n\n例如：\n\n\t$ kubectl config set-credentials myself --username=admin --password=secret\n\t$ kubectl config set-cluster local-server --server=http://localhost:8080\n\t$ kubectl config set-context default-context --cluster=local-server --user=myself\n\t$ kubectl config use-context default-context\n\t$ kubectl config set contexts.default-context.namespace the-right-prefix\n\t$ kubectl config view\n\n输出：\n\n\tapiVersion: v1\n\tclusters:\n\t- cluster:\n\t    server: http://localhost:8080\n\t  name: local-server\n\tcontexts:\n\t- context:\n\t    cluster: local-server\n\t    namespace: the-right-prefix\n\t    user: myself\n\t  name: default-context\n\tcurrent-context: default-context\n\tkind: Config\n\tpreferences: {}\n\tusers:\n\t- name: myself\n\t  user:\n\t    password: secret\n\t    username: admin\n\n一个 kubeconfig 文件类似这样：\n\n\tapiVersion: v1\n\tclusters:\n\t- cluster:\n\t    server: http://localhost:8080\n\t  name: local-server\n\tcontexts:\n\t- context:\n\t    cluster: local-server\n\t    namespace: the-right-prefix\n\t    user: myself\n\t  name: default-context\n\tcurrent-context: default-context\n\tkind: Config\n\tpreferences: {}\n\tusers:\n\t- name: myself\n\t  user:\n\t    password: secret\n\t    username: admin\n\n示例文件的命令操作：\n\n\t$ kubectl config set preferences.colors true\n\t$ kubectl config set-cluster cow-cluster --server=http://cow.org:8080 --api-version=v1\n\t$ kubectl config set-cluster horse-cluster --server=https://horse.org:4443 --certificate-authority=path/to/my/cafile\n\t$ kubectl config set-cluster pig-cluster --server=https://pig.org:443 --insecure-skip-tls-verify=true\n\t$ kubectl config set-credentials blue-user --token=blue-token\n\t$ kubectl config set-credentials green-user --client-certificate=path/to/my/client/cert --client-key=path/to/my/client/key\n\t$ kubectl config set-context queen-anne-context --cluster=pig-cluster --user=black-user --namespace=saw-ns\n\t$ kubectl config set-context federal-context --cluster=horse-cluster --user=green-user --namespace=chisel-ns\n\t$ kubectl config use-context federal-context\n\n最后的总结：\n\n所以，看完这些，你就可以快速开始创建自己的 kubeconfig 文件了：\n\n* 仔细查看并了解 api-server 如何启动：了解你的安全策略后，然后才能设计 kubeconfig 文件以便于身份验证\n* 将上面的代码段替换为你集群的 api-server endpoint 的信息。\n* 确保 api-server 已启动，以至少向其提供一个用户（例如：green-user）凭证。当然，你必须查看 api-server 文档，以确定以目前最好的技术提供详细的身份验证信息。\n","slug":"kubernetes-learn","published":1,"updated":"2019-07-21T09:41:08.891Z","_id":"cjycnhjma00135vwn447rusb2","comments":1,"layout":"post","photos":[],"link":"","content":"<p>1 月初办理了入职手续，所在的团队是搞私有云的，目前只有小规模的应用，所采用 <strong>kubernetes + docker</strong> 技术栈，年前所做的事情也不算多，熟悉了 kubernetes 的架构，自己搭建单机版的 kubernetes，以及在程序中调用 kubernetes 的 <code>API</code> 进行某些操作。</p>\n<h2 id=\"1，kubernetes-搭建\"><a href=\"#1，kubernetes-搭建\" class=\"headerlink\" title=\"1，kubernetes 搭建\"></a>1，kubernetes 搭建</h2><p><a href=\"https://github.com/kubernetes/kubernetes\" target=\"_blank\" rel=\"noopener\">kubernetes</a> 是 google 的一个开源软件，其社区活跃量远超 <strong>Mesos，Coreos</strong> 的，若想深入学习建议参考<strong>《kubernetes 权威指南》</strong>，我们团队的人都是从这本书学起的，作为一个新技术，会踩到的坑非常多，以下提及的是我学习过程中整理的部分资料。</p>\n<p><img src=\"http://cdn.tianfeiyu.com/bank.png\" alt=\"kubernetes 架构图\"></p>\n<p>kubernetes 是一个分布式系统，所以它有多个组件，并且需要安装在多个节点，一般来说有三个节点，etcd，master 和 minion，但是每个节点却又有多台机器，etcd 作为高性能存储服务，一般独立为一个节点，当然容错是必不可少的，官方建议集群使用奇数个节点，我们的线下集群使用 3 个节点。etcd 的学习可以参考 <strong>gitbook</strong> 上面某大神的一本书 一 <a href=\"https://skyao.gitbooks.io/leaning-etcd3/content/documentation/leaning/\" target=\"_blank\" rel=\"noopener\">etcd3学习笔记</a>。master 端需要安装 kube-apiserver、kube-controller-manager和kube-scheduler 组件，minion 节点需要部署 kubelet、kube-proxy、docker 组件。</p>\n<blockquote>\n<p>注意：内核版本 &gt; 3.10 的系统才支持 kubernetes，所以一般安装在centos 7 上。 </p>\n</blockquote>\n<p>etcd 节点：</p>\n<pre><code># yum install -y etcd \n# systemctl start etcd  \n</code></pre><p>master 节点：</p>\n<pre><code># yum install -y kubernetes-master\n# systemctl start kube-apiserver \n# systemctl start kube-controller-manager \n# systemctl start kube-scheduler \n</code></pre><p>minion 节点：</p>\n<pre><code># yum install -y kubernetes  docker\n# systemctl start kubelet \n# systemctl start kube-proxy \n# systemctl start docker \n</code></pre><h2 id=\"2，kubernetes-版本升级\"><a href=\"#2，kubernetes-版本升级\" class=\"headerlink\" title=\"2，kubernetes 版本升级\"></a>2，kubernetes 版本升级</h2><p>以前一直以为公司会追求稳定性，在软件和系统的选取方便会优先考虑稳定的版本。但是来了公司才发现，某些软件出了新版本后，若有期待的功能并且在掌控范围内都会及时更新，所以也协助过导师更新了线下集群的 minion 节点。</p>\n<p>下面是 minion 节点的升级操作，master 节点的操作类似。首先需要下载 <a href=\"https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG.md#downloads-for-v160-alpha1\" target=\"_blank\" rel=\"noopener\">kubernetes-server-linux-amd64.tar.gz</a>  这个包，下载你所要更新到的版本。</p>\n<p><strong>升级步骤</strong>：</p>\n<ul>\n<li>1，先关掉 docker 服务。docker 关闭后，当前节点的 pod 随之会被调度到其他节点上</li>\n<li>2，备份二进制程序（kubectl,kube-proxy）</li>\n<li>3，将解压后的二进制程序覆盖以前的版本</li>\n<li>4，最后重新启动服务</li>\n</ul>\n<pre><code># systemctl stop docker\n# which kubectl kube-proxy \n/usr/bin/kubectl\n/usr/bin/kube-proxy\n\n# cp /usr/bin/{kubectl,kube-proxy} /tmp/\n# yes | cp bin/{kubectl,kube-proxy} /usr/bin/\n\n# systemctl status {kubectl,kube-proxy}\n\n# systemctl start docker \n</code></pre><h2 id=\"3，kubeconfig-使用\"><a href=\"#3，kubeconfig-使用\" class=\"headerlink\" title=\"3，kubeconfig 使用\"></a>3，kubeconfig 使用</h2><p>若你使用的 kubelet 版本为 1.4，使用 <code>systemctl status kubelet</code>  会看到这样一句话：</p>\n<pre><code>--api-servers option is deprecated for kubelet, so I am now trying to deploy with simply using --kubeconfig=/etc/kubernetes/node-kubeconfig.yaml\n</code></pre><p>使用 kuconfig 是为了将所有的命令行启动选项放在一个文件中方便使用。由于我们已经升级到了 1.5，所以也得升级此功能，首先需要写一个 kubeconfig 的 yaml 文件，其 <a href=\"http://kubernetes.io/docs/user-guide/kubeconfig-file/\" target=\"_blank\" rel=\"noopener\">官方文档</a> 有格式说明， 本人已将其翻译，翻译文档见下文。</p>\n<p><strong>kubeconfig</strong> 文件示例：</p>\n<pre><code>apiVersion: v1\nclusters:\n- cluster:\n    server: http://localhost:8080\n  name: local-server\ncontexts:\n- context:\n    cluster: local-server\n    namespace: the-right-prefix\n    user: myself\n  name: default-context\ncurrent-context: default-context\nkind: Config\npreferences: {}\nusers:\n- name: myself\n  user:\n    password: secret\n    username: admin\n</code></pre><hr>\n<pre><code># kubelet --kubeconfig=/etc/kubernetes/config --require-kubeconfig=true\n</code></pre><p>kubeconfig 参数：设置 kubelet 配置文件路径，这个配置文件用来告诉 kubelet 组件 api-server 组件的位置，默认路径是。</p>\n<p>require-kubeconfig 参数：这是一个布尔类型参数，可以设置成true 或者 false，如果设置成 true，那么表示启用 kubeconfig 参数，从 kubeconfig 参数设置的配置文件中查找 api-server 组件，如果设置成 false，那么表示使用 kubelet 另外一个参数 “api-servers” 来查找 api-server 组件位置。</p>\n<p>关于 kubeconfig 的一个 <strong>issue</strong>，<a href=\"https://github.com/kubernetes/kubernetes/issues/36745\" target=\"_blank\" rel=\"noopener\">Kubelet won’t read apiserver from kubeconfig</a>。</p>\n<p><strong>升级步骤</strong>，当然前提是你的 kubelet 版本已经到了 1.5：</p>\n<ul>\n<li>1，关闭 kubelet、kube-proxy 服务；</li>\n<li><p>2，注释掉 <code>/etc/kubernetes/kubelet</code> 文件中下面这一行:</p>\n<p>  <code>KUBELET_API_SERVER=&quot;--api-servers=http://127.0.0.1:8080&quot;</code></p>\n</li>\n</ul>\n<p>然后在 <strong>KUBELET_ARGS</strong> 中添加： </p>\n<pre><code>--kubeconfig=/etc/kubernetes/kubeconfig --require-kubeconfig=true\n</code></pre><p>这里的路径是你 yaml 文件放置的路径。 </p>\n<ul>\n<li>3，重新启动刚关掉的两个服务</li>\n</ul>\n<hr>\n<h2 id=\"4，以下为-kubeconfig-配置官方文档的翻译\"><a href=\"#4，以下为-kubeconfig-配置官方文档的翻译\" class=\"headerlink\" title=\"4，以下为 kubeconfig 配置官方文档的翻译\"></a>4，以下为 <a href=\"https://kubernetes.io/docs/user-guide/kubeconfig-file/\" target=\"_blank\" rel=\"noopener\">kubeconfig 配置官方文档</a>的翻译</h2><h3 id=\"kubernetes-中的验证对于不同的群体可以使用不同的方法\"><a href=\"#kubernetes-中的验证对于不同的群体可以使用不同的方法\" class=\"headerlink\" title=\"kubernetes 中的验证对于不同的群体可以使用不同的方法.\"></a>kubernetes 中的验证对于不同的群体可以使用不同的方法.</h3><ul>\n<li>运行 kubelet 可能有的一种认证方式（即证书）。</li>\n<li>用户可能有不同的认证方式（即 token）。</li>\n<li>管理员可以为每个用户提供一个证书列表。</li>\n<li>可能会有多个集群，但我们想在一个地方定义它们 - 使用户能够用自己的证书并重用相同的全局配置。 </li>\n</ul>\n<p>因此为了在多个集群之间轻松切换，对于多个用户，定义了一个 kubeconfig 文件。</p>\n<p>此文件包含一系列认证机制和与 nicknames 有关的群集连接信息。它还引入了认证信息元组（用户）和集群连接信息的概念，被称为上下文也与 nickname 相关联。</p>\n<p>如果明确指定，也可以允许使用多个 kubeconfig 文件。在运行时，它们被合并加载并覆盖从命令行指定的选项（参见下面的规则）。</p>\n<h3 id=\"相关讨论\"><a href=\"#相关讨论\" class=\"headerlink\" title=\"相关讨论\"></a>相关讨论</h3><pre><code>http://issue.k8s.io/1755\n</code></pre><h3 id=\"kubeconfig-文件的组件\"><a href=\"#kubeconfig-文件的组件\" class=\"headerlink\" title=\"kubeconfig 文件的组件\"></a>kubeconfig 文件的组件</h3><p>kubeconfig 文件示例：</p>\n<pre><code>current-context: federal-context\napiVersion: v1\nclusters:\n- cluster:\n    api-version: v1\n    server: http://cow.org:8080\n  name: cow-cluster\n- cluster:\n    certificate-authority: path/to/my/cafile\n    server: https://horse.org:4443\n  name: horse-cluster\n- cluster:\n    insecure-skip-tls-verify: true\n    server: https://pig.org:443\n  name: pig-cluster\ncontexts:\n- context:\n    cluster: horse-cluster\n    namespace: chisel-ns\n    user: green-user\n  name: federal-context\n- context:\n    cluster: pig-cluster\n    namespace: saw-ns\n    user: black-user\n  name: queen-anne-context\nkind: Config\npreferences:\n  colors: true\nusers:\n- name: blue-user\n  user:\n    token: blue-token\n- name: green-user\n  user:\n    client-certificate: path/to/my/client/cert\n    client-key: path/to/my/client/key\n</code></pre><h3 id=\"组件的解释\"><a href=\"#组件的解释\" class=\"headerlink\" title=\"组件的解释\"></a>组件的解释</h3><h4 id=\"cluster\"><a href=\"#cluster\" class=\"headerlink\" title=\"cluster\"></a>cluster</h4><pre><code>clusters:\n- cluster:\n    certificate-authority: path/to/my/cafile\n    server: https://horse.org:4443\n  name: horse-cluster\n- cluster:\n    insecure-skip-tls-verify: true\n    server: https://pig.org:443\n  name: pig-cluster\n</code></pre><p>cluster 包含 kubernetes 集群的 endpoint 数据。它包括 kubernetes apiserver 完全限定的 URL，以及集群的证书颁发机构或 insecure-skip-tls-verify：true，如果集群的服务证书未由系统信任的证书颁发机构签名。集群有一个名称（nickname），该名称用作此 kubeconfig 文件中的字典键。你可以使用 kubectl config set-cluster 添加或修改集群条目。</p>\n<h4 id=\"user\"><a href=\"#user\" class=\"headerlink\" title=\"user\"></a>user</h4><pre><code>users:\n- name: blue-user\n  user:\n    token: blue-token\n- name: green-user\n  user:\n    client-certificate: path/to/my/client/cert\n    client-key: path/to/my/client/key\n</code></pre><p>用户定义用于向 Kubernetes 集群进行身份验证的客户端凭证。在 kubeconfig 被加载/合并之后，用户具有在用户条目列表中充当其键的名称（nickname）。可用的凭证是客户端证书，客户端密钥，令牌和用户名/密码。用户名/密码和令牌是互斥的，但客户端证书和密钥可以与它们组合。你可以使用 kubectl config set-credentials 添加或修改用户条目。</p>\n<h3 id=\"context\"><a href=\"#context\" class=\"headerlink\" title=\"context\"></a>context</h3><pre><code>contexts:\n- context:\n    cluster: horse-cluster\n    namespace: chisel-ns\n    user: green-user\n  name: federal-context\n</code></pre><p>context 定义 cluster,user,namespace 元组的名称，用来向指定的集群使用提供的认证信息和命名空间向指定的集群发送请求。<br>三个都是可选的，仅指定 cluster，user，namespace 中的一个也是可用的，或者指定为 none。未指定的值或命名值，在加载的 kubeconfig 中没有对应的条目（例如，如果context 在上面的 kubeconfig 文件指定为 pink-user ）将被替换为默认值。有关覆盖/合并行为，请参阅下面的加载/合并规则。你可以使用 kubectl config set-context 添加或修改上下文条目。</p>\n<h4 id=\"current-context\"><a href=\"#current-context\" class=\"headerlink\" title=\"current-context\"></a>current-context</h4><pre><code>current-context: federal-context\n</code></pre><p>current-context 是 cluster,user,namespace 中的 nickname 或者 ‘key’，kubectl 在从此文件加载配置时将使用默认值。通过给 kubelett 传递 –context=CONTEXT, –cluster=CLUSTER, –user=USER, and/or –namespace=NAMESPACE 可以从命令行覆盖任何值。你可以使用 kubectl config use-context 更改当前上下文。</p>\n<h4 id=\"杂项\"><a href=\"#杂项\" class=\"headerlink\" title=\"杂项\"></a>杂项</h4><pre><code>apiVersion: v1\nkind: Config\npreferences:\n  colors: true\n</code></pre><p>apiVersion 和 kind 标识客户端要解析的版本和模式，不应手动编辑。<br>preferences 指定选项(和当前未使用的) kubectl preferences.</p>\n<h3 id=\"查看-kubeconfig-文件\"><a href=\"#查看-kubeconfig-文件\" class=\"headerlink\" title=\"查看 kubeconfig 文件\"></a>查看 kubeconfig 文件</h3><p>kubectl config view 会显示当前的 kubeconfig 配置。默认情况下，它会显示所有加载的 kubeconfig 配置， 你可以通过 –minify 选项来过滤与 current-context 相关的设置。请参见 kubectl config view 的其他选项。</p>\n<h3 id=\"创建你的-kubeconfig-文件\"><a href=\"#创建你的-kubeconfig-文件\" class=\"headerlink\" title=\"创建你的 kubeconfig 文件\"></a>创建你的 kubeconfig 文件</h3><p>注意，如果你通过 kube-up.sh 部署 k8s，则不需要创建 kubeconfig 文件，脚本将为你创建。</p>\n<p>在任何情况下，可以轻松地使用此文件作为模板来创建自己的 kubeconfig 文件。</p>\n<p>因此，让我们快速浏览上述文件的基础知识，以便可以根据需要轻松修改…</p>\n<p>以上文件可能对应于使用–token-auth-file = tokens.csv 选项启动的 api 服务器，其中 tokens.csv文件看起来像这样：</p>\n<pre><code>blue-user,blue-user,1\nmister-red,mister-red,2\n</code></pre><p>此外，由于不同用户使用不同的验证机制，api-server 可能已经启动其他的身份验证选项（有许多这样的选项，在制作 kubeconfig 文件之前确保你理解所关心的，因为没有人需要实现所有可能的认证方案）。</p>\n<ul>\n<li>由于 current-context 的用户是 “green-user”，因此任何使用此 kubeconfig 文件的客户端自然都能够成功登录 api-server，因为我们提供了 “green-user” 的客户端凭据。</li>\n<li>类似地，我们也可以选择改变 current-context 的值为 “blue-user”。</li>\n<li>在上述情况下，“green-user” 将必须通过提供证书登录，而 “blue-user” 只需提供 token。所有的这些信息将由我们处理通过</li>\n</ul>\n<h3 id=\"加载和合并规则\"><a href=\"#加载和合并规则\" class=\"headerlink\" title=\"加载和合并规则\"></a>加载和合并规则</h3><p>加载和合并 kubeconfig 文件的规则很简单，但有很多。最终配置按照以下顺序构建：</p>\n<p>1，从磁盘获取 kubeconfig。通过以下层次结构和合并规则完成：<br>如果设置了 CommandLineLocation（kubeconfig 命令行选项的值），则仅使用此文件，不合并。只允许此标志的一个实例。</p>\n<p>否则，如果 EnvVarLocation（$KUBECONFIG 的值）可用，将其用作应合并的文件列表。根据以下规则将文件合并在一起。将忽略空文件名。文件内容不能反序列化则产生错误。设置特定值或映射密钥的第一个文件将被使用，并且值或映射密钥永远不会更改。这意味着设置CurrentContext 的第一个文件将保留其 context。也意味着如果两个文件指定 “red-user”,，则仅使用来自第一个文件的 “red-user” 的值。来自第二个 “red-user” 文件的非冲突条目也将被丢弃。</p>\n<p>对于其他的，使用 HomeDirectoryLocation（~/.kube/config）也不会被合并。</p>\n<p>2，此链中第一个被匹配的 context 将被使用：</p>\n<ul>\n<li>1，命令行参数 - 命令行选项中 context 的值</li>\n<li>2，合并文件中的 current-context</li>\n<li>3，此段允许为空</li>\n</ul>\n<p>3，确定要使用的集群信息和用户。在此处，也可能没有 context。这个链中第一次使用的会被构建。（运行两次，一次为用户，一次为集群）：</p>\n<ul>\n<li>1，命令行参数 - user 是用户名，cluster 是集群名</li>\n<li>2，如果存在 context 则使用</li>\n<li>3，允许为空</li>\n</ul>\n<p>4，确定要使用的实际集群信息。在此处，也可能没有集群信息。基于链构建每个集群信息（首次使用的）：</p>\n<ul>\n<li>1，命令行参数 - server，api-version，certificate-authority 和 insecure-skip-tls-verify</li>\n<li>2，如果存在集群信息并且该属性的值存在，则使用它。</li>\n<li>3，如果没有 server 位置则出错。</li>\n</ul>\n<p>5，确定要使用的实际用户信息。用户构建使用与集群信息相同的规则，但每个用户只能具有一种认证方法：</p>\n<ul>\n<li>1，加载优先级为 1）命令行参数，2） kubeconfig 的用户字段</li>\n<li>2，命令行参数：客户端证书，客户端密钥，用户名，密码和 token。</li>\n<li>3，如果两者有冲突则失败</li>\n</ul>\n<p>6，对于仍然缺失的信息，使用默认值并尽可能提示输入身份验证信息。</p>\n<p>7，kubeconfig 文件中的所有文件引用都是相对于 kubeconfig 文件本身的位置解析的。当文件引用显示在命令行上时，它们被视为相对于当前工作目录。当路径保存在 ~/.kube/config 中时，相对路径和绝对路径被分别存储。</p>\n<p>kubeconfig 文件中的任何路径都是相对于 kubeconfig 文件本身的位置解析的。</p>\n<h3 id=\"通过-kubectl-config-操作-kubeconfig\"><a href=\"#通过-kubectl-config-操作-kubeconfig\" class=\"headerlink\" title=\"通过 kubectl config  操作 kubeconfig\"></a>通过 kubectl config <subcommand> 操作 kubeconfig</subcommand></h3><p>为了更容易地操作 kubeconfig 文件，可以使用 kubectl config 的子命令。请参见 kubectl/kubectl_config.md 获取帮助。</p>\n<p>例如：</p>\n<pre><code>$ kubectl config set-credentials myself --username=admin --password=secret\n$ kubectl config set-cluster local-server --server=http://localhost:8080\n$ kubectl config set-context default-context --cluster=local-server --user=myself\n$ kubectl config use-context default-context\n$ kubectl config set contexts.default-context.namespace the-right-prefix\n$ kubectl config view\n</code></pre><p>输出：</p>\n<pre><code>apiVersion: v1\nclusters:\n- cluster:\n    server: http://localhost:8080\n  name: local-server\ncontexts:\n- context:\n    cluster: local-server\n    namespace: the-right-prefix\n    user: myself\n  name: default-context\ncurrent-context: default-context\nkind: Config\npreferences: {}\nusers:\n- name: myself\n  user:\n    password: secret\n    username: admin\n</code></pre><p>一个 kubeconfig 文件类似这样：</p>\n<pre><code>apiVersion: v1\nclusters:\n- cluster:\n    server: http://localhost:8080\n  name: local-server\ncontexts:\n- context:\n    cluster: local-server\n    namespace: the-right-prefix\n    user: myself\n  name: default-context\ncurrent-context: default-context\nkind: Config\npreferences: {}\nusers:\n- name: myself\n  user:\n    password: secret\n    username: admin\n</code></pre><p>示例文件的命令操作：</p>\n<pre><code>$ kubectl config set preferences.colors true\n$ kubectl config set-cluster cow-cluster --server=http://cow.org:8080 --api-version=v1\n$ kubectl config set-cluster horse-cluster --server=https://horse.org:4443 --certificate-authority=path/to/my/cafile\n$ kubectl config set-cluster pig-cluster --server=https://pig.org:443 --insecure-skip-tls-verify=true\n$ kubectl config set-credentials blue-user --token=blue-token\n$ kubectl config set-credentials green-user --client-certificate=path/to/my/client/cert --client-key=path/to/my/client/key\n$ kubectl config set-context queen-anne-context --cluster=pig-cluster --user=black-user --namespace=saw-ns\n$ kubectl config set-context federal-context --cluster=horse-cluster --user=green-user --namespace=chisel-ns\n$ kubectl config use-context federal-context\n</code></pre><p>最后的总结：</p>\n<p>所以，看完这些，你就可以快速开始创建自己的 kubeconfig 文件了：</p>\n<ul>\n<li>仔细查看并了解 api-server 如何启动：了解你的安全策略后，然后才能设计 kubeconfig 文件以便于身份验证</li>\n<li>将上面的代码段替换为你集群的 api-server endpoint 的信息。</li>\n<li>确保 api-server 已启动，以至少向其提供一个用户（例如：green-user）凭证。当然，你必须查看 api-server 文档，以确定以目前最好的技术提供详细的身份验证信息。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>1 月初办理了入职手续，所在的团队是搞私有云的，目前只有小规模的应用，所采用 <strong>kubernetes + docker</strong> 技术栈，年前所做的事情也不算多，熟悉了 kubernetes 的架构，自己搭建单机版的 kubernetes，以及在程序中调用 kubernetes 的 <code>API</code> 进行某些操作。</p>\n<h2 id=\"1，kubernetes-搭建\"><a href=\"#1，kubernetes-搭建\" class=\"headerlink\" title=\"1，kubernetes 搭建\"></a>1，kubernetes 搭建</h2><p><a href=\"https://github.com/kubernetes/kubernetes\" target=\"_blank\" rel=\"noopener\">kubernetes</a> 是 google 的一个开源软件，其社区活跃量远超 <strong>Mesos，Coreos</strong> 的，若想深入学习建议参考<strong>《kubernetes 权威指南》</strong>，我们团队的人都是从这本书学起的，作为一个新技术，会踩到的坑非常多，以下提及的是我学习过程中整理的部分资料。</p>\n<p><img src=\"http://cdn.tianfeiyu.com/bank.png\" alt=\"kubernetes 架构图\"></p>\n<p>kubernetes 是一个分布式系统，所以它有多个组件，并且需要安装在多个节点，一般来说有三个节点，etcd，master 和 minion，但是每个节点却又有多台机器，etcd 作为高性能存储服务，一般独立为一个节点，当然容错是必不可少的，官方建议集群使用奇数个节点，我们的线下集群使用 3 个节点。etcd 的学习可以参考 <strong>gitbook</strong> 上面某大神的一本书 一 <a href=\"https://skyao.gitbooks.io/leaning-etcd3/content/documentation/leaning/\" target=\"_blank\" rel=\"noopener\">etcd3学习笔记</a>。master 端需要安装 kube-apiserver、kube-controller-manager和kube-scheduler 组件，minion 节点需要部署 kubelet、kube-proxy、docker 组件。</p>\n<blockquote>\n<p>注意：内核版本 &gt; 3.10 的系统才支持 kubernetes，所以一般安装在centos 7 上。 </p>\n</blockquote>\n<p>etcd 节点：</p>\n<pre><code># yum install -y etcd \n# systemctl start etcd  \n</code></pre><p>master 节点：</p>\n<pre><code># yum install -y kubernetes-master\n# systemctl start kube-apiserver \n# systemctl start kube-controller-manager \n# systemctl start kube-scheduler \n</code></pre><p>minion 节点：</p>\n<pre><code># yum install -y kubernetes  docker\n# systemctl start kubelet \n# systemctl start kube-proxy \n# systemctl start docker \n</code></pre><h2 id=\"2，kubernetes-版本升级\"><a href=\"#2，kubernetes-版本升级\" class=\"headerlink\" title=\"2，kubernetes 版本升级\"></a>2，kubernetes 版本升级</h2><p>以前一直以为公司会追求稳定性，在软件和系统的选取方便会优先考虑稳定的版本。但是来了公司才发现，某些软件出了新版本后，若有期待的功能并且在掌控范围内都会及时更新，所以也协助过导师更新了线下集群的 minion 节点。</p>\n<p>下面是 minion 节点的升级操作，master 节点的操作类似。首先需要下载 <a href=\"https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG.md#downloads-for-v160-alpha1\" target=\"_blank\" rel=\"noopener\">kubernetes-server-linux-amd64.tar.gz</a>  这个包，下载你所要更新到的版本。</p>\n<p><strong>升级步骤</strong>：</p>\n<ul>\n<li>1，先关掉 docker 服务。docker 关闭后，当前节点的 pod 随之会被调度到其他节点上</li>\n<li>2，备份二进制程序（kubectl,kube-proxy）</li>\n<li>3，将解压后的二进制程序覆盖以前的版本</li>\n<li>4，最后重新启动服务</li>\n</ul>\n<pre><code># systemctl stop docker\n# which kubectl kube-proxy \n/usr/bin/kubectl\n/usr/bin/kube-proxy\n\n# cp /usr/bin/{kubectl,kube-proxy} /tmp/\n# yes | cp bin/{kubectl,kube-proxy} /usr/bin/\n\n# systemctl status {kubectl,kube-proxy}\n\n# systemctl start docker \n</code></pre><h2 id=\"3，kubeconfig-使用\"><a href=\"#3，kubeconfig-使用\" class=\"headerlink\" title=\"3，kubeconfig 使用\"></a>3，kubeconfig 使用</h2><p>若你使用的 kubelet 版本为 1.4，使用 <code>systemctl status kubelet</code>  会看到这样一句话：</p>\n<pre><code>--api-servers option is deprecated for kubelet, so I am now trying to deploy with simply using --kubeconfig=/etc/kubernetes/node-kubeconfig.yaml\n</code></pre><p>使用 kuconfig 是为了将所有的命令行启动选项放在一个文件中方便使用。由于我们已经升级到了 1.5，所以也得升级此功能，首先需要写一个 kubeconfig 的 yaml 文件，其 <a href=\"http://kubernetes.io/docs/user-guide/kubeconfig-file/\" target=\"_blank\" rel=\"noopener\">官方文档</a> 有格式说明， 本人已将其翻译，翻译文档见下文。</p>\n<p><strong>kubeconfig</strong> 文件示例：</p>\n<pre><code>apiVersion: v1\nclusters:\n- cluster:\n    server: http://localhost:8080\n  name: local-server\ncontexts:\n- context:\n    cluster: local-server\n    namespace: the-right-prefix\n    user: myself\n  name: default-context\ncurrent-context: default-context\nkind: Config\npreferences: {}\nusers:\n- name: myself\n  user:\n    password: secret\n    username: admin\n</code></pre><hr>\n<pre><code># kubelet --kubeconfig=/etc/kubernetes/config --require-kubeconfig=true\n</code></pre><p>kubeconfig 参数：设置 kubelet 配置文件路径，这个配置文件用来告诉 kubelet 组件 api-server 组件的位置，默认路径是。</p>\n<p>require-kubeconfig 参数：这是一个布尔类型参数，可以设置成true 或者 false，如果设置成 true，那么表示启用 kubeconfig 参数，从 kubeconfig 参数设置的配置文件中查找 api-server 组件，如果设置成 false，那么表示使用 kubelet 另外一个参数 “api-servers” 来查找 api-server 组件位置。</p>\n<p>关于 kubeconfig 的一个 <strong>issue</strong>，<a href=\"https://github.com/kubernetes/kubernetes/issues/36745\" target=\"_blank\" rel=\"noopener\">Kubelet won’t read apiserver from kubeconfig</a>。</p>\n<p><strong>升级步骤</strong>，当然前提是你的 kubelet 版本已经到了 1.5：</p>\n<ul>\n<li>1，关闭 kubelet、kube-proxy 服务；</li>\n<li><p>2，注释掉 <code>/etc/kubernetes/kubelet</code> 文件中下面这一行:</p>\n<p>  <code>KUBELET_API_SERVER=&quot;--api-servers=http://127.0.0.1:8080&quot;</code></p>\n</li>\n</ul>\n<p>然后在 <strong>KUBELET_ARGS</strong> 中添加： </p>\n<pre><code>--kubeconfig=/etc/kubernetes/kubeconfig --require-kubeconfig=true\n</code></pre><p>这里的路径是你 yaml 文件放置的路径。 </p>\n<ul>\n<li>3，重新启动刚关掉的两个服务</li>\n</ul>\n<hr>\n<h2 id=\"4，以下为-kubeconfig-配置官方文档的翻译\"><a href=\"#4，以下为-kubeconfig-配置官方文档的翻译\" class=\"headerlink\" title=\"4，以下为 kubeconfig 配置官方文档的翻译\"></a>4，以下为 <a href=\"https://kubernetes.io/docs/user-guide/kubeconfig-file/\" target=\"_blank\" rel=\"noopener\">kubeconfig 配置官方文档</a>的翻译</h2><h3 id=\"kubernetes-中的验证对于不同的群体可以使用不同的方法\"><a href=\"#kubernetes-中的验证对于不同的群体可以使用不同的方法\" class=\"headerlink\" title=\"kubernetes 中的验证对于不同的群体可以使用不同的方法.\"></a>kubernetes 中的验证对于不同的群体可以使用不同的方法.</h3><ul>\n<li>运行 kubelet 可能有的一种认证方式（即证书）。</li>\n<li>用户可能有不同的认证方式（即 token）。</li>\n<li>管理员可以为每个用户提供一个证书列表。</li>\n<li>可能会有多个集群，但我们想在一个地方定义它们 - 使用户能够用自己的证书并重用相同的全局配置。 </li>\n</ul>\n<p>因此为了在多个集群之间轻松切换，对于多个用户，定义了一个 kubeconfig 文件。</p>\n<p>此文件包含一系列认证机制和与 nicknames 有关的群集连接信息。它还引入了认证信息元组（用户）和集群连接信息的概念，被称为上下文也与 nickname 相关联。</p>\n<p>如果明确指定，也可以允许使用多个 kubeconfig 文件。在运行时，它们被合并加载并覆盖从命令行指定的选项（参见下面的规则）。</p>\n<h3 id=\"相关讨论\"><a href=\"#相关讨论\" class=\"headerlink\" title=\"相关讨论\"></a>相关讨论</h3><pre><code>http://issue.k8s.io/1755\n</code></pre><h3 id=\"kubeconfig-文件的组件\"><a href=\"#kubeconfig-文件的组件\" class=\"headerlink\" title=\"kubeconfig 文件的组件\"></a>kubeconfig 文件的组件</h3><p>kubeconfig 文件示例：</p>\n<pre><code>current-context: federal-context\napiVersion: v1\nclusters:\n- cluster:\n    api-version: v1\n    server: http://cow.org:8080\n  name: cow-cluster\n- cluster:\n    certificate-authority: path/to/my/cafile\n    server: https://horse.org:4443\n  name: horse-cluster\n- cluster:\n    insecure-skip-tls-verify: true\n    server: https://pig.org:443\n  name: pig-cluster\ncontexts:\n- context:\n    cluster: horse-cluster\n    namespace: chisel-ns\n    user: green-user\n  name: federal-context\n- context:\n    cluster: pig-cluster\n    namespace: saw-ns\n    user: black-user\n  name: queen-anne-context\nkind: Config\npreferences:\n  colors: true\nusers:\n- name: blue-user\n  user:\n    token: blue-token\n- name: green-user\n  user:\n    client-certificate: path/to/my/client/cert\n    client-key: path/to/my/client/key\n</code></pre><h3 id=\"组件的解释\"><a href=\"#组件的解释\" class=\"headerlink\" title=\"组件的解释\"></a>组件的解释</h3><h4 id=\"cluster\"><a href=\"#cluster\" class=\"headerlink\" title=\"cluster\"></a>cluster</h4><pre><code>clusters:\n- cluster:\n    certificate-authority: path/to/my/cafile\n    server: https://horse.org:4443\n  name: horse-cluster\n- cluster:\n    insecure-skip-tls-verify: true\n    server: https://pig.org:443\n  name: pig-cluster\n</code></pre><p>cluster 包含 kubernetes 集群的 endpoint 数据。它包括 kubernetes apiserver 完全限定的 URL，以及集群的证书颁发机构或 insecure-skip-tls-verify：true，如果集群的服务证书未由系统信任的证书颁发机构签名。集群有一个名称（nickname），该名称用作此 kubeconfig 文件中的字典键。你可以使用 kubectl config set-cluster 添加或修改集群条目。</p>\n<h4 id=\"user\"><a href=\"#user\" class=\"headerlink\" title=\"user\"></a>user</h4><pre><code>users:\n- name: blue-user\n  user:\n    token: blue-token\n- name: green-user\n  user:\n    client-certificate: path/to/my/client/cert\n    client-key: path/to/my/client/key\n</code></pre><p>用户定义用于向 Kubernetes 集群进行身份验证的客户端凭证。在 kubeconfig 被加载/合并之后，用户具有在用户条目列表中充当其键的名称（nickname）。可用的凭证是客户端证书，客户端密钥，令牌和用户名/密码。用户名/密码和令牌是互斥的，但客户端证书和密钥可以与它们组合。你可以使用 kubectl config set-credentials 添加或修改用户条目。</p>\n<h3 id=\"context\"><a href=\"#context\" class=\"headerlink\" title=\"context\"></a>context</h3><pre><code>contexts:\n- context:\n    cluster: horse-cluster\n    namespace: chisel-ns\n    user: green-user\n  name: federal-context\n</code></pre><p>context 定义 cluster,user,namespace 元组的名称，用来向指定的集群使用提供的认证信息和命名空间向指定的集群发送请求。<br>三个都是可选的，仅指定 cluster，user，namespace 中的一个也是可用的，或者指定为 none。未指定的值或命名值，在加载的 kubeconfig 中没有对应的条目（例如，如果context 在上面的 kubeconfig 文件指定为 pink-user ）将被替换为默认值。有关覆盖/合并行为，请参阅下面的加载/合并规则。你可以使用 kubectl config set-context 添加或修改上下文条目。</p>\n<h4 id=\"current-context\"><a href=\"#current-context\" class=\"headerlink\" title=\"current-context\"></a>current-context</h4><pre><code>current-context: federal-context\n</code></pre><p>current-context 是 cluster,user,namespace 中的 nickname 或者 ‘key’，kubectl 在从此文件加载配置时将使用默认值。通过给 kubelett 传递 –context=CONTEXT, –cluster=CLUSTER, –user=USER, and/or –namespace=NAMESPACE 可以从命令行覆盖任何值。你可以使用 kubectl config use-context 更改当前上下文。</p>\n<h4 id=\"杂项\"><a href=\"#杂项\" class=\"headerlink\" title=\"杂项\"></a>杂项</h4><pre><code>apiVersion: v1\nkind: Config\npreferences:\n  colors: true\n</code></pre><p>apiVersion 和 kind 标识客户端要解析的版本和模式，不应手动编辑。<br>preferences 指定选项(和当前未使用的) kubectl preferences.</p>\n<h3 id=\"查看-kubeconfig-文件\"><a href=\"#查看-kubeconfig-文件\" class=\"headerlink\" title=\"查看 kubeconfig 文件\"></a>查看 kubeconfig 文件</h3><p>kubectl config view 会显示当前的 kubeconfig 配置。默认情况下，它会显示所有加载的 kubeconfig 配置， 你可以通过 –minify 选项来过滤与 current-context 相关的设置。请参见 kubectl config view 的其他选项。</p>\n<h3 id=\"创建你的-kubeconfig-文件\"><a href=\"#创建你的-kubeconfig-文件\" class=\"headerlink\" title=\"创建你的 kubeconfig 文件\"></a>创建你的 kubeconfig 文件</h3><p>注意，如果你通过 kube-up.sh 部署 k8s，则不需要创建 kubeconfig 文件，脚本将为你创建。</p>\n<p>在任何情况下，可以轻松地使用此文件作为模板来创建自己的 kubeconfig 文件。</p>\n<p>因此，让我们快速浏览上述文件的基础知识，以便可以根据需要轻松修改…</p>\n<p>以上文件可能对应于使用–token-auth-file = tokens.csv 选项启动的 api 服务器，其中 tokens.csv文件看起来像这样：</p>\n<pre><code>blue-user,blue-user,1\nmister-red,mister-red,2\n</code></pre><p>此外，由于不同用户使用不同的验证机制，api-server 可能已经启动其他的身份验证选项（有许多这样的选项，在制作 kubeconfig 文件之前确保你理解所关心的，因为没有人需要实现所有可能的认证方案）。</p>\n<ul>\n<li>由于 current-context 的用户是 “green-user”，因此任何使用此 kubeconfig 文件的客户端自然都能够成功登录 api-server，因为我们提供了 “green-user” 的客户端凭据。</li>\n<li>类似地，我们也可以选择改变 current-context 的值为 “blue-user”。</li>\n<li>在上述情况下，“green-user” 将必须通过提供证书登录，而 “blue-user” 只需提供 token。所有的这些信息将由我们处理通过</li>\n</ul>\n<h3 id=\"加载和合并规则\"><a href=\"#加载和合并规则\" class=\"headerlink\" title=\"加载和合并规则\"></a>加载和合并规则</h3><p>加载和合并 kubeconfig 文件的规则很简单，但有很多。最终配置按照以下顺序构建：</p>\n<p>1，从磁盘获取 kubeconfig。通过以下层次结构和合并规则完成：<br>如果设置了 CommandLineLocation（kubeconfig 命令行选项的值），则仅使用此文件，不合并。只允许此标志的一个实例。</p>\n<p>否则，如果 EnvVarLocation（$KUBECONFIG 的值）可用，将其用作应合并的文件列表。根据以下规则将文件合并在一起。将忽略空文件名。文件内容不能反序列化则产生错误。设置特定值或映射密钥的第一个文件将被使用，并且值或映射密钥永远不会更改。这意味着设置CurrentContext 的第一个文件将保留其 context。也意味着如果两个文件指定 “red-user”,，则仅使用来自第一个文件的 “red-user” 的值。来自第二个 “red-user” 文件的非冲突条目也将被丢弃。</p>\n<p>对于其他的，使用 HomeDirectoryLocation（~/.kube/config）也不会被合并。</p>\n<p>2，此链中第一个被匹配的 context 将被使用：</p>\n<ul>\n<li>1，命令行参数 - 命令行选项中 context 的值</li>\n<li>2，合并文件中的 current-context</li>\n<li>3，此段允许为空</li>\n</ul>\n<p>3，确定要使用的集群信息和用户。在此处，也可能没有 context。这个链中第一次使用的会被构建。（运行两次，一次为用户，一次为集群）：</p>\n<ul>\n<li>1，命令行参数 - user 是用户名，cluster 是集群名</li>\n<li>2，如果存在 context 则使用</li>\n<li>3，允许为空</li>\n</ul>\n<p>4，确定要使用的实际集群信息。在此处，也可能没有集群信息。基于链构建每个集群信息（首次使用的）：</p>\n<ul>\n<li>1，命令行参数 - server，api-version，certificate-authority 和 insecure-skip-tls-verify</li>\n<li>2，如果存在集群信息并且该属性的值存在，则使用它。</li>\n<li>3，如果没有 server 位置则出错。</li>\n</ul>\n<p>5，确定要使用的实际用户信息。用户构建使用与集群信息相同的规则，但每个用户只能具有一种认证方法：</p>\n<ul>\n<li>1，加载优先级为 1）命令行参数，2） kubeconfig 的用户字段</li>\n<li>2，命令行参数：客户端证书，客户端密钥，用户名，密码和 token。</li>\n<li>3，如果两者有冲突则失败</li>\n</ul>\n<p>6，对于仍然缺失的信息，使用默认值并尽可能提示输入身份验证信息。</p>\n<p>7，kubeconfig 文件中的所有文件引用都是相对于 kubeconfig 文件本身的位置解析的。当文件引用显示在命令行上时，它们被视为相对于当前工作目录。当路径保存在 ~/.kube/config 中时，相对路径和绝对路径被分别存储。</p>\n<p>kubeconfig 文件中的任何路径都是相对于 kubeconfig 文件本身的位置解析的。</p>\n<h3 id=\"通过-kubectl-config-操作-kubeconfig\"><a href=\"#通过-kubectl-config-操作-kubeconfig\" class=\"headerlink\" title=\"通过 kubectl config  操作 kubeconfig\"></a>通过 kubectl config <subcommand> 操作 kubeconfig</subcommand></h3><p>为了更容易地操作 kubeconfig 文件，可以使用 kubectl config 的子命令。请参见 kubectl/kubectl_config.md 获取帮助。</p>\n<p>例如：</p>\n<pre><code>$ kubectl config set-credentials myself --username=admin --password=secret\n$ kubectl config set-cluster local-server --server=http://localhost:8080\n$ kubectl config set-context default-context --cluster=local-server --user=myself\n$ kubectl config use-context default-context\n$ kubectl config set contexts.default-context.namespace the-right-prefix\n$ kubectl config view\n</code></pre><p>输出：</p>\n<pre><code>apiVersion: v1\nclusters:\n- cluster:\n    server: http://localhost:8080\n  name: local-server\ncontexts:\n- context:\n    cluster: local-server\n    namespace: the-right-prefix\n    user: myself\n  name: default-context\ncurrent-context: default-context\nkind: Config\npreferences: {}\nusers:\n- name: myself\n  user:\n    password: secret\n    username: admin\n</code></pre><p>一个 kubeconfig 文件类似这样：</p>\n<pre><code>apiVersion: v1\nclusters:\n- cluster:\n    server: http://localhost:8080\n  name: local-server\ncontexts:\n- context:\n    cluster: local-server\n    namespace: the-right-prefix\n    user: myself\n  name: default-context\ncurrent-context: default-context\nkind: Config\npreferences: {}\nusers:\n- name: myself\n  user:\n    password: secret\n    username: admin\n</code></pre><p>示例文件的命令操作：</p>\n<pre><code>$ kubectl config set preferences.colors true\n$ kubectl config set-cluster cow-cluster --server=http://cow.org:8080 --api-version=v1\n$ kubectl config set-cluster horse-cluster --server=https://horse.org:4443 --certificate-authority=path/to/my/cafile\n$ kubectl config set-cluster pig-cluster --server=https://pig.org:443 --insecure-skip-tls-verify=true\n$ kubectl config set-credentials blue-user --token=blue-token\n$ kubectl config set-credentials green-user --client-certificate=path/to/my/client/cert --client-key=path/to/my/client/key\n$ kubectl config set-context queen-anne-context --cluster=pig-cluster --user=black-user --namespace=saw-ns\n$ kubectl config set-context federal-context --cluster=horse-cluster --user=green-user --namespace=chisel-ns\n$ kubectl config use-context federal-context\n</code></pre><p>最后的总结：</p>\n<p>所以，看完这些，你就可以快速开始创建自己的 kubeconfig 文件了：</p>\n<ul>\n<li>仔细查看并了解 api-server 如何启动：了解你的安全策略后，然后才能设计 kubeconfig 文件以便于身份验证</li>\n<li>将上面的代码段替换为你集群的 api-server endpoint 的信息。</li>\n<li>确保 api-server 已启动，以至少向其提供一个用户（例如：green-user）凭证。当然，你必须查看 api-server 文档，以确定以目前最好的技术提供详细的身份验证信息。</li>\n</ul>\n"},{"title":"kubelet 状态上报的方式","date":"2019-06-09T12:37:30.000Z","type":"node status","_content":"\n\n 分布式系统中服务端会通过心跳机制确认客户端是否存活，在 k8s 中，kubelet 也会定时上报心跳到 apiserver，以此判断该 node 是否存活，若 node 超过一定时间没有上报心跳，其状态会被置为 NotReady，宿主上容器的状态也会被置为 Nodelost 或者 Unknown 状态。kubelet 自身会定期更新状态到 apiserver，通过参数 `--node-status-update-frequency` 指定上报频率，默认是 10s 上报一次，kubelet 不止上报心跳信息还会上报自身的一些数据信息。\n\n\n\n### 一、kubelet 上报哪些状态\n\n 在 k8s 中，一个 node 的状态包含以下几个信息：\n\n- [Addresses](https://kubernetes.io/docs/concepts/architecture/nodes/#addresses)\n- [Condition](https://kubernetes.io/docs/concepts/architecture/nodes/#condition)\n- [Capacity](https://kubernetes.io/docs/concepts/architecture/nodes/#capacity)\n- [Info](https://kubernetes.io/docs/concepts/architecture/nodes/#info)\n\n##### 1、Addresses\n\n主要包含以下几个字段：\n\n- HostName：Hostname 。可以通过 kubelet 的 `--hostname-override` 参数进行覆盖。\n- ExternalIP：通常是可以外部路由的 node IP 地址（从集群外可访问）。\n- InternalIP：通常是仅可在集群内部路由的 node IP 地址。\n\n##### 2、Condition\n\n`conditions` 字段描述了所有 `Running` nodes 的状态。\n\n![condition](http://cdn.tianfeiyu.com/1262158-05b37df015e527b7.png)\n\n##### 3、Capacity\n\n描述 node 上的可用资源：CPU、内存和可以调度到该 node 上的最大 pod 数量。\n\n##### 4、Info\n\n描述 node 的一些通用信息，例如内核版本、Kubernetes 版本（kubelet 和 kube-proxy 版本）、Docker 版本 （如果使用了）和系统版本，这些信息由 kubelet 从 node 上获取到。\n\n使用 `kubectl get node xxx -o yaml` 可以看到 node 所有的状态的信息，其中 status 中的信息都是 kubelet 需要上报的，所以 kubelet 不止上报心跳信息还上报节点信息、节点 OOD 信息、内存磁盘压力状态、节点监控状态、是否调度等。\n\n\n\n![node 状态信息](http://cdn.tianfeiyu.com/status.png)\n\n\n\n\n\n###  二、kubelet 状态异常时的影响\n\n如果一个 node 处于非 Ready 状态超过 `pod-eviction-timeout`的值(默认为 5 分钟，在 kube-controller-manager 中定义)，在 v1.5 之前的版本中 kube-controller-manager 会 `force delete pod` 然后调度该宿主上的 pods 到其他宿主，在 v1.5 之后的版本中，kube-controller-manager 不会 `force delete pod`，pod 会一直处于`Terminating` 或`Unknown` 状态直到 node 被从 master 中删除或 kubelet 状态变为 Ready。在 node NotReady 期间，Daemonset 的 Pod 状态变为 Nodelost，Deployment、Statefulset 和 Static Pod 的状态先变为 NodeLost，然后马上变为 Unknown。Deployment 的 pod 会 recreate，Static Pod 和 Statefulset 的 Pod 会一直处于 Unknown 状态。\n\n当 kubelet 变为 Ready 状态时，Daemonset的pod不会recreate，旧pod状态直接变为Running，Deployment的则是将kubelet进程停止的Node删除，Statefulset的Pod会重新recreate，Staic Pod 会被删除。\n\n\n\n### 三、kubelet 状态上报的实现\n\nkubelet 有两种上报状态的方式，第一种定期向 apiserver 发送心跳消息，简单理解就是启动一个 goroutine 然后定期向 APIServer 发送消息。\n\n第二中被称为 NodeLease，在 v1.13 之前的版本中，节点的心跳只有 NodeStatus，从 v1.13 开始，NodeLease feature 作为 alpha 特性引入。当启用 NodeLease feature 时，每个节点在“kube-node-lease”名称空间中都有一个关联的“Lease”对象，该对象由节点定期更新，NodeStatus 和 NodeLease 都被视为来自节点的心跳。NodeLease 会频繁更新，而只有在 NodeStatus 发生改变或者超过了一定时间(默认值为1分钟，node-monitor-grace-period 的默认值为 40s)，才会将 NodeStatus 上报给 master。由于 NodeLease 比 NodeStatus 更轻量级，该特性在集群规模扩展性和性能上有明显提升。本文主要分析第一种上报方式的实现。\n\n\n\n> kubernetes 版本 ：v1.13\n\n\n\nkubelet 上报状态的代码大部分在 `kubernetes/pkg/kubelet/kubelet_node_status.go` 中实现。状态上报的功能是在 `kubernetes/pkg/kubelet/kubelet.go#Run` 方法以 goroutine 形式中启动的，kubelet 中多个重要的功能都是在该方法中启动的。\n\n `kubernetes/pkg/kubelet/kubelet.go#Run`\n\n```\nfunc (kl *Kubelet) Run(updates <-chan kubetypes.PodUpdate) {  \n  \t// ...\n  \tif kl.kubeClient != nil {\n        // Start syncing node status immediately, this may set up things the runtime needs to run.\n        go wait.Until(kl.syncNodeStatus, kl.nodeStatusUpdateFrequency, wait.NeverStop)\n        go kl.fastStatusUpdateOnce()\n\t\t\t\t\n\t    // 一种新的状态上报方式\n\t    // start syncing lease\n        if utilfeature.DefaultFeatureGate.Enabled(features.NodeLease) {\n            go kl.nodeLeaseController.Run(wait.NeverStop)\n        }\n    }\n\t\t// ...    \n}\n```\n\nkl.syncNodeStatus 便是上报状态的，此处 kl.nodeStatusUpdateFrequency 使用的是默认设置的 10s，也就是说节点间同步状态的函数 kl.syncNodeStatus 每 10s 执行一次。\n\n\n\nsyncNodeStatus 是状态上报的入口函数，其后所调用的多个函数也都是在同一个文件中实现的。\n\n`kubernetes/pkg/kubelet/kubelet_node_status.go#syncNodeStatus`\n\n```\nfunc (kl *Kubelet) syncNodeStatus() {\n    kl.syncNodeStatusMux.Lock()\n    defer kl.syncNodeStatusMux.Unlock()\n\n    if kl.kubeClient == nil || kl.heartbeatClient == nil {\n        return\n    }\n    \n    // 是否为注册节点\n    if kl.registerNode {\n        // This will exit immediately if it doesn't need to do anything.\n        kl.registerWithAPIServer()\n    }\n    if err := kl.updateNodeStatus(); err != nil {\n        klog.Errorf(\"Unable to update node status: %v\", err)\n    }\n}\n```\n\nsyncNodeStatus 调用 updateNodeStatus， 然后又调用 tryUpdateNodeStatus 来进行上报操作，而最终调用的是 setNodeStatus。这里还进行了同步状态判断，如果是注册节点，则执行 registerWithAPIServer，否则，执行 updateNodeStatus。\n\n\n\nupdateNodeStatus 主要是调用 tryUpdateNodeStatus 进行后续的操作，该函数中定义了状态上报重试的次数，nodeStatusUpdateRetry 默认定义为 5 次。\n\n`kubernetes/pkg/kubelet/kubelet_node_status.go#updateNodeStatus`\n\n```\nfunc (kl *Kubelet) updateNodeStatus() error {\n    klog.V(5).Infof(\"Updating node status\")\n    for i := 0; i < nodeStatusUpdateRetry; i++ {\n        if err := kl.tryUpdateNodeStatus(i); err != nil {\n            if i > 0 && kl.onRepeatedHeartbeatFailure != nil {\n                kl.onRepeatedHeartbeatFailure()\n            }\n            klog.Errorf(\"Error updating node status, will retry: %v\", err)\n        } else {\n            return nil\n        }\n    }\n    return fmt.Errorf(\"update node status exceeds retry count\")\n}\n```\n\n\n\ntryUpdateNodeStatus 是主要的上报逻辑，先给 node 设置状态，然后上报 node 的状态到 master。\n\n`kubernetes/pkg/kubelet/kubelet_node_status.go#tryUpdateNodeStatus`\n\n```\nfunc (kl *Kubelet) tryUpdateNodeStatus(tryNumber int) error {\n\topts := metav1.GetOptions{}\n\tif tryNumber == 0 {\n\t\tutil.FromApiserverCache(&opts)\n\t}\n\t\n\t// 获取 node 信息\n\tnode, err := kl.heartbeatClient.CoreV1().Nodes().Get(string(kl.nodeName), opts)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"error getting node %q: %v\", kl.nodeName, err)\n\t}\n\n\toriginalNode := node.DeepCopy()\n\tif originalNode == nil {\n\t\treturn fmt.Errorf(\"nil %q node object\", kl.nodeName)\n\t}\n\n\tpodCIDRChanged := false\n\tif node.Spec.PodCIDR != \"\" {\n\t\tif podCIDRChanged, err = kl.updatePodCIDR(node.Spec.PodCIDR); err != nil {\n\t\t\tklog.Errorf(err.Error())\n\t\t}\n\t}\n\n\t// 设置 node 状态\n\tkl.setNodeStatus(node)\n\n\tnow := kl.clock.Now()\n\tif utilfeature.DefaultFeatureGate.Enabled(features.NodeLease) && now.Before(kl.lastStatusReportTime.Add(kl.nodeStatusReportFrequency)) {\n\t\tif !podCIDRChanged && !nodeStatusHasChanged(&originalNode.Status, &node.Status) {\n\t\t\tkl.volumeManager.MarkVolumesAsReportedInUse(node.Status.VolumesInUse)\n\t\t\treturn nil\n\t\t}\n\t}\n\n    // 更新 node 信息到 master\n\t// Patch the current status on the API server\n\tupdatedNode, _, err := nodeutil.PatchNodeStatus(kl.heartbeatClient.CoreV1(), types.NodeName(kl.nodeName), originalNode, node)\n\tif err != nil {\n\t\treturn err\n\t}\n\tkl.lastStatusReportTime = now\n\tkl.setLastObservedNodeAddresses(updatedNode.Status.Addresses)\n\t// If update finishes successfully, mark the volumeInUse as reportedInUse to indicate\n\t// those volumes are already updated in the node's status\n\tkl.volumeManager.MarkVolumesAsReportedInUse(updatedNode.Status.VolumesInUse)\n\treturn nil\n}\n```\n\ntryUpdateNodeStatus 中调用 setNodeStatus 设置 node 的状态。setNodeStatus 会获取一次 node 的所有状态，然后会将 kubelet 中保存的所有状态改为最新的值，也就是会重置 node status 中的所有字段。\n\n`kubernetes/pkg/kubelet/kubelet_node_status.go#setNodeStatus`\n\n```\nfunc (kl *Kubelet) setNodeStatus(node *v1.Node) {\n    for i, f := range kl.setNodeStatusFuncs {\n        klog.V(5).Infof(\"Setting node status at position %v\", i)\n        if err := f(node); err != nil {\n            klog.Warningf(\"Failed to set some node status fields: %s\", err)\n        }\n    }\n}\n```\n\nsetNodeStatus 通过 setNodeStatusFuncs 方法覆盖 node 结构体中所有的字段，setNodeStatusFuncs 是在\n\nNewMainKubelet(pkg/kubelet/kubelet.go) 中初始化的。\n\n`kubernetes/pkg/kubelet/kubelet.go#NewMainKubelet`\n\n```\n func NewMainKubelet(kubeCfg *kubeletconfiginternal.KubeletConfiguration,\n \t\t// ...\n \t\t// Generating the status funcs should be the last thing we do,\n    klet.setNodeStatusFuncs = klet.defaultNodeStatusFuncs()\n\n    return klet, nil\n}\n```\n\n\n\ndefaultNodeStatusFuncs 是生成状态的函数，通过获取 node 的所有状态指标后使用工厂函数生成状态\n\n`kubernetes/pkg/kubelet/kubelet_node_status.go#defaultNodeStatusFuncs`\n\n```\nfunc (kl *Kubelet) defaultNodeStatusFuncs() []func(*v1.Node) error {\n    // if cloud is not nil, we expect the cloud resource sync manager to exist\n    var nodeAddressesFunc func() ([]v1.NodeAddress, error)\n    if kl.cloud != nil {\n        nodeAddressesFunc = kl.cloudResourceSyncManager.NodeAddresses\n    }\n    var validateHostFunc func() error\n    if kl.appArmorValidator != nil {\n        validateHostFunc = kl.appArmorValidator.ValidateHost\n    }\n    var setters []func(n *v1.Node) error\n    setters = append(setters,\n        nodestatus.NodeAddress(kl.nodeIP, kl.nodeIPValidator, kl.hostname, kl.hostnameOverridden, kl.externalCloudProvider, kl.cloud, nodeAddressesFunc),\n        nodestatus.MachineInfo(string(kl.nodeName), kl.maxPods, kl.podsPerCore, kl.GetCachedMachineInfo, kl.containerManager.GetCapacity,\n            kl.containerManager.GetDevicePluginResourceCapacity, kl.containerManager.GetNodeAllocatableReservation, kl.recordEvent),\n        nodestatus.VersionInfo(kl.cadvisor.VersionInfo, kl.containerRuntime.Type, kl.containerRuntime.Version),\n        nodestatus.DaemonEndpoints(kl.daemonEndpoints),\n        nodestatus.Images(kl.nodeStatusMaxImages, kl.imageManager.GetImageList),\n        nodestatus.GoRuntime(),\n    )\n    if utilfeature.DefaultFeatureGate.Enabled(features.AttachVolumeLimit) {\n        setters = append(setters, nodestatus.VolumeLimits(kl.volumePluginMgr.ListVolumePluginWithLimits))\n    }\n    setters = append(setters,\n        nodestatus.MemoryPressureCondition(kl.clock.Now, kl.evictionManager.IsUnderMemoryPressure, kl.recordNodeStatusEvent),\n        nodestatus.DiskPressureCondition(kl.clock.Now, kl.evictionManager.IsUnderDiskPressure, kl.recordNodeStatusEvent),\n        nodestatus.PIDPressureCondition(kl.clock.Now, kl.evictionManager.IsUnderPIDPressure, kl.recordNodeStatusEvent),\n        nodestatus.ReadyCondition(kl.clock.Now, kl.runtimeState.runtimeErrors, kl.runtimeState.networkErrors, kl.runtimeState.storageErrors, validateHostFunc, kl.containerManager.  Status, kl.recordNodeStatusEvent),\n        nodestatus.VolumesInUse(kl.volumeManager.ReconcilerStatesHasBeenSynced, kl.volumeManager.GetVolumesInUse),\n        nodestatus.RemoveOutOfDiskCondition(),\n        // TODO(mtaufen): I decided not to move this setter for now, since all it does is send an event\n        // and record state back to the Kubelet runtime object. In the future, I'd like to isolate\n        // these side-effects by decoupling the decisions to send events and partial status recording\n        // from the Node setters.\n        kl.recordNodeSchedulableEvent,\n    )\n    return setters\n}\n```\n\ndefaultNodeStatusFuncs 可以看到 node 上报的所有信息，主要有 MemoryPressureCondition、DiskPressureCondition、PIDPressureCondition、ReadyCondition 等。每一种 nodestatus 都返回一个 setters，所有 setters 的定义在 pkg/kubelet/nodestatus/setters.go 文件中。\n\n对于二次开发而言，如果我们需要 APIServer 掌握更多的 Node 信息，可以在此处添加自定义函数，例如，上报磁盘信息等。\n\n\n\ntryUpdateNodeStatus 中最后调用 PatchNodeStatus 上报 node 的状态到 master。\n\n`kubernetes/pkg/util/node/node.go#PatchNodeStatus`\n\n```\n// PatchNodeStatus patches node status.\nfunc PatchNodeStatus(c v1core.CoreV1Interface, nodeName types.NodeName, oldNode *v1.Node, newNode *v1.Node) (*v1.Node, []byte, error) {\n\t\t// 计算 patch \n    patchBytes, err := preparePatchBytesforNodeStatus(nodeName, oldNode, newNode)\n    if err != nil {\n        return nil, nil, err\n    }\n\n    updatedNode, err := c.Nodes().Patch(string(nodeName), types.StrategicMergePatchType, patchBytes,       \"status\")\n    if err != nil {\n        return nil, nil, fmt.Errorf(\"failed to patch status %q for node %q: %v\", patchBytes, nodeName, err)\n    }\n    return updatedNode, patchBytes, nil\n}\n```\n\n在 PatchNodeStatus 会调用已注册的那些方法将状态把状态发给 APIServer。\n\n\n\n### 四、总结\n\n本文主要讲述了 kubelet 上报状态的方式及其实现，node 状态上报的方式目前有两种，本文仅分析了第一种状态上报的方式。在大规模集群中由于节点数量比较多，所有 node 都频繁报状态对 etcd 会有一定的压力，当 node 与 master 通信时由于网络导致心跳上报失败也会影响 node 的状态，为了避免类似问题的出现才有 NodeLease 方式，对于该功能的实现后文会继续进行分析。\n\n\n参考：\nhttps://www.qikqiak.com/post/kubelet-sync-node-status/\nhttps://www.jianshu.com/p/054450557818\nhttps://blog.csdn.net/shida_csdn/article/details/84286058\nhttps://kubernetes.io/docs/concepts/architecture/nodes/\n","source":"_posts/node_status.md","raw":"---\ntitle: kubelet 状态上报的方式\ndate: 2019-06-09 20:37:30\ntags: [\"node status\",\"kubelet\"]\ntype: \"node status\"\n\n---\n\n\n 分布式系统中服务端会通过心跳机制确认客户端是否存活，在 k8s 中，kubelet 也会定时上报心跳到 apiserver，以此判断该 node 是否存活，若 node 超过一定时间没有上报心跳，其状态会被置为 NotReady，宿主上容器的状态也会被置为 Nodelost 或者 Unknown 状态。kubelet 自身会定期更新状态到 apiserver，通过参数 `--node-status-update-frequency` 指定上报频率，默认是 10s 上报一次，kubelet 不止上报心跳信息还会上报自身的一些数据信息。\n\n\n\n### 一、kubelet 上报哪些状态\n\n 在 k8s 中，一个 node 的状态包含以下几个信息：\n\n- [Addresses](https://kubernetes.io/docs/concepts/architecture/nodes/#addresses)\n- [Condition](https://kubernetes.io/docs/concepts/architecture/nodes/#condition)\n- [Capacity](https://kubernetes.io/docs/concepts/architecture/nodes/#capacity)\n- [Info](https://kubernetes.io/docs/concepts/architecture/nodes/#info)\n\n##### 1、Addresses\n\n主要包含以下几个字段：\n\n- HostName：Hostname 。可以通过 kubelet 的 `--hostname-override` 参数进行覆盖。\n- ExternalIP：通常是可以外部路由的 node IP 地址（从集群外可访问）。\n- InternalIP：通常是仅可在集群内部路由的 node IP 地址。\n\n##### 2、Condition\n\n`conditions` 字段描述了所有 `Running` nodes 的状态。\n\n![condition](http://cdn.tianfeiyu.com/1262158-05b37df015e527b7.png)\n\n##### 3、Capacity\n\n描述 node 上的可用资源：CPU、内存和可以调度到该 node 上的最大 pod 数量。\n\n##### 4、Info\n\n描述 node 的一些通用信息，例如内核版本、Kubernetes 版本（kubelet 和 kube-proxy 版本）、Docker 版本 （如果使用了）和系统版本，这些信息由 kubelet 从 node 上获取到。\n\n使用 `kubectl get node xxx -o yaml` 可以看到 node 所有的状态的信息，其中 status 中的信息都是 kubelet 需要上报的，所以 kubelet 不止上报心跳信息还上报节点信息、节点 OOD 信息、内存磁盘压力状态、节点监控状态、是否调度等。\n\n\n\n![node 状态信息](http://cdn.tianfeiyu.com/status.png)\n\n\n\n\n\n###  二、kubelet 状态异常时的影响\n\n如果一个 node 处于非 Ready 状态超过 `pod-eviction-timeout`的值(默认为 5 分钟，在 kube-controller-manager 中定义)，在 v1.5 之前的版本中 kube-controller-manager 会 `force delete pod` 然后调度该宿主上的 pods 到其他宿主，在 v1.5 之后的版本中，kube-controller-manager 不会 `force delete pod`，pod 会一直处于`Terminating` 或`Unknown` 状态直到 node 被从 master 中删除或 kubelet 状态变为 Ready。在 node NotReady 期间，Daemonset 的 Pod 状态变为 Nodelost，Deployment、Statefulset 和 Static Pod 的状态先变为 NodeLost，然后马上变为 Unknown。Deployment 的 pod 会 recreate，Static Pod 和 Statefulset 的 Pod 会一直处于 Unknown 状态。\n\n当 kubelet 变为 Ready 状态时，Daemonset的pod不会recreate，旧pod状态直接变为Running，Deployment的则是将kubelet进程停止的Node删除，Statefulset的Pod会重新recreate，Staic Pod 会被删除。\n\n\n\n### 三、kubelet 状态上报的实现\n\nkubelet 有两种上报状态的方式，第一种定期向 apiserver 发送心跳消息，简单理解就是启动一个 goroutine 然后定期向 APIServer 发送消息。\n\n第二中被称为 NodeLease，在 v1.13 之前的版本中，节点的心跳只有 NodeStatus，从 v1.13 开始，NodeLease feature 作为 alpha 特性引入。当启用 NodeLease feature 时，每个节点在“kube-node-lease”名称空间中都有一个关联的“Lease”对象，该对象由节点定期更新，NodeStatus 和 NodeLease 都被视为来自节点的心跳。NodeLease 会频繁更新，而只有在 NodeStatus 发生改变或者超过了一定时间(默认值为1分钟，node-monitor-grace-period 的默认值为 40s)，才会将 NodeStatus 上报给 master。由于 NodeLease 比 NodeStatus 更轻量级，该特性在集群规模扩展性和性能上有明显提升。本文主要分析第一种上报方式的实现。\n\n\n\n> kubernetes 版本 ：v1.13\n\n\n\nkubelet 上报状态的代码大部分在 `kubernetes/pkg/kubelet/kubelet_node_status.go` 中实现。状态上报的功能是在 `kubernetes/pkg/kubelet/kubelet.go#Run` 方法以 goroutine 形式中启动的，kubelet 中多个重要的功能都是在该方法中启动的。\n\n `kubernetes/pkg/kubelet/kubelet.go#Run`\n\n```\nfunc (kl *Kubelet) Run(updates <-chan kubetypes.PodUpdate) {  \n  \t// ...\n  \tif kl.kubeClient != nil {\n        // Start syncing node status immediately, this may set up things the runtime needs to run.\n        go wait.Until(kl.syncNodeStatus, kl.nodeStatusUpdateFrequency, wait.NeverStop)\n        go kl.fastStatusUpdateOnce()\n\t\t\t\t\n\t    // 一种新的状态上报方式\n\t    // start syncing lease\n        if utilfeature.DefaultFeatureGate.Enabled(features.NodeLease) {\n            go kl.nodeLeaseController.Run(wait.NeverStop)\n        }\n    }\n\t\t// ...    \n}\n```\n\nkl.syncNodeStatus 便是上报状态的，此处 kl.nodeStatusUpdateFrequency 使用的是默认设置的 10s，也就是说节点间同步状态的函数 kl.syncNodeStatus 每 10s 执行一次。\n\n\n\nsyncNodeStatus 是状态上报的入口函数，其后所调用的多个函数也都是在同一个文件中实现的。\n\n`kubernetes/pkg/kubelet/kubelet_node_status.go#syncNodeStatus`\n\n```\nfunc (kl *Kubelet) syncNodeStatus() {\n    kl.syncNodeStatusMux.Lock()\n    defer kl.syncNodeStatusMux.Unlock()\n\n    if kl.kubeClient == nil || kl.heartbeatClient == nil {\n        return\n    }\n    \n    // 是否为注册节点\n    if kl.registerNode {\n        // This will exit immediately if it doesn't need to do anything.\n        kl.registerWithAPIServer()\n    }\n    if err := kl.updateNodeStatus(); err != nil {\n        klog.Errorf(\"Unable to update node status: %v\", err)\n    }\n}\n```\n\nsyncNodeStatus 调用 updateNodeStatus， 然后又调用 tryUpdateNodeStatus 来进行上报操作，而最终调用的是 setNodeStatus。这里还进行了同步状态判断，如果是注册节点，则执行 registerWithAPIServer，否则，执行 updateNodeStatus。\n\n\n\nupdateNodeStatus 主要是调用 tryUpdateNodeStatus 进行后续的操作，该函数中定义了状态上报重试的次数，nodeStatusUpdateRetry 默认定义为 5 次。\n\n`kubernetes/pkg/kubelet/kubelet_node_status.go#updateNodeStatus`\n\n```\nfunc (kl *Kubelet) updateNodeStatus() error {\n    klog.V(5).Infof(\"Updating node status\")\n    for i := 0; i < nodeStatusUpdateRetry; i++ {\n        if err := kl.tryUpdateNodeStatus(i); err != nil {\n            if i > 0 && kl.onRepeatedHeartbeatFailure != nil {\n                kl.onRepeatedHeartbeatFailure()\n            }\n            klog.Errorf(\"Error updating node status, will retry: %v\", err)\n        } else {\n            return nil\n        }\n    }\n    return fmt.Errorf(\"update node status exceeds retry count\")\n}\n```\n\n\n\ntryUpdateNodeStatus 是主要的上报逻辑，先给 node 设置状态，然后上报 node 的状态到 master。\n\n`kubernetes/pkg/kubelet/kubelet_node_status.go#tryUpdateNodeStatus`\n\n```\nfunc (kl *Kubelet) tryUpdateNodeStatus(tryNumber int) error {\n\topts := metav1.GetOptions{}\n\tif tryNumber == 0 {\n\t\tutil.FromApiserverCache(&opts)\n\t}\n\t\n\t// 获取 node 信息\n\tnode, err := kl.heartbeatClient.CoreV1().Nodes().Get(string(kl.nodeName), opts)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"error getting node %q: %v\", kl.nodeName, err)\n\t}\n\n\toriginalNode := node.DeepCopy()\n\tif originalNode == nil {\n\t\treturn fmt.Errorf(\"nil %q node object\", kl.nodeName)\n\t}\n\n\tpodCIDRChanged := false\n\tif node.Spec.PodCIDR != \"\" {\n\t\tif podCIDRChanged, err = kl.updatePodCIDR(node.Spec.PodCIDR); err != nil {\n\t\t\tklog.Errorf(err.Error())\n\t\t}\n\t}\n\n\t// 设置 node 状态\n\tkl.setNodeStatus(node)\n\n\tnow := kl.clock.Now()\n\tif utilfeature.DefaultFeatureGate.Enabled(features.NodeLease) && now.Before(kl.lastStatusReportTime.Add(kl.nodeStatusReportFrequency)) {\n\t\tif !podCIDRChanged && !nodeStatusHasChanged(&originalNode.Status, &node.Status) {\n\t\t\tkl.volumeManager.MarkVolumesAsReportedInUse(node.Status.VolumesInUse)\n\t\t\treturn nil\n\t\t}\n\t}\n\n    // 更新 node 信息到 master\n\t// Patch the current status on the API server\n\tupdatedNode, _, err := nodeutil.PatchNodeStatus(kl.heartbeatClient.CoreV1(), types.NodeName(kl.nodeName), originalNode, node)\n\tif err != nil {\n\t\treturn err\n\t}\n\tkl.lastStatusReportTime = now\n\tkl.setLastObservedNodeAddresses(updatedNode.Status.Addresses)\n\t// If update finishes successfully, mark the volumeInUse as reportedInUse to indicate\n\t// those volumes are already updated in the node's status\n\tkl.volumeManager.MarkVolumesAsReportedInUse(updatedNode.Status.VolumesInUse)\n\treturn nil\n}\n```\n\ntryUpdateNodeStatus 中调用 setNodeStatus 设置 node 的状态。setNodeStatus 会获取一次 node 的所有状态，然后会将 kubelet 中保存的所有状态改为最新的值，也就是会重置 node status 中的所有字段。\n\n`kubernetes/pkg/kubelet/kubelet_node_status.go#setNodeStatus`\n\n```\nfunc (kl *Kubelet) setNodeStatus(node *v1.Node) {\n    for i, f := range kl.setNodeStatusFuncs {\n        klog.V(5).Infof(\"Setting node status at position %v\", i)\n        if err := f(node); err != nil {\n            klog.Warningf(\"Failed to set some node status fields: %s\", err)\n        }\n    }\n}\n```\n\nsetNodeStatus 通过 setNodeStatusFuncs 方法覆盖 node 结构体中所有的字段，setNodeStatusFuncs 是在\n\nNewMainKubelet(pkg/kubelet/kubelet.go) 中初始化的。\n\n`kubernetes/pkg/kubelet/kubelet.go#NewMainKubelet`\n\n```\n func NewMainKubelet(kubeCfg *kubeletconfiginternal.KubeletConfiguration,\n \t\t// ...\n \t\t// Generating the status funcs should be the last thing we do,\n    klet.setNodeStatusFuncs = klet.defaultNodeStatusFuncs()\n\n    return klet, nil\n}\n```\n\n\n\ndefaultNodeStatusFuncs 是生成状态的函数，通过获取 node 的所有状态指标后使用工厂函数生成状态\n\n`kubernetes/pkg/kubelet/kubelet_node_status.go#defaultNodeStatusFuncs`\n\n```\nfunc (kl *Kubelet) defaultNodeStatusFuncs() []func(*v1.Node) error {\n    // if cloud is not nil, we expect the cloud resource sync manager to exist\n    var nodeAddressesFunc func() ([]v1.NodeAddress, error)\n    if kl.cloud != nil {\n        nodeAddressesFunc = kl.cloudResourceSyncManager.NodeAddresses\n    }\n    var validateHostFunc func() error\n    if kl.appArmorValidator != nil {\n        validateHostFunc = kl.appArmorValidator.ValidateHost\n    }\n    var setters []func(n *v1.Node) error\n    setters = append(setters,\n        nodestatus.NodeAddress(kl.nodeIP, kl.nodeIPValidator, kl.hostname, kl.hostnameOverridden, kl.externalCloudProvider, kl.cloud, nodeAddressesFunc),\n        nodestatus.MachineInfo(string(kl.nodeName), kl.maxPods, kl.podsPerCore, kl.GetCachedMachineInfo, kl.containerManager.GetCapacity,\n            kl.containerManager.GetDevicePluginResourceCapacity, kl.containerManager.GetNodeAllocatableReservation, kl.recordEvent),\n        nodestatus.VersionInfo(kl.cadvisor.VersionInfo, kl.containerRuntime.Type, kl.containerRuntime.Version),\n        nodestatus.DaemonEndpoints(kl.daemonEndpoints),\n        nodestatus.Images(kl.nodeStatusMaxImages, kl.imageManager.GetImageList),\n        nodestatus.GoRuntime(),\n    )\n    if utilfeature.DefaultFeatureGate.Enabled(features.AttachVolumeLimit) {\n        setters = append(setters, nodestatus.VolumeLimits(kl.volumePluginMgr.ListVolumePluginWithLimits))\n    }\n    setters = append(setters,\n        nodestatus.MemoryPressureCondition(kl.clock.Now, kl.evictionManager.IsUnderMemoryPressure, kl.recordNodeStatusEvent),\n        nodestatus.DiskPressureCondition(kl.clock.Now, kl.evictionManager.IsUnderDiskPressure, kl.recordNodeStatusEvent),\n        nodestatus.PIDPressureCondition(kl.clock.Now, kl.evictionManager.IsUnderPIDPressure, kl.recordNodeStatusEvent),\n        nodestatus.ReadyCondition(kl.clock.Now, kl.runtimeState.runtimeErrors, kl.runtimeState.networkErrors, kl.runtimeState.storageErrors, validateHostFunc, kl.containerManager.  Status, kl.recordNodeStatusEvent),\n        nodestatus.VolumesInUse(kl.volumeManager.ReconcilerStatesHasBeenSynced, kl.volumeManager.GetVolumesInUse),\n        nodestatus.RemoveOutOfDiskCondition(),\n        // TODO(mtaufen): I decided not to move this setter for now, since all it does is send an event\n        // and record state back to the Kubelet runtime object. In the future, I'd like to isolate\n        // these side-effects by decoupling the decisions to send events and partial status recording\n        // from the Node setters.\n        kl.recordNodeSchedulableEvent,\n    )\n    return setters\n}\n```\n\ndefaultNodeStatusFuncs 可以看到 node 上报的所有信息，主要有 MemoryPressureCondition、DiskPressureCondition、PIDPressureCondition、ReadyCondition 等。每一种 nodestatus 都返回一个 setters，所有 setters 的定义在 pkg/kubelet/nodestatus/setters.go 文件中。\n\n对于二次开发而言，如果我们需要 APIServer 掌握更多的 Node 信息，可以在此处添加自定义函数，例如，上报磁盘信息等。\n\n\n\ntryUpdateNodeStatus 中最后调用 PatchNodeStatus 上报 node 的状态到 master。\n\n`kubernetes/pkg/util/node/node.go#PatchNodeStatus`\n\n```\n// PatchNodeStatus patches node status.\nfunc PatchNodeStatus(c v1core.CoreV1Interface, nodeName types.NodeName, oldNode *v1.Node, newNode *v1.Node) (*v1.Node, []byte, error) {\n\t\t// 计算 patch \n    patchBytes, err := preparePatchBytesforNodeStatus(nodeName, oldNode, newNode)\n    if err != nil {\n        return nil, nil, err\n    }\n\n    updatedNode, err := c.Nodes().Patch(string(nodeName), types.StrategicMergePatchType, patchBytes,       \"status\")\n    if err != nil {\n        return nil, nil, fmt.Errorf(\"failed to patch status %q for node %q: %v\", patchBytes, nodeName, err)\n    }\n    return updatedNode, patchBytes, nil\n}\n```\n\n在 PatchNodeStatus 会调用已注册的那些方法将状态把状态发给 APIServer。\n\n\n\n### 四、总结\n\n本文主要讲述了 kubelet 上报状态的方式及其实现，node 状态上报的方式目前有两种，本文仅分析了第一种状态上报的方式。在大规模集群中由于节点数量比较多，所有 node 都频繁报状态对 etcd 会有一定的压力，当 node 与 master 通信时由于网络导致心跳上报失败也会影响 node 的状态，为了避免类似问题的出现才有 NodeLease 方式，对于该功能的实现后文会继续进行分析。\n\n\n参考：\nhttps://www.qikqiak.com/post/kubelet-sync-node-status/\nhttps://www.jianshu.com/p/054450557818\nhttps://blog.csdn.net/shida_csdn/article/details/84286058\nhttps://kubernetes.io/docs/concepts/architecture/nodes/\n","slug":"node_status","published":1,"updated":"2019-06-09T12:49:18.948Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjycnhjmb00155vwnzo6h4p3c","content":"<p> 分布式系统中服务端会通过心跳机制确认客户端是否存活，在 k8s 中，kubelet 也会定时上报心跳到 apiserver，以此判断该 node 是否存活，若 node 超过一定时间没有上报心跳，其状态会被置为 NotReady，宿主上容器的状态也会被置为 Nodelost 或者 Unknown 状态。kubelet 自身会定期更新状态到 apiserver，通过参数 <code>--node-status-update-frequency</code> 指定上报频率，默认是 10s 上报一次，kubelet 不止上报心跳信息还会上报自身的一些数据信息。</p>\n<h3 id=\"一、kubelet-上报哪些状态\"><a href=\"#一、kubelet-上报哪些状态\" class=\"headerlink\" title=\"一、kubelet 上报哪些状态\"></a>一、kubelet 上报哪些状态</h3><p> 在 k8s 中，一个 node 的状态包含以下几个信息：</p>\n<ul>\n<li><a href=\"https://kubernetes.io/docs/concepts/architecture/nodes/#addresses\" target=\"_blank\" rel=\"noopener\">Addresses</a></li>\n<li><a href=\"https://kubernetes.io/docs/concepts/architecture/nodes/#condition\" target=\"_blank\" rel=\"noopener\">Condition</a></li>\n<li><a href=\"https://kubernetes.io/docs/concepts/architecture/nodes/#capacity\" target=\"_blank\" rel=\"noopener\">Capacity</a></li>\n<li><a href=\"https://kubernetes.io/docs/concepts/architecture/nodes/#info\" target=\"_blank\" rel=\"noopener\">Info</a></li>\n</ul>\n<h5 id=\"1、Addresses\"><a href=\"#1、Addresses\" class=\"headerlink\" title=\"1、Addresses\"></a>1、Addresses</h5><p>主要包含以下几个字段：</p>\n<ul>\n<li>HostName：Hostname 。可以通过 kubelet 的 <code>--hostname-override</code> 参数进行覆盖。</li>\n<li>ExternalIP：通常是可以外部路由的 node IP 地址（从集群外可访问）。</li>\n<li>InternalIP：通常是仅可在集群内部路由的 node IP 地址。</li>\n</ul>\n<h5 id=\"2、Condition\"><a href=\"#2、Condition\" class=\"headerlink\" title=\"2、Condition\"></a>2、Condition</h5><p><code>conditions</code> 字段描述了所有 <code>Running</code> nodes 的状态。</p>\n<p><img src=\"http://cdn.tianfeiyu.com/1262158-05b37df015e527b7.png\" alt=\"condition\"></p>\n<h5 id=\"3、Capacity\"><a href=\"#3、Capacity\" class=\"headerlink\" title=\"3、Capacity\"></a>3、Capacity</h5><p>描述 node 上的可用资源：CPU、内存和可以调度到该 node 上的最大 pod 数量。</p>\n<h5 id=\"4、Info\"><a href=\"#4、Info\" class=\"headerlink\" title=\"4、Info\"></a>4、Info</h5><p>描述 node 的一些通用信息，例如内核版本、Kubernetes 版本（kubelet 和 kube-proxy 版本）、Docker 版本 （如果使用了）和系统版本，这些信息由 kubelet 从 node 上获取到。</p>\n<p>使用 <code>kubectl get node xxx -o yaml</code> 可以看到 node 所有的状态的信息，其中 status 中的信息都是 kubelet 需要上报的，所以 kubelet 不止上报心跳信息还上报节点信息、节点 OOD 信息、内存磁盘压力状态、节点监控状态、是否调度等。</p>\n<p><img src=\"http://cdn.tianfeiyu.com/status.png\" alt=\"node 状态信息\"></p>\n<h3 id=\"二、kubelet-状态异常时的影响\"><a href=\"#二、kubelet-状态异常时的影响\" class=\"headerlink\" title=\"二、kubelet 状态异常时的影响\"></a>二、kubelet 状态异常时的影响</h3><p>如果一个 node 处于非 Ready 状态超过 <code>pod-eviction-timeout</code>的值(默认为 5 分钟，在 kube-controller-manager 中定义)，在 v1.5 之前的版本中 kube-controller-manager 会 <code>force delete pod</code> 然后调度该宿主上的 pods 到其他宿主，在 v1.5 之后的版本中，kube-controller-manager 不会 <code>force delete pod</code>，pod 会一直处于<code>Terminating</code> 或<code>Unknown</code> 状态直到 node 被从 master 中删除或 kubelet 状态变为 Ready。在 node NotReady 期间，Daemonset 的 Pod 状态变为 Nodelost，Deployment、Statefulset 和 Static Pod 的状态先变为 NodeLost，然后马上变为 Unknown。Deployment 的 pod 会 recreate，Static Pod 和 Statefulset 的 Pod 会一直处于 Unknown 状态。</p>\n<p>当 kubelet 变为 Ready 状态时，Daemonset的pod不会recreate，旧pod状态直接变为Running，Deployment的则是将kubelet进程停止的Node删除，Statefulset的Pod会重新recreate，Staic Pod 会被删除。</p>\n<h3 id=\"三、kubelet-状态上报的实现\"><a href=\"#三、kubelet-状态上报的实现\" class=\"headerlink\" title=\"三、kubelet 状态上报的实现\"></a>三、kubelet 状态上报的实现</h3><p>kubelet 有两种上报状态的方式，第一种定期向 apiserver 发送心跳消息，简单理解就是启动一个 goroutine 然后定期向 APIServer 发送消息。</p>\n<p>第二中被称为 NodeLease，在 v1.13 之前的版本中，节点的心跳只有 NodeStatus，从 v1.13 开始，NodeLease feature 作为 alpha 特性引入。当启用 NodeLease feature 时，每个节点在“kube-node-lease”名称空间中都有一个关联的“Lease”对象，该对象由节点定期更新，NodeStatus 和 NodeLease 都被视为来自节点的心跳。NodeLease 会频繁更新，而只有在 NodeStatus 发生改变或者超过了一定时间(默认值为1分钟，node-monitor-grace-period 的默认值为 40s)，才会将 NodeStatus 上报给 master。由于 NodeLease 比 NodeStatus 更轻量级，该特性在集群规模扩展性和性能上有明显提升。本文主要分析第一种上报方式的实现。</p>\n<blockquote>\n<p>kubernetes 版本 ：v1.13</p>\n</blockquote>\n<p>kubelet 上报状态的代码大部分在 <code>kubernetes/pkg/kubelet/kubelet_node_status.go</code> 中实现。状态上报的功能是在 <code>kubernetes/pkg/kubelet/kubelet.go#Run</code> 方法以 goroutine 形式中启动的，kubelet 中多个重要的功能都是在该方法中启动的。</p>\n<p> <code>kubernetes/pkg/kubelet/kubelet.go#Run</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (kl *Kubelet) Run(updates &lt;-chan kubetypes.PodUpdate) &#123;  </span><br><span class=\"line\">  \t// ...</span><br><span class=\"line\">  \tif kl.kubeClient != nil &#123;</span><br><span class=\"line\">        // Start syncing node status immediately, this may set up things the runtime needs to run.</span><br><span class=\"line\">        go wait.Until(kl.syncNodeStatus, kl.nodeStatusUpdateFrequency, wait.NeverStop)</span><br><span class=\"line\">        go kl.fastStatusUpdateOnce()</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t    // 一种新的状态上报方式</span><br><span class=\"line\">\t    // start syncing lease</span><br><span class=\"line\">        if utilfeature.DefaultFeatureGate.Enabled(features.NodeLease) &#123;</span><br><span class=\"line\">            go kl.nodeLeaseController.Run(wait.NeverStop)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t\t// ...    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>kl.syncNodeStatus 便是上报状态的，此处 kl.nodeStatusUpdateFrequency 使用的是默认设置的 10s，也就是说节点间同步状态的函数 kl.syncNodeStatus 每 10s 执行一次。</p>\n<p>syncNodeStatus 是状态上报的入口函数，其后所调用的多个函数也都是在同一个文件中实现的。</p>\n<p><code>kubernetes/pkg/kubelet/kubelet_node_status.go#syncNodeStatus</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (kl *Kubelet) syncNodeStatus() &#123;</span><br><span class=\"line\">    kl.syncNodeStatusMux.Lock()</span><br><span class=\"line\">    defer kl.syncNodeStatusMux.Unlock()</span><br><span class=\"line\"></span><br><span class=\"line\">    if kl.kubeClient == nil || kl.heartbeatClient == nil &#123;</span><br><span class=\"line\">        return</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 是否为注册节点</span><br><span class=\"line\">    if kl.registerNode &#123;</span><br><span class=\"line\">        // This will exit immediately if it doesn&apos;t need to do anything.</span><br><span class=\"line\">        kl.registerWithAPIServer()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if err := kl.updateNodeStatus(); err != nil &#123;</span><br><span class=\"line\">        klog.Errorf(&quot;Unable to update node status: %v&quot;, err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>syncNodeStatus 调用 updateNodeStatus， 然后又调用 tryUpdateNodeStatus 来进行上报操作，而最终调用的是 setNodeStatus。这里还进行了同步状态判断，如果是注册节点，则执行 registerWithAPIServer，否则，执行 updateNodeStatus。</p>\n<p>updateNodeStatus 主要是调用 tryUpdateNodeStatus 进行后续的操作，该函数中定义了状态上报重试的次数，nodeStatusUpdateRetry 默认定义为 5 次。</p>\n<p><code>kubernetes/pkg/kubelet/kubelet_node_status.go#updateNodeStatus</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (kl *Kubelet) updateNodeStatus() error &#123;</span><br><span class=\"line\">    klog.V(5).Infof(&quot;Updating node status&quot;)</span><br><span class=\"line\">    for i := 0; i &lt; nodeStatusUpdateRetry; i++ &#123;</span><br><span class=\"line\">        if err := kl.tryUpdateNodeStatus(i); err != nil &#123;</span><br><span class=\"line\">            if i &gt; 0 &amp;&amp; kl.onRepeatedHeartbeatFailure != nil &#123;</span><br><span class=\"line\">                kl.onRepeatedHeartbeatFailure()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            klog.Errorf(&quot;Error updating node status, will retry: %v&quot;, err)</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            return nil</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return fmt.Errorf(&quot;update node status exceeds retry count&quot;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>tryUpdateNodeStatus 是主要的上报逻辑，先给 node 设置状态，然后上报 node 的状态到 master。</p>\n<p><code>kubernetes/pkg/kubelet/kubelet_node_status.go#tryUpdateNodeStatus</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (kl *Kubelet) tryUpdateNodeStatus(tryNumber int) error &#123;</span><br><span class=\"line\">\topts := metav1.GetOptions&#123;&#125;</span><br><span class=\"line\">\tif tryNumber == 0 &#123;</span><br><span class=\"line\">\t\tutil.FromApiserverCache(&amp;opts)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// 获取 node 信息</span><br><span class=\"line\">\tnode, err := kl.heartbeatClient.CoreV1().Nodes().Get(string(kl.nodeName), opts)</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\treturn fmt.Errorf(&quot;error getting node %q: %v&quot;, kl.nodeName, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\toriginalNode := node.DeepCopy()</span><br><span class=\"line\">\tif originalNode == nil &#123;</span><br><span class=\"line\">\t\treturn fmt.Errorf(&quot;nil %q node object&quot;, kl.nodeName)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpodCIDRChanged := false</span><br><span class=\"line\">\tif node.Spec.PodCIDR != &quot;&quot; &#123;</span><br><span class=\"line\">\t\tif podCIDRChanged, err = kl.updatePodCIDR(node.Spec.PodCIDR); err != nil &#123;</span><br><span class=\"line\">\t\t\tklog.Errorf(err.Error())</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 设置 node 状态</span><br><span class=\"line\">\tkl.setNodeStatus(node)</span><br><span class=\"line\"></span><br><span class=\"line\">\tnow := kl.clock.Now()</span><br><span class=\"line\">\tif utilfeature.DefaultFeatureGate.Enabled(features.NodeLease) &amp;&amp; now.Before(kl.lastStatusReportTime.Add(kl.nodeStatusReportFrequency)) &#123;</span><br><span class=\"line\">\t\tif !podCIDRChanged &amp;&amp; !nodeStatusHasChanged(&amp;originalNode.Status, &amp;node.Status) &#123;</span><br><span class=\"line\">\t\t\tkl.volumeManager.MarkVolumesAsReportedInUse(node.Status.VolumesInUse)</span><br><span class=\"line\">\t\t\treturn nil</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 更新 node 信息到 master</span><br><span class=\"line\">\t// Patch the current status on the API server</span><br><span class=\"line\">\tupdatedNode, _, err := nodeutil.PatchNodeStatus(kl.heartbeatClient.CoreV1(), types.NodeName(kl.nodeName), originalNode, node)</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\treturn err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tkl.lastStatusReportTime = now</span><br><span class=\"line\">\tkl.setLastObservedNodeAddresses(updatedNode.Status.Addresses)</span><br><span class=\"line\">\t// If update finishes successfully, mark the volumeInUse as reportedInUse to indicate</span><br><span class=\"line\">\t// those volumes are already updated in the node&apos;s status</span><br><span class=\"line\">\tkl.volumeManager.MarkVolumesAsReportedInUse(updatedNode.Status.VolumesInUse)</span><br><span class=\"line\">\treturn nil</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>tryUpdateNodeStatus 中调用 setNodeStatus 设置 node 的状态。setNodeStatus 会获取一次 node 的所有状态，然后会将 kubelet 中保存的所有状态改为最新的值，也就是会重置 node status 中的所有字段。</p>\n<p><code>kubernetes/pkg/kubelet/kubelet_node_status.go#setNodeStatus</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (kl *Kubelet) setNodeStatus(node *v1.Node) &#123;</span><br><span class=\"line\">    for i, f := range kl.setNodeStatusFuncs &#123;</span><br><span class=\"line\">        klog.V(5).Infof(&quot;Setting node status at position %v&quot;, i)</span><br><span class=\"line\">        if err := f(node); err != nil &#123;</span><br><span class=\"line\">            klog.Warningf(&quot;Failed to set some node status fields: %s&quot;, err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>setNodeStatus 通过 setNodeStatusFuncs 方法覆盖 node 结构体中所有的字段，setNodeStatusFuncs 是在</p>\n<p>NewMainKubelet(pkg/kubelet/kubelet.go) 中初始化的。</p>\n<p><code>kubernetes/pkg/kubelet/kubelet.go#NewMainKubelet</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> func NewMainKubelet(kubeCfg *kubeletconfiginternal.KubeletConfiguration,</span><br><span class=\"line\"> \t\t// ...</span><br><span class=\"line\"> \t\t// Generating the status funcs should be the last thing we do,</span><br><span class=\"line\">    klet.setNodeStatusFuncs = klet.defaultNodeStatusFuncs()</span><br><span class=\"line\"></span><br><span class=\"line\">    return klet, nil</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>defaultNodeStatusFuncs 是生成状态的函数，通过获取 node 的所有状态指标后使用工厂函数生成状态</p>\n<p><code>kubernetes/pkg/kubelet/kubelet_node_status.go#defaultNodeStatusFuncs</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (kl *Kubelet) defaultNodeStatusFuncs() []func(*v1.Node) error &#123;</span><br><span class=\"line\">    // if cloud is not nil, we expect the cloud resource sync manager to exist</span><br><span class=\"line\">    var nodeAddressesFunc func() ([]v1.NodeAddress, error)</span><br><span class=\"line\">    if kl.cloud != nil &#123;</span><br><span class=\"line\">        nodeAddressesFunc = kl.cloudResourceSyncManager.NodeAddresses</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    var validateHostFunc func() error</span><br><span class=\"line\">    if kl.appArmorValidator != nil &#123;</span><br><span class=\"line\">        validateHostFunc = kl.appArmorValidator.ValidateHost</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    var setters []func(n *v1.Node) error</span><br><span class=\"line\">    setters = append(setters,</span><br><span class=\"line\">        nodestatus.NodeAddress(kl.nodeIP, kl.nodeIPValidator, kl.hostname, kl.hostnameOverridden, kl.externalCloudProvider, kl.cloud, nodeAddressesFunc),</span><br><span class=\"line\">        nodestatus.MachineInfo(string(kl.nodeName), kl.maxPods, kl.podsPerCore, kl.GetCachedMachineInfo, kl.containerManager.GetCapacity,</span><br><span class=\"line\">            kl.containerManager.GetDevicePluginResourceCapacity, kl.containerManager.GetNodeAllocatableReservation, kl.recordEvent),</span><br><span class=\"line\">        nodestatus.VersionInfo(kl.cadvisor.VersionInfo, kl.containerRuntime.Type, kl.containerRuntime.Version),</span><br><span class=\"line\">        nodestatus.DaemonEndpoints(kl.daemonEndpoints),</span><br><span class=\"line\">        nodestatus.Images(kl.nodeStatusMaxImages, kl.imageManager.GetImageList),</span><br><span class=\"line\">        nodestatus.GoRuntime(),</span><br><span class=\"line\">    )</span><br><span class=\"line\">    if utilfeature.DefaultFeatureGate.Enabled(features.AttachVolumeLimit) &#123;</span><br><span class=\"line\">        setters = append(setters, nodestatus.VolumeLimits(kl.volumePluginMgr.ListVolumePluginWithLimits))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    setters = append(setters,</span><br><span class=\"line\">        nodestatus.MemoryPressureCondition(kl.clock.Now, kl.evictionManager.IsUnderMemoryPressure, kl.recordNodeStatusEvent),</span><br><span class=\"line\">        nodestatus.DiskPressureCondition(kl.clock.Now, kl.evictionManager.IsUnderDiskPressure, kl.recordNodeStatusEvent),</span><br><span class=\"line\">        nodestatus.PIDPressureCondition(kl.clock.Now, kl.evictionManager.IsUnderPIDPressure, kl.recordNodeStatusEvent),</span><br><span class=\"line\">        nodestatus.ReadyCondition(kl.clock.Now, kl.runtimeState.runtimeErrors, kl.runtimeState.networkErrors, kl.runtimeState.storageErrors, validateHostFunc, kl.containerManager.  Status, kl.recordNodeStatusEvent),</span><br><span class=\"line\">        nodestatus.VolumesInUse(kl.volumeManager.ReconcilerStatesHasBeenSynced, kl.volumeManager.GetVolumesInUse),</span><br><span class=\"line\">        nodestatus.RemoveOutOfDiskCondition(),</span><br><span class=\"line\">        // TODO(mtaufen): I decided not to move this setter for now, since all it does is send an event</span><br><span class=\"line\">        // and record state back to the Kubelet runtime object. In the future, I&apos;d like to isolate</span><br><span class=\"line\">        // these side-effects by decoupling the decisions to send events and partial status recording</span><br><span class=\"line\">        // from the Node setters.</span><br><span class=\"line\">        kl.recordNodeSchedulableEvent,</span><br><span class=\"line\">    )</span><br><span class=\"line\">    return setters</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>defaultNodeStatusFuncs 可以看到 node 上报的所有信息，主要有 MemoryPressureCondition、DiskPressureCondition、PIDPressureCondition、ReadyCondition 等。每一种 nodestatus 都返回一个 setters，所有 setters 的定义在 pkg/kubelet/nodestatus/setters.go 文件中。</p>\n<p>对于二次开发而言，如果我们需要 APIServer 掌握更多的 Node 信息，可以在此处添加自定义函数，例如，上报磁盘信息等。</p>\n<p>tryUpdateNodeStatus 中最后调用 PatchNodeStatus 上报 node 的状态到 master。</p>\n<p><code>kubernetes/pkg/util/node/node.go#PatchNodeStatus</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// PatchNodeStatus patches node status.</span><br><span class=\"line\">func PatchNodeStatus(c v1core.CoreV1Interface, nodeName types.NodeName, oldNode *v1.Node, newNode *v1.Node) (*v1.Node, []byte, error) &#123;</span><br><span class=\"line\">\t\t// 计算 patch </span><br><span class=\"line\">    patchBytes, err := preparePatchBytesforNodeStatus(nodeName, oldNode, newNode)</span><br><span class=\"line\">    if err != nil &#123;</span><br><span class=\"line\">        return nil, nil, err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    updatedNode, err := c.Nodes().Patch(string(nodeName), types.StrategicMergePatchType, patchBytes,       &quot;status&quot;)</span><br><span class=\"line\">    if err != nil &#123;</span><br><span class=\"line\">        return nil, nil, fmt.Errorf(&quot;failed to patch status %q for node %q: %v&quot;, patchBytes, nodeName, err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return updatedNode, patchBytes, nil</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 PatchNodeStatus 会调用已注册的那些方法将状态把状态发给 APIServer。</p>\n<h3 id=\"四、总结\"><a href=\"#四、总结\" class=\"headerlink\" title=\"四、总结\"></a>四、总结</h3><p>本文主要讲述了 kubelet 上报状态的方式及其实现，node 状态上报的方式目前有两种，本文仅分析了第一种状态上报的方式。在大规模集群中由于节点数量比较多，所有 node 都频繁报状态对 etcd 会有一定的压力，当 node 与 master 通信时由于网络导致心跳上报失败也会影响 node 的状态，为了避免类似问题的出现才有 NodeLease 方式，对于该功能的实现后文会继续进行分析。</p>\n<p>参考：<br><a href=\"https://www.qikqiak.com/post/kubelet-sync-node-status/\" target=\"_blank\" rel=\"noopener\">https://www.qikqiak.com/post/kubelet-sync-node-status/</a><br><a href=\"https://www.jianshu.com/p/054450557818\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/054450557818</a><br><a href=\"https://blog.csdn.net/shida_csdn/article/details/84286058\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/shida_csdn/article/details/84286058</a><br><a href=\"https://kubernetes.io/docs/concepts/architecture/nodes/\" target=\"_blank\" rel=\"noopener\">https://kubernetes.io/docs/concepts/architecture/nodes/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p> 分布式系统中服务端会通过心跳机制确认客户端是否存活，在 k8s 中，kubelet 也会定时上报心跳到 apiserver，以此判断该 node 是否存活，若 node 超过一定时间没有上报心跳，其状态会被置为 NotReady，宿主上容器的状态也会被置为 Nodelost 或者 Unknown 状态。kubelet 自身会定期更新状态到 apiserver，通过参数 <code>--node-status-update-frequency</code> 指定上报频率，默认是 10s 上报一次，kubelet 不止上报心跳信息还会上报自身的一些数据信息。</p>\n<h3 id=\"一、kubelet-上报哪些状态\"><a href=\"#一、kubelet-上报哪些状态\" class=\"headerlink\" title=\"一、kubelet 上报哪些状态\"></a>一、kubelet 上报哪些状态</h3><p> 在 k8s 中，一个 node 的状态包含以下几个信息：</p>\n<ul>\n<li><a href=\"https://kubernetes.io/docs/concepts/architecture/nodes/#addresses\" target=\"_blank\" rel=\"noopener\">Addresses</a></li>\n<li><a href=\"https://kubernetes.io/docs/concepts/architecture/nodes/#condition\" target=\"_blank\" rel=\"noopener\">Condition</a></li>\n<li><a href=\"https://kubernetes.io/docs/concepts/architecture/nodes/#capacity\" target=\"_blank\" rel=\"noopener\">Capacity</a></li>\n<li><a href=\"https://kubernetes.io/docs/concepts/architecture/nodes/#info\" target=\"_blank\" rel=\"noopener\">Info</a></li>\n</ul>\n<h5 id=\"1、Addresses\"><a href=\"#1、Addresses\" class=\"headerlink\" title=\"1、Addresses\"></a>1、Addresses</h5><p>主要包含以下几个字段：</p>\n<ul>\n<li>HostName：Hostname 。可以通过 kubelet 的 <code>--hostname-override</code> 参数进行覆盖。</li>\n<li>ExternalIP：通常是可以外部路由的 node IP 地址（从集群外可访问）。</li>\n<li>InternalIP：通常是仅可在集群内部路由的 node IP 地址。</li>\n</ul>\n<h5 id=\"2、Condition\"><a href=\"#2、Condition\" class=\"headerlink\" title=\"2、Condition\"></a>2、Condition</h5><p><code>conditions</code> 字段描述了所有 <code>Running</code> nodes 的状态。</p>\n<p><img src=\"http://cdn.tianfeiyu.com/1262158-05b37df015e527b7.png\" alt=\"condition\"></p>\n<h5 id=\"3、Capacity\"><a href=\"#3、Capacity\" class=\"headerlink\" title=\"3、Capacity\"></a>3、Capacity</h5><p>描述 node 上的可用资源：CPU、内存和可以调度到该 node 上的最大 pod 数量。</p>\n<h5 id=\"4、Info\"><a href=\"#4、Info\" class=\"headerlink\" title=\"4、Info\"></a>4、Info</h5><p>描述 node 的一些通用信息，例如内核版本、Kubernetes 版本（kubelet 和 kube-proxy 版本）、Docker 版本 （如果使用了）和系统版本，这些信息由 kubelet 从 node 上获取到。</p>\n<p>使用 <code>kubectl get node xxx -o yaml</code> 可以看到 node 所有的状态的信息，其中 status 中的信息都是 kubelet 需要上报的，所以 kubelet 不止上报心跳信息还上报节点信息、节点 OOD 信息、内存磁盘压力状态、节点监控状态、是否调度等。</p>\n<p><img src=\"http://cdn.tianfeiyu.com/status.png\" alt=\"node 状态信息\"></p>\n<h3 id=\"二、kubelet-状态异常时的影响\"><a href=\"#二、kubelet-状态异常时的影响\" class=\"headerlink\" title=\"二、kubelet 状态异常时的影响\"></a>二、kubelet 状态异常时的影响</h3><p>如果一个 node 处于非 Ready 状态超过 <code>pod-eviction-timeout</code>的值(默认为 5 分钟，在 kube-controller-manager 中定义)，在 v1.5 之前的版本中 kube-controller-manager 会 <code>force delete pod</code> 然后调度该宿主上的 pods 到其他宿主，在 v1.5 之后的版本中，kube-controller-manager 不会 <code>force delete pod</code>，pod 会一直处于<code>Terminating</code> 或<code>Unknown</code> 状态直到 node 被从 master 中删除或 kubelet 状态变为 Ready。在 node NotReady 期间，Daemonset 的 Pod 状态变为 Nodelost，Deployment、Statefulset 和 Static Pod 的状态先变为 NodeLost，然后马上变为 Unknown。Deployment 的 pod 会 recreate，Static Pod 和 Statefulset 的 Pod 会一直处于 Unknown 状态。</p>\n<p>当 kubelet 变为 Ready 状态时，Daemonset的pod不会recreate，旧pod状态直接变为Running，Deployment的则是将kubelet进程停止的Node删除，Statefulset的Pod会重新recreate，Staic Pod 会被删除。</p>\n<h3 id=\"三、kubelet-状态上报的实现\"><a href=\"#三、kubelet-状态上报的实现\" class=\"headerlink\" title=\"三、kubelet 状态上报的实现\"></a>三、kubelet 状态上报的实现</h3><p>kubelet 有两种上报状态的方式，第一种定期向 apiserver 发送心跳消息，简单理解就是启动一个 goroutine 然后定期向 APIServer 发送消息。</p>\n<p>第二中被称为 NodeLease，在 v1.13 之前的版本中，节点的心跳只有 NodeStatus，从 v1.13 开始，NodeLease feature 作为 alpha 特性引入。当启用 NodeLease feature 时，每个节点在“kube-node-lease”名称空间中都有一个关联的“Lease”对象，该对象由节点定期更新，NodeStatus 和 NodeLease 都被视为来自节点的心跳。NodeLease 会频繁更新，而只有在 NodeStatus 发生改变或者超过了一定时间(默认值为1分钟，node-monitor-grace-period 的默认值为 40s)，才会将 NodeStatus 上报给 master。由于 NodeLease 比 NodeStatus 更轻量级，该特性在集群规模扩展性和性能上有明显提升。本文主要分析第一种上报方式的实现。</p>\n<blockquote>\n<p>kubernetes 版本 ：v1.13</p>\n</blockquote>\n<p>kubelet 上报状态的代码大部分在 <code>kubernetes/pkg/kubelet/kubelet_node_status.go</code> 中实现。状态上报的功能是在 <code>kubernetes/pkg/kubelet/kubelet.go#Run</code> 方法以 goroutine 形式中启动的，kubelet 中多个重要的功能都是在该方法中启动的。</p>\n<p> <code>kubernetes/pkg/kubelet/kubelet.go#Run</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (kl *Kubelet) Run(updates &lt;-chan kubetypes.PodUpdate) &#123;  </span><br><span class=\"line\">  \t// ...</span><br><span class=\"line\">  \tif kl.kubeClient != nil &#123;</span><br><span class=\"line\">        // Start syncing node status immediately, this may set up things the runtime needs to run.</span><br><span class=\"line\">        go wait.Until(kl.syncNodeStatus, kl.nodeStatusUpdateFrequency, wait.NeverStop)</span><br><span class=\"line\">        go kl.fastStatusUpdateOnce()</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t    // 一种新的状态上报方式</span><br><span class=\"line\">\t    // start syncing lease</span><br><span class=\"line\">        if utilfeature.DefaultFeatureGate.Enabled(features.NodeLease) &#123;</span><br><span class=\"line\">            go kl.nodeLeaseController.Run(wait.NeverStop)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t\t// ...    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>kl.syncNodeStatus 便是上报状态的，此处 kl.nodeStatusUpdateFrequency 使用的是默认设置的 10s，也就是说节点间同步状态的函数 kl.syncNodeStatus 每 10s 执行一次。</p>\n<p>syncNodeStatus 是状态上报的入口函数，其后所调用的多个函数也都是在同一个文件中实现的。</p>\n<p><code>kubernetes/pkg/kubelet/kubelet_node_status.go#syncNodeStatus</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (kl *Kubelet) syncNodeStatus() &#123;</span><br><span class=\"line\">    kl.syncNodeStatusMux.Lock()</span><br><span class=\"line\">    defer kl.syncNodeStatusMux.Unlock()</span><br><span class=\"line\"></span><br><span class=\"line\">    if kl.kubeClient == nil || kl.heartbeatClient == nil &#123;</span><br><span class=\"line\">        return</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 是否为注册节点</span><br><span class=\"line\">    if kl.registerNode &#123;</span><br><span class=\"line\">        // This will exit immediately if it doesn&apos;t need to do anything.</span><br><span class=\"line\">        kl.registerWithAPIServer()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if err := kl.updateNodeStatus(); err != nil &#123;</span><br><span class=\"line\">        klog.Errorf(&quot;Unable to update node status: %v&quot;, err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>syncNodeStatus 调用 updateNodeStatus， 然后又调用 tryUpdateNodeStatus 来进行上报操作，而最终调用的是 setNodeStatus。这里还进行了同步状态判断，如果是注册节点，则执行 registerWithAPIServer，否则，执行 updateNodeStatus。</p>\n<p>updateNodeStatus 主要是调用 tryUpdateNodeStatus 进行后续的操作，该函数中定义了状态上报重试的次数，nodeStatusUpdateRetry 默认定义为 5 次。</p>\n<p><code>kubernetes/pkg/kubelet/kubelet_node_status.go#updateNodeStatus</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (kl *Kubelet) updateNodeStatus() error &#123;</span><br><span class=\"line\">    klog.V(5).Infof(&quot;Updating node status&quot;)</span><br><span class=\"line\">    for i := 0; i &lt; nodeStatusUpdateRetry; i++ &#123;</span><br><span class=\"line\">        if err := kl.tryUpdateNodeStatus(i); err != nil &#123;</span><br><span class=\"line\">            if i &gt; 0 &amp;&amp; kl.onRepeatedHeartbeatFailure != nil &#123;</span><br><span class=\"line\">                kl.onRepeatedHeartbeatFailure()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            klog.Errorf(&quot;Error updating node status, will retry: %v&quot;, err)</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            return nil</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return fmt.Errorf(&quot;update node status exceeds retry count&quot;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>tryUpdateNodeStatus 是主要的上报逻辑，先给 node 设置状态，然后上报 node 的状态到 master。</p>\n<p><code>kubernetes/pkg/kubelet/kubelet_node_status.go#tryUpdateNodeStatus</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (kl *Kubelet) tryUpdateNodeStatus(tryNumber int) error &#123;</span><br><span class=\"line\">\topts := metav1.GetOptions&#123;&#125;</span><br><span class=\"line\">\tif tryNumber == 0 &#123;</span><br><span class=\"line\">\t\tutil.FromApiserverCache(&amp;opts)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// 获取 node 信息</span><br><span class=\"line\">\tnode, err := kl.heartbeatClient.CoreV1().Nodes().Get(string(kl.nodeName), opts)</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\treturn fmt.Errorf(&quot;error getting node %q: %v&quot;, kl.nodeName, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\toriginalNode := node.DeepCopy()</span><br><span class=\"line\">\tif originalNode == nil &#123;</span><br><span class=\"line\">\t\treturn fmt.Errorf(&quot;nil %q node object&quot;, kl.nodeName)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpodCIDRChanged := false</span><br><span class=\"line\">\tif node.Spec.PodCIDR != &quot;&quot; &#123;</span><br><span class=\"line\">\t\tif podCIDRChanged, err = kl.updatePodCIDR(node.Spec.PodCIDR); err != nil &#123;</span><br><span class=\"line\">\t\t\tklog.Errorf(err.Error())</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 设置 node 状态</span><br><span class=\"line\">\tkl.setNodeStatus(node)</span><br><span class=\"line\"></span><br><span class=\"line\">\tnow := kl.clock.Now()</span><br><span class=\"line\">\tif utilfeature.DefaultFeatureGate.Enabled(features.NodeLease) &amp;&amp; now.Before(kl.lastStatusReportTime.Add(kl.nodeStatusReportFrequency)) &#123;</span><br><span class=\"line\">\t\tif !podCIDRChanged &amp;&amp; !nodeStatusHasChanged(&amp;originalNode.Status, &amp;node.Status) &#123;</span><br><span class=\"line\">\t\t\tkl.volumeManager.MarkVolumesAsReportedInUse(node.Status.VolumesInUse)</span><br><span class=\"line\">\t\t\treturn nil</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 更新 node 信息到 master</span><br><span class=\"line\">\t// Patch the current status on the API server</span><br><span class=\"line\">\tupdatedNode, _, err := nodeutil.PatchNodeStatus(kl.heartbeatClient.CoreV1(), types.NodeName(kl.nodeName), originalNode, node)</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\treturn err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tkl.lastStatusReportTime = now</span><br><span class=\"line\">\tkl.setLastObservedNodeAddresses(updatedNode.Status.Addresses)</span><br><span class=\"line\">\t// If update finishes successfully, mark the volumeInUse as reportedInUse to indicate</span><br><span class=\"line\">\t// those volumes are already updated in the node&apos;s status</span><br><span class=\"line\">\tkl.volumeManager.MarkVolumesAsReportedInUse(updatedNode.Status.VolumesInUse)</span><br><span class=\"line\">\treturn nil</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>tryUpdateNodeStatus 中调用 setNodeStatus 设置 node 的状态。setNodeStatus 会获取一次 node 的所有状态，然后会将 kubelet 中保存的所有状态改为最新的值，也就是会重置 node status 中的所有字段。</p>\n<p><code>kubernetes/pkg/kubelet/kubelet_node_status.go#setNodeStatus</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (kl *Kubelet) setNodeStatus(node *v1.Node) &#123;</span><br><span class=\"line\">    for i, f := range kl.setNodeStatusFuncs &#123;</span><br><span class=\"line\">        klog.V(5).Infof(&quot;Setting node status at position %v&quot;, i)</span><br><span class=\"line\">        if err := f(node); err != nil &#123;</span><br><span class=\"line\">            klog.Warningf(&quot;Failed to set some node status fields: %s&quot;, err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>setNodeStatus 通过 setNodeStatusFuncs 方法覆盖 node 结构体中所有的字段，setNodeStatusFuncs 是在</p>\n<p>NewMainKubelet(pkg/kubelet/kubelet.go) 中初始化的。</p>\n<p><code>kubernetes/pkg/kubelet/kubelet.go#NewMainKubelet</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> func NewMainKubelet(kubeCfg *kubeletconfiginternal.KubeletConfiguration,</span><br><span class=\"line\"> \t\t// ...</span><br><span class=\"line\"> \t\t// Generating the status funcs should be the last thing we do,</span><br><span class=\"line\">    klet.setNodeStatusFuncs = klet.defaultNodeStatusFuncs()</span><br><span class=\"line\"></span><br><span class=\"line\">    return klet, nil</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>defaultNodeStatusFuncs 是生成状态的函数，通过获取 node 的所有状态指标后使用工厂函数生成状态</p>\n<p><code>kubernetes/pkg/kubelet/kubelet_node_status.go#defaultNodeStatusFuncs</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (kl *Kubelet) defaultNodeStatusFuncs() []func(*v1.Node) error &#123;</span><br><span class=\"line\">    // if cloud is not nil, we expect the cloud resource sync manager to exist</span><br><span class=\"line\">    var nodeAddressesFunc func() ([]v1.NodeAddress, error)</span><br><span class=\"line\">    if kl.cloud != nil &#123;</span><br><span class=\"line\">        nodeAddressesFunc = kl.cloudResourceSyncManager.NodeAddresses</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    var validateHostFunc func() error</span><br><span class=\"line\">    if kl.appArmorValidator != nil &#123;</span><br><span class=\"line\">        validateHostFunc = kl.appArmorValidator.ValidateHost</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    var setters []func(n *v1.Node) error</span><br><span class=\"line\">    setters = append(setters,</span><br><span class=\"line\">        nodestatus.NodeAddress(kl.nodeIP, kl.nodeIPValidator, kl.hostname, kl.hostnameOverridden, kl.externalCloudProvider, kl.cloud, nodeAddressesFunc),</span><br><span class=\"line\">        nodestatus.MachineInfo(string(kl.nodeName), kl.maxPods, kl.podsPerCore, kl.GetCachedMachineInfo, kl.containerManager.GetCapacity,</span><br><span class=\"line\">            kl.containerManager.GetDevicePluginResourceCapacity, kl.containerManager.GetNodeAllocatableReservation, kl.recordEvent),</span><br><span class=\"line\">        nodestatus.VersionInfo(kl.cadvisor.VersionInfo, kl.containerRuntime.Type, kl.containerRuntime.Version),</span><br><span class=\"line\">        nodestatus.DaemonEndpoints(kl.daemonEndpoints),</span><br><span class=\"line\">        nodestatus.Images(kl.nodeStatusMaxImages, kl.imageManager.GetImageList),</span><br><span class=\"line\">        nodestatus.GoRuntime(),</span><br><span class=\"line\">    )</span><br><span class=\"line\">    if utilfeature.DefaultFeatureGate.Enabled(features.AttachVolumeLimit) &#123;</span><br><span class=\"line\">        setters = append(setters, nodestatus.VolumeLimits(kl.volumePluginMgr.ListVolumePluginWithLimits))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    setters = append(setters,</span><br><span class=\"line\">        nodestatus.MemoryPressureCondition(kl.clock.Now, kl.evictionManager.IsUnderMemoryPressure, kl.recordNodeStatusEvent),</span><br><span class=\"line\">        nodestatus.DiskPressureCondition(kl.clock.Now, kl.evictionManager.IsUnderDiskPressure, kl.recordNodeStatusEvent),</span><br><span class=\"line\">        nodestatus.PIDPressureCondition(kl.clock.Now, kl.evictionManager.IsUnderPIDPressure, kl.recordNodeStatusEvent),</span><br><span class=\"line\">        nodestatus.ReadyCondition(kl.clock.Now, kl.runtimeState.runtimeErrors, kl.runtimeState.networkErrors, kl.runtimeState.storageErrors, validateHostFunc, kl.containerManager.  Status, kl.recordNodeStatusEvent),</span><br><span class=\"line\">        nodestatus.VolumesInUse(kl.volumeManager.ReconcilerStatesHasBeenSynced, kl.volumeManager.GetVolumesInUse),</span><br><span class=\"line\">        nodestatus.RemoveOutOfDiskCondition(),</span><br><span class=\"line\">        // TODO(mtaufen): I decided not to move this setter for now, since all it does is send an event</span><br><span class=\"line\">        // and record state back to the Kubelet runtime object. In the future, I&apos;d like to isolate</span><br><span class=\"line\">        // these side-effects by decoupling the decisions to send events and partial status recording</span><br><span class=\"line\">        // from the Node setters.</span><br><span class=\"line\">        kl.recordNodeSchedulableEvent,</span><br><span class=\"line\">    )</span><br><span class=\"line\">    return setters</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>defaultNodeStatusFuncs 可以看到 node 上报的所有信息，主要有 MemoryPressureCondition、DiskPressureCondition、PIDPressureCondition、ReadyCondition 等。每一种 nodestatus 都返回一个 setters，所有 setters 的定义在 pkg/kubelet/nodestatus/setters.go 文件中。</p>\n<p>对于二次开发而言，如果我们需要 APIServer 掌握更多的 Node 信息，可以在此处添加自定义函数，例如，上报磁盘信息等。</p>\n<p>tryUpdateNodeStatus 中最后调用 PatchNodeStatus 上报 node 的状态到 master。</p>\n<p><code>kubernetes/pkg/util/node/node.go#PatchNodeStatus</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// PatchNodeStatus patches node status.</span><br><span class=\"line\">func PatchNodeStatus(c v1core.CoreV1Interface, nodeName types.NodeName, oldNode *v1.Node, newNode *v1.Node) (*v1.Node, []byte, error) &#123;</span><br><span class=\"line\">\t\t// 计算 patch </span><br><span class=\"line\">    patchBytes, err := preparePatchBytesforNodeStatus(nodeName, oldNode, newNode)</span><br><span class=\"line\">    if err != nil &#123;</span><br><span class=\"line\">        return nil, nil, err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    updatedNode, err := c.Nodes().Patch(string(nodeName), types.StrategicMergePatchType, patchBytes,       &quot;status&quot;)</span><br><span class=\"line\">    if err != nil &#123;</span><br><span class=\"line\">        return nil, nil, fmt.Errorf(&quot;failed to patch status %q for node %q: %v&quot;, patchBytes, nodeName, err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return updatedNode, patchBytes, nil</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 PatchNodeStatus 会调用已注册的那些方法将状态把状态发给 APIServer。</p>\n<h3 id=\"四、总结\"><a href=\"#四、总结\" class=\"headerlink\" title=\"四、总结\"></a>四、总结</h3><p>本文主要讲述了 kubelet 上报状态的方式及其实现，node 状态上报的方式目前有两种，本文仅分析了第一种状态上报的方式。在大规模集群中由于节点数量比较多，所有 node 都频繁报状态对 etcd 会有一定的压力，当 node 与 master 通信时由于网络导致心跳上报失败也会影响 node 的状态，为了避免类似问题的出现才有 NodeLease 方式，对于该功能的实现后文会继续进行分析。</p>\n<p>参考：<br><a href=\"https://www.qikqiak.com/post/kubelet-sync-node-status/\" target=\"_blank\" rel=\"noopener\">https://www.qikqiak.com/post/kubelet-sync-node-status/</a><br><a href=\"https://www.jianshu.com/p/054450557818\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/054450557818</a><br><a href=\"https://blog.csdn.net/shida_csdn/article/details/84286058\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/shida_csdn/article/details/84286058</a><br><a href=\"https://kubernetes.io/docs/concepts/architecture/nodes/\" target=\"_blank\" rel=\"noopener\">https://kubernetes.io/docs/concepts/architecture/nodes/</a></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjycnhjll00005vwnkgorubj8","tag_id":"cjycnhjlq00045vwn3cv42u16","_id":"cjycnhjly000e5vwnd1pmos9e"},{"post_id":"cjycnhjll00005vwnkgorubj8","tag_id":"cjycnhjlu00095vwnpuydjox7","_id":"cjycnhjlz000g5vwnxzh9qc2g"},{"post_id":"cjycnhjlt00085vwnxrx39hen","tag_id":"cjycnhjlx000c5vwnynt8u0aq","_id":"cjycnhjm0000j5vwn88nlzyls"},{"post_id":"cjycnhjlu000a5vwno59eyw8g","tag_id":"cjycnhjlz000h5vwnl4withi7","_id":"cjycnhjm5000q5vwnh8a66jah"},{"post_id":"cjycnhjlu000a5vwno59eyw8g","tag_id":"cjycnhjm2000l5vwneodsyi9i","_id":"cjycnhjm5000s5vwnq56iy4jg"},{"post_id":"cjycnhjlw000b5vwnqkxi88ju","tag_id":"cjycnhjm4000p5vwnyjf92436","_id":"cjycnhjma00125vwns15sdksd"},{"post_id":"cjycnhjlw000b5vwnqkxi88ju","tag_id":"cjycnhjm6000u5vwn8tql7lrl","_id":"cjycnhjmb00145vwng2fazek1"},{"post_id":"cjycnhjlw000b5vwnqkxi88ju","tag_id":"cjycnhjm8000x5vwnvi4v5lp6","_id":"cjycnhjmb00175vwn8v3akbrz"},{"post_id":"cjycnhjlx000d5vwniitgos5n","tag_id":"cjycnhjm900105vwng14x8vc2","_id":"cjycnhjmc00195vwnf7vlbdp1"},{"post_id":"cjycnhjlx000d5vwniitgos5n","tag_id":"cjycnhjmb00165vwn8so1wd5j","_id":"cjycnhjmc001a5vwn1vz06byi"},{"post_id":"cjycnhjly000f5vwnd064wo46","tag_id":"cjycnhjmc00185vwng10tbs2g","_id":"cjycnhjmc001d5vwnflwstjkl"},{"post_id":"cjycnhjly000f5vwnd064wo46","tag_id":"cjycnhjmc001b5vwnkotsk1ot","_id":"cjycnhjmc001e5vwnbclksp48"},{"post_id":"cjycnhjlz000i5vwnelwmonun","tag_id":"cjycnhjmc001c5vwn1k2i5tsz","_id":"cjycnhjmd001h5vwnp6n6x9oz"},{"post_id":"cjycnhjlz000i5vwnelwmonun","tag_id":"cjycnhjmd001f5vwnxh94ftkh","_id":"cjycnhjmd001i5vwnrzuiyrwn"},{"post_id":"cjycnhjm0000k5vwn5qm9gva9","tag_id":"cjycnhjmd001g5vwn286nspys","_id":"cjycnhjmd001l5vwne9zx655y"},{"post_id":"cjycnhjm0000k5vwn5qm9gva9","tag_id":"cjycnhjmd001j5vwnatcgyf91","_id":"cjycnhjmd001m5vwn55v44bdb"},{"post_id":"cjycnhjm2000m5vwnfusv9dgo","tag_id":"cjycnhjmd001k5vwnzk8bl8ur","_id":"cjycnhjme001p5vwn0f639vi0"},{"post_id":"cjycnhjm2000m5vwnfusv9dgo","tag_id":"cjycnhjme001n5vwnjpc11hva","_id":"cjycnhjme001q5vwn5mg2uopo"},{"post_id":"cjycnhjm3000n5vwnbzflbxm6","tag_id":"cjycnhjme001o5vwnboqr1krd","_id":"cjycnhjme001s5vwn2d24kun9"},{"post_id":"cjycnhjm4000o5vwn62f4to2c","tag_id":"cjycnhjme001r5vwnyq78vc46","_id":"cjycnhjmf001u5vwnqv9gvj5d"},{"post_id":"cjycnhjm5000r5vwnc62y2fmy","tag_id":"cjycnhjme001t5vwnsp5rpqu4","_id":"cjycnhjmf001w5vwns03mmps3"},{"post_id":"cjycnhjm5000t5vwn79yl25ce","tag_id":"cjycnhjmf001v5vwngd5cl64w","_id":"cjycnhjmf001y5vwn8gibjded"},{"post_id":"cjycnhjm6000v5vwn15apflki","tag_id":"cjycnhjmf001x5vwnnp38j1e4","_id":"cjycnhjmg00205vwnyrp2eg78"},{"post_id":"cjycnhjm7000w5vwn4z0ze4rl","tag_id":"cjycnhjmd001j5vwnatcgyf91","_id":"cjycnhjmh00225vwn5nhc5r3q"},{"post_id":"cjycnhjm8000y5vwn5phxdk7a","tag_id":"cjycnhjmd001j5vwnatcgyf91","_id":"cjycnhjmi00245vwn4zwred14"},{"post_id":"cjycnhjm8000z5vwnt0r4ob4g","tag_id":"cjycnhjmd001j5vwnatcgyf91","_id":"cjycnhjmi00265vwnamub9x6t"},{"post_id":"cjycnhjmb00155vwnzo6h4p3c","tag_id":"cjycnhjmi00255vwnrezs05rc","_id":"cjycnhjmi00285vwnm41ibg40"},{"post_id":"cjycnhjmb00155vwnzo6h4p3c","tag_id":"cjycnhjmd001j5vwnatcgyf91","_id":"cjycnhjmj00295vwnjpnze5ac"}],"Tag":[{"name":"client-go","_id":"cjycnhjlq00045vwn3cv42u16"},{"name":"informer","_id":"cjycnhjlu00095vwnpuydjox7"},{"name":"go module","_id":"cjycnhjlx000c5vwnynt8u0aq"},{"name":"audit","_id":"cjycnhjlz000h5vwnl4withi7"},{"name":"log","_id":"cjycnhjm2000l5vwneodsyi9i"},{"name":"crontab","_id":"cjycnhjm4000p5vwnyjf92436"},{"name":"wait","_id":"cjycnhjm6000u5vwn8tql7lrl"},{"name":"k8s","_id":"cjycnhjm8000x5vwnvi4v5lp6"},{"name":"kubernetes","_id":"cjycnhjm900105vwng14x8vc2"},{"name":"HA","_id":"cjycnhjmb00165vwn8so1wd5j"},{"name":"crd","_id":"cjycnhjmc00185vwng10tbs2g"},{"name":"admission control","_id":"cjycnhjmc001b5vwnkotsk1ot"},{"name":"kube-dashboard","_id":"cjycnhjmc001c5vwn1k2i5tsz"},{"name":"prometheus","_id":"cjycnhjmd001f5vwnxh94ftkh"},{"name":"events","_id":"cjycnhjmd001g5vwn286nspys"},{"name":"kubelet","_id":"cjycnhjmd001j5vwnatcgyf91"},{"name":"leader-election","_id":"cjycnhjmd001k5vwnzk8bl8ur"},{"name":"component","_id":"cjycnhjme001n5vwnjpc11hva"},{"name":"metrics-server","_id":"cjycnhjme001o5vwnboqr1krd"},{"name":"kubernetes v1.12","_id":"cjycnhjme001r5vwnyq78vc46"},{"name":"kubeadm","_id":"cjycnhjme001t5vwnsp5rpqu4"},{"name":"kubeconfig","_id":"cjycnhjmf001v5vwngd5cl64w"},{"name":"kubectl plugin","_id":"cjycnhjmf001x5vwnnp38j1e4"},{"name":"node status","_id":"cjycnhjmi00255vwnrezs05rc"}]}}