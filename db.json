{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1544263526000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1544263526000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1544263526000},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1544263526000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1544263526000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1544263526000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1544263526000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1544263526000},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1544263526000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1544263526000},{"_id":"themes/next/README.cn.md","hash":"58ffe752bc4b7f0069fcd6304bbc2d5ff7b80f89","modified":1544263526000},{"_id":"themes/next/README.md","hash":"898213e66d34a46c3cf8446bf693bd50db0d3269","modified":1544263526000},{"_id":"themes/next/_config.yml","hash":"ce341f98946da15f2d417fef38dd251dce26f2af","modified":1544263526000},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1544263526000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1544263526000},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1544263526000},{"_id":"source/_posts/etcd-backup.md","hash":"07bb8e8ddcfaac251a5b7fe3613044445de08dff","modified":1544265125000},{"_id":"source/_posts/kubernetes-api.md","hash":"c491c2945893e1dd5865eda08bc7e5a91de85a70","modified":1544265321000},{"_id":"source/_posts/docker-introduces.md","hash":"1499579f0d3f70c3ec41c4828fcc4e51cab6396c","modified":1544265473000},{"_id":"source/_posts/etcd-enable-https.md","hash":"b6d41d23d296a277615372f297f498e808fbf53f","modified":1544265218000},{"_id":"source/categories/index.md","hash":"812daa9e1c97a2c72ee357ad92f4de335db3c177","modified":1544263526000},{"_id":"source/about/index.md","hash":"c389921c579072b52e36cb6cbcf690a0b63cabff","modified":1544263526000},{"_id":"source/_posts/kubernetes-learn.md","hash":"c834d1dea6ccbd81fbf9b23048b8fce2ad471d32","modified":1544264940000},{"_id":"source/tags/index.md","hash":"5118f5301c54915b86d4e92b56a2fa9a9395abfc","modified":1544263526000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"352093a1b210c72136687fd2eee649244cee402c","modified":1544263526000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1544263526000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1544263526000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1544263526000},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1544263526000},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1544263526000},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1544263526000},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1544263526000},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1544263526000},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1544263526000},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1544263526000},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1544263526000},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1544263526000},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1544263526000},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1544263526000},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1544263526000},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1544263526000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1544263526000},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1544263526000},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1544263526000},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1544263526000},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1544263526000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1544263526000},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1544263526000},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1544263526000},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1544263526000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1544263526000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1544263526000},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1544263526000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1544263526000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1544263526000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1544263526000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1544263526000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1544263526000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1544263526000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1544263526000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1544263526000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1544263526000},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1544263526000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1544263526000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1544263526000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1544263526000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1544263526000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1544263526000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1544263526000},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1544263526000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1544263526000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1544263526000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1544263526000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1544263526000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1544263526000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1544263526000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1544263526000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1544263526000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1544263526000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1544263526000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1544263526000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1544263526000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1544263526000},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1544263526000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1544263526000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1544263526000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1544263526000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1544263526000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1544263526000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1544263526000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1544263526000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1544263526000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1544263526000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1544263526000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1544263526000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1544263526000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1544263526000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1544263526000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1544263526000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1544263526000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1544263526000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1544263526000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1544263526000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1544263526000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1544263526000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1544263526000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1544263526000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1544263526000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1544263526000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1544263526000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1544263526000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1544263526000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1544263526000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1544263526000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1544263526000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1544263526000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1544263526000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1544263526000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1544263526000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1544263526000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1544263526000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1544263526000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1544263526000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1544263526000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1544263526000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1544263526000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1544263526000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1544263526000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1544263526000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1544263526000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1544263526000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1544263526000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1544263526000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1544263526000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1544263526000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1544263526000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1544263526000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1544263526000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1544263526000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1544263526000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1544263526000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1544263526000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1544263526000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1544263526000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1544263526000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1544263526000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1544263526000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1544263526000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1544263526000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1544263526000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1544263526000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1544263526000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1544263526000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1544263526000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1544263526000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1544263526000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1544263526000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1544263526000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1544263526000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1544263526000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1544263526000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1544263526000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1544263526000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1544263526000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1544263526000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1544263526000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1544263526000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1544263526000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1544263526000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1544263526000},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1544263526000},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1544263526000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1544263526000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1544263526000},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1544263526000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1544263526000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1544263526000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1544263526000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1544263526000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1544263526000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1544263526000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1544263526000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1544263526000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1544263526000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1544263526000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1544263526000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1544263526000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1544263526000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1544263526000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1544263526000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1544263526000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1544263526000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1544263526000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1544263526000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1544263526000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1544263526000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1544263526000},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1544263526000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1544263526000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1544263526000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1544263526000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1544263526000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1544263526000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1544263526000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1544263526000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1544263526000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1544263526000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1544263526000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1544263526000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1544263526000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1544263526000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1544263526000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1544263526000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1544263526000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1544263526000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1544263526000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1544263526000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1544263526000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1544263526000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1544263526000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1544263526000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1544263526000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1544263526000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1544263526000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1544263526000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1544263526000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1544263526000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1544263526000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1544263526000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1544263526000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1544263526000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1544263526000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1544263526000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1544263526000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1544263526000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1544263526000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1544263526000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1544263526000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1544263526000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1544263526000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1544263526000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1544263526000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1544263526000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1544263526000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1544263526000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1544263526000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1544263526000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1544263526000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"02fb8fa6b6c252b6bed469539cd057716606a787","modified":1544263526000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1544263526000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1544263526000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1544263526000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1544263526000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1544263526000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1544263526000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1544263526000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1544263526000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1544263526000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1544263526000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1544263526000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1544263526000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1544263526000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1544263526000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1544263526000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1544263526000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1544263526000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1544263526000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1544263526000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1544263526000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1544263526000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1544263526000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1544263526000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1544263526000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1544263526000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1544263526000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1544263526000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1544263526000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1544263526000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1544263526000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1544263526000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1544263526000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1544263526000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1544263526000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1544263526000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1544263526000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1544263526000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1544263526000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1544263526000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1544263526000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1544263526000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1544263526000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1544263526000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1544263526000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1544263526000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1544263526000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1544263526000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1544263526000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1544263526000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1544263526000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1544263526000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1544263526000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1544263526000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1544263526000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1544263526000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1544263526000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1544263526000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1544263526000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1544263526000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1544263526000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1544263526000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1544263526000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1544263526000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1544263526000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1544263526000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1544263526000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1544263526000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1544263526000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1544263526000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1544263526000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1544263526000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1544263526000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1544263526000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1544263526000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1544263526000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1544263526000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1544263526000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1544263526000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1544263526000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1544263526000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1544263526000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1544263526000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1544263526000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1544263526000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1544263526000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1544263526000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1544263526000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1544263526000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1544263526000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1544263526000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1544263526000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1544263526000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1544263526000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1544263526000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1544263526000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1544263526000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1544263526000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1544263526000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1544263526000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1544263526000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1544263526000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1544263526000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1544263526000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1544263526000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1544263526000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1544263526000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1544263526000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1544263526000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1544263526000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1544263526000}],"Category":[],"Data":[],"Page":[{"title":"categories","date":"2018-12-08T08:52:49.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-12-08 16:52:49\n---\n","updated":"2018-12-08T10:05:26.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjpfbz8fk0001yvfyn1l8zmnz","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"About","date":"2018-12-08T08:46:18.000Z","_content":"\n###  专注容器生态圈，研究 kubernetes、docker 等云计算技术\n","source":"about/index.md","raw":"---\ntitle: About\ndate: 2018-12-08 16:46:18\n---\n\n###  专注容器生态圈，研究 kubernetes、docker 等云计算技术\n","updated":"2018-12-08T10:05:26.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjpfbz8fn0003yvfyb7wuxtwj","content":"<h3 id=\"专注容器生态圈，研究-kubernetes、docker-等云计算技术\"><a href=\"#专注容器生态圈，研究-kubernetes、docker-等云计算技术\" class=\"headerlink\" title=\"专注容器生态圈，研究 kubernetes、docker 等云计算技术\"></a>专注容器生态圈，研究 kubernetes、docker 等云计算技术</h3>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"专注容器生态圈，研究-kubernetes、docker-等云计算技术\"><a href=\"#专注容器生态圈，研究-kubernetes、docker-等云计算技术\" class=\"headerlink\" title=\"专注容器生态圈，研究 kubernetes、docker 等云计算技术\"></a>专注容器生态圈，研究 kubernetes、docker 等云计算技术</h3>"},{"title":"tags","date":"2018-12-08T08:46:27.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-12-08 16:46:27\n---\n","updated":"2018-12-08T10:05:26.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjpfbz8ft0005yvfye8iidi20","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"etcd 备份与恢复","date":"2017-03-02T10:04:00.000Z","type":"etcd","_content":"\n**[etcd](https://github.com/coreos/etcd)** 是一款开源的分布式一致性键值存储,由 CoreOS 公司进行维护，详细的介绍请参考官方文档。\n\netcd 目前最新的版本的 v3.1.1，但它的 API 又有 v3 和 v2 之分，社区通常所说的 v3 与 v2 都是指 API 的版本号。从 etcd 2.3 版本开始推出了一个实验性的全新 v3 版本 API 的实现，v2 与 v3 API 使用了不同的存储引擎，所以客户端命令也完全不同。\n\n    # etcdctl --version\n    etcdctl version: 3.0.4\n    API version: 2\n\n\n官方指出 etcd v2 和 v3 的数据不能混合存放，[support backup of v2 and v3 stores](https://github.com/coreos/etcd/issues/7002) 。\n\n\n**特别提醒：若使用 v3 备份数据时存在 v2 的数据则不影响恢复\n若使用 v2 备份数据时存在 v3 的数据则恢复失败**\n\n### 对于 API 2 备份与恢复方法   \n[官方 v2 admin guide](https://github.com/coreos/etcd/blob/master/Documentation/v2/admin_guide.md#disaster-recovery)\n\n\netcd的数据默认会存放在我们的命令工作目录中，我们发现数据所在的目录，会被分为两个文件夹中：\n* snap: 存放快照数据,etcd防止WAL文件过多而设置的快照，存储etcd数据状态。\n\n* wal: 存放预写式日志,最大的作用是记录了整个数据变化的全部历程。在etcd中，所有数据的修改在提交前，都要先写入到WAL中。\n\n\n    # etcdctl backup --data-dir /home/etcd/ --backup-dir /home/etcd_backup\n\n    # etcd -data-dir=/home/etcd_backup/  -force-new-cluster\n\n\n恢复时会覆盖 snapshot 的元数据(member ID 和 cluster ID)，所以需要启动一个新的集群。\n\n### 对于 API 3 备份与恢复方法  \n[官方 v3 admin guide](https://github.com/coreos/etcd/blob/master/Documentation/op-guide/recovery.md)\n\n在使用 API 3 时需要使用环境变量 ETCDCTL_API 明确指定。\n\n在命令行设置：\n\n\t# export ETCDCTL_API=3\n\t\n备份数据：\n\n\t# etcdctl --endpoints localhost:2379 snapshot save snapshot.db\n\n恢复：\n\n\t# etcdctl snapshot restore snapshot.db --name m3 --data-dir=/home/etcd_data\n\n> 恢复后的文件需要修改权限为 etcd:etcd\n> --name:重新指定一个数据目录，可以不指定，默认为 default.etcd\n> --data-dir：指定数据目录\n> 建议使用时不指定 name 但指定 data-dir，并将 data-dir 对应于 etcd 服务中配置的 data-dir\n\netcd 集群都是至少 3 台机器，官方也说明了集群容错为 (N-1)/2，所以备份数据一般都是用不到，但是鉴上次 gitlab 出现的问题，对于备份数据也要非常重视。 \n\n[官方文档翻译](https://skyao.gitbooks.io/leaning-etcd3/content/documentation/op-guide/recovery.html)\n","source":"_posts/etcd-backup.md","raw":"---\ntitle: etcd 备份与恢复\ndate: 2017-03-02 18:04:00\ntype: \"etcd\"\n\n---\n\n**[etcd](https://github.com/coreos/etcd)** 是一款开源的分布式一致性键值存储,由 CoreOS 公司进行维护，详细的介绍请参考官方文档。\n\netcd 目前最新的版本的 v3.1.1，但它的 API 又有 v3 和 v2 之分，社区通常所说的 v3 与 v2 都是指 API 的版本号。从 etcd 2.3 版本开始推出了一个实验性的全新 v3 版本 API 的实现，v2 与 v3 API 使用了不同的存储引擎，所以客户端命令也完全不同。\n\n    # etcdctl --version\n    etcdctl version: 3.0.4\n    API version: 2\n\n\n官方指出 etcd v2 和 v3 的数据不能混合存放，[support backup of v2 and v3 stores](https://github.com/coreos/etcd/issues/7002) 。\n\n\n**特别提醒：若使用 v3 备份数据时存在 v2 的数据则不影响恢复\n若使用 v2 备份数据时存在 v3 的数据则恢复失败**\n\n### 对于 API 2 备份与恢复方法   \n[官方 v2 admin guide](https://github.com/coreos/etcd/blob/master/Documentation/v2/admin_guide.md#disaster-recovery)\n\n\netcd的数据默认会存放在我们的命令工作目录中，我们发现数据所在的目录，会被分为两个文件夹中：\n* snap: 存放快照数据,etcd防止WAL文件过多而设置的快照，存储etcd数据状态。\n\n* wal: 存放预写式日志,最大的作用是记录了整个数据变化的全部历程。在etcd中，所有数据的修改在提交前，都要先写入到WAL中。\n\n\n    # etcdctl backup --data-dir /home/etcd/ --backup-dir /home/etcd_backup\n\n    # etcd -data-dir=/home/etcd_backup/  -force-new-cluster\n\n\n恢复时会覆盖 snapshot 的元数据(member ID 和 cluster ID)，所以需要启动一个新的集群。\n\n### 对于 API 3 备份与恢复方法  \n[官方 v3 admin guide](https://github.com/coreos/etcd/blob/master/Documentation/op-guide/recovery.md)\n\n在使用 API 3 时需要使用环境变量 ETCDCTL_API 明确指定。\n\n在命令行设置：\n\n\t# export ETCDCTL_API=3\n\t\n备份数据：\n\n\t# etcdctl --endpoints localhost:2379 snapshot save snapshot.db\n\n恢复：\n\n\t# etcdctl snapshot restore snapshot.db --name m3 --data-dir=/home/etcd_data\n\n> 恢复后的文件需要修改权限为 etcd:etcd\n> --name:重新指定一个数据目录，可以不指定，默认为 default.etcd\n> --data-dir：指定数据目录\n> 建议使用时不指定 name 但指定 data-dir，并将 data-dir 对应于 etcd 服务中配置的 data-dir\n\netcd 集群都是至少 3 台机器，官方也说明了集群容错为 (N-1)/2，所以备份数据一般都是用不到，但是鉴上次 gitlab 出现的问题，对于备份数据也要非常重视。 \n\n[官方文档翻译](https://skyao.gitbooks.io/leaning-etcd3/content/documentation/op-guide/recovery.html)\n","slug":"etcd-backup","published":1,"updated":"2018-12-08T10:32:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpfbz8fe0000yvfykq1qavj8","content":"<p><strong><a href=\"https://github.com/coreos/etcd\" target=\"_blank\" rel=\"noopener\">etcd</a></strong> 是一款开源的分布式一致性键值存储,由 CoreOS 公司进行维护，详细的介绍请参考官方文档。</p>\n<p>etcd 目前最新的版本的 v3.1.1，但它的 API 又有 v3 和 v2 之分，社区通常所说的 v3 与 v2 都是指 API 的版本号。从 etcd 2.3 版本开始推出了一个实验性的全新 v3 版本 API 的实现，v2 与 v3 API 使用了不同的存储引擎，所以客户端命令也完全不同。</p>\n<pre><code># etcdctl --version\netcdctl version: 3.0.4\nAPI version: 2\n</code></pre><p>官方指出 etcd v2 和 v3 的数据不能混合存放，<a href=\"https://github.com/coreos/etcd/issues/7002\" target=\"_blank\" rel=\"noopener\">support backup of v2 and v3 stores</a> 。</p>\n<p><strong>特别提醒：若使用 v3 备份数据时存在 v2 的数据则不影响恢复<br>若使用 v2 备份数据时存在 v3 的数据则恢复失败</strong></p>\n<h3 id=\"对于-API-2-备份与恢复方法\"><a href=\"#对于-API-2-备份与恢复方法\" class=\"headerlink\" title=\"对于 API 2 备份与恢复方法\"></a>对于 API 2 备份与恢复方法</h3><p><a href=\"https://github.com/coreos/etcd/blob/master/Documentation/v2/admin_guide.md#disaster-recovery\" target=\"_blank\" rel=\"noopener\">官方 v2 admin guide</a></p>\n<p>etcd的数据默认会存放在我们的命令工作目录中，我们发现数据所在的目录，会被分为两个文件夹中：</p>\n<ul>\n<li><p>snap: 存放快照数据,etcd防止WAL文件过多而设置的快照，存储etcd数据状态。</p>\n</li>\n<li><p>wal: 存放预写式日志,最大的作用是记录了整个数据变化的全部历程。在etcd中，所有数据的修改在提交前，都要先写入到WAL中。</p>\n</li>\n</ul>\n<pre><code># etcdctl backup --data-dir /home/etcd/ --backup-dir /home/etcd_backup\n\n# etcd -data-dir=/home/etcd_backup/  -force-new-cluster\n</code></pre><p>恢复时会覆盖 snapshot 的元数据(member ID 和 cluster ID)，所以需要启动一个新的集群。</p>\n<h3 id=\"对于-API-3-备份与恢复方法\"><a href=\"#对于-API-3-备份与恢复方法\" class=\"headerlink\" title=\"对于 API 3 备份与恢复方法\"></a>对于 API 3 备份与恢复方法</h3><p><a href=\"https://github.com/coreos/etcd/blob/master/Documentation/op-guide/recovery.md\" target=\"_blank\" rel=\"noopener\">官方 v3 admin guide</a></p>\n<p>在使用 API 3 时需要使用环境变量 ETCDCTL_API 明确指定。</p>\n<p>在命令行设置：</p>\n<pre><code># export ETCDCTL_API=3\n</code></pre><p>备份数据：</p>\n<pre><code># etcdctl --endpoints localhost:2379 snapshot save snapshot.db\n</code></pre><p>恢复：</p>\n<pre><code># etcdctl snapshot restore snapshot.db --name m3 --data-dir=/home/etcd_data\n</code></pre><blockquote>\n<p>恢复后的文件需要修改权限为 etcd:etcd<br>–name:重新指定一个数据目录，可以不指定，默认为 default.etcd<br>–data-dir：指定数据目录<br>建议使用时不指定 name 但指定 data-dir，并将 data-dir 对应于 etcd 服务中配置的 data-dir</p>\n</blockquote>\n<p>etcd 集群都是至少 3 台机器，官方也说明了集群容错为 (N-1)/2，所以备份数据一般都是用不到，但是鉴上次 gitlab 出现的问题，对于备份数据也要非常重视。 </p>\n<p><a href=\"https://skyao.gitbooks.io/leaning-etcd3/content/documentation/op-guide/recovery.html\" target=\"_blank\" rel=\"noopener\">官方文档翻译</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong><a href=\"https://github.com/coreos/etcd\" target=\"_blank\" rel=\"noopener\">etcd</a></strong> 是一款开源的分布式一致性键值存储,由 CoreOS 公司进行维护，详细的介绍请参考官方文档。</p>\n<p>etcd 目前最新的版本的 v3.1.1，但它的 API 又有 v3 和 v2 之分，社区通常所说的 v3 与 v2 都是指 API 的版本号。从 etcd 2.3 版本开始推出了一个实验性的全新 v3 版本 API 的实现，v2 与 v3 API 使用了不同的存储引擎，所以客户端命令也完全不同。</p>\n<pre><code># etcdctl --version\netcdctl version: 3.0.4\nAPI version: 2\n</code></pre><p>官方指出 etcd v2 和 v3 的数据不能混合存放，<a href=\"https://github.com/coreos/etcd/issues/7002\" target=\"_blank\" rel=\"noopener\">support backup of v2 and v3 stores</a> 。</p>\n<p><strong>特别提醒：若使用 v3 备份数据时存在 v2 的数据则不影响恢复<br>若使用 v2 备份数据时存在 v3 的数据则恢复失败</strong></p>\n<h3 id=\"对于-API-2-备份与恢复方法\"><a href=\"#对于-API-2-备份与恢复方法\" class=\"headerlink\" title=\"对于 API 2 备份与恢复方法\"></a>对于 API 2 备份与恢复方法</h3><p><a href=\"https://github.com/coreos/etcd/blob/master/Documentation/v2/admin_guide.md#disaster-recovery\" target=\"_blank\" rel=\"noopener\">官方 v2 admin guide</a></p>\n<p>etcd的数据默认会存放在我们的命令工作目录中，我们发现数据所在的目录，会被分为两个文件夹中：</p>\n<ul>\n<li><p>snap: 存放快照数据,etcd防止WAL文件过多而设置的快照，存储etcd数据状态。</p>\n</li>\n<li><p>wal: 存放预写式日志,最大的作用是记录了整个数据变化的全部历程。在etcd中，所有数据的修改在提交前，都要先写入到WAL中。</p>\n</li>\n</ul>\n<pre><code># etcdctl backup --data-dir /home/etcd/ --backup-dir /home/etcd_backup\n\n# etcd -data-dir=/home/etcd_backup/  -force-new-cluster\n</code></pre><p>恢复时会覆盖 snapshot 的元数据(member ID 和 cluster ID)，所以需要启动一个新的集群。</p>\n<h3 id=\"对于-API-3-备份与恢复方法\"><a href=\"#对于-API-3-备份与恢复方法\" class=\"headerlink\" title=\"对于 API 3 备份与恢复方法\"></a>对于 API 3 备份与恢复方法</h3><p><a href=\"https://github.com/coreos/etcd/blob/master/Documentation/op-guide/recovery.md\" target=\"_blank\" rel=\"noopener\">官方 v3 admin guide</a></p>\n<p>在使用 API 3 时需要使用环境变量 ETCDCTL_API 明确指定。</p>\n<p>在命令行设置：</p>\n<pre><code># export ETCDCTL_API=3\n</code></pre><p>备份数据：</p>\n<pre><code># etcdctl --endpoints localhost:2379 snapshot save snapshot.db\n</code></pre><p>恢复：</p>\n<pre><code># etcdctl snapshot restore snapshot.db --name m3 --data-dir=/home/etcd_data\n</code></pre><blockquote>\n<p>恢复后的文件需要修改权限为 etcd:etcd<br>–name:重新指定一个数据目录，可以不指定，默认为 default.etcd<br>–data-dir：指定数据目录<br>建议使用时不指定 name 但指定 data-dir，并将 data-dir 对应于 etcd 服务中配置的 data-dir</p>\n</blockquote>\n<p>etcd 集群都是至少 3 台机器，官方也说明了集群容错为 (N-1)/2，所以备份数据一般都是用不到，但是鉴上次 gitlab 出现的问题，对于备份数据也要非常重视。 </p>\n<p><a href=\"https://skyao.gitbooks.io/leaning-etcd3/content/documentation/op-guide/recovery.html\" target=\"_blank\" rel=\"noopener\">官方文档翻译</a></p>\n"},{"title":"kubernetes 常用 API","date":"2018-09-02T05:13:00.000Z","type":"kubernetes","_content":"\nkubectl  的所有操作都是调用 kube-apisever 的 API 实现的，所以其子命令都有相应的 API，每次在调用 kubectl 时使用参数  -v=9  可以看调用的相关 API，例：\n `$ kubectl get node -v=9` \n\n以下为 kubernetes 开发中常用的 API：\n![deployment 常用 API](https://upload-images.jianshu.io/upload_images/1262158-6fdb3babc9522929.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![statefulset 常用 API](https://upload-images.jianshu.io/upload_images/1262158-2562e12aaa019909.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![pod 常用 API](https://upload-images.jianshu.io/upload_images/1262158-d74728f38ba4361e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n![service 常用 API](https://upload-images.jianshu.io/upload_images/1262158-225076f08495b6d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![endpoints 常用 API](https://upload-images.jianshu.io/upload_images/1262158-71c815ad4fc45a65.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![namespace 常用 API](https://upload-images.jianshu.io/upload_images/1262158-f79e0c4bb215bb40.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![node 常用 API](https://upload-images.jianshu.io/upload_images/1262158-e67546fabc697d13.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![pv 常用 API](https://upload-images.jianshu.io/upload_images/1262158-a0eca87df2960565.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n Markdown 表格显示过大，此仅以图片格式展示。\n\n","source":"_posts/kubernetes-api.md","raw":"---\ntitle: kubernetes 常用 API\ndate: 2018-09-02 13:13:00\ntype: \"kubernetes\"\n\n---\n\nkubectl  的所有操作都是调用 kube-apisever 的 API 实现的，所以其子命令都有相应的 API，每次在调用 kubectl 时使用参数  -v=9  可以看调用的相关 API，例：\n `$ kubectl get node -v=9` \n\n以下为 kubernetes 开发中常用的 API：\n![deployment 常用 API](https://upload-images.jianshu.io/upload_images/1262158-6fdb3babc9522929.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![statefulset 常用 API](https://upload-images.jianshu.io/upload_images/1262158-2562e12aaa019909.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![pod 常用 API](https://upload-images.jianshu.io/upload_images/1262158-d74728f38ba4361e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n![service 常用 API](https://upload-images.jianshu.io/upload_images/1262158-225076f08495b6d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![endpoints 常用 API](https://upload-images.jianshu.io/upload_images/1262158-71c815ad4fc45a65.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![namespace 常用 API](https://upload-images.jianshu.io/upload_images/1262158-f79e0c4bb215bb40.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![node 常用 API](https://upload-images.jianshu.io/upload_images/1262158-e67546fabc697d13.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![pv 常用 API](https://upload-images.jianshu.io/upload_images/1262158-a0eca87df2960565.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n Markdown 表格显示过大，此仅以图片格式展示。\n\n","slug":"kubernetes-api","published":1,"updated":"2018-12-08T10:35:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpfbz8fl0002yvfybxvv9hxg","content":"<p>kubectl  的所有操作都是调用 kube-apisever 的 API 实现的，所以其子命令都有相应的 API，每次在调用 kubectl 时使用参数  -v=9  可以看调用的相关 API，例：<br> <code>$ kubectl get node -v=9</code> </p>\n<p>以下为 kubernetes 开发中常用的 API：<br><img src=\"https://upload-images.jianshu.io/upload_images/1262158-6fdb3babc9522929.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"deployment 常用 API\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/1262158-2562e12aaa019909.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"statefulset 常用 API\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/1262158-d74728f38ba4361e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"pod 常用 API\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/1262158-225076f08495b6d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"service 常用 API\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/1262158-71c815ad4fc45a65.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"endpoints 常用 API\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/1262158-f79e0c4bb215bb40.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"namespace 常用 API\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/1262158-e67546fabc697d13.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"node 常用 API\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/1262158-a0eca87df2960565.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"pv 常用 API\"></p>\n<p> Markdown 表格显示过大，此仅以图片格式展示。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>kubectl  的所有操作都是调用 kube-apisever 的 API 实现的，所以其子命令都有相应的 API，每次在调用 kubectl 时使用参数  -v=9  可以看调用的相关 API，例：<br> <code>$ kubectl get node -v=9</code> </p>\n<p>以下为 kubernetes 开发中常用的 API：<br><img src=\"https://upload-images.jianshu.io/upload_images/1262158-6fdb3babc9522929.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"deployment 常用 API\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/1262158-2562e12aaa019909.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"statefulset 常用 API\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/1262158-d74728f38ba4361e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"pod 常用 API\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/1262158-225076f08495b6d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"service 常用 API\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/1262158-71c815ad4fc45a65.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"endpoints 常用 API\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/1262158-f79e0c4bb215bb40.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"namespace 常用 API\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/1262158-e67546fabc697d13.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"node 常用 API\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/1262158-a0eca87df2960565.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"pv 常用 API\"></p>\n<p> Markdown 表格显示过大，此仅以图片格式展示。</p>\n"},{"title":"Docker 架构中的几个核心概念","date":"2018-12-05T12:57:00.000Z","type":"docker","_content":"\n\n## 一、Docker 开源之路\n\n2015 年 6 月 ，docker 公司将 libcontainer 捐出并改名为 runC 项目，交由一个完全中立的基金会管理，然后以 runC 为依据，大家共同制定一套容器和镜像的标准和规范 OCI。\n\n2016 年 4 月，docker 1.11 版本之后开始引入了 containerd 和 runC，Docker 开始依赖于 containerd 和 runC 来管理容器，containerd 也可以操作满足 OCI 标准规范的其他容器工具，之后只要是按照 OCI 标准规范开发的容器工具，都可以被 containerd 使用起来。\n\n从 2017 年开始，Docker 公司先是将 Docker项目的容器运行时部分 Containerd 捐赠给CNCF 社区，紧接着，Docker 公司宣布将 Docker 项目改名为 Moby。\n\n\n## 二、Docker 架构\n\n![docker 架构](https://upload-images.jianshu.io/upload_images/1262158-eee83eb356fccdb8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n![docker 进程关系](https://upload-images.jianshu.io/upload_images/1262158-3f74443f956fa132.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n### 三、核心概念\n\ndocker 1.13 版本中包含以下几个二进制文件。\n```\n$ docker --version\nDocker version 1.13.1, build 092cba3\n\n$ docker\ndocker             docker-containerd-ctr   dockerd      docker-proxy\ndocker-containerd  docker-containerd-shim  docker-init  docker-runc\n```\n\n#### 1、docker \ndocker 的命令行工具，是给用户和 docker daemon 建立通信的客户端。\n\n#### 2、dockerd \ndockerd 是 docker 架构中一个常驻在后台的系统进程，称为 docker daemon，dockerd 实际调用的还是 containerd 的 api 接口（rpc 方式实现）,docker daemon 的作用主要有以下两方面：\n\n- 接收并处理 docker client 发送的请求\n- 管理所有的 docker 容器\n\n有了 containerd 之后，dockerd 可以独立升级，以此避免之前 dockerd 升级会导致所有容器不可用的问题。\n\n#### 3、containerd\n\ncontainerd 是 dockerd 和 runc 之间的一个中间交流组件，docker 对容器的管理和操作基本都是通过 containerd 完成的。containerd 的主要功能有：\n- 容器生命周期管理\n- 日志管理\n- 镜像管理\n- 存储管理\n- 容器网络接口及网络管理\n\n#### 4、containerd-shim\n\ncontainerd-shim 是一个真实运行容器的载体，每启动一个容器都会起一个新的containerd-shim的一个进程， 它直接通过指定的三个参数：容器id，boundle目录（containerd 对应某个容器生成的目录，一般位于：/var/run/docker/libcontainerd/containerID，其中包括了容器配置和标准输入、标准输出、标准错误三个管道文件），运行时二进制（默认为runC）来调用 runc 的 api 创建一个容器，上面的 docker 进程图中可以直观的显示。其主要作用是：\n\n- 它允许容器运行时(即 runC)在启动容器之后退出，简单说就是不必为每个容器一直运行一个容器运行时(runC)\n- 即使在 containerd 和 dockerd 都挂掉的情况下，容器的标准 IO 和其它的文件描述符也都是可用的\n- 向 containerd 报告容器的退出状态\n\n有了它就可以在不中断容器运行的情况下升级或重启 dockerd，对于生产环境来说意义重大。\n\n#### 5、runC\nrunC 是 Docker 公司按照 OCI 标准规范编写的一个操作容器的命令行工具，其前身是 libcontainer 项目演化而来，runC 实际上就是 libcontainer 配上了一个轻型的客户端，是一个命令行工具端，根据 OCI（开放容器组织）的标准来创建和运行容器，实现了容器启停、资源隔离等功能。\n\n一个例子，使用 runC 运行 busybox 容器:\n```\n# mkdir /container\n# cd /container/\n# mkdir rootfs\n\n准备容器镜像的文件系统,从 busybox 镜像中提取\n# docker export $(docker create busybox) | tar -C rootfs -xvf -    \n# ls rootfs/\nbin  dev  etc  home  proc  root  sys  tmp  usr  var\n\n有了rootfs之后，我们还要按照 OCI 标准有一个配置文件 config.json 说明如何运行容器，\n包括要运行的命令、权限、环境变量等等内容，runc 提供了一个命令可以自动帮我们生成\n# docker-runc spec\n# ls\nconfig.json  rootfs\n# docker-runc run simplebusybox    #启动容器\n/ # ls\nbin   dev   etc   home  proc  root  sys   tmp   usr   var\n/ # hostname\nrunc\n```\n---\n参考：\n[Use of containerd-shim in docker-architecture](https://groups.google.com/forum/#!topic/docker-dev/zaZFlvIx1_k)\n[从 docker 到 runC](https://www.cnblogs.com/sparkdev/p/9129334.html)\n[OCI 和 runc：容器标准化和 docker](http://cizixs.com/2017/11/05/oci-and-runc/)\n[Open Container Initiative](https://github.com/opencontainers)\n","source":"_posts/docker-introduces.md","raw":"---\ntitle: Docker 架构中的几个核心概念\ndate: 2018-12-05 20:57:00\ntype: \"docker\"\n\n---\n\n\n## 一、Docker 开源之路\n\n2015 年 6 月 ，docker 公司将 libcontainer 捐出并改名为 runC 项目，交由一个完全中立的基金会管理，然后以 runC 为依据，大家共同制定一套容器和镜像的标准和规范 OCI。\n\n2016 年 4 月，docker 1.11 版本之后开始引入了 containerd 和 runC，Docker 开始依赖于 containerd 和 runC 来管理容器，containerd 也可以操作满足 OCI 标准规范的其他容器工具，之后只要是按照 OCI 标准规范开发的容器工具，都可以被 containerd 使用起来。\n\n从 2017 年开始，Docker 公司先是将 Docker项目的容器运行时部分 Containerd 捐赠给CNCF 社区，紧接着，Docker 公司宣布将 Docker 项目改名为 Moby。\n\n\n## 二、Docker 架构\n\n![docker 架构](https://upload-images.jianshu.io/upload_images/1262158-eee83eb356fccdb8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n![docker 进程关系](https://upload-images.jianshu.io/upload_images/1262158-3f74443f956fa132.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n### 三、核心概念\n\ndocker 1.13 版本中包含以下几个二进制文件。\n```\n$ docker --version\nDocker version 1.13.1, build 092cba3\n\n$ docker\ndocker             docker-containerd-ctr   dockerd      docker-proxy\ndocker-containerd  docker-containerd-shim  docker-init  docker-runc\n```\n\n#### 1、docker \ndocker 的命令行工具，是给用户和 docker daemon 建立通信的客户端。\n\n#### 2、dockerd \ndockerd 是 docker 架构中一个常驻在后台的系统进程，称为 docker daemon，dockerd 实际调用的还是 containerd 的 api 接口（rpc 方式实现）,docker daemon 的作用主要有以下两方面：\n\n- 接收并处理 docker client 发送的请求\n- 管理所有的 docker 容器\n\n有了 containerd 之后，dockerd 可以独立升级，以此避免之前 dockerd 升级会导致所有容器不可用的问题。\n\n#### 3、containerd\n\ncontainerd 是 dockerd 和 runc 之间的一个中间交流组件，docker 对容器的管理和操作基本都是通过 containerd 完成的。containerd 的主要功能有：\n- 容器生命周期管理\n- 日志管理\n- 镜像管理\n- 存储管理\n- 容器网络接口及网络管理\n\n#### 4、containerd-shim\n\ncontainerd-shim 是一个真实运行容器的载体，每启动一个容器都会起一个新的containerd-shim的一个进程， 它直接通过指定的三个参数：容器id，boundle目录（containerd 对应某个容器生成的目录，一般位于：/var/run/docker/libcontainerd/containerID，其中包括了容器配置和标准输入、标准输出、标准错误三个管道文件），运行时二进制（默认为runC）来调用 runc 的 api 创建一个容器，上面的 docker 进程图中可以直观的显示。其主要作用是：\n\n- 它允许容器运行时(即 runC)在启动容器之后退出，简单说就是不必为每个容器一直运行一个容器运行时(runC)\n- 即使在 containerd 和 dockerd 都挂掉的情况下，容器的标准 IO 和其它的文件描述符也都是可用的\n- 向 containerd 报告容器的退出状态\n\n有了它就可以在不中断容器运行的情况下升级或重启 dockerd，对于生产环境来说意义重大。\n\n#### 5、runC\nrunC 是 Docker 公司按照 OCI 标准规范编写的一个操作容器的命令行工具，其前身是 libcontainer 项目演化而来，runC 实际上就是 libcontainer 配上了一个轻型的客户端，是一个命令行工具端，根据 OCI（开放容器组织）的标准来创建和运行容器，实现了容器启停、资源隔离等功能。\n\n一个例子，使用 runC 运行 busybox 容器:\n```\n# mkdir /container\n# cd /container/\n# mkdir rootfs\n\n准备容器镜像的文件系统,从 busybox 镜像中提取\n# docker export $(docker create busybox) | tar -C rootfs -xvf -    \n# ls rootfs/\nbin  dev  etc  home  proc  root  sys  tmp  usr  var\n\n有了rootfs之后，我们还要按照 OCI 标准有一个配置文件 config.json 说明如何运行容器，\n包括要运行的命令、权限、环境变量等等内容，runc 提供了一个命令可以自动帮我们生成\n# docker-runc spec\n# ls\nconfig.json  rootfs\n# docker-runc run simplebusybox    #启动容器\n/ # ls\nbin   dev   etc   home  proc  root  sys   tmp   usr   var\n/ # hostname\nrunc\n```\n---\n参考：\n[Use of containerd-shim in docker-architecture](https://groups.google.com/forum/#!topic/docker-dev/zaZFlvIx1_k)\n[从 docker 到 runC](https://www.cnblogs.com/sparkdev/p/9129334.html)\n[OCI 和 runc：容器标准化和 docker](http://cizixs.com/2017/11/05/oci-and-runc/)\n[Open Container Initiative](https://github.com/opencontainers)\n","slug":"docker-introduces","published":1,"updated":"2018-12-08T10:37:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpfbz8fr0004yvfy7ezacluk","content":"<h2 id=\"一、Docker-开源之路\"><a href=\"#一、Docker-开源之路\" class=\"headerlink\" title=\"一、Docker 开源之路\"></a>一、Docker 开源之路</h2><p>2015 年 6 月 ，docker 公司将 libcontainer 捐出并改名为 runC 项目，交由一个完全中立的基金会管理，然后以 runC 为依据，大家共同制定一套容器和镜像的标准和规范 OCI。</p>\n<p>2016 年 4 月，docker 1.11 版本之后开始引入了 containerd 和 runC，Docker 开始依赖于 containerd 和 runC 来管理容器，containerd 也可以操作满足 OCI 标准规范的其他容器工具，之后只要是按照 OCI 标准规范开发的容器工具，都可以被 containerd 使用起来。</p>\n<p>从 2017 年开始，Docker 公司先是将 Docker项目的容器运行时部分 Containerd 捐赠给CNCF 社区，紧接着，Docker 公司宣布将 Docker 项目改名为 Moby。</p>\n<h2 id=\"二、Docker-架构\"><a href=\"#二、Docker-架构\" class=\"headerlink\" title=\"二、Docker 架构\"></a>二、Docker 架构</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/1262158-eee83eb356fccdb8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"docker 架构\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/1262158-3f74443f956fa132.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"docker 进程关系\"></p>\n<h3 id=\"三、核心概念\"><a href=\"#三、核心概念\" class=\"headerlink\" title=\"三、核心概念\"></a>三、核心概念</h3><p>docker 1.13 版本中包含以下几个二进制文件。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker --version</span><br><span class=\"line\">Docker version 1.13.1, build 092cba3</span><br><span class=\"line\"></span><br><span class=\"line\">$ docker</span><br><span class=\"line\">docker             docker-containerd-ctr   dockerd      docker-proxy</span><br><span class=\"line\">docker-containerd  docker-containerd-shim  docker-init  docker-runc</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"1、docker\"><a href=\"#1、docker\" class=\"headerlink\" title=\"1、docker\"></a>1、docker</h4><p>docker 的命令行工具，是给用户和 docker daemon 建立通信的客户端。</p>\n<h4 id=\"2、dockerd\"><a href=\"#2、dockerd\" class=\"headerlink\" title=\"2、dockerd\"></a>2、dockerd</h4><p>dockerd 是 docker 架构中一个常驻在后台的系统进程，称为 docker daemon，dockerd 实际调用的还是 containerd 的 api 接口（rpc 方式实现）,docker daemon 的作用主要有以下两方面：</p>\n<ul>\n<li>接收并处理 docker client 发送的请求</li>\n<li>管理所有的 docker 容器</li>\n</ul>\n<p>有了 containerd 之后，dockerd 可以独立升级，以此避免之前 dockerd 升级会导致所有容器不可用的问题。</p>\n<h4 id=\"3、containerd\"><a href=\"#3、containerd\" class=\"headerlink\" title=\"3、containerd\"></a>3、containerd</h4><p>containerd 是 dockerd 和 runc 之间的一个中间交流组件，docker 对容器的管理和操作基本都是通过 containerd 完成的。containerd 的主要功能有：</p>\n<ul>\n<li>容器生命周期管理</li>\n<li>日志管理</li>\n<li>镜像管理</li>\n<li>存储管理</li>\n<li>容器网络接口及网络管理</li>\n</ul>\n<h4 id=\"4、containerd-shim\"><a href=\"#4、containerd-shim\" class=\"headerlink\" title=\"4、containerd-shim\"></a>4、containerd-shim</h4><p>containerd-shim 是一个真实运行容器的载体，每启动一个容器都会起一个新的containerd-shim的一个进程， 它直接通过指定的三个参数：容器id，boundle目录（containerd 对应某个容器生成的目录，一般位于：/var/run/docker/libcontainerd/containerID，其中包括了容器配置和标准输入、标准输出、标准错误三个管道文件），运行时二进制（默认为runC）来调用 runc 的 api 创建一个容器，上面的 docker 进程图中可以直观的显示。其主要作用是：</p>\n<ul>\n<li>它允许容器运行时(即 runC)在启动容器之后退出，简单说就是不必为每个容器一直运行一个容器运行时(runC)</li>\n<li>即使在 containerd 和 dockerd 都挂掉的情况下，容器的标准 IO 和其它的文件描述符也都是可用的</li>\n<li>向 containerd 报告容器的退出状态</li>\n</ul>\n<p>有了它就可以在不中断容器运行的情况下升级或重启 dockerd，对于生产环境来说意义重大。</p>\n<h4 id=\"5、runC\"><a href=\"#5、runC\" class=\"headerlink\" title=\"5、runC\"></a>5、runC</h4><p>runC 是 Docker 公司按照 OCI 标准规范编写的一个操作容器的命令行工具，其前身是 libcontainer 项目演化而来，runC 实际上就是 libcontainer 配上了一个轻型的客户端，是一个命令行工具端，根据 OCI（开放容器组织）的标准来创建和运行容器，实现了容器启停、资源隔离等功能。</p>\n<p>一个例子，使用 runC 运行 busybox 容器:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># mkdir /container</span><br><span class=\"line\"># cd /container/</span><br><span class=\"line\"># mkdir rootfs</span><br><span class=\"line\"></span><br><span class=\"line\">准备容器镜像的文件系统,从 busybox 镜像中提取</span><br><span class=\"line\"># docker export $(docker create busybox) | tar -C rootfs -xvf -    </span><br><span class=\"line\"># ls rootfs/</span><br><span class=\"line\">bin  dev  etc  home  proc  root  sys  tmp  usr  var</span><br><span class=\"line\"></span><br><span class=\"line\">有了rootfs之后，我们还要按照 OCI 标准有一个配置文件 config.json 说明如何运行容器，</span><br><span class=\"line\">包括要运行的命令、权限、环境变量等等内容，runc 提供了一个命令可以自动帮我们生成</span><br><span class=\"line\"># docker-runc spec</span><br><span class=\"line\"># ls</span><br><span class=\"line\">config.json  rootfs</span><br><span class=\"line\"># docker-runc run simplebusybox    #启动容器</span><br><span class=\"line\">/ # ls</span><br><span class=\"line\">bin   dev   etc   home  proc  root  sys   tmp   usr   var</span><br><span class=\"line\">/ # hostname</span><br><span class=\"line\">runc</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>参考：<br><a href=\"https://groups.google.com/forum/#!topic/docker-dev/zaZFlvIx1_k\" target=\"_blank\" rel=\"noopener\">Use of containerd-shim in docker-architecture</a><br><a href=\"https://www.cnblogs.com/sparkdev/p/9129334.html\" target=\"_blank\" rel=\"noopener\">从 docker 到 runC</a><br><a href=\"http://cizixs.com/2017/11/05/oci-and-runc/\" target=\"_blank\" rel=\"noopener\">OCI 和 runc：容器标准化和 docker</a><br><a href=\"https://github.com/opencontainers\" target=\"_blank\" rel=\"noopener\">Open Container Initiative</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、Docker-开源之路\"><a href=\"#一、Docker-开源之路\" class=\"headerlink\" title=\"一、Docker 开源之路\"></a>一、Docker 开源之路</h2><p>2015 年 6 月 ，docker 公司将 libcontainer 捐出并改名为 runC 项目，交由一个完全中立的基金会管理，然后以 runC 为依据，大家共同制定一套容器和镜像的标准和规范 OCI。</p>\n<p>2016 年 4 月，docker 1.11 版本之后开始引入了 containerd 和 runC，Docker 开始依赖于 containerd 和 runC 来管理容器，containerd 也可以操作满足 OCI 标准规范的其他容器工具，之后只要是按照 OCI 标准规范开发的容器工具，都可以被 containerd 使用起来。</p>\n<p>从 2017 年开始，Docker 公司先是将 Docker项目的容器运行时部分 Containerd 捐赠给CNCF 社区，紧接着，Docker 公司宣布将 Docker 项目改名为 Moby。</p>\n<h2 id=\"二、Docker-架构\"><a href=\"#二、Docker-架构\" class=\"headerlink\" title=\"二、Docker 架构\"></a>二、Docker 架构</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/1262158-eee83eb356fccdb8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"docker 架构\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/1262158-3f74443f956fa132.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"docker 进程关系\"></p>\n<h3 id=\"三、核心概念\"><a href=\"#三、核心概念\" class=\"headerlink\" title=\"三、核心概念\"></a>三、核心概念</h3><p>docker 1.13 版本中包含以下几个二进制文件。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker --version</span><br><span class=\"line\">Docker version 1.13.1, build 092cba3</span><br><span class=\"line\"></span><br><span class=\"line\">$ docker</span><br><span class=\"line\">docker             docker-containerd-ctr   dockerd      docker-proxy</span><br><span class=\"line\">docker-containerd  docker-containerd-shim  docker-init  docker-runc</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"1、docker\"><a href=\"#1、docker\" class=\"headerlink\" title=\"1、docker\"></a>1、docker</h4><p>docker 的命令行工具，是给用户和 docker daemon 建立通信的客户端。</p>\n<h4 id=\"2、dockerd\"><a href=\"#2、dockerd\" class=\"headerlink\" title=\"2、dockerd\"></a>2、dockerd</h4><p>dockerd 是 docker 架构中一个常驻在后台的系统进程，称为 docker daemon，dockerd 实际调用的还是 containerd 的 api 接口（rpc 方式实现）,docker daemon 的作用主要有以下两方面：</p>\n<ul>\n<li>接收并处理 docker client 发送的请求</li>\n<li>管理所有的 docker 容器</li>\n</ul>\n<p>有了 containerd 之后，dockerd 可以独立升级，以此避免之前 dockerd 升级会导致所有容器不可用的问题。</p>\n<h4 id=\"3、containerd\"><a href=\"#3、containerd\" class=\"headerlink\" title=\"3、containerd\"></a>3、containerd</h4><p>containerd 是 dockerd 和 runc 之间的一个中间交流组件，docker 对容器的管理和操作基本都是通过 containerd 完成的。containerd 的主要功能有：</p>\n<ul>\n<li>容器生命周期管理</li>\n<li>日志管理</li>\n<li>镜像管理</li>\n<li>存储管理</li>\n<li>容器网络接口及网络管理</li>\n</ul>\n<h4 id=\"4、containerd-shim\"><a href=\"#4、containerd-shim\" class=\"headerlink\" title=\"4、containerd-shim\"></a>4、containerd-shim</h4><p>containerd-shim 是一个真实运行容器的载体，每启动一个容器都会起一个新的containerd-shim的一个进程， 它直接通过指定的三个参数：容器id，boundle目录（containerd 对应某个容器生成的目录，一般位于：/var/run/docker/libcontainerd/containerID，其中包括了容器配置和标准输入、标准输出、标准错误三个管道文件），运行时二进制（默认为runC）来调用 runc 的 api 创建一个容器，上面的 docker 进程图中可以直观的显示。其主要作用是：</p>\n<ul>\n<li>它允许容器运行时(即 runC)在启动容器之后退出，简单说就是不必为每个容器一直运行一个容器运行时(runC)</li>\n<li>即使在 containerd 和 dockerd 都挂掉的情况下，容器的标准 IO 和其它的文件描述符也都是可用的</li>\n<li>向 containerd 报告容器的退出状态</li>\n</ul>\n<p>有了它就可以在不中断容器运行的情况下升级或重启 dockerd，对于生产环境来说意义重大。</p>\n<h4 id=\"5、runC\"><a href=\"#5、runC\" class=\"headerlink\" title=\"5、runC\"></a>5、runC</h4><p>runC 是 Docker 公司按照 OCI 标准规范编写的一个操作容器的命令行工具，其前身是 libcontainer 项目演化而来，runC 实际上就是 libcontainer 配上了一个轻型的客户端，是一个命令行工具端，根据 OCI（开放容器组织）的标准来创建和运行容器，实现了容器启停、资源隔离等功能。</p>\n<p>一个例子，使用 runC 运行 busybox 容器:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># mkdir /container</span><br><span class=\"line\"># cd /container/</span><br><span class=\"line\"># mkdir rootfs</span><br><span class=\"line\"></span><br><span class=\"line\">准备容器镜像的文件系统,从 busybox 镜像中提取</span><br><span class=\"line\"># docker export $(docker create busybox) | tar -C rootfs -xvf -    </span><br><span class=\"line\"># ls rootfs/</span><br><span class=\"line\">bin  dev  etc  home  proc  root  sys  tmp  usr  var</span><br><span class=\"line\"></span><br><span class=\"line\">有了rootfs之后，我们还要按照 OCI 标准有一个配置文件 config.json 说明如何运行容器，</span><br><span class=\"line\">包括要运行的命令、权限、环境变量等等内容，runc 提供了一个命令可以自动帮我们生成</span><br><span class=\"line\"># docker-runc spec</span><br><span class=\"line\"># ls</span><br><span class=\"line\">config.json  rootfs</span><br><span class=\"line\"># docker-runc run simplebusybox    #启动容器</span><br><span class=\"line\">/ # ls</span><br><span class=\"line\">bin   dev   etc   home  proc  root  sys   tmp   usr   var</span><br><span class=\"line\">/ # hostname</span><br><span class=\"line\">runc</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>参考：<br><a href=\"https://groups.google.com/forum/#!topic/docker-dev/zaZFlvIx1_k\" target=\"_blank\" rel=\"noopener\">Use of containerd-shim in docker-architecture</a><br><a href=\"https://www.cnblogs.com/sparkdev/p/9129334.html\" target=\"_blank\" rel=\"noopener\">从 docker 到 runC</a><br><a href=\"http://cizixs.com/2017/11/05/oci-and-runc/\" target=\"_blank\" rel=\"noopener\">OCI 和 runc：容器标准化和 docker</a><br><a href=\"https://github.com/opencontainers\" target=\"_blank\" rel=\"noopener\">Open Container Initiative</a></p>\n"},{"title":"etcd 启用 https","date":"2017-03-15T13:32:00.000Z","type":"etcd","_content":"* 1， 生成 TLS 秘钥对\n* 2，拷贝密钥对到所有节点\n* 3，配置 etcd 使用证书\n* 4，测试 etcd 是否正常\n* 5，配置 kube-apiserver 使用 CA 连接 etcd\n* 6，测试 kube-apiserver\n* 7，未解决的问题\n\nSSL/TSL 认证分单向认证和双向认证两种方式。简单说就是单向认证只是客户端对服务端的身份进行验证，双向认证是客户端和服务端互相进行身份认证。就比如，我们登录淘宝买东西，为了防止我们登录的是假淘宝网站，此时我们通过浏览器打开淘宝买东西时，浏览器会验证我们登录的网站是否是真的淘宝的网站，而淘宝网站不关心我们是否“合法”，这就是单向认证。而双向认证是服务端也需要对客户端做出认证。\n\n因为大部分 kubernetes 基于内网部署，而内网应该都会采用私有 IP 地址通讯，权威 CA 好像只能签署域名证书，对于签署到 IP 可能无法实现。所以我们需要预先自建 CA 签发证书。\n\n[Generate self-signed certificates 官方参考文档](https://coreos.com/os/docs/latest/generate-self-signed-certificates.html)\n\n官方推荐使用 cfssl 来自建 CA 签发证书，当然你也可以用众人熟知的 OpenSSL 或者 [easy-rsa](https://github.com/OpenVPN/easy-rsa)。以下步骤遵循官方文档：\n\n## 1， 生成 TLS 秘钥对\n\n生成步骤：\n\n* 1，下载 cfssl\n* 2，初始化证书颁发机构\n* 3，配置 CA 选项\n* 4，生成服务器端证书\n* 5，生成对等证书\n* 6，生成客户端证书\n\n想深入了解 HTTPS 的看这里：\n\n* [聊聊HTTPS和SSL/TLS协议](http://www.techug.com/post/https-ssl-tls.html)\n* [数字证书CA及扫盲](http://blog.jobbole.com/104919/)\n* [互联网加密及OpenSSL介绍和简单使用](https://mritd.me/2016/07/02/%E4%BA%92%E8%81%94%E7%BD%91%E5%8A%A0%E5%AF%86%E5%8F%8AOpenSSL%E4%BB%8B%E7%BB%8D%E5%92%8C%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8)\n* [SSL双向认证和单向认证的区别](http://www.cnblogs.com/Michael-Kong/archive/2012/08/16/SSL%E8%AF%81%E4%B9%A6%E5%8E%9F%E7%90%86.html)\n\n##### 1，下载 cfssl\n\n    mkdir ~/bin\n    curl -s -L -o ~/bin/cfssl https://pkg.cfssl.org/R1.2/cfssl_linux-amd64\n    curl -s -L -o ~/bin/cfssljson https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64\n    chmod +x ~/bin/{cfssl,cfssljson}\n    export PATH=$PATH:~/bin\n\n##### 2，初始化证书颁发机构\n\n```\nmkdir ~/cfssl\ncd ~/cfssl\ncfssl print-defaults config > ca-config.json\ncfssl print-defaults csr > ca-csr.json\n```\n\n证书类型介绍：\n\n* client certificate  用于通过服务器验证客户端。例如etcdctl，etcd proxy，fleetctl或docker客户端。\n* server certificate 由服务器使用，并由客户端验证服务器身份。例如docker服务器或kube-apiserver。\n* peer certificate 由 etcd 集群成员使用，供它们彼此之间通信使用。\n\n##### 3，配置 CA 选项\n\n```\n$ cat << EOF > ca-config.json\n\n{\n    \"signing\": {\n        \"default\": {\n            \"expiry\": \"43800h\"\n        },\n        \"profiles\": {\n            \"server\": {\n                \"expiry\": \"43800h\",\n                \"usages\": [\n                    \"signing\",\n                    \"key encipherment\",\n                    \"server auth\"\n                ]\n            },\n            \"client\": {\n                \"expiry\": \"43800h\",\n                \"usages\": [\n                    \"signing\",\n                    \"key encipherment\",\n                    \"client auth\"\n                ]\n            },\n            \"peer\": {\n                \"expiry\": \"43800h\",\n                \"usages\": [\n                    \"signing\",\n                    \"key encipherment\",\n                    \"server auth\",\n                    \"client auth\"\n                ]\n            }\n        }\n    }\n}\n\n$ cat << EOF > ca-csr.json\n\n{\n    \"CN\": \"My own CA\",\n    \"key\": {\n        \"algo\": \"rsa\",\n        \"size\": 2048\n    },\n    \"names\": [\n        {\n            \"C\": \"US\",\n            \"L\": \"CA\",\n            \"O\": \"My Company Name\",\n            \"ST\": \"San Francisco\",\n            \"OU\": \"Org Unit 1\",\n            \"OU\": \"Org Unit 2\"\n        }\n    ]\n}\n\n生成 CA 证书：\n\n$ cfssl gencert -initca ca-csr.json | cfssljson -bare ca -\n\n将会生成以下几个文件：\n\nca-key.pem\nca.csr\nca.pem\n\n```\n> 请务必保证 ca-key.pem 文件的安全，*.csr 文件在整个过程中不会使用。\n\n##### 4，生成服务器端证书\n```\n$ echo '{\"CN\":\"coreos1\",\"hosts\":[\"10.93.81.17\",\"127.0.0.1\"],\"key\":{\"algo\":\"rsa\",\"size\":2048}}' | cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=server -hostname=\"10.93.81.17,127.0.0.1,server\" - | cfssljson -bare server\n\nhosts 字段需要自定义。\n\n然后将得到以下几个文件：\nserver-key.pem\nserver.csr\nserver.pem\n```\n\n##### 5，生成对等证书\n```\n$ echo '{\"CN\":\"member1\",\"hosts\":[\"10.93.81.17\",\"127.0.0.1\"],\"key\":{\"algo\":\"rsa\",\"size\":2048}}' | cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=peer -hostname=\"10.93.81.17,127.0.0.1,server,member1\" - | cfssljson -bare member1\n\nhosts 字段需要自定义。\n\n然后将得到以下几个文件：\n\nmember1-key.pem\nmember1.csr\nmember1.pem\n\n如果有多个 etcd 成员，重复此步为每个成员生成对等证书。\n\n```\n\n##### 6，生成客户端证书\n\n```\n$ echo '{\"CN\":\"client\",\"hosts\":[\"10.93.81.17\",\"127.0.0.1\"],\"key\":{\"algo\":\"rsa\",\"size\":2048}}' | cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=client - | cfssljson -bare client\n\nhosts 字段需要自定义。\n\n然后将得到以下几个文件：\n\nclient-key.pem\nclient.csr\nclient.pem\n\n```\n至此，所有证书都已生成完毕。\n\n\n## 2，拷贝密钥对到所有节点\n* 1，拷贝密钥对到所有节点\n* 2，更新系统证书库\n\n##### 1，拷贝密钥对到所有节点\n\n\n```\n$ mkdir -pv /etc/ssl/etcd/\n$ cp ~/cfssl/* /etc/ssl/etcd/\n$ chown -R etcd:etcd /etc/ssl/etcd\n$ chmod 600 /etc/ssl/etcd/*-key.pem\n$ cp ~/cfssl/ca.pem /etc/ssl/certs/\n```\n\n##### 2，更新系统证书库\n\n```\n$ yum install ca-certificates -y\n     \n$ update-ca-trust\n        \n```\n\n## 3，配置 etcd 使用证书\n\n```\n$ etcdctl version\netcdctl version: 3.1.3\nAPI version: 3.1\n\n$ cat  /etc/etcd/etcd.conf\n\nETCD_DATA_DIR=\"/var/lib/etcd/default.etcd\"\n#监听URL，用于与其他节点通讯\nETCD_LISTEN_PEER_URLS=\"https://10.93.81.17:2380\"\n\n#告知客户端的URL, 也就是服务的URL\nETCD_LISTEN_CLIENT_URLS=\"https://10.93.81.17:2379,https://10.93.81.17:4001\"\n\n#表示监听其他节点同步信号的地址\nETCD_INITIAL_ADVERTISE_PEER_URLS=\"https://10.93.81.17:2380\"\n\n#–advertise-client-urls 告知客户端的URL, 也就是服务的URL，tcp2379端口用于监听客户端请求\nETCD_ADVERTISE_CLIENT_URLS=\"https://10.93.81.17:2379\"\n\n#启动参数配置\nETCD_NAME=\"node1\"\nETCD_INITIAL_CLUSTER=\"node1=https://10.93.81.17:2380\"\nETCD_INITIAL_CLUSTER_STATE=\"new\"\n\n#[security]\n\nETCD_CERT_FILE=\"/etc/ssl/etcd/server.pem\"\nETCD_KEY_FILE=\"/etc/ssl/etcd/server-key.pem\"\nETCD_TRUSTED_CA_FILE=\"/etc/ssl/etcd/ca.pem\"\nETCD_CLIENT_CERT_AUTH=\"true\"\nETCD_PEER_CERT_FILE=\"/etc/ssl/etcd/member1.pem\"\nETCD_PEER_KEY_FILE=\"/etc/ssl/etcd/member1-key.pem\"\nETCD_PEER_TRUSTED_CA_FILE=\"/etc/ssl/etcd/ca.pem\"\nETCD_PEER_CLIENT_CERT_AUTH=\"true\"\n#[logging]\nETCD_DEBUG=\"true\"\nETCD_LOG_PACKAGE_LEVELS=\"etcdserver=WARNING,security=DEBUG\"\n```\n\n\n## 4，测试 etcd 是否正常\n\n```\n$ systemctl restart  etcd\n\n如果报错，使用 journalctl -f -t etcd 和 journalctl -u etcd 来定位问题。\n\n$ curl --cacert /etc/ssl/etcd/ca.pem --cert /etc/ssl/etcd/client.pem --key /etc/ssl/etcd/client-key.pem https://10.93.81.17:2379/health\n{\"health\": \"true\"}\n\n$ etcdctl --endpoints=[10.93.81.17:2379] --cacert=/etc/ssl/etcd/ca.pem --cert=/etc/ssl/etcd/client.pem --key=/etc/ssl/etcd/client-key.pem member list\n     \n$ etcdctl --endpoints=[10.93.81.17:2379] --cacert=/etc/ssl/etcd/ca.pem --cert=/etc/ssl/etcd/client.pem --key=/etc/ssl/etcd/client-key.pem put /foo/bar  \"hello world\"\n     \n$ etcdctl --endpoints=[10.93.81.17:2379] --cacert=/etc/ssl/etcd/ca.pem --cert=/etc/ssl/etcd/client.pem --key=/etc/ssl/etcd/client-key.pem get /foo/bar\n```\n\n## 5，配置 kube-apiserver 使用 CA 连接 etcd\n\n```\n$ cp /etc/ssl/etcd/*  /var/run/kubernetes/\n    \n$ chown  -R kube.kube /var/run/kubernetes/\n\n在 /etc/kubernetes/apiserver 中 KUBE_API_ARGS 新加一下几个参数：\n\n--cert-dir='/var/run/kubernetes/' --etcd-cafile='/var/run/kubernetes/ca.pem' --etcd-certfile='/var/run/kubernetes/client.pem' --etcd-keyfile='/var/run/kubernetes/client-key.pem'\n\n\n```\n\n## 6，测试 kube-apiserver \n\n```\n$ systemctl restart kube-apiserver kube-controller-manager kube-scheduler kubelet kube-proxy\n\n$ systemctl status -l kube-apiserver kube-controller-manager kube-scheduler kubelet kube-proxy\n\n$ kubectl get node\n\n$ kubectl get cs\nNAME                 STATUS      MESSAGE                                                                   ERROR\nscheduler            Healthy     ok\ncontroller-manager   Healthy     ok\netcd-0               Unhealthy   Get https://10.93.81.17:2379/health: remote error: tls: bad certificate\n\n$ ./version.sh\netcdctl version: 3.1.3\nAPI version: 3.1\nKubernetes v1.6.0-beta.1\n\n```\n\n## 7，未解决的问题\n\n##### 1，使用  `kubectl get cs ` 查看会出现如上面所示的报错： \n```\netcd-0 Unhealthy Get https://10.93.81.17:2379/health: remote error: tls: bad certificate\n```\n此问题有人提交 pr 但尚未被 merge，[etcd component status check should include credentials](https://github.com/kubernetes/kubernetes/pull/39716)\n\n##### 2，使用以下命令查看到的 2380 端口是未加密的\n```\n$ etcdctl --endpoints=[10.93.81.17:2379] --cacert=/etc/ssl/etcd/ca.pem --cert=/etc/ssl/etcd/client.pem --key=/etc/ssl/etcd/client-key.pem member list  \n\n2017-03-15 15:02:05.611564 I | warning: ignoring ServerName for user-provided CA for backwards compatibility is deprecated\n145b401ad8709f51, started, node1, http://10.93.81.17:2380, https://10.93.81.17:2379\n```\n\n参考文档：\n\n* [kubernetes + etcd ssl 支持](https://www.addops.cn/post/tls-for-kubernetes-etcd.html)\n* [Security model](https://coreos.com/etcd/docs/latest/op-guide/security.html)\n* [Enabling HTTPS in an existing etcd cluster](https://coreos.com/etcd/docs/latest/etcd-live-http-to-https-migration.html)\n","source":"_posts/etcd-enable-https.md","raw":"---\ntitle: etcd 启用 https\ndate: 2017-03-15 21:32:00\ntype: \"etcd\"\n\n---\n* 1， 生成 TLS 秘钥对\n* 2，拷贝密钥对到所有节点\n* 3，配置 etcd 使用证书\n* 4，测试 etcd 是否正常\n* 5，配置 kube-apiserver 使用 CA 连接 etcd\n* 6，测试 kube-apiserver\n* 7，未解决的问题\n\nSSL/TSL 认证分单向认证和双向认证两种方式。简单说就是单向认证只是客户端对服务端的身份进行验证，双向认证是客户端和服务端互相进行身份认证。就比如，我们登录淘宝买东西，为了防止我们登录的是假淘宝网站，此时我们通过浏览器打开淘宝买东西时，浏览器会验证我们登录的网站是否是真的淘宝的网站，而淘宝网站不关心我们是否“合法”，这就是单向认证。而双向认证是服务端也需要对客户端做出认证。\n\n因为大部分 kubernetes 基于内网部署，而内网应该都会采用私有 IP 地址通讯，权威 CA 好像只能签署域名证书，对于签署到 IP 可能无法实现。所以我们需要预先自建 CA 签发证书。\n\n[Generate self-signed certificates 官方参考文档](https://coreos.com/os/docs/latest/generate-self-signed-certificates.html)\n\n官方推荐使用 cfssl 来自建 CA 签发证书，当然你也可以用众人熟知的 OpenSSL 或者 [easy-rsa](https://github.com/OpenVPN/easy-rsa)。以下步骤遵循官方文档：\n\n## 1， 生成 TLS 秘钥对\n\n生成步骤：\n\n* 1，下载 cfssl\n* 2，初始化证书颁发机构\n* 3，配置 CA 选项\n* 4，生成服务器端证书\n* 5，生成对等证书\n* 6，生成客户端证书\n\n想深入了解 HTTPS 的看这里：\n\n* [聊聊HTTPS和SSL/TLS协议](http://www.techug.com/post/https-ssl-tls.html)\n* [数字证书CA及扫盲](http://blog.jobbole.com/104919/)\n* [互联网加密及OpenSSL介绍和简单使用](https://mritd.me/2016/07/02/%E4%BA%92%E8%81%94%E7%BD%91%E5%8A%A0%E5%AF%86%E5%8F%8AOpenSSL%E4%BB%8B%E7%BB%8D%E5%92%8C%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8)\n* [SSL双向认证和单向认证的区别](http://www.cnblogs.com/Michael-Kong/archive/2012/08/16/SSL%E8%AF%81%E4%B9%A6%E5%8E%9F%E7%90%86.html)\n\n##### 1，下载 cfssl\n\n    mkdir ~/bin\n    curl -s -L -o ~/bin/cfssl https://pkg.cfssl.org/R1.2/cfssl_linux-amd64\n    curl -s -L -o ~/bin/cfssljson https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64\n    chmod +x ~/bin/{cfssl,cfssljson}\n    export PATH=$PATH:~/bin\n\n##### 2，初始化证书颁发机构\n\n```\nmkdir ~/cfssl\ncd ~/cfssl\ncfssl print-defaults config > ca-config.json\ncfssl print-defaults csr > ca-csr.json\n```\n\n证书类型介绍：\n\n* client certificate  用于通过服务器验证客户端。例如etcdctl，etcd proxy，fleetctl或docker客户端。\n* server certificate 由服务器使用，并由客户端验证服务器身份。例如docker服务器或kube-apiserver。\n* peer certificate 由 etcd 集群成员使用，供它们彼此之间通信使用。\n\n##### 3，配置 CA 选项\n\n```\n$ cat << EOF > ca-config.json\n\n{\n    \"signing\": {\n        \"default\": {\n            \"expiry\": \"43800h\"\n        },\n        \"profiles\": {\n            \"server\": {\n                \"expiry\": \"43800h\",\n                \"usages\": [\n                    \"signing\",\n                    \"key encipherment\",\n                    \"server auth\"\n                ]\n            },\n            \"client\": {\n                \"expiry\": \"43800h\",\n                \"usages\": [\n                    \"signing\",\n                    \"key encipherment\",\n                    \"client auth\"\n                ]\n            },\n            \"peer\": {\n                \"expiry\": \"43800h\",\n                \"usages\": [\n                    \"signing\",\n                    \"key encipherment\",\n                    \"server auth\",\n                    \"client auth\"\n                ]\n            }\n        }\n    }\n}\n\n$ cat << EOF > ca-csr.json\n\n{\n    \"CN\": \"My own CA\",\n    \"key\": {\n        \"algo\": \"rsa\",\n        \"size\": 2048\n    },\n    \"names\": [\n        {\n            \"C\": \"US\",\n            \"L\": \"CA\",\n            \"O\": \"My Company Name\",\n            \"ST\": \"San Francisco\",\n            \"OU\": \"Org Unit 1\",\n            \"OU\": \"Org Unit 2\"\n        }\n    ]\n}\n\n生成 CA 证书：\n\n$ cfssl gencert -initca ca-csr.json | cfssljson -bare ca -\n\n将会生成以下几个文件：\n\nca-key.pem\nca.csr\nca.pem\n\n```\n> 请务必保证 ca-key.pem 文件的安全，*.csr 文件在整个过程中不会使用。\n\n##### 4，生成服务器端证书\n```\n$ echo '{\"CN\":\"coreos1\",\"hosts\":[\"10.93.81.17\",\"127.0.0.1\"],\"key\":{\"algo\":\"rsa\",\"size\":2048}}' | cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=server -hostname=\"10.93.81.17,127.0.0.1,server\" - | cfssljson -bare server\n\nhosts 字段需要自定义。\n\n然后将得到以下几个文件：\nserver-key.pem\nserver.csr\nserver.pem\n```\n\n##### 5，生成对等证书\n```\n$ echo '{\"CN\":\"member1\",\"hosts\":[\"10.93.81.17\",\"127.0.0.1\"],\"key\":{\"algo\":\"rsa\",\"size\":2048}}' | cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=peer -hostname=\"10.93.81.17,127.0.0.1,server,member1\" - | cfssljson -bare member1\n\nhosts 字段需要自定义。\n\n然后将得到以下几个文件：\n\nmember1-key.pem\nmember1.csr\nmember1.pem\n\n如果有多个 etcd 成员，重复此步为每个成员生成对等证书。\n\n```\n\n##### 6，生成客户端证书\n\n```\n$ echo '{\"CN\":\"client\",\"hosts\":[\"10.93.81.17\",\"127.0.0.1\"],\"key\":{\"algo\":\"rsa\",\"size\":2048}}' | cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=client - | cfssljson -bare client\n\nhosts 字段需要自定义。\n\n然后将得到以下几个文件：\n\nclient-key.pem\nclient.csr\nclient.pem\n\n```\n至此，所有证书都已生成完毕。\n\n\n## 2，拷贝密钥对到所有节点\n* 1，拷贝密钥对到所有节点\n* 2，更新系统证书库\n\n##### 1，拷贝密钥对到所有节点\n\n\n```\n$ mkdir -pv /etc/ssl/etcd/\n$ cp ~/cfssl/* /etc/ssl/etcd/\n$ chown -R etcd:etcd /etc/ssl/etcd\n$ chmod 600 /etc/ssl/etcd/*-key.pem\n$ cp ~/cfssl/ca.pem /etc/ssl/certs/\n```\n\n##### 2，更新系统证书库\n\n```\n$ yum install ca-certificates -y\n     \n$ update-ca-trust\n        \n```\n\n## 3，配置 etcd 使用证书\n\n```\n$ etcdctl version\netcdctl version: 3.1.3\nAPI version: 3.1\n\n$ cat  /etc/etcd/etcd.conf\n\nETCD_DATA_DIR=\"/var/lib/etcd/default.etcd\"\n#监听URL，用于与其他节点通讯\nETCD_LISTEN_PEER_URLS=\"https://10.93.81.17:2380\"\n\n#告知客户端的URL, 也就是服务的URL\nETCD_LISTEN_CLIENT_URLS=\"https://10.93.81.17:2379,https://10.93.81.17:4001\"\n\n#表示监听其他节点同步信号的地址\nETCD_INITIAL_ADVERTISE_PEER_URLS=\"https://10.93.81.17:2380\"\n\n#–advertise-client-urls 告知客户端的URL, 也就是服务的URL，tcp2379端口用于监听客户端请求\nETCD_ADVERTISE_CLIENT_URLS=\"https://10.93.81.17:2379\"\n\n#启动参数配置\nETCD_NAME=\"node1\"\nETCD_INITIAL_CLUSTER=\"node1=https://10.93.81.17:2380\"\nETCD_INITIAL_CLUSTER_STATE=\"new\"\n\n#[security]\n\nETCD_CERT_FILE=\"/etc/ssl/etcd/server.pem\"\nETCD_KEY_FILE=\"/etc/ssl/etcd/server-key.pem\"\nETCD_TRUSTED_CA_FILE=\"/etc/ssl/etcd/ca.pem\"\nETCD_CLIENT_CERT_AUTH=\"true\"\nETCD_PEER_CERT_FILE=\"/etc/ssl/etcd/member1.pem\"\nETCD_PEER_KEY_FILE=\"/etc/ssl/etcd/member1-key.pem\"\nETCD_PEER_TRUSTED_CA_FILE=\"/etc/ssl/etcd/ca.pem\"\nETCD_PEER_CLIENT_CERT_AUTH=\"true\"\n#[logging]\nETCD_DEBUG=\"true\"\nETCD_LOG_PACKAGE_LEVELS=\"etcdserver=WARNING,security=DEBUG\"\n```\n\n\n## 4，测试 etcd 是否正常\n\n```\n$ systemctl restart  etcd\n\n如果报错，使用 journalctl -f -t etcd 和 journalctl -u etcd 来定位问题。\n\n$ curl --cacert /etc/ssl/etcd/ca.pem --cert /etc/ssl/etcd/client.pem --key /etc/ssl/etcd/client-key.pem https://10.93.81.17:2379/health\n{\"health\": \"true\"}\n\n$ etcdctl --endpoints=[10.93.81.17:2379] --cacert=/etc/ssl/etcd/ca.pem --cert=/etc/ssl/etcd/client.pem --key=/etc/ssl/etcd/client-key.pem member list\n     \n$ etcdctl --endpoints=[10.93.81.17:2379] --cacert=/etc/ssl/etcd/ca.pem --cert=/etc/ssl/etcd/client.pem --key=/etc/ssl/etcd/client-key.pem put /foo/bar  \"hello world\"\n     \n$ etcdctl --endpoints=[10.93.81.17:2379] --cacert=/etc/ssl/etcd/ca.pem --cert=/etc/ssl/etcd/client.pem --key=/etc/ssl/etcd/client-key.pem get /foo/bar\n```\n\n## 5，配置 kube-apiserver 使用 CA 连接 etcd\n\n```\n$ cp /etc/ssl/etcd/*  /var/run/kubernetes/\n    \n$ chown  -R kube.kube /var/run/kubernetes/\n\n在 /etc/kubernetes/apiserver 中 KUBE_API_ARGS 新加一下几个参数：\n\n--cert-dir='/var/run/kubernetes/' --etcd-cafile='/var/run/kubernetes/ca.pem' --etcd-certfile='/var/run/kubernetes/client.pem' --etcd-keyfile='/var/run/kubernetes/client-key.pem'\n\n\n```\n\n## 6，测试 kube-apiserver \n\n```\n$ systemctl restart kube-apiserver kube-controller-manager kube-scheduler kubelet kube-proxy\n\n$ systemctl status -l kube-apiserver kube-controller-manager kube-scheduler kubelet kube-proxy\n\n$ kubectl get node\n\n$ kubectl get cs\nNAME                 STATUS      MESSAGE                                                                   ERROR\nscheduler            Healthy     ok\ncontroller-manager   Healthy     ok\netcd-0               Unhealthy   Get https://10.93.81.17:2379/health: remote error: tls: bad certificate\n\n$ ./version.sh\netcdctl version: 3.1.3\nAPI version: 3.1\nKubernetes v1.6.0-beta.1\n\n```\n\n## 7，未解决的问题\n\n##### 1，使用  `kubectl get cs ` 查看会出现如上面所示的报错： \n```\netcd-0 Unhealthy Get https://10.93.81.17:2379/health: remote error: tls: bad certificate\n```\n此问题有人提交 pr 但尚未被 merge，[etcd component status check should include credentials](https://github.com/kubernetes/kubernetes/pull/39716)\n\n##### 2，使用以下命令查看到的 2380 端口是未加密的\n```\n$ etcdctl --endpoints=[10.93.81.17:2379] --cacert=/etc/ssl/etcd/ca.pem --cert=/etc/ssl/etcd/client.pem --key=/etc/ssl/etcd/client-key.pem member list  \n\n2017-03-15 15:02:05.611564 I | warning: ignoring ServerName for user-provided CA for backwards compatibility is deprecated\n145b401ad8709f51, started, node1, http://10.93.81.17:2380, https://10.93.81.17:2379\n```\n\n参考文档：\n\n* [kubernetes + etcd ssl 支持](https://www.addops.cn/post/tls-for-kubernetes-etcd.html)\n* [Security model](https://coreos.com/etcd/docs/latest/op-guide/security.html)\n* [Enabling HTTPS in an existing etcd cluster](https://coreos.com/etcd/docs/latest/etcd-live-http-to-https-migration.html)\n","slug":"etcd-enable-https","published":1,"updated":"2018-12-08T10:33:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpfbz8h60006yvfymfk2tu6g","content":"<ul>\n<li>1， 生成 TLS 秘钥对</li>\n<li>2，拷贝密钥对到所有节点</li>\n<li>3，配置 etcd 使用证书</li>\n<li>4，测试 etcd 是否正常</li>\n<li>5，配置 kube-apiserver 使用 CA 连接 etcd</li>\n<li>6，测试 kube-apiserver</li>\n<li>7，未解决的问题</li>\n</ul>\n<p>SSL/TSL 认证分单向认证和双向认证两种方式。简单说就是单向认证只是客户端对服务端的身份进行验证，双向认证是客户端和服务端互相进行身份认证。就比如，我们登录淘宝买东西，为了防止我们登录的是假淘宝网站，此时我们通过浏览器打开淘宝买东西时，浏览器会验证我们登录的网站是否是真的淘宝的网站，而淘宝网站不关心我们是否“合法”，这就是单向认证。而双向认证是服务端也需要对客户端做出认证。</p>\n<p>因为大部分 kubernetes 基于内网部署，而内网应该都会采用私有 IP 地址通讯，权威 CA 好像只能签署域名证书，对于签署到 IP 可能无法实现。所以我们需要预先自建 CA 签发证书。</p>\n<p><a href=\"https://coreos.com/os/docs/latest/generate-self-signed-certificates.html\" target=\"_blank\" rel=\"noopener\">Generate self-signed certificates 官方参考文档</a></p>\n<p>官方推荐使用 cfssl 来自建 CA 签发证书，当然你也可以用众人熟知的 OpenSSL 或者 <a href=\"https://github.com/OpenVPN/easy-rsa\" target=\"_blank\" rel=\"noopener\">easy-rsa</a>。以下步骤遵循官方文档：</p>\n<h2 id=\"1，-生成-TLS-秘钥对\"><a href=\"#1，-生成-TLS-秘钥对\" class=\"headerlink\" title=\"1， 生成 TLS 秘钥对\"></a>1， 生成 TLS 秘钥对</h2><p>生成步骤：</p>\n<ul>\n<li>1，下载 cfssl</li>\n<li>2，初始化证书颁发机构</li>\n<li>3，配置 CA 选项</li>\n<li>4，生成服务器端证书</li>\n<li>5，生成对等证书</li>\n<li>6，生成客户端证书</li>\n</ul>\n<p>想深入了解 HTTPS 的看这里：</p>\n<ul>\n<li><a href=\"http://www.techug.com/post/https-ssl-tls.html\" target=\"_blank\" rel=\"noopener\">聊聊HTTPS和SSL/TLS协议</a></li>\n<li><a href=\"http://blog.jobbole.com/104919/\" target=\"_blank\" rel=\"noopener\">数字证书CA及扫盲</a></li>\n<li><a href=\"https://mritd.me/2016/07/02/%E4%BA%92%E8%81%94%E7%BD%91%E5%8A%A0%E5%AF%86%E5%8F%8AOpenSSL%E4%BB%8B%E7%BB%8D%E5%92%8C%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8\" target=\"_blank\" rel=\"noopener\">互联网加密及OpenSSL介绍和简单使用</a></li>\n<li><a href=\"http://www.cnblogs.com/Michael-Kong/archive/2012/08/16/SSL%E8%AF%81%E4%B9%A6%E5%8E%9F%E7%90%86.html\" target=\"_blank\" rel=\"noopener\">SSL双向认证和单向认证的区别</a></li>\n</ul>\n<h5 id=\"1，下载-cfssl\"><a href=\"#1，下载-cfssl\" class=\"headerlink\" title=\"1，下载 cfssl\"></a>1，下载 cfssl</h5><pre><code>mkdir ~/bin\ncurl -s -L -o ~/bin/cfssl https://pkg.cfssl.org/R1.2/cfssl_linux-amd64\ncurl -s -L -o ~/bin/cfssljson https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64\nchmod +x ~/bin/{cfssl,cfssljson}\nexport PATH=$PATH:~/bin\n</code></pre><h5 id=\"2，初始化证书颁发机构\"><a href=\"#2，初始化证书颁发机构\" class=\"headerlink\" title=\"2，初始化证书颁发机构\"></a>2，初始化证书颁发机构</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir ~/cfssl</span><br><span class=\"line\">cd ~/cfssl</span><br><span class=\"line\">cfssl print-defaults config &gt; ca-config.json</span><br><span class=\"line\">cfssl print-defaults csr &gt; ca-csr.json</span><br></pre></td></tr></table></figure>\n<p>证书类型介绍：</p>\n<ul>\n<li>client certificate  用于通过服务器验证客户端。例如etcdctl，etcd proxy，fleetctl或docker客户端。</li>\n<li>server certificate 由服务器使用，并由客户端验证服务器身份。例如docker服务器或kube-apiserver。</li>\n<li>peer certificate 由 etcd 集群成员使用，供它们彼此之间通信使用。</li>\n</ul>\n<h5 id=\"3，配置-CA-选项\"><a href=\"#3，配置-CA-选项\" class=\"headerlink\" title=\"3，配置 CA 选项\"></a>3，配置 CA 选项</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat &lt;&lt; EOF &gt; ca-config.json</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;signing&quot;: &#123;</span><br><span class=\"line\">        &quot;default&quot;: &#123;</span><br><span class=\"line\">            &quot;expiry&quot;: &quot;43800h&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;profiles&quot;: &#123;</span><br><span class=\"line\">            &quot;server&quot;: &#123;</span><br><span class=\"line\">                &quot;expiry&quot;: &quot;43800h&quot;,</span><br><span class=\"line\">                &quot;usages&quot;: [</span><br><span class=\"line\">                    &quot;signing&quot;,</span><br><span class=\"line\">                    &quot;key encipherment&quot;,</span><br><span class=\"line\">                    &quot;server auth&quot;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &quot;client&quot;: &#123;</span><br><span class=\"line\">                &quot;expiry&quot;: &quot;43800h&quot;,</span><br><span class=\"line\">                &quot;usages&quot;: [</span><br><span class=\"line\">                    &quot;signing&quot;,</span><br><span class=\"line\">                    &quot;key encipherment&quot;,</span><br><span class=\"line\">                    &quot;client auth&quot;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &quot;peer&quot;: &#123;</span><br><span class=\"line\">                &quot;expiry&quot;: &quot;43800h&quot;,</span><br><span class=\"line\">                &quot;usages&quot;: [</span><br><span class=\"line\">                    &quot;signing&quot;,</span><br><span class=\"line\">                    &quot;key encipherment&quot;,</span><br><span class=\"line\">                    &quot;server auth&quot;,</span><br><span class=\"line\">                    &quot;client auth&quot;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$ cat &lt;&lt; EOF &gt; ca-csr.json</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;CN&quot;: &quot;My own CA&quot;,</span><br><span class=\"line\">    &quot;key&quot;: &#123;</span><br><span class=\"line\">        &quot;algo&quot;: &quot;rsa&quot;,</span><br><span class=\"line\">        &quot;size&quot;: 2048</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;names&quot;: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;C&quot;: &quot;US&quot;,</span><br><span class=\"line\">            &quot;L&quot;: &quot;CA&quot;,</span><br><span class=\"line\">            &quot;O&quot;: &quot;My Company Name&quot;,</span><br><span class=\"line\">            &quot;ST&quot;: &quot;San Francisco&quot;,</span><br><span class=\"line\">            &quot;OU&quot;: &quot;Org Unit 1&quot;,</span><br><span class=\"line\">            &quot;OU&quot;: &quot;Org Unit 2&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">生成 CA 证书：</span><br><span class=\"line\"></span><br><span class=\"line\">$ cfssl gencert -initca ca-csr.json | cfssljson -bare ca -</span><br><span class=\"line\"></span><br><span class=\"line\">将会生成以下几个文件：</span><br><span class=\"line\"></span><br><span class=\"line\">ca-key.pem</span><br><span class=\"line\">ca.csr</span><br><span class=\"line\">ca.pem</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>请务必保证 ca-key.pem 文件的安全，*.csr 文件在整个过程中不会使用。</p>\n</blockquote>\n<h5 id=\"4，生成服务器端证书\"><a href=\"#4，生成服务器端证书\" class=\"headerlink\" title=\"4，生成服务器端证书\"></a>4，生成服务器端证书</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ echo &apos;&#123;&quot;CN&quot;:&quot;coreos1&quot;,&quot;hosts&quot;:[&quot;10.93.81.17&quot;,&quot;127.0.0.1&quot;],&quot;key&quot;:&#123;&quot;algo&quot;:&quot;rsa&quot;,&quot;size&quot;:2048&#125;&#125;&apos; | cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=server -hostname=&quot;10.93.81.17,127.0.0.1,server&quot; - | cfssljson -bare server</span><br><span class=\"line\"></span><br><span class=\"line\">hosts 字段需要自定义。</span><br><span class=\"line\"></span><br><span class=\"line\">然后将得到以下几个文件：</span><br><span class=\"line\">server-key.pem</span><br><span class=\"line\">server.csr</span><br><span class=\"line\">server.pem</span><br></pre></td></tr></table></figure>\n<h5 id=\"5，生成对等证书\"><a href=\"#5，生成对等证书\" class=\"headerlink\" title=\"5，生成对等证书\"></a>5，生成对等证书</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ echo &apos;&#123;&quot;CN&quot;:&quot;member1&quot;,&quot;hosts&quot;:[&quot;10.93.81.17&quot;,&quot;127.0.0.1&quot;],&quot;key&quot;:&#123;&quot;algo&quot;:&quot;rsa&quot;,&quot;size&quot;:2048&#125;&#125;&apos; | cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=peer -hostname=&quot;10.93.81.17,127.0.0.1,server,member1&quot; - | cfssljson -bare member1</span><br><span class=\"line\"></span><br><span class=\"line\">hosts 字段需要自定义。</span><br><span class=\"line\"></span><br><span class=\"line\">然后将得到以下几个文件：</span><br><span class=\"line\"></span><br><span class=\"line\">member1-key.pem</span><br><span class=\"line\">member1.csr</span><br><span class=\"line\">member1.pem</span><br><span class=\"line\"></span><br><span class=\"line\">如果有多个 etcd 成员，重复此步为每个成员生成对等证书。</span><br></pre></td></tr></table></figure>\n<h5 id=\"6，生成客户端证书\"><a href=\"#6，生成客户端证书\" class=\"headerlink\" title=\"6，生成客户端证书\"></a>6，生成客户端证书</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ echo &apos;&#123;&quot;CN&quot;:&quot;client&quot;,&quot;hosts&quot;:[&quot;10.93.81.17&quot;,&quot;127.0.0.1&quot;],&quot;key&quot;:&#123;&quot;algo&quot;:&quot;rsa&quot;,&quot;size&quot;:2048&#125;&#125;&apos; | cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=client - | cfssljson -bare client</span><br><span class=\"line\"></span><br><span class=\"line\">hosts 字段需要自定义。</span><br><span class=\"line\"></span><br><span class=\"line\">然后将得到以下几个文件：</span><br><span class=\"line\"></span><br><span class=\"line\">client-key.pem</span><br><span class=\"line\">client.csr</span><br><span class=\"line\">client.pem</span><br></pre></td></tr></table></figure>\n<p>至此，所有证书都已生成完毕。</p>\n<h2 id=\"2，拷贝密钥对到所有节点\"><a href=\"#2，拷贝密钥对到所有节点\" class=\"headerlink\" title=\"2，拷贝密钥对到所有节点\"></a>2，拷贝密钥对到所有节点</h2><ul>\n<li>1，拷贝密钥对到所有节点</li>\n<li>2，更新系统证书库</li>\n</ul>\n<h5 id=\"1，拷贝密钥对到所有节点\"><a href=\"#1，拷贝密钥对到所有节点\" class=\"headerlink\" title=\"1，拷贝密钥对到所有节点\"></a>1，拷贝密钥对到所有节点</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir -pv /etc/ssl/etcd/</span><br><span class=\"line\">$ cp ~/cfssl/* /etc/ssl/etcd/</span><br><span class=\"line\">$ chown -R etcd:etcd /etc/ssl/etcd</span><br><span class=\"line\">$ chmod 600 /etc/ssl/etcd/*-key.pem</span><br><span class=\"line\">$ cp ~/cfssl/ca.pem /etc/ssl/certs/</span><br></pre></td></tr></table></figure>\n<h5 id=\"2，更新系统证书库\"><a href=\"#2，更新系统证书库\" class=\"headerlink\" title=\"2，更新系统证书库\"></a>2，更新系统证书库</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install ca-certificates -y</span><br><span class=\"line\">     </span><br><span class=\"line\">$ update-ca-trust</span><br></pre></td></tr></table></figure>\n<h2 id=\"3，配置-etcd-使用证书\"><a href=\"#3，配置-etcd-使用证书\" class=\"headerlink\" title=\"3，配置 etcd 使用证书\"></a>3，配置 etcd 使用证书</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ etcdctl version</span><br><span class=\"line\">etcdctl version: 3.1.3</span><br><span class=\"line\">API version: 3.1</span><br><span class=\"line\"></span><br><span class=\"line\">$ cat  /etc/etcd/etcd.conf</span><br><span class=\"line\"></span><br><span class=\"line\">ETCD_DATA_DIR=&quot;/var/lib/etcd/default.etcd&quot;</span><br><span class=\"line\">#监听URL，用于与其他节点通讯</span><br><span class=\"line\">ETCD_LISTEN_PEER_URLS=&quot;https://10.93.81.17:2380&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#告知客户端的URL, 也就是服务的URL</span><br><span class=\"line\">ETCD_LISTEN_CLIENT_URLS=&quot;https://10.93.81.17:2379,https://10.93.81.17:4001&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#表示监听其他节点同步信号的地址</span><br><span class=\"line\">ETCD_INITIAL_ADVERTISE_PEER_URLS=&quot;https://10.93.81.17:2380&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#–advertise-client-urls 告知客户端的URL, 也就是服务的URL，tcp2379端口用于监听客户端请求</span><br><span class=\"line\">ETCD_ADVERTISE_CLIENT_URLS=&quot;https://10.93.81.17:2379&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#启动参数配置</span><br><span class=\"line\">ETCD_NAME=&quot;node1&quot;</span><br><span class=\"line\">ETCD_INITIAL_CLUSTER=&quot;node1=https://10.93.81.17:2380&quot;</span><br><span class=\"line\">ETCD_INITIAL_CLUSTER_STATE=&quot;new&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#[security]</span><br><span class=\"line\"></span><br><span class=\"line\">ETCD_CERT_FILE=&quot;/etc/ssl/etcd/server.pem&quot;</span><br><span class=\"line\">ETCD_KEY_FILE=&quot;/etc/ssl/etcd/server-key.pem&quot;</span><br><span class=\"line\">ETCD_TRUSTED_CA_FILE=&quot;/etc/ssl/etcd/ca.pem&quot;</span><br><span class=\"line\">ETCD_CLIENT_CERT_AUTH=&quot;true&quot;</span><br><span class=\"line\">ETCD_PEER_CERT_FILE=&quot;/etc/ssl/etcd/member1.pem&quot;</span><br><span class=\"line\">ETCD_PEER_KEY_FILE=&quot;/etc/ssl/etcd/member1-key.pem&quot;</span><br><span class=\"line\">ETCD_PEER_TRUSTED_CA_FILE=&quot;/etc/ssl/etcd/ca.pem&quot;</span><br><span class=\"line\">ETCD_PEER_CLIENT_CERT_AUTH=&quot;true&quot;</span><br><span class=\"line\">#[logging]</span><br><span class=\"line\">ETCD_DEBUG=&quot;true&quot;</span><br><span class=\"line\">ETCD_LOG_PACKAGE_LEVELS=&quot;etcdserver=WARNING,security=DEBUG&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4，测试-etcd-是否正常\"><a href=\"#4，测试-etcd-是否正常\" class=\"headerlink\" title=\"4，测试 etcd 是否正常\"></a>4，测试 etcd 是否正常</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl restart  etcd</span><br><span class=\"line\"></span><br><span class=\"line\">如果报错，使用 journalctl -f -t etcd 和 journalctl -u etcd 来定位问题。</span><br><span class=\"line\"></span><br><span class=\"line\">$ curl --cacert /etc/ssl/etcd/ca.pem --cert /etc/ssl/etcd/client.pem --key /etc/ssl/etcd/client-key.pem https://10.93.81.17:2379/health</span><br><span class=\"line\">&#123;&quot;health&quot;: &quot;true&quot;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$ etcdctl --endpoints=[10.93.81.17:2379] --cacert=/etc/ssl/etcd/ca.pem --cert=/etc/ssl/etcd/client.pem --key=/etc/ssl/etcd/client-key.pem member list</span><br><span class=\"line\">     </span><br><span class=\"line\">$ etcdctl --endpoints=[10.93.81.17:2379] --cacert=/etc/ssl/etcd/ca.pem --cert=/etc/ssl/etcd/client.pem --key=/etc/ssl/etcd/client-key.pem put /foo/bar  &quot;hello world&quot;</span><br><span class=\"line\">     </span><br><span class=\"line\">$ etcdctl --endpoints=[10.93.81.17:2379] --cacert=/etc/ssl/etcd/ca.pem --cert=/etc/ssl/etcd/client.pem --key=/etc/ssl/etcd/client-key.pem get /foo/bar</span><br></pre></td></tr></table></figure>\n<h2 id=\"5，配置-kube-apiserver-使用-CA-连接-etcd\"><a href=\"#5，配置-kube-apiserver-使用-CA-连接-etcd\" class=\"headerlink\" title=\"5，配置 kube-apiserver 使用 CA 连接 etcd\"></a>5，配置 kube-apiserver 使用 CA 连接 etcd</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cp /etc/ssl/etcd/*  /var/run/kubernetes/</span><br><span class=\"line\">    </span><br><span class=\"line\">$ chown  -R kube.kube /var/run/kubernetes/</span><br><span class=\"line\"></span><br><span class=\"line\">在 /etc/kubernetes/apiserver 中 KUBE_API_ARGS 新加一下几个参数：</span><br><span class=\"line\"></span><br><span class=\"line\">--cert-dir=&apos;/var/run/kubernetes/&apos; --etcd-cafile=&apos;/var/run/kubernetes/ca.pem&apos; --etcd-certfile=&apos;/var/run/kubernetes/client.pem&apos; --etcd-keyfile=&apos;/var/run/kubernetes/client-key.pem&apos;</span><br></pre></td></tr></table></figure>\n<h2 id=\"6，测试-kube-apiserver\"><a href=\"#6，测试-kube-apiserver\" class=\"headerlink\" title=\"6，测试 kube-apiserver\"></a>6，测试 kube-apiserver</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl restart kube-apiserver kube-controller-manager kube-scheduler kubelet kube-proxy</span><br><span class=\"line\"></span><br><span class=\"line\">$ systemctl status -l kube-apiserver kube-controller-manager kube-scheduler kubelet kube-proxy</span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl get node</span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl get cs</span><br><span class=\"line\">NAME                 STATUS      MESSAGE                                                                   ERROR</span><br><span class=\"line\">scheduler            Healthy     ok</span><br><span class=\"line\">controller-manager   Healthy     ok</span><br><span class=\"line\">etcd-0               Unhealthy   Get https://10.93.81.17:2379/health: remote error: tls: bad certificate</span><br><span class=\"line\"></span><br><span class=\"line\">$ ./version.sh</span><br><span class=\"line\">etcdctl version: 3.1.3</span><br><span class=\"line\">API version: 3.1</span><br><span class=\"line\">Kubernetes v1.6.0-beta.1</span><br></pre></td></tr></table></figure>\n<h2 id=\"7，未解决的问题\"><a href=\"#7，未解决的问题\" class=\"headerlink\" title=\"7，未解决的问题\"></a>7，未解决的问题</h2><h5 id=\"1，使用-kubectl-get-cs-查看会出现如上面所示的报错：\"><a href=\"#1，使用-kubectl-get-cs-查看会出现如上面所示的报错：\" class=\"headerlink\" title=\"1，使用  kubectl get cs 查看会出现如上面所示的报错：\"></a>1，使用  <code>kubectl get cs</code> 查看会出现如上面所示的报错：</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">etcd-0 Unhealthy Get https://10.93.81.17:2379/health: remote error: tls: bad certificate</span><br></pre></td></tr></table></figure>\n<p>此问题有人提交 pr 但尚未被 merge，<a href=\"https://github.com/kubernetes/kubernetes/pull/39716\" target=\"_blank\" rel=\"noopener\">etcd component status check should include credentials</a></p>\n<h5 id=\"2，使用以下命令查看到的-2380-端口是未加密的\"><a href=\"#2，使用以下命令查看到的-2380-端口是未加密的\" class=\"headerlink\" title=\"2，使用以下命令查看到的 2380 端口是未加密的\"></a>2，使用以下命令查看到的 2380 端口是未加密的</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ etcdctl --endpoints=[10.93.81.17:2379] --cacert=/etc/ssl/etcd/ca.pem --cert=/etc/ssl/etcd/client.pem --key=/etc/ssl/etcd/client-key.pem member list  </span><br><span class=\"line\"></span><br><span class=\"line\">2017-03-15 15:02:05.611564 I | warning: ignoring ServerName for user-provided CA for backwards compatibility is deprecated</span><br><span class=\"line\">145b401ad8709f51, started, node1, http://10.93.81.17:2380, https://10.93.81.17:2379</span><br></pre></td></tr></table></figure>\n<p>参考文档：</p>\n<ul>\n<li><a href=\"https://www.addops.cn/post/tls-for-kubernetes-etcd.html\" target=\"_blank\" rel=\"noopener\">kubernetes + etcd ssl 支持</a></li>\n<li><a href=\"https://coreos.com/etcd/docs/latest/op-guide/security.html\" target=\"_blank\" rel=\"noopener\">Security model</a></li>\n<li><a href=\"https://coreos.com/etcd/docs/latest/etcd-live-http-to-https-migration.html\" target=\"_blank\" rel=\"noopener\">Enabling HTTPS in an existing etcd cluster</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>1， 生成 TLS 秘钥对</li>\n<li>2，拷贝密钥对到所有节点</li>\n<li>3，配置 etcd 使用证书</li>\n<li>4，测试 etcd 是否正常</li>\n<li>5，配置 kube-apiserver 使用 CA 连接 etcd</li>\n<li>6，测试 kube-apiserver</li>\n<li>7，未解决的问题</li>\n</ul>\n<p>SSL/TSL 认证分单向认证和双向认证两种方式。简单说就是单向认证只是客户端对服务端的身份进行验证，双向认证是客户端和服务端互相进行身份认证。就比如，我们登录淘宝买东西，为了防止我们登录的是假淘宝网站，此时我们通过浏览器打开淘宝买东西时，浏览器会验证我们登录的网站是否是真的淘宝的网站，而淘宝网站不关心我们是否“合法”，这就是单向认证。而双向认证是服务端也需要对客户端做出认证。</p>\n<p>因为大部分 kubernetes 基于内网部署，而内网应该都会采用私有 IP 地址通讯，权威 CA 好像只能签署域名证书，对于签署到 IP 可能无法实现。所以我们需要预先自建 CA 签发证书。</p>\n<p><a href=\"https://coreos.com/os/docs/latest/generate-self-signed-certificates.html\" target=\"_blank\" rel=\"noopener\">Generate self-signed certificates 官方参考文档</a></p>\n<p>官方推荐使用 cfssl 来自建 CA 签发证书，当然你也可以用众人熟知的 OpenSSL 或者 <a href=\"https://github.com/OpenVPN/easy-rsa\" target=\"_blank\" rel=\"noopener\">easy-rsa</a>。以下步骤遵循官方文档：</p>\n<h2 id=\"1，-生成-TLS-秘钥对\"><a href=\"#1，-生成-TLS-秘钥对\" class=\"headerlink\" title=\"1， 生成 TLS 秘钥对\"></a>1， 生成 TLS 秘钥对</h2><p>生成步骤：</p>\n<ul>\n<li>1，下载 cfssl</li>\n<li>2，初始化证书颁发机构</li>\n<li>3，配置 CA 选项</li>\n<li>4，生成服务器端证书</li>\n<li>5，生成对等证书</li>\n<li>6，生成客户端证书</li>\n</ul>\n<p>想深入了解 HTTPS 的看这里：</p>\n<ul>\n<li><a href=\"http://www.techug.com/post/https-ssl-tls.html\" target=\"_blank\" rel=\"noopener\">聊聊HTTPS和SSL/TLS协议</a></li>\n<li><a href=\"http://blog.jobbole.com/104919/\" target=\"_blank\" rel=\"noopener\">数字证书CA及扫盲</a></li>\n<li><a href=\"https://mritd.me/2016/07/02/%E4%BA%92%E8%81%94%E7%BD%91%E5%8A%A0%E5%AF%86%E5%8F%8AOpenSSL%E4%BB%8B%E7%BB%8D%E5%92%8C%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8\" target=\"_blank\" rel=\"noopener\">互联网加密及OpenSSL介绍和简单使用</a></li>\n<li><a href=\"http://www.cnblogs.com/Michael-Kong/archive/2012/08/16/SSL%E8%AF%81%E4%B9%A6%E5%8E%9F%E7%90%86.html\" target=\"_blank\" rel=\"noopener\">SSL双向认证和单向认证的区别</a></li>\n</ul>\n<h5 id=\"1，下载-cfssl\"><a href=\"#1，下载-cfssl\" class=\"headerlink\" title=\"1，下载 cfssl\"></a>1，下载 cfssl</h5><pre><code>mkdir ~/bin\ncurl -s -L -o ~/bin/cfssl https://pkg.cfssl.org/R1.2/cfssl_linux-amd64\ncurl -s -L -o ~/bin/cfssljson https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64\nchmod +x ~/bin/{cfssl,cfssljson}\nexport PATH=$PATH:~/bin\n</code></pre><h5 id=\"2，初始化证书颁发机构\"><a href=\"#2，初始化证书颁发机构\" class=\"headerlink\" title=\"2，初始化证书颁发机构\"></a>2，初始化证书颁发机构</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir ~/cfssl</span><br><span class=\"line\">cd ~/cfssl</span><br><span class=\"line\">cfssl print-defaults config &gt; ca-config.json</span><br><span class=\"line\">cfssl print-defaults csr &gt; ca-csr.json</span><br></pre></td></tr></table></figure>\n<p>证书类型介绍：</p>\n<ul>\n<li>client certificate  用于通过服务器验证客户端。例如etcdctl，etcd proxy，fleetctl或docker客户端。</li>\n<li>server certificate 由服务器使用，并由客户端验证服务器身份。例如docker服务器或kube-apiserver。</li>\n<li>peer certificate 由 etcd 集群成员使用，供它们彼此之间通信使用。</li>\n</ul>\n<h5 id=\"3，配置-CA-选项\"><a href=\"#3，配置-CA-选项\" class=\"headerlink\" title=\"3，配置 CA 选项\"></a>3，配置 CA 选项</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat &lt;&lt; EOF &gt; ca-config.json</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;signing&quot;: &#123;</span><br><span class=\"line\">        &quot;default&quot;: &#123;</span><br><span class=\"line\">            &quot;expiry&quot;: &quot;43800h&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;profiles&quot;: &#123;</span><br><span class=\"line\">            &quot;server&quot;: &#123;</span><br><span class=\"line\">                &quot;expiry&quot;: &quot;43800h&quot;,</span><br><span class=\"line\">                &quot;usages&quot;: [</span><br><span class=\"line\">                    &quot;signing&quot;,</span><br><span class=\"line\">                    &quot;key encipherment&quot;,</span><br><span class=\"line\">                    &quot;server auth&quot;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &quot;client&quot;: &#123;</span><br><span class=\"line\">                &quot;expiry&quot;: &quot;43800h&quot;,</span><br><span class=\"line\">                &quot;usages&quot;: [</span><br><span class=\"line\">                    &quot;signing&quot;,</span><br><span class=\"line\">                    &quot;key encipherment&quot;,</span><br><span class=\"line\">                    &quot;client auth&quot;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &quot;peer&quot;: &#123;</span><br><span class=\"line\">                &quot;expiry&quot;: &quot;43800h&quot;,</span><br><span class=\"line\">                &quot;usages&quot;: [</span><br><span class=\"line\">                    &quot;signing&quot;,</span><br><span class=\"line\">                    &quot;key encipherment&quot;,</span><br><span class=\"line\">                    &quot;server auth&quot;,</span><br><span class=\"line\">                    &quot;client auth&quot;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$ cat &lt;&lt; EOF &gt; ca-csr.json</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;CN&quot;: &quot;My own CA&quot;,</span><br><span class=\"line\">    &quot;key&quot;: &#123;</span><br><span class=\"line\">        &quot;algo&quot;: &quot;rsa&quot;,</span><br><span class=\"line\">        &quot;size&quot;: 2048</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;names&quot;: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;C&quot;: &quot;US&quot;,</span><br><span class=\"line\">            &quot;L&quot;: &quot;CA&quot;,</span><br><span class=\"line\">            &quot;O&quot;: &quot;My Company Name&quot;,</span><br><span class=\"line\">            &quot;ST&quot;: &quot;San Francisco&quot;,</span><br><span class=\"line\">            &quot;OU&quot;: &quot;Org Unit 1&quot;,</span><br><span class=\"line\">            &quot;OU&quot;: &quot;Org Unit 2&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">生成 CA 证书：</span><br><span class=\"line\"></span><br><span class=\"line\">$ cfssl gencert -initca ca-csr.json | cfssljson -bare ca -</span><br><span class=\"line\"></span><br><span class=\"line\">将会生成以下几个文件：</span><br><span class=\"line\"></span><br><span class=\"line\">ca-key.pem</span><br><span class=\"line\">ca.csr</span><br><span class=\"line\">ca.pem</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>请务必保证 ca-key.pem 文件的安全，*.csr 文件在整个过程中不会使用。</p>\n</blockquote>\n<h5 id=\"4，生成服务器端证书\"><a href=\"#4，生成服务器端证书\" class=\"headerlink\" title=\"4，生成服务器端证书\"></a>4，生成服务器端证书</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ echo &apos;&#123;&quot;CN&quot;:&quot;coreos1&quot;,&quot;hosts&quot;:[&quot;10.93.81.17&quot;,&quot;127.0.0.1&quot;],&quot;key&quot;:&#123;&quot;algo&quot;:&quot;rsa&quot;,&quot;size&quot;:2048&#125;&#125;&apos; | cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=server -hostname=&quot;10.93.81.17,127.0.0.1,server&quot; - | cfssljson -bare server</span><br><span class=\"line\"></span><br><span class=\"line\">hosts 字段需要自定义。</span><br><span class=\"line\"></span><br><span class=\"line\">然后将得到以下几个文件：</span><br><span class=\"line\">server-key.pem</span><br><span class=\"line\">server.csr</span><br><span class=\"line\">server.pem</span><br></pre></td></tr></table></figure>\n<h5 id=\"5，生成对等证书\"><a href=\"#5，生成对等证书\" class=\"headerlink\" title=\"5，生成对等证书\"></a>5，生成对等证书</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ echo &apos;&#123;&quot;CN&quot;:&quot;member1&quot;,&quot;hosts&quot;:[&quot;10.93.81.17&quot;,&quot;127.0.0.1&quot;],&quot;key&quot;:&#123;&quot;algo&quot;:&quot;rsa&quot;,&quot;size&quot;:2048&#125;&#125;&apos; | cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=peer -hostname=&quot;10.93.81.17,127.0.0.1,server,member1&quot; - | cfssljson -bare member1</span><br><span class=\"line\"></span><br><span class=\"line\">hosts 字段需要自定义。</span><br><span class=\"line\"></span><br><span class=\"line\">然后将得到以下几个文件：</span><br><span class=\"line\"></span><br><span class=\"line\">member1-key.pem</span><br><span class=\"line\">member1.csr</span><br><span class=\"line\">member1.pem</span><br><span class=\"line\"></span><br><span class=\"line\">如果有多个 etcd 成员，重复此步为每个成员生成对等证书。</span><br></pre></td></tr></table></figure>\n<h5 id=\"6，生成客户端证书\"><a href=\"#6，生成客户端证书\" class=\"headerlink\" title=\"6，生成客户端证书\"></a>6，生成客户端证书</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ echo &apos;&#123;&quot;CN&quot;:&quot;client&quot;,&quot;hosts&quot;:[&quot;10.93.81.17&quot;,&quot;127.0.0.1&quot;],&quot;key&quot;:&#123;&quot;algo&quot;:&quot;rsa&quot;,&quot;size&quot;:2048&#125;&#125;&apos; | cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=client - | cfssljson -bare client</span><br><span class=\"line\"></span><br><span class=\"line\">hosts 字段需要自定义。</span><br><span class=\"line\"></span><br><span class=\"line\">然后将得到以下几个文件：</span><br><span class=\"line\"></span><br><span class=\"line\">client-key.pem</span><br><span class=\"line\">client.csr</span><br><span class=\"line\">client.pem</span><br></pre></td></tr></table></figure>\n<p>至此，所有证书都已生成完毕。</p>\n<h2 id=\"2，拷贝密钥对到所有节点\"><a href=\"#2，拷贝密钥对到所有节点\" class=\"headerlink\" title=\"2，拷贝密钥对到所有节点\"></a>2，拷贝密钥对到所有节点</h2><ul>\n<li>1，拷贝密钥对到所有节点</li>\n<li>2，更新系统证书库</li>\n</ul>\n<h5 id=\"1，拷贝密钥对到所有节点\"><a href=\"#1，拷贝密钥对到所有节点\" class=\"headerlink\" title=\"1，拷贝密钥对到所有节点\"></a>1，拷贝密钥对到所有节点</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir -pv /etc/ssl/etcd/</span><br><span class=\"line\">$ cp ~/cfssl/* /etc/ssl/etcd/</span><br><span class=\"line\">$ chown -R etcd:etcd /etc/ssl/etcd</span><br><span class=\"line\">$ chmod 600 /etc/ssl/etcd/*-key.pem</span><br><span class=\"line\">$ cp ~/cfssl/ca.pem /etc/ssl/certs/</span><br></pre></td></tr></table></figure>\n<h5 id=\"2，更新系统证书库\"><a href=\"#2，更新系统证书库\" class=\"headerlink\" title=\"2，更新系统证书库\"></a>2，更新系统证书库</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install ca-certificates -y</span><br><span class=\"line\">     </span><br><span class=\"line\">$ update-ca-trust</span><br></pre></td></tr></table></figure>\n<h2 id=\"3，配置-etcd-使用证书\"><a href=\"#3，配置-etcd-使用证书\" class=\"headerlink\" title=\"3，配置 etcd 使用证书\"></a>3，配置 etcd 使用证书</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ etcdctl version</span><br><span class=\"line\">etcdctl version: 3.1.3</span><br><span class=\"line\">API version: 3.1</span><br><span class=\"line\"></span><br><span class=\"line\">$ cat  /etc/etcd/etcd.conf</span><br><span class=\"line\"></span><br><span class=\"line\">ETCD_DATA_DIR=&quot;/var/lib/etcd/default.etcd&quot;</span><br><span class=\"line\">#监听URL，用于与其他节点通讯</span><br><span class=\"line\">ETCD_LISTEN_PEER_URLS=&quot;https://10.93.81.17:2380&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#告知客户端的URL, 也就是服务的URL</span><br><span class=\"line\">ETCD_LISTEN_CLIENT_URLS=&quot;https://10.93.81.17:2379,https://10.93.81.17:4001&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#表示监听其他节点同步信号的地址</span><br><span class=\"line\">ETCD_INITIAL_ADVERTISE_PEER_URLS=&quot;https://10.93.81.17:2380&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#–advertise-client-urls 告知客户端的URL, 也就是服务的URL，tcp2379端口用于监听客户端请求</span><br><span class=\"line\">ETCD_ADVERTISE_CLIENT_URLS=&quot;https://10.93.81.17:2379&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#启动参数配置</span><br><span class=\"line\">ETCD_NAME=&quot;node1&quot;</span><br><span class=\"line\">ETCD_INITIAL_CLUSTER=&quot;node1=https://10.93.81.17:2380&quot;</span><br><span class=\"line\">ETCD_INITIAL_CLUSTER_STATE=&quot;new&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#[security]</span><br><span class=\"line\"></span><br><span class=\"line\">ETCD_CERT_FILE=&quot;/etc/ssl/etcd/server.pem&quot;</span><br><span class=\"line\">ETCD_KEY_FILE=&quot;/etc/ssl/etcd/server-key.pem&quot;</span><br><span class=\"line\">ETCD_TRUSTED_CA_FILE=&quot;/etc/ssl/etcd/ca.pem&quot;</span><br><span class=\"line\">ETCD_CLIENT_CERT_AUTH=&quot;true&quot;</span><br><span class=\"line\">ETCD_PEER_CERT_FILE=&quot;/etc/ssl/etcd/member1.pem&quot;</span><br><span class=\"line\">ETCD_PEER_KEY_FILE=&quot;/etc/ssl/etcd/member1-key.pem&quot;</span><br><span class=\"line\">ETCD_PEER_TRUSTED_CA_FILE=&quot;/etc/ssl/etcd/ca.pem&quot;</span><br><span class=\"line\">ETCD_PEER_CLIENT_CERT_AUTH=&quot;true&quot;</span><br><span class=\"line\">#[logging]</span><br><span class=\"line\">ETCD_DEBUG=&quot;true&quot;</span><br><span class=\"line\">ETCD_LOG_PACKAGE_LEVELS=&quot;etcdserver=WARNING,security=DEBUG&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4，测试-etcd-是否正常\"><a href=\"#4，测试-etcd-是否正常\" class=\"headerlink\" title=\"4，测试 etcd 是否正常\"></a>4，测试 etcd 是否正常</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl restart  etcd</span><br><span class=\"line\"></span><br><span class=\"line\">如果报错，使用 journalctl -f -t etcd 和 journalctl -u etcd 来定位问题。</span><br><span class=\"line\"></span><br><span class=\"line\">$ curl --cacert /etc/ssl/etcd/ca.pem --cert /etc/ssl/etcd/client.pem --key /etc/ssl/etcd/client-key.pem https://10.93.81.17:2379/health</span><br><span class=\"line\">&#123;&quot;health&quot;: &quot;true&quot;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$ etcdctl --endpoints=[10.93.81.17:2379] --cacert=/etc/ssl/etcd/ca.pem --cert=/etc/ssl/etcd/client.pem --key=/etc/ssl/etcd/client-key.pem member list</span><br><span class=\"line\">     </span><br><span class=\"line\">$ etcdctl --endpoints=[10.93.81.17:2379] --cacert=/etc/ssl/etcd/ca.pem --cert=/etc/ssl/etcd/client.pem --key=/etc/ssl/etcd/client-key.pem put /foo/bar  &quot;hello world&quot;</span><br><span class=\"line\">     </span><br><span class=\"line\">$ etcdctl --endpoints=[10.93.81.17:2379] --cacert=/etc/ssl/etcd/ca.pem --cert=/etc/ssl/etcd/client.pem --key=/etc/ssl/etcd/client-key.pem get /foo/bar</span><br></pre></td></tr></table></figure>\n<h2 id=\"5，配置-kube-apiserver-使用-CA-连接-etcd\"><a href=\"#5，配置-kube-apiserver-使用-CA-连接-etcd\" class=\"headerlink\" title=\"5，配置 kube-apiserver 使用 CA 连接 etcd\"></a>5，配置 kube-apiserver 使用 CA 连接 etcd</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cp /etc/ssl/etcd/*  /var/run/kubernetes/</span><br><span class=\"line\">    </span><br><span class=\"line\">$ chown  -R kube.kube /var/run/kubernetes/</span><br><span class=\"line\"></span><br><span class=\"line\">在 /etc/kubernetes/apiserver 中 KUBE_API_ARGS 新加一下几个参数：</span><br><span class=\"line\"></span><br><span class=\"line\">--cert-dir=&apos;/var/run/kubernetes/&apos; --etcd-cafile=&apos;/var/run/kubernetes/ca.pem&apos; --etcd-certfile=&apos;/var/run/kubernetes/client.pem&apos; --etcd-keyfile=&apos;/var/run/kubernetes/client-key.pem&apos;</span><br></pre></td></tr></table></figure>\n<h2 id=\"6，测试-kube-apiserver\"><a href=\"#6，测试-kube-apiserver\" class=\"headerlink\" title=\"6，测试 kube-apiserver\"></a>6，测试 kube-apiserver</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl restart kube-apiserver kube-controller-manager kube-scheduler kubelet kube-proxy</span><br><span class=\"line\"></span><br><span class=\"line\">$ systemctl status -l kube-apiserver kube-controller-manager kube-scheduler kubelet kube-proxy</span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl get node</span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl get cs</span><br><span class=\"line\">NAME                 STATUS      MESSAGE                                                                   ERROR</span><br><span class=\"line\">scheduler            Healthy     ok</span><br><span class=\"line\">controller-manager   Healthy     ok</span><br><span class=\"line\">etcd-0               Unhealthy   Get https://10.93.81.17:2379/health: remote error: tls: bad certificate</span><br><span class=\"line\"></span><br><span class=\"line\">$ ./version.sh</span><br><span class=\"line\">etcdctl version: 3.1.3</span><br><span class=\"line\">API version: 3.1</span><br><span class=\"line\">Kubernetes v1.6.0-beta.1</span><br></pre></td></tr></table></figure>\n<h2 id=\"7，未解决的问题\"><a href=\"#7，未解决的问题\" class=\"headerlink\" title=\"7，未解决的问题\"></a>7，未解决的问题</h2><h5 id=\"1，使用-kubectl-get-cs-查看会出现如上面所示的报错：\"><a href=\"#1，使用-kubectl-get-cs-查看会出现如上面所示的报错：\" class=\"headerlink\" title=\"1，使用  kubectl get cs 查看会出现如上面所示的报错：\"></a>1，使用  <code>kubectl get cs</code> 查看会出现如上面所示的报错：</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">etcd-0 Unhealthy Get https://10.93.81.17:2379/health: remote error: tls: bad certificate</span><br></pre></td></tr></table></figure>\n<p>此问题有人提交 pr 但尚未被 merge，<a href=\"https://github.com/kubernetes/kubernetes/pull/39716\" target=\"_blank\" rel=\"noopener\">etcd component status check should include credentials</a></p>\n<h5 id=\"2，使用以下命令查看到的-2380-端口是未加密的\"><a href=\"#2，使用以下命令查看到的-2380-端口是未加密的\" class=\"headerlink\" title=\"2，使用以下命令查看到的 2380 端口是未加密的\"></a>2，使用以下命令查看到的 2380 端口是未加密的</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ etcdctl --endpoints=[10.93.81.17:2379] --cacert=/etc/ssl/etcd/ca.pem --cert=/etc/ssl/etcd/client.pem --key=/etc/ssl/etcd/client-key.pem member list  </span><br><span class=\"line\"></span><br><span class=\"line\">2017-03-15 15:02:05.611564 I | warning: ignoring ServerName for user-provided CA for backwards compatibility is deprecated</span><br><span class=\"line\">145b401ad8709f51, started, node1, http://10.93.81.17:2380, https://10.93.81.17:2379</span><br></pre></td></tr></table></figure>\n<p>参考文档：</p>\n<ul>\n<li><a href=\"https://www.addops.cn/post/tls-for-kubernetes-etcd.html\" target=\"_blank\" rel=\"noopener\">kubernetes + etcd ssl 支持</a></li>\n<li><a href=\"https://coreos.com/etcd/docs/latest/op-guide/security.html\" target=\"_blank\" rel=\"noopener\">Security model</a></li>\n<li><a href=\"https://coreos.com/etcd/docs/latest/etcd-live-http-to-https-migration.html\" target=\"_blank\" rel=\"noopener\">Enabling HTTPS in an existing etcd cluster</a></li>\n</ul>\n"},{"title":"kubernetes 学习笔记","date":"2017-02-12T14:58:00.000Z","type":"kubernetes","_content":"\n1 月初办理了入职手续，所在的团队是搞私有云的，目前只有小规模的应用，所采用 **kubernetes + docker** 技术栈，年前所做的事情也不算多，熟悉了 kubernetes 的架构，自己搭建单机版的 kubernetes，以及在程序中调用 kubernetes 的 `API` 进行某些操作。\n\n\n## 1，kubernetes 搭建\n\n[kubernetes](https://github.com/kubernetes/kubernetes) 是 google 的一个开源软件，其社区活跃量远超 **Mesos，Coreos** 的，若想深入学习建议参考**《kubernetes 权威指南》**，我们团队的人都是从这本书学起的，作为一个新技术，会踩到的坑非常多，以下提及的是我学习过程中整理的部分资料。\n\n\n![kubernetes 架构图](http://upload-images.jianshu.io/upload_images/1262158-e050e035d6fa64ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\nkubernetes 是一个分布式系统，所以它有多个组件，并且需要安装在多个节点，一般来说有三个节点，etcd，master 和 minion，但是每个节点却又有多台机器，etcd 作为高性能存储服务，一般独立为一个节点，当然容错是必不可少的，官方建议集群使用奇数个节点，我们的线下集群使用 3 个节点。etcd 的学习可以参考 **gitbook** 上面某大神的一本书 一 [etcd3学习笔记](https://skyao.gitbooks.io/leaning-etcd3/content/documentation/leaning/)。master 端需要安装 kube-apiserver、kube-controller-manager和kube-scheduler 组件，minion 节点需要部署 kubelet、kube-proxy、docker 组件。\n\n> 注意：内核版本 > 3.10 的系统才支持 kubernetes，所以一般安装在centos 7 上。 \n\netcd 节点：\n\t\n\t# yum install -y etcd \n\t# systemctl start etcd  \n\nmaster 节点：\n\n\t# yum install -y kubernetes-master\n\t# systemctl start kube-apiserver \n\t# systemctl start kube-controller-manager \n\t# systemctl start kube-scheduler \n\nminion 节点：\n\n\t# yum install -y kubernetes  docker\n\t# systemctl start kubelet \n\t# systemctl start kube-proxy \n\t# systemctl start docker \n\t\n\n## 2，kubernetes 版本升级\n\n以前一直以为公司会追求稳定性，在软件和系统的选取方便会优先考虑稳定的版本。但是来了公司才发现，某些软件出了新版本后，若有期待的功能并且在掌控范围内都会及时更新，所以也协助过导师更新了线下集群的 minion 节点。\n\n下面是 minion 节点的升级操作，master 节点的操作类似。首先需要下载 [kubernetes-server-linux-amd64.tar.gz](https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG.md#downloads-for-v160-alpha1)  这个包，下载你所要更新到的版本。\n\n**升级步骤**：\n\n- 1，先关掉 docker 服务。docker 关闭后，当前节点的 pod 随之会被调度到其他节点上\n- 2，备份二进制程序（kubectl,kube-proxy）\n- 3，将解压后的二进制程序覆盖以前的版本\n- 4，最后重新启动服务\n\n\t\n\t# systemctl stop docker\n\t# which kubectl kube-proxy \n\t/usr/bin/kubectl\n\t/usr/bin/kube-proxy\n\n\t# cp /usr/bin/{kubectl,kube-proxy} /tmp/\n\t# yes | cp bin/{kubectl,kube-proxy} /usr/bin/\n\t\n\t# systemctl status {kubectl,kube-proxy}\n\n\t# systemctl start docker \n\n\n## 3，kubeconfig 使用\n\n若你使用的 kubelet 版本为 1.4，使用 `systemctl status kubelet`  会看到这样一句话：\n\n\t--api-servers option is deprecated for kubelet, so I am now trying to deploy with simply using --kubeconfig=/etc/kubernetes/node-kubeconfig.yaml\n\n使用 kuconfig 是为了将所有的命令行启动选项放在一个文件中方便使用。由于我们已经升级到了 1.5，所以也得升级此功能，首先需要写一个 kubeconfig 的 yaml 文件，其 [官方文档](http://kubernetes.io/docs/user-guide/kubeconfig-file/) 有格式说明， 本人已将其翻译，翻译文档见下文。\n\n**kubeconfig** 文件示例：\n\n\t\tapiVersion: v1\n\t\tclusters:\n\t\t- cluster:\n\t\t    server: http://localhost:8080\n\t\t  name: local-server\n\t\tcontexts:\n\t\t- context:\n\t\t    cluster: local-server\n\t\t    namespace: the-right-prefix\n\t\t    user: myself\n\t\t  name: default-context\n\t\tcurrent-context: default-context\n\t\tkind: Config\n\t\tpreferences: {}\n\t\tusers:\n\t\t- name: myself\n\t\t  user:\n\t\t    password: secret\n\t\t    username: admin\n\n---\n\n\t   # kubelet --kubeconfig=/etc/kubernetes/config --require-kubeconfig=true\n\n\nkubeconfig 参数：设置 kubelet 配置文件路径，这个配置文件用来告诉 kubelet 组件 api-server 组件的位置，默认路径是。\n\nrequire-kubeconfig 参数：这是一个布尔类型参数，可以设置成true 或者 false，如果设置成 true，那么表示启用 kubeconfig 参数，从 kubeconfig 参数设置的配置文件中查找 api-server 组件，如果设置成 false，那么表示使用 kubelet 另外一个参数 “api-servers” 来查找 api-server 组件位置。\n\n关于 kubeconfig 的一个 **issue**，[Kubelet won't read apiserver from kubeconfig](https://github.com/kubernetes/kubernetes/issues/36745)。\n\n**升级步骤**，当然前提是你的 kubelet 版本已经到了 1.5：\n\n* 1，关闭 kubelet、kube-proxy 服务；\n* 2，注释掉 `/etc/kubernetes/kubelet` 文件中下面这一行:\n\n    `KUBELET_API_SERVER=\"--api-servers=http://127.0.0.1:8080\"`\n\n然后在 **KUBELET_ARGS** 中添加： \n\n\t--kubeconfig=/etc/kubernetes/kubeconfig --require-kubeconfig=true\n\n这里的路径是你 yaml 文件放置的路径。 \n\n- 3，重新启动刚关掉的两个服务\n\n---\n## 4，以下为 [kubeconfig 配置官方文档](https://kubernetes.io/docs/user-guide/kubeconfig-file/)的翻译\n\n### kubernetes 中的验证对于不同的群体可以使用不同的方法.\n\n* 运行 kubelet 可能有的一种认证方式（即证书）。\n* 用户可能有不同的认证方式（即 token）。\n* 管理员可以为每个用户提供一个证书列表。\n* 可能会有多个集群，但我们想在一个地方定义它们 - 使用户能够用自己的证书并重用相同的全局配置。 \n\n因此为了在多个集群之间轻松切换，对于多个用户，定义了一个 kubeconfig 文件。\n\n此文件包含一系列认证机制和与 nicknames 有关的群集连接信息。它还引入了认证信息元组（用户）和集群连接信息的概念，被称为上下文也与 nickname 相关联。\n\n如果明确指定，也可以允许使用多个 kubeconfig 文件。在运行时，它们被合并加载并覆盖从命令行指定的选项（参见下面的规则）。\n\n### 相关讨论\n\n\thttp://issue.k8s.io/1755\n\n### kubeconfig 文件的组件 \n\nkubeconfig 文件示例：\n\n\tcurrent-context: federal-context\n\tapiVersion: v1\n\tclusters:\n\t- cluster:\n\t    api-version: v1\n\t    server: http://cow.org:8080\n\t  name: cow-cluster\n\t- cluster:\n\t    certificate-authority: path/to/my/cafile\n\t    server: https://horse.org:4443\n\t  name: horse-cluster\n\t- cluster:\n\t    insecure-skip-tls-verify: true\n\t    server: https://pig.org:443\n\t  name: pig-cluster\n\tcontexts:\n\t- context:\n\t    cluster: horse-cluster\n\t    namespace: chisel-ns\n\t    user: green-user\n\t  name: federal-context\n\t- context:\n\t    cluster: pig-cluster\n\t    namespace: saw-ns\n\t    user: black-user\n\t  name: queen-anne-context\n\tkind: Config\n\tpreferences:\n\t  colors: true\n\tusers:\n\t- name: blue-user\n\t  user:\n\t    token: blue-token\n\t- name: green-user\n\t  user:\n\t    client-certificate: path/to/my/client/cert\n\t    client-key: path/to/my/client/key\n\n### 组件的解释\n\n#### cluster\n\n\tclusters:\n\t- cluster:\n\t    certificate-authority: path/to/my/cafile\n\t    server: https://horse.org:4443\n\t  name: horse-cluster\n\t- cluster:\n\t    insecure-skip-tls-verify: true\n\t    server: https://pig.org:443\n\t  name: pig-cluster\n\n\ncluster 包含 kubernetes 集群的 endpoint 数据。它包括 kubernetes apiserver 完全限定的 URL，以及集群的证书颁发机构或 insecure-skip-tls-verify：true，如果集群的服务证书未由系统信任的证书颁发机构签名。集群有一个名称（nickname），该名称用作此 kubeconfig 文件中的字典键。你可以使用 kubectl config set-cluster 添加或修改集群条目。\n\n#### user\n\n\tusers:\n\t- name: blue-user\n\t  user:\n\t    token: blue-token\n\t- name: green-user\n\t  user:\n\t    client-certificate: path/to/my/client/cert\n\t    client-key: path/to/my/client/key\n\n用户定义用于向 Kubernetes 集群进行身份验证的客户端凭证。在 kubeconfig 被加载/合并之后，用户具有在用户条目列表中充当其键的名称（nickname）。可用的凭证是客户端证书，客户端密钥，令牌和用户名/密码。用户名/密码和令牌是互斥的，但客户端证书和密钥可以与它们组合。你可以使用 kubectl config set-credentials 添加或修改用户条目。\n\n### context\n\n\tcontexts:\n\t- context:\n\t    cluster: horse-cluster\n\t    namespace: chisel-ns\n\t    user: green-user\n\t  name: federal-context\n\ncontext 定义 cluster,user,namespace 元组的名称，用来向指定的集群使用提供的认证信息和命名空间向指定的集群发送请求。\n三个都是可选的，仅指定 cluster，user，namespace 中的一个也是可用的，或者指定为 none。未指定的值或命名值，在加载的 kubeconfig 中没有对应的条目（例如，如果context 在上面的 kubeconfig 文件指定为 pink-user ）将被替换为默认值。有关覆盖/合并行为，请参阅下面的加载/合并规则。你可以使用 kubectl config set-context 添加或修改上下文条目。\n\n#### current-context\n\n\tcurrent-context: federal-context\n\ncurrent-context 是 cluster,user,namespace 中的 nickname 或者 ‘key’，kubectl 在从此文件加载配置时将使用默认值。通过给 kubelett 传递 --context=CONTEXT, --cluster=CLUSTER, --user=USER, and/or --namespace=NAMESPACE 可以从命令行覆盖任何值。你可以使用 kubectl config use-context 更改当前上下文。\n\n#### 杂项\n\n\tapiVersion: v1\n\tkind: Config\n\tpreferences:\n\t  colors: true\n\napiVersion 和 kind 标识客户端要解析的版本和模式，不应手动编辑。\npreferences 指定选项(和当前未使用的) kubectl preferences.\n\n### 查看 kubeconfig 文件\n\nkubectl config view 会显示当前的 kubeconfig 配置。默认情况下，它会显示所有加载的 kubeconfig 配置， 你可以通过 --minify 选项来过滤与 current-context 相关的设置。请参见 kubectl config view 的其他选项。\n\n### 创建你的 kubeconfig 文件\n\n注意，如果你通过 kube-up.sh 部署 k8s，则不需要创建 kubeconfig 文件，脚本将为你创建。\n\n在任何情况下，可以轻松地使用此文件作为模板来创建自己的 kubeconfig 文件。\n\n因此，让我们快速浏览上述文件的基础知识，以便可以根据需要轻松修改...\n\n以上文件可能对应于使用--token-auth-file = tokens.csv 选项启动的 api 服务器，其中 tokens.csv文件看起来像这样：\n\t\n\tblue-user,blue-user,1\n\tmister-red,mister-red,2\n\n此外，由于不同用户使用不同的验证机制，api-server 可能已经启动其他的身份验证选项（有许多这样的选项，在制作 kubeconfig 文件之前确保你理解所关心的，因为没有人需要实现所有可能的认证方案）。\n\n* 由于 current-context 的用户是 “green-user”，因此任何使用此 kubeconfig 文件的客户端自然都能够成功登录 api-server，因为我们提供了 “green-user” 的客户端凭据。\n* 类似地，我们也可以选择改变 current-context 的值为 “blue-user”。\n* \n在上述情况下，“green-user” 将必须通过提供证书登录，而 “blue-user” 只需提供 token。所有的这些信息将由我们处理通过\n\n\n### 加载和合并规则\n\n加载和合并 kubeconfig 文件的规则很简单，但有很多。最终配置按照以下顺序构建：\n\n1，从磁盘获取 kubeconfig。通过以下层次结构和合并规则完成：\n如果设置了 CommandLineLocation（kubeconfig 命令行选项的值），则仅使用此文件，不合并。只允许此标志的一个实例。\n\n否则，如果 EnvVarLocation（$KUBECONFIG 的值）可用，将其用作应合并的文件列表。根据以下规则将文件合并在一起。将忽略空文件名。文件内容不能反序列化则产生错误。设置特定值或映射密钥的第一个文件将被使用，并且值或映射密钥永远不会更改。这意味着设置CurrentContext 的第一个文件将保留其 context。也意味着如果两个文件指定 “red-user”,，则仅使用来自第一个文件的 “red-user” 的值。来自第二个 “red-user” 文件的非冲突条目也将被丢弃。\n\n对于其他的，使用 HomeDirectoryLocation（~/.kube/config）也不会被合并。\n\n2，此链中第一个被匹配的 context 将被使用：\n\n* 1，命令行参数 - 命令行选项中 context 的值\n* 2，合并文件中的 current-context\n* 3，此段允许为空\n\n3，确定要使用的集群信息和用户。在此处，也可能没有 context。这个链中第一次使用的会被构建。（运行两次，一次为用户，一次为集群）：\n\n* 1，命令行参数 - user 是用户名，cluster 是集群名\n* 2，如果存在 context 则使用\n* 3，允许为空\n\n4，确定要使用的实际集群信息。在此处，也可能没有集群信息。基于链构建每个集群信息（首次使用的）：\n\n* 1，命令行参数 - server，api-version，certificate-authority 和 insecure-skip-tls-verify\n* 2，如果存在集群信息并且该属性的值存在，则使用它。\n* 3，如果没有 server 位置则出错。\n\n5，确定要使用的实际用户信息。用户构建使用与集群信息相同的规则，但每个用户只能具有一种认证方法：\n\n* 1，加载优先级为 1）命令行参数，2） kubeconfig 的用户字段\n* 2，命令行参数：客户端证书，客户端密钥，用户名，密码和 token。\n* 3，如果两者有冲突则失败\n\n6，对于仍然缺失的信息，使用默认值并尽可能提示输入身份验证信息。\n\n7，kubeconfig 文件中的所有文件引用都是相对于 kubeconfig 文件本身的位置解析的。当文件引用显示在命令行上时，它们被视为相对于当前工作目录。当路径保存在 ~/.kube/config 中时，相对路径和绝对路径被分别存储。\n\nkubeconfig 文件中的任何路径都是相对于 kubeconfig 文件本身的位置解析的。\n\n\n### 通过 kubectl config <subcommand> 操作 kubeconfig\n\n为了更容易地操作 kubeconfig 文件，可以使用 kubectl config 的子命令。请参见 kubectl/kubectl_config.md 获取帮助。\n\n例如：\n\n\t$ kubectl config set-credentials myself --username=admin --password=secret\n\t$ kubectl config set-cluster local-server --server=http://localhost:8080\n\t$ kubectl config set-context default-context --cluster=local-server --user=myself\n\t$ kubectl config use-context default-context\n\t$ kubectl config set contexts.default-context.namespace the-right-prefix\n\t$ kubectl config view\n\n输出：\n\n\tapiVersion: v1\n\tclusters:\n\t- cluster:\n\t    server: http://localhost:8080\n\t  name: local-server\n\tcontexts:\n\t- context:\n\t    cluster: local-server\n\t    namespace: the-right-prefix\n\t    user: myself\n\t  name: default-context\n\tcurrent-context: default-context\n\tkind: Config\n\tpreferences: {}\n\tusers:\n\t- name: myself\n\t  user:\n\t    password: secret\n\t    username: admin\n\n一个 kubeconfig 文件类似这样：\n\n\tapiVersion: v1\n\tclusters:\n\t- cluster:\n\t    server: http://localhost:8080\n\t  name: local-server\n\tcontexts:\n\t- context:\n\t    cluster: local-server\n\t    namespace: the-right-prefix\n\t    user: myself\n\t  name: default-context\n\tcurrent-context: default-context\n\tkind: Config\n\tpreferences: {}\n\tusers:\n\t- name: myself\n\t  user:\n\t    password: secret\n\t    username: admin\n\n示例文件的命令操作：\n\n\t$ kubectl config set preferences.colors true\n\t$ kubectl config set-cluster cow-cluster --server=http://cow.org:8080 --api-version=v1\n\t$ kubectl config set-cluster horse-cluster --server=https://horse.org:4443 --certificate-authority=path/to/my/cafile\n\t$ kubectl config set-cluster pig-cluster --server=https://pig.org:443 --insecure-skip-tls-verify=true\n\t$ kubectl config set-credentials blue-user --token=blue-token\n\t$ kubectl config set-credentials green-user --client-certificate=path/to/my/client/cert --client-key=path/to/my/client/key\n\t$ kubectl config set-context queen-anne-context --cluster=pig-cluster --user=black-user --namespace=saw-ns\n\t$ kubectl config set-context federal-context --cluster=horse-cluster --user=green-user --namespace=chisel-ns\n\t$ kubectl config use-context federal-context\n\n最后的总结：\n\n所以，看完这些，你就可以快速开始创建自己的 kubeconfig 文件了：\n\n* 仔细查看并了解 api-server 如何启动：了解你的安全策略后，然后才能设计 kubeconfig 文件以便于身份验证\n* 将上面的代码段替换为你集群的 api-server endpoint 的信息。\n* 确保 api-server 已启动，以至少向其提供一个用户（例如：green-user）凭证。当然，你必须查看 api-server 文档，以确定以目前最好的技术提供详细的身份验证信息。\n","source":"_posts/kubernetes-learn.md","raw":"---\ntitle: kubernetes 学习笔记\ndate: 2017-02-12 22:58:00\ntype: \"kubernetes\"\n\n---\n\n1 月初办理了入职手续，所在的团队是搞私有云的，目前只有小规模的应用，所采用 **kubernetes + docker** 技术栈，年前所做的事情也不算多，熟悉了 kubernetes 的架构，自己搭建单机版的 kubernetes，以及在程序中调用 kubernetes 的 `API` 进行某些操作。\n\n\n## 1，kubernetes 搭建\n\n[kubernetes](https://github.com/kubernetes/kubernetes) 是 google 的一个开源软件，其社区活跃量远超 **Mesos，Coreos** 的，若想深入学习建议参考**《kubernetes 权威指南》**，我们团队的人都是从这本书学起的，作为一个新技术，会踩到的坑非常多，以下提及的是我学习过程中整理的部分资料。\n\n\n![kubernetes 架构图](http://upload-images.jianshu.io/upload_images/1262158-e050e035d6fa64ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\nkubernetes 是一个分布式系统，所以它有多个组件，并且需要安装在多个节点，一般来说有三个节点，etcd，master 和 minion，但是每个节点却又有多台机器，etcd 作为高性能存储服务，一般独立为一个节点，当然容错是必不可少的，官方建议集群使用奇数个节点，我们的线下集群使用 3 个节点。etcd 的学习可以参考 **gitbook** 上面某大神的一本书 一 [etcd3学习笔记](https://skyao.gitbooks.io/leaning-etcd3/content/documentation/leaning/)。master 端需要安装 kube-apiserver、kube-controller-manager和kube-scheduler 组件，minion 节点需要部署 kubelet、kube-proxy、docker 组件。\n\n> 注意：内核版本 > 3.10 的系统才支持 kubernetes，所以一般安装在centos 7 上。 \n\netcd 节点：\n\t\n\t# yum install -y etcd \n\t# systemctl start etcd  \n\nmaster 节点：\n\n\t# yum install -y kubernetes-master\n\t# systemctl start kube-apiserver \n\t# systemctl start kube-controller-manager \n\t# systemctl start kube-scheduler \n\nminion 节点：\n\n\t# yum install -y kubernetes  docker\n\t# systemctl start kubelet \n\t# systemctl start kube-proxy \n\t# systemctl start docker \n\t\n\n## 2，kubernetes 版本升级\n\n以前一直以为公司会追求稳定性，在软件和系统的选取方便会优先考虑稳定的版本。但是来了公司才发现，某些软件出了新版本后，若有期待的功能并且在掌控范围内都会及时更新，所以也协助过导师更新了线下集群的 minion 节点。\n\n下面是 minion 节点的升级操作，master 节点的操作类似。首先需要下载 [kubernetes-server-linux-amd64.tar.gz](https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG.md#downloads-for-v160-alpha1)  这个包，下载你所要更新到的版本。\n\n**升级步骤**：\n\n- 1，先关掉 docker 服务。docker 关闭后，当前节点的 pod 随之会被调度到其他节点上\n- 2，备份二进制程序（kubectl,kube-proxy）\n- 3，将解压后的二进制程序覆盖以前的版本\n- 4，最后重新启动服务\n\n\t\n\t# systemctl stop docker\n\t# which kubectl kube-proxy \n\t/usr/bin/kubectl\n\t/usr/bin/kube-proxy\n\n\t# cp /usr/bin/{kubectl,kube-proxy} /tmp/\n\t# yes | cp bin/{kubectl,kube-proxy} /usr/bin/\n\t\n\t# systemctl status {kubectl,kube-proxy}\n\n\t# systemctl start docker \n\n\n## 3，kubeconfig 使用\n\n若你使用的 kubelet 版本为 1.4，使用 `systemctl status kubelet`  会看到这样一句话：\n\n\t--api-servers option is deprecated for kubelet, so I am now trying to deploy with simply using --kubeconfig=/etc/kubernetes/node-kubeconfig.yaml\n\n使用 kuconfig 是为了将所有的命令行启动选项放在一个文件中方便使用。由于我们已经升级到了 1.5，所以也得升级此功能，首先需要写一个 kubeconfig 的 yaml 文件，其 [官方文档](http://kubernetes.io/docs/user-guide/kubeconfig-file/) 有格式说明， 本人已将其翻译，翻译文档见下文。\n\n**kubeconfig** 文件示例：\n\n\t\tapiVersion: v1\n\t\tclusters:\n\t\t- cluster:\n\t\t    server: http://localhost:8080\n\t\t  name: local-server\n\t\tcontexts:\n\t\t- context:\n\t\t    cluster: local-server\n\t\t    namespace: the-right-prefix\n\t\t    user: myself\n\t\t  name: default-context\n\t\tcurrent-context: default-context\n\t\tkind: Config\n\t\tpreferences: {}\n\t\tusers:\n\t\t- name: myself\n\t\t  user:\n\t\t    password: secret\n\t\t    username: admin\n\n---\n\n\t   # kubelet --kubeconfig=/etc/kubernetes/config --require-kubeconfig=true\n\n\nkubeconfig 参数：设置 kubelet 配置文件路径，这个配置文件用来告诉 kubelet 组件 api-server 组件的位置，默认路径是。\n\nrequire-kubeconfig 参数：这是一个布尔类型参数，可以设置成true 或者 false，如果设置成 true，那么表示启用 kubeconfig 参数，从 kubeconfig 参数设置的配置文件中查找 api-server 组件，如果设置成 false，那么表示使用 kubelet 另外一个参数 “api-servers” 来查找 api-server 组件位置。\n\n关于 kubeconfig 的一个 **issue**，[Kubelet won't read apiserver from kubeconfig](https://github.com/kubernetes/kubernetes/issues/36745)。\n\n**升级步骤**，当然前提是你的 kubelet 版本已经到了 1.5：\n\n* 1，关闭 kubelet、kube-proxy 服务；\n* 2，注释掉 `/etc/kubernetes/kubelet` 文件中下面这一行:\n\n    `KUBELET_API_SERVER=\"--api-servers=http://127.0.0.1:8080\"`\n\n然后在 **KUBELET_ARGS** 中添加： \n\n\t--kubeconfig=/etc/kubernetes/kubeconfig --require-kubeconfig=true\n\n这里的路径是你 yaml 文件放置的路径。 \n\n- 3，重新启动刚关掉的两个服务\n\n---\n## 4，以下为 [kubeconfig 配置官方文档](https://kubernetes.io/docs/user-guide/kubeconfig-file/)的翻译\n\n### kubernetes 中的验证对于不同的群体可以使用不同的方法.\n\n* 运行 kubelet 可能有的一种认证方式（即证书）。\n* 用户可能有不同的认证方式（即 token）。\n* 管理员可以为每个用户提供一个证书列表。\n* 可能会有多个集群，但我们想在一个地方定义它们 - 使用户能够用自己的证书并重用相同的全局配置。 \n\n因此为了在多个集群之间轻松切换，对于多个用户，定义了一个 kubeconfig 文件。\n\n此文件包含一系列认证机制和与 nicknames 有关的群集连接信息。它还引入了认证信息元组（用户）和集群连接信息的概念，被称为上下文也与 nickname 相关联。\n\n如果明确指定，也可以允许使用多个 kubeconfig 文件。在运行时，它们被合并加载并覆盖从命令行指定的选项（参见下面的规则）。\n\n### 相关讨论\n\n\thttp://issue.k8s.io/1755\n\n### kubeconfig 文件的组件 \n\nkubeconfig 文件示例：\n\n\tcurrent-context: federal-context\n\tapiVersion: v1\n\tclusters:\n\t- cluster:\n\t    api-version: v1\n\t    server: http://cow.org:8080\n\t  name: cow-cluster\n\t- cluster:\n\t    certificate-authority: path/to/my/cafile\n\t    server: https://horse.org:4443\n\t  name: horse-cluster\n\t- cluster:\n\t    insecure-skip-tls-verify: true\n\t    server: https://pig.org:443\n\t  name: pig-cluster\n\tcontexts:\n\t- context:\n\t    cluster: horse-cluster\n\t    namespace: chisel-ns\n\t    user: green-user\n\t  name: federal-context\n\t- context:\n\t    cluster: pig-cluster\n\t    namespace: saw-ns\n\t    user: black-user\n\t  name: queen-anne-context\n\tkind: Config\n\tpreferences:\n\t  colors: true\n\tusers:\n\t- name: blue-user\n\t  user:\n\t    token: blue-token\n\t- name: green-user\n\t  user:\n\t    client-certificate: path/to/my/client/cert\n\t    client-key: path/to/my/client/key\n\n### 组件的解释\n\n#### cluster\n\n\tclusters:\n\t- cluster:\n\t    certificate-authority: path/to/my/cafile\n\t    server: https://horse.org:4443\n\t  name: horse-cluster\n\t- cluster:\n\t    insecure-skip-tls-verify: true\n\t    server: https://pig.org:443\n\t  name: pig-cluster\n\n\ncluster 包含 kubernetes 集群的 endpoint 数据。它包括 kubernetes apiserver 完全限定的 URL，以及集群的证书颁发机构或 insecure-skip-tls-verify：true，如果集群的服务证书未由系统信任的证书颁发机构签名。集群有一个名称（nickname），该名称用作此 kubeconfig 文件中的字典键。你可以使用 kubectl config set-cluster 添加或修改集群条目。\n\n#### user\n\n\tusers:\n\t- name: blue-user\n\t  user:\n\t    token: blue-token\n\t- name: green-user\n\t  user:\n\t    client-certificate: path/to/my/client/cert\n\t    client-key: path/to/my/client/key\n\n用户定义用于向 Kubernetes 集群进行身份验证的客户端凭证。在 kubeconfig 被加载/合并之后，用户具有在用户条目列表中充当其键的名称（nickname）。可用的凭证是客户端证书，客户端密钥，令牌和用户名/密码。用户名/密码和令牌是互斥的，但客户端证书和密钥可以与它们组合。你可以使用 kubectl config set-credentials 添加或修改用户条目。\n\n### context\n\n\tcontexts:\n\t- context:\n\t    cluster: horse-cluster\n\t    namespace: chisel-ns\n\t    user: green-user\n\t  name: federal-context\n\ncontext 定义 cluster,user,namespace 元组的名称，用来向指定的集群使用提供的认证信息和命名空间向指定的集群发送请求。\n三个都是可选的，仅指定 cluster，user，namespace 中的一个也是可用的，或者指定为 none。未指定的值或命名值，在加载的 kubeconfig 中没有对应的条目（例如，如果context 在上面的 kubeconfig 文件指定为 pink-user ）将被替换为默认值。有关覆盖/合并行为，请参阅下面的加载/合并规则。你可以使用 kubectl config set-context 添加或修改上下文条目。\n\n#### current-context\n\n\tcurrent-context: federal-context\n\ncurrent-context 是 cluster,user,namespace 中的 nickname 或者 ‘key’，kubectl 在从此文件加载配置时将使用默认值。通过给 kubelett 传递 --context=CONTEXT, --cluster=CLUSTER, --user=USER, and/or --namespace=NAMESPACE 可以从命令行覆盖任何值。你可以使用 kubectl config use-context 更改当前上下文。\n\n#### 杂项\n\n\tapiVersion: v1\n\tkind: Config\n\tpreferences:\n\t  colors: true\n\napiVersion 和 kind 标识客户端要解析的版本和模式，不应手动编辑。\npreferences 指定选项(和当前未使用的) kubectl preferences.\n\n### 查看 kubeconfig 文件\n\nkubectl config view 会显示当前的 kubeconfig 配置。默认情况下，它会显示所有加载的 kubeconfig 配置， 你可以通过 --minify 选项来过滤与 current-context 相关的设置。请参见 kubectl config view 的其他选项。\n\n### 创建你的 kubeconfig 文件\n\n注意，如果你通过 kube-up.sh 部署 k8s，则不需要创建 kubeconfig 文件，脚本将为你创建。\n\n在任何情况下，可以轻松地使用此文件作为模板来创建自己的 kubeconfig 文件。\n\n因此，让我们快速浏览上述文件的基础知识，以便可以根据需要轻松修改...\n\n以上文件可能对应于使用--token-auth-file = tokens.csv 选项启动的 api 服务器，其中 tokens.csv文件看起来像这样：\n\t\n\tblue-user,blue-user,1\n\tmister-red,mister-red,2\n\n此外，由于不同用户使用不同的验证机制，api-server 可能已经启动其他的身份验证选项（有许多这样的选项，在制作 kubeconfig 文件之前确保你理解所关心的，因为没有人需要实现所有可能的认证方案）。\n\n* 由于 current-context 的用户是 “green-user”，因此任何使用此 kubeconfig 文件的客户端自然都能够成功登录 api-server，因为我们提供了 “green-user” 的客户端凭据。\n* 类似地，我们也可以选择改变 current-context 的值为 “blue-user”。\n* \n在上述情况下，“green-user” 将必须通过提供证书登录，而 “blue-user” 只需提供 token。所有的这些信息将由我们处理通过\n\n\n### 加载和合并规则\n\n加载和合并 kubeconfig 文件的规则很简单，但有很多。最终配置按照以下顺序构建：\n\n1，从磁盘获取 kubeconfig。通过以下层次结构和合并规则完成：\n如果设置了 CommandLineLocation（kubeconfig 命令行选项的值），则仅使用此文件，不合并。只允许此标志的一个实例。\n\n否则，如果 EnvVarLocation（$KUBECONFIG 的值）可用，将其用作应合并的文件列表。根据以下规则将文件合并在一起。将忽略空文件名。文件内容不能反序列化则产生错误。设置特定值或映射密钥的第一个文件将被使用，并且值或映射密钥永远不会更改。这意味着设置CurrentContext 的第一个文件将保留其 context。也意味着如果两个文件指定 “red-user”,，则仅使用来自第一个文件的 “red-user” 的值。来自第二个 “red-user” 文件的非冲突条目也将被丢弃。\n\n对于其他的，使用 HomeDirectoryLocation（~/.kube/config）也不会被合并。\n\n2，此链中第一个被匹配的 context 将被使用：\n\n* 1，命令行参数 - 命令行选项中 context 的值\n* 2，合并文件中的 current-context\n* 3，此段允许为空\n\n3，确定要使用的集群信息和用户。在此处，也可能没有 context。这个链中第一次使用的会被构建。（运行两次，一次为用户，一次为集群）：\n\n* 1，命令行参数 - user 是用户名，cluster 是集群名\n* 2，如果存在 context 则使用\n* 3，允许为空\n\n4，确定要使用的实际集群信息。在此处，也可能没有集群信息。基于链构建每个集群信息（首次使用的）：\n\n* 1，命令行参数 - server，api-version，certificate-authority 和 insecure-skip-tls-verify\n* 2，如果存在集群信息并且该属性的值存在，则使用它。\n* 3，如果没有 server 位置则出错。\n\n5，确定要使用的实际用户信息。用户构建使用与集群信息相同的规则，但每个用户只能具有一种认证方法：\n\n* 1，加载优先级为 1）命令行参数，2） kubeconfig 的用户字段\n* 2，命令行参数：客户端证书，客户端密钥，用户名，密码和 token。\n* 3，如果两者有冲突则失败\n\n6，对于仍然缺失的信息，使用默认值并尽可能提示输入身份验证信息。\n\n7，kubeconfig 文件中的所有文件引用都是相对于 kubeconfig 文件本身的位置解析的。当文件引用显示在命令行上时，它们被视为相对于当前工作目录。当路径保存在 ~/.kube/config 中时，相对路径和绝对路径被分别存储。\n\nkubeconfig 文件中的任何路径都是相对于 kubeconfig 文件本身的位置解析的。\n\n\n### 通过 kubectl config <subcommand> 操作 kubeconfig\n\n为了更容易地操作 kubeconfig 文件，可以使用 kubectl config 的子命令。请参见 kubectl/kubectl_config.md 获取帮助。\n\n例如：\n\n\t$ kubectl config set-credentials myself --username=admin --password=secret\n\t$ kubectl config set-cluster local-server --server=http://localhost:8080\n\t$ kubectl config set-context default-context --cluster=local-server --user=myself\n\t$ kubectl config use-context default-context\n\t$ kubectl config set contexts.default-context.namespace the-right-prefix\n\t$ kubectl config view\n\n输出：\n\n\tapiVersion: v1\n\tclusters:\n\t- cluster:\n\t    server: http://localhost:8080\n\t  name: local-server\n\tcontexts:\n\t- context:\n\t    cluster: local-server\n\t    namespace: the-right-prefix\n\t    user: myself\n\t  name: default-context\n\tcurrent-context: default-context\n\tkind: Config\n\tpreferences: {}\n\tusers:\n\t- name: myself\n\t  user:\n\t    password: secret\n\t    username: admin\n\n一个 kubeconfig 文件类似这样：\n\n\tapiVersion: v1\n\tclusters:\n\t- cluster:\n\t    server: http://localhost:8080\n\t  name: local-server\n\tcontexts:\n\t- context:\n\t    cluster: local-server\n\t    namespace: the-right-prefix\n\t    user: myself\n\t  name: default-context\n\tcurrent-context: default-context\n\tkind: Config\n\tpreferences: {}\n\tusers:\n\t- name: myself\n\t  user:\n\t    password: secret\n\t    username: admin\n\n示例文件的命令操作：\n\n\t$ kubectl config set preferences.colors true\n\t$ kubectl config set-cluster cow-cluster --server=http://cow.org:8080 --api-version=v1\n\t$ kubectl config set-cluster horse-cluster --server=https://horse.org:4443 --certificate-authority=path/to/my/cafile\n\t$ kubectl config set-cluster pig-cluster --server=https://pig.org:443 --insecure-skip-tls-verify=true\n\t$ kubectl config set-credentials blue-user --token=blue-token\n\t$ kubectl config set-credentials green-user --client-certificate=path/to/my/client/cert --client-key=path/to/my/client/key\n\t$ kubectl config set-context queen-anne-context --cluster=pig-cluster --user=black-user --namespace=saw-ns\n\t$ kubectl config set-context federal-context --cluster=horse-cluster --user=green-user --namespace=chisel-ns\n\t$ kubectl config use-context federal-context\n\n最后的总结：\n\n所以，看完这些，你就可以快速开始创建自己的 kubeconfig 文件了：\n\n* 仔细查看并了解 api-server 如何启动：了解你的安全策略后，然后才能设计 kubeconfig 文件以便于身份验证\n* 将上面的代码段替换为你集群的 api-server endpoint 的信息。\n* 确保 api-server 已启动，以至少向其提供一个用户（例如：green-user）凭证。当然，你必须查看 api-server 文档，以确定以目前最好的技术提供详细的身份验证信息。\n","slug":"kubernetes-learn","published":1,"updated":"2018-12-08T10:29:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpfbz8ja0007yvfyxs2wje39","content":"<p>1 月初办理了入职手续，所在的团队是搞私有云的，目前只有小规模的应用，所采用 <strong>kubernetes + docker</strong> 技术栈，年前所做的事情也不算多，熟悉了 kubernetes 的架构，自己搭建单机版的 kubernetes，以及在程序中调用 kubernetes 的 <code>API</code> 进行某些操作。</p>\n<h2 id=\"1，kubernetes-搭建\"><a href=\"#1，kubernetes-搭建\" class=\"headerlink\" title=\"1，kubernetes 搭建\"></a>1，kubernetes 搭建</h2><p><a href=\"https://github.com/kubernetes/kubernetes\" target=\"_blank\" rel=\"noopener\">kubernetes</a> 是 google 的一个开源软件，其社区活跃量远超 <strong>Mesos，Coreos</strong> 的，若想深入学习建议参考<strong>《kubernetes 权威指南》</strong>，我们团队的人都是从这本书学起的，作为一个新技术，会踩到的坑非常多，以下提及的是我学习过程中整理的部分资料。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1262158-e050e035d6fa64ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"kubernetes 架构图\"></p>\n<p>kubernetes 是一个分布式系统，所以它有多个组件，并且需要安装在多个节点，一般来说有三个节点，etcd，master 和 minion，但是每个节点却又有多台机器，etcd 作为高性能存储服务，一般独立为一个节点，当然容错是必不可少的，官方建议集群使用奇数个节点，我们的线下集群使用 3 个节点。etcd 的学习可以参考 <strong>gitbook</strong> 上面某大神的一本书 一 <a href=\"https://skyao.gitbooks.io/leaning-etcd3/content/documentation/leaning/\" target=\"_blank\" rel=\"noopener\">etcd3学习笔记</a>。master 端需要安装 kube-apiserver、kube-controller-manager和kube-scheduler 组件，minion 节点需要部署 kubelet、kube-proxy、docker 组件。</p>\n<blockquote>\n<p>注意：内核版本 &gt; 3.10 的系统才支持 kubernetes，所以一般安装在centos 7 上。 </p>\n</blockquote>\n<p>etcd 节点：</p>\n<pre><code># yum install -y etcd \n# systemctl start etcd  \n</code></pre><p>master 节点：</p>\n<pre><code># yum install -y kubernetes-master\n# systemctl start kube-apiserver \n# systemctl start kube-controller-manager \n# systemctl start kube-scheduler \n</code></pre><p>minion 节点：</p>\n<pre><code># yum install -y kubernetes  docker\n# systemctl start kubelet \n# systemctl start kube-proxy \n# systemctl start docker \n</code></pre><h2 id=\"2，kubernetes-版本升级\"><a href=\"#2，kubernetes-版本升级\" class=\"headerlink\" title=\"2，kubernetes 版本升级\"></a>2，kubernetes 版本升级</h2><p>以前一直以为公司会追求稳定性，在软件和系统的选取方便会优先考虑稳定的版本。但是来了公司才发现，某些软件出了新版本后，若有期待的功能并且在掌控范围内都会及时更新，所以也协助过导师更新了线下集群的 minion 节点。</p>\n<p>下面是 minion 节点的升级操作，master 节点的操作类似。首先需要下载 <a href=\"https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG.md#downloads-for-v160-alpha1\" target=\"_blank\" rel=\"noopener\">kubernetes-server-linux-amd64.tar.gz</a>  这个包，下载你所要更新到的版本。</p>\n<p><strong>升级步骤</strong>：</p>\n<ul>\n<li>1，先关掉 docker 服务。docker 关闭后，当前节点的 pod 随之会被调度到其他节点上</li>\n<li>2，备份二进制程序（kubectl,kube-proxy）</li>\n<li>3，将解压后的二进制程序覆盖以前的版本</li>\n<li>4，最后重新启动服务</li>\n</ul>\n<pre><code># systemctl stop docker\n# which kubectl kube-proxy \n/usr/bin/kubectl\n/usr/bin/kube-proxy\n\n# cp /usr/bin/{kubectl,kube-proxy} /tmp/\n# yes | cp bin/{kubectl,kube-proxy} /usr/bin/\n\n# systemctl status {kubectl,kube-proxy}\n\n# systemctl start docker \n</code></pre><h2 id=\"3，kubeconfig-使用\"><a href=\"#3，kubeconfig-使用\" class=\"headerlink\" title=\"3，kubeconfig 使用\"></a>3，kubeconfig 使用</h2><p>若你使用的 kubelet 版本为 1.4，使用 <code>systemctl status kubelet</code>  会看到这样一句话：</p>\n<pre><code>--api-servers option is deprecated for kubelet, so I am now trying to deploy with simply using --kubeconfig=/etc/kubernetes/node-kubeconfig.yaml\n</code></pre><p>使用 kuconfig 是为了将所有的命令行启动选项放在一个文件中方便使用。由于我们已经升级到了 1.5，所以也得升级此功能，首先需要写一个 kubeconfig 的 yaml 文件，其 <a href=\"http://kubernetes.io/docs/user-guide/kubeconfig-file/\" target=\"_blank\" rel=\"noopener\">官方文档</a> 有格式说明， 本人已将其翻译，翻译文档见下文。</p>\n<p><strong>kubeconfig</strong> 文件示例：</p>\n<pre><code>apiVersion: v1\nclusters:\n- cluster:\n    server: http://localhost:8080\n  name: local-server\ncontexts:\n- context:\n    cluster: local-server\n    namespace: the-right-prefix\n    user: myself\n  name: default-context\ncurrent-context: default-context\nkind: Config\npreferences: {}\nusers:\n- name: myself\n  user:\n    password: secret\n    username: admin\n</code></pre><hr>\n<pre><code># kubelet --kubeconfig=/etc/kubernetes/config --require-kubeconfig=true\n</code></pre><p>kubeconfig 参数：设置 kubelet 配置文件路径，这个配置文件用来告诉 kubelet 组件 api-server 组件的位置，默认路径是。</p>\n<p>require-kubeconfig 参数：这是一个布尔类型参数，可以设置成true 或者 false，如果设置成 true，那么表示启用 kubeconfig 参数，从 kubeconfig 参数设置的配置文件中查找 api-server 组件，如果设置成 false，那么表示使用 kubelet 另外一个参数 “api-servers” 来查找 api-server 组件位置。</p>\n<p>关于 kubeconfig 的一个 <strong>issue</strong>，<a href=\"https://github.com/kubernetes/kubernetes/issues/36745\" target=\"_blank\" rel=\"noopener\">Kubelet won’t read apiserver from kubeconfig</a>。</p>\n<p><strong>升级步骤</strong>，当然前提是你的 kubelet 版本已经到了 1.5：</p>\n<ul>\n<li>1，关闭 kubelet、kube-proxy 服务；</li>\n<li><p>2，注释掉 <code>/etc/kubernetes/kubelet</code> 文件中下面这一行:</p>\n<p>  <code>KUBELET_API_SERVER=&quot;--api-servers=http://127.0.0.1:8080&quot;</code></p>\n</li>\n</ul>\n<p>然后在 <strong>KUBELET_ARGS</strong> 中添加： </p>\n<pre><code>--kubeconfig=/etc/kubernetes/kubeconfig --require-kubeconfig=true\n</code></pre><p>这里的路径是你 yaml 文件放置的路径。 </p>\n<ul>\n<li>3，重新启动刚关掉的两个服务</li>\n</ul>\n<hr>\n<h2 id=\"4，以下为-kubeconfig-配置官方文档的翻译\"><a href=\"#4，以下为-kubeconfig-配置官方文档的翻译\" class=\"headerlink\" title=\"4，以下为 kubeconfig 配置官方文档的翻译\"></a>4，以下为 <a href=\"https://kubernetes.io/docs/user-guide/kubeconfig-file/\" target=\"_blank\" rel=\"noopener\">kubeconfig 配置官方文档</a>的翻译</h2><h3 id=\"kubernetes-中的验证对于不同的群体可以使用不同的方法\"><a href=\"#kubernetes-中的验证对于不同的群体可以使用不同的方法\" class=\"headerlink\" title=\"kubernetes 中的验证对于不同的群体可以使用不同的方法.\"></a>kubernetes 中的验证对于不同的群体可以使用不同的方法.</h3><ul>\n<li>运行 kubelet 可能有的一种认证方式（即证书）。</li>\n<li>用户可能有不同的认证方式（即 token）。</li>\n<li>管理员可以为每个用户提供一个证书列表。</li>\n<li>可能会有多个集群，但我们想在一个地方定义它们 - 使用户能够用自己的证书并重用相同的全局配置。 </li>\n</ul>\n<p>因此为了在多个集群之间轻松切换，对于多个用户，定义了一个 kubeconfig 文件。</p>\n<p>此文件包含一系列认证机制和与 nicknames 有关的群集连接信息。它还引入了认证信息元组（用户）和集群连接信息的概念，被称为上下文也与 nickname 相关联。</p>\n<p>如果明确指定，也可以允许使用多个 kubeconfig 文件。在运行时，它们被合并加载并覆盖从命令行指定的选项（参见下面的规则）。</p>\n<h3 id=\"相关讨论\"><a href=\"#相关讨论\" class=\"headerlink\" title=\"相关讨论\"></a>相关讨论</h3><pre><code>http://issue.k8s.io/1755\n</code></pre><h3 id=\"kubeconfig-文件的组件\"><a href=\"#kubeconfig-文件的组件\" class=\"headerlink\" title=\"kubeconfig 文件的组件\"></a>kubeconfig 文件的组件</h3><p>kubeconfig 文件示例：</p>\n<pre><code>current-context: federal-context\napiVersion: v1\nclusters:\n- cluster:\n    api-version: v1\n    server: http://cow.org:8080\n  name: cow-cluster\n- cluster:\n    certificate-authority: path/to/my/cafile\n    server: https://horse.org:4443\n  name: horse-cluster\n- cluster:\n    insecure-skip-tls-verify: true\n    server: https://pig.org:443\n  name: pig-cluster\ncontexts:\n- context:\n    cluster: horse-cluster\n    namespace: chisel-ns\n    user: green-user\n  name: federal-context\n- context:\n    cluster: pig-cluster\n    namespace: saw-ns\n    user: black-user\n  name: queen-anne-context\nkind: Config\npreferences:\n  colors: true\nusers:\n- name: blue-user\n  user:\n    token: blue-token\n- name: green-user\n  user:\n    client-certificate: path/to/my/client/cert\n    client-key: path/to/my/client/key\n</code></pre><h3 id=\"组件的解释\"><a href=\"#组件的解释\" class=\"headerlink\" title=\"组件的解释\"></a>组件的解释</h3><h4 id=\"cluster\"><a href=\"#cluster\" class=\"headerlink\" title=\"cluster\"></a>cluster</h4><pre><code>clusters:\n- cluster:\n    certificate-authority: path/to/my/cafile\n    server: https://horse.org:4443\n  name: horse-cluster\n- cluster:\n    insecure-skip-tls-verify: true\n    server: https://pig.org:443\n  name: pig-cluster\n</code></pre><p>cluster 包含 kubernetes 集群的 endpoint 数据。它包括 kubernetes apiserver 完全限定的 URL，以及集群的证书颁发机构或 insecure-skip-tls-verify：true，如果集群的服务证书未由系统信任的证书颁发机构签名。集群有一个名称（nickname），该名称用作此 kubeconfig 文件中的字典键。你可以使用 kubectl config set-cluster 添加或修改集群条目。</p>\n<h4 id=\"user\"><a href=\"#user\" class=\"headerlink\" title=\"user\"></a>user</h4><pre><code>users:\n- name: blue-user\n  user:\n    token: blue-token\n- name: green-user\n  user:\n    client-certificate: path/to/my/client/cert\n    client-key: path/to/my/client/key\n</code></pre><p>用户定义用于向 Kubernetes 集群进行身份验证的客户端凭证。在 kubeconfig 被加载/合并之后，用户具有在用户条目列表中充当其键的名称（nickname）。可用的凭证是客户端证书，客户端密钥，令牌和用户名/密码。用户名/密码和令牌是互斥的，但客户端证书和密钥可以与它们组合。你可以使用 kubectl config set-credentials 添加或修改用户条目。</p>\n<h3 id=\"context\"><a href=\"#context\" class=\"headerlink\" title=\"context\"></a>context</h3><pre><code>contexts:\n- context:\n    cluster: horse-cluster\n    namespace: chisel-ns\n    user: green-user\n  name: federal-context\n</code></pre><p>context 定义 cluster,user,namespace 元组的名称，用来向指定的集群使用提供的认证信息和命名空间向指定的集群发送请求。<br>三个都是可选的，仅指定 cluster，user，namespace 中的一个也是可用的，或者指定为 none。未指定的值或命名值，在加载的 kubeconfig 中没有对应的条目（例如，如果context 在上面的 kubeconfig 文件指定为 pink-user ）将被替换为默认值。有关覆盖/合并行为，请参阅下面的加载/合并规则。你可以使用 kubectl config set-context 添加或修改上下文条目。</p>\n<h4 id=\"current-context\"><a href=\"#current-context\" class=\"headerlink\" title=\"current-context\"></a>current-context</h4><pre><code>current-context: federal-context\n</code></pre><p>current-context 是 cluster,user,namespace 中的 nickname 或者 ‘key’，kubectl 在从此文件加载配置时将使用默认值。通过给 kubelett 传递 –context=CONTEXT, –cluster=CLUSTER, –user=USER, and/or –namespace=NAMESPACE 可以从命令行覆盖任何值。你可以使用 kubectl config use-context 更改当前上下文。</p>\n<h4 id=\"杂项\"><a href=\"#杂项\" class=\"headerlink\" title=\"杂项\"></a>杂项</h4><pre><code>apiVersion: v1\nkind: Config\npreferences:\n  colors: true\n</code></pre><p>apiVersion 和 kind 标识客户端要解析的版本和模式，不应手动编辑。<br>preferences 指定选项(和当前未使用的) kubectl preferences.</p>\n<h3 id=\"查看-kubeconfig-文件\"><a href=\"#查看-kubeconfig-文件\" class=\"headerlink\" title=\"查看 kubeconfig 文件\"></a>查看 kubeconfig 文件</h3><p>kubectl config view 会显示当前的 kubeconfig 配置。默认情况下，它会显示所有加载的 kubeconfig 配置， 你可以通过 –minify 选项来过滤与 current-context 相关的设置。请参见 kubectl config view 的其他选项。</p>\n<h3 id=\"创建你的-kubeconfig-文件\"><a href=\"#创建你的-kubeconfig-文件\" class=\"headerlink\" title=\"创建你的 kubeconfig 文件\"></a>创建你的 kubeconfig 文件</h3><p>注意，如果你通过 kube-up.sh 部署 k8s，则不需要创建 kubeconfig 文件，脚本将为你创建。</p>\n<p>在任何情况下，可以轻松地使用此文件作为模板来创建自己的 kubeconfig 文件。</p>\n<p>因此，让我们快速浏览上述文件的基础知识，以便可以根据需要轻松修改…</p>\n<p>以上文件可能对应于使用–token-auth-file = tokens.csv 选项启动的 api 服务器，其中 tokens.csv文件看起来像这样：</p>\n<pre><code>blue-user,blue-user,1\nmister-red,mister-red,2\n</code></pre><p>此外，由于不同用户使用不同的验证机制，api-server 可能已经启动其他的身份验证选项（有许多这样的选项，在制作 kubeconfig 文件之前确保你理解所关心的，因为没有人需要实现所有可能的认证方案）。</p>\n<ul>\n<li>由于 current-context 的用户是 “green-user”，因此任何使用此 kubeconfig 文件的客户端自然都能够成功登录 api-server，因为我们提供了 “green-user” 的客户端凭据。</li>\n<li>类似地，我们也可以选择改变 current-context 的值为 “blue-user”。</li>\n<li>在上述情况下，“green-user” 将必须通过提供证书登录，而 “blue-user” 只需提供 token。所有的这些信息将由我们处理通过</li>\n</ul>\n<h3 id=\"加载和合并规则\"><a href=\"#加载和合并规则\" class=\"headerlink\" title=\"加载和合并规则\"></a>加载和合并规则</h3><p>加载和合并 kubeconfig 文件的规则很简单，但有很多。最终配置按照以下顺序构建：</p>\n<p>1，从磁盘获取 kubeconfig。通过以下层次结构和合并规则完成：<br>如果设置了 CommandLineLocation（kubeconfig 命令行选项的值），则仅使用此文件，不合并。只允许此标志的一个实例。</p>\n<p>否则，如果 EnvVarLocation（$KUBECONFIG 的值）可用，将其用作应合并的文件列表。根据以下规则将文件合并在一起。将忽略空文件名。文件内容不能反序列化则产生错误。设置特定值或映射密钥的第一个文件将被使用，并且值或映射密钥永远不会更改。这意味着设置CurrentContext 的第一个文件将保留其 context。也意味着如果两个文件指定 “red-user”,，则仅使用来自第一个文件的 “red-user” 的值。来自第二个 “red-user” 文件的非冲突条目也将被丢弃。</p>\n<p>对于其他的，使用 HomeDirectoryLocation（~/.kube/config）也不会被合并。</p>\n<p>2，此链中第一个被匹配的 context 将被使用：</p>\n<ul>\n<li>1，命令行参数 - 命令行选项中 context 的值</li>\n<li>2，合并文件中的 current-context</li>\n<li>3，此段允许为空</li>\n</ul>\n<p>3，确定要使用的集群信息和用户。在此处，也可能没有 context。这个链中第一次使用的会被构建。（运行两次，一次为用户，一次为集群）：</p>\n<ul>\n<li>1，命令行参数 - user 是用户名，cluster 是集群名</li>\n<li>2，如果存在 context 则使用</li>\n<li>3，允许为空</li>\n</ul>\n<p>4，确定要使用的实际集群信息。在此处，也可能没有集群信息。基于链构建每个集群信息（首次使用的）：</p>\n<ul>\n<li>1，命令行参数 - server，api-version，certificate-authority 和 insecure-skip-tls-verify</li>\n<li>2，如果存在集群信息并且该属性的值存在，则使用它。</li>\n<li>3，如果没有 server 位置则出错。</li>\n</ul>\n<p>5，确定要使用的实际用户信息。用户构建使用与集群信息相同的规则，但每个用户只能具有一种认证方法：</p>\n<ul>\n<li>1，加载优先级为 1）命令行参数，2） kubeconfig 的用户字段</li>\n<li>2，命令行参数：客户端证书，客户端密钥，用户名，密码和 token。</li>\n<li>3，如果两者有冲突则失败</li>\n</ul>\n<p>6，对于仍然缺失的信息，使用默认值并尽可能提示输入身份验证信息。</p>\n<p>7，kubeconfig 文件中的所有文件引用都是相对于 kubeconfig 文件本身的位置解析的。当文件引用显示在命令行上时，它们被视为相对于当前工作目录。当路径保存在 ~/.kube/config 中时，相对路径和绝对路径被分别存储。</p>\n<p>kubeconfig 文件中的任何路径都是相对于 kubeconfig 文件本身的位置解析的。</p>\n<h3 id=\"通过-kubectl-config-操作-kubeconfig\"><a href=\"#通过-kubectl-config-操作-kubeconfig\" class=\"headerlink\" title=\"通过 kubectl config  操作 kubeconfig\"></a>通过 kubectl config <subcommand> 操作 kubeconfig</subcommand></h3><p>为了更容易地操作 kubeconfig 文件，可以使用 kubectl config 的子命令。请参见 kubectl/kubectl_config.md 获取帮助。</p>\n<p>例如：</p>\n<pre><code>$ kubectl config set-credentials myself --username=admin --password=secret\n$ kubectl config set-cluster local-server --server=http://localhost:8080\n$ kubectl config set-context default-context --cluster=local-server --user=myself\n$ kubectl config use-context default-context\n$ kubectl config set contexts.default-context.namespace the-right-prefix\n$ kubectl config view\n</code></pre><p>输出：</p>\n<pre><code>apiVersion: v1\nclusters:\n- cluster:\n    server: http://localhost:8080\n  name: local-server\ncontexts:\n- context:\n    cluster: local-server\n    namespace: the-right-prefix\n    user: myself\n  name: default-context\ncurrent-context: default-context\nkind: Config\npreferences: {}\nusers:\n- name: myself\n  user:\n    password: secret\n    username: admin\n</code></pre><p>一个 kubeconfig 文件类似这样：</p>\n<pre><code>apiVersion: v1\nclusters:\n- cluster:\n    server: http://localhost:8080\n  name: local-server\ncontexts:\n- context:\n    cluster: local-server\n    namespace: the-right-prefix\n    user: myself\n  name: default-context\ncurrent-context: default-context\nkind: Config\npreferences: {}\nusers:\n- name: myself\n  user:\n    password: secret\n    username: admin\n</code></pre><p>示例文件的命令操作：</p>\n<pre><code>$ kubectl config set preferences.colors true\n$ kubectl config set-cluster cow-cluster --server=http://cow.org:8080 --api-version=v1\n$ kubectl config set-cluster horse-cluster --server=https://horse.org:4443 --certificate-authority=path/to/my/cafile\n$ kubectl config set-cluster pig-cluster --server=https://pig.org:443 --insecure-skip-tls-verify=true\n$ kubectl config set-credentials blue-user --token=blue-token\n$ kubectl config set-credentials green-user --client-certificate=path/to/my/client/cert --client-key=path/to/my/client/key\n$ kubectl config set-context queen-anne-context --cluster=pig-cluster --user=black-user --namespace=saw-ns\n$ kubectl config set-context federal-context --cluster=horse-cluster --user=green-user --namespace=chisel-ns\n$ kubectl config use-context federal-context\n</code></pre><p>最后的总结：</p>\n<p>所以，看完这些，你就可以快速开始创建自己的 kubeconfig 文件了：</p>\n<ul>\n<li>仔细查看并了解 api-server 如何启动：了解你的安全策略后，然后才能设计 kubeconfig 文件以便于身份验证</li>\n<li>将上面的代码段替换为你集群的 api-server endpoint 的信息。</li>\n<li>确保 api-server 已启动，以至少向其提供一个用户（例如：green-user）凭证。当然，你必须查看 api-server 文档，以确定以目前最好的技术提供详细的身份验证信息。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>1 月初办理了入职手续，所在的团队是搞私有云的，目前只有小规模的应用，所采用 <strong>kubernetes + docker</strong> 技术栈，年前所做的事情也不算多，熟悉了 kubernetes 的架构，自己搭建单机版的 kubernetes，以及在程序中调用 kubernetes 的 <code>API</code> 进行某些操作。</p>\n<h2 id=\"1，kubernetes-搭建\"><a href=\"#1，kubernetes-搭建\" class=\"headerlink\" title=\"1，kubernetes 搭建\"></a>1，kubernetes 搭建</h2><p><a href=\"https://github.com/kubernetes/kubernetes\" target=\"_blank\" rel=\"noopener\">kubernetes</a> 是 google 的一个开源软件，其社区活跃量远超 <strong>Mesos，Coreos</strong> 的，若想深入学习建议参考<strong>《kubernetes 权威指南》</strong>，我们团队的人都是从这本书学起的，作为一个新技术，会踩到的坑非常多，以下提及的是我学习过程中整理的部分资料。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1262158-e050e035d6fa64ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"kubernetes 架构图\"></p>\n<p>kubernetes 是一个分布式系统，所以它有多个组件，并且需要安装在多个节点，一般来说有三个节点，etcd，master 和 minion，但是每个节点却又有多台机器，etcd 作为高性能存储服务，一般独立为一个节点，当然容错是必不可少的，官方建议集群使用奇数个节点，我们的线下集群使用 3 个节点。etcd 的学习可以参考 <strong>gitbook</strong> 上面某大神的一本书 一 <a href=\"https://skyao.gitbooks.io/leaning-etcd3/content/documentation/leaning/\" target=\"_blank\" rel=\"noopener\">etcd3学习笔记</a>。master 端需要安装 kube-apiserver、kube-controller-manager和kube-scheduler 组件，minion 节点需要部署 kubelet、kube-proxy、docker 组件。</p>\n<blockquote>\n<p>注意：内核版本 &gt; 3.10 的系统才支持 kubernetes，所以一般安装在centos 7 上。 </p>\n</blockquote>\n<p>etcd 节点：</p>\n<pre><code># yum install -y etcd \n# systemctl start etcd  \n</code></pre><p>master 节点：</p>\n<pre><code># yum install -y kubernetes-master\n# systemctl start kube-apiserver \n# systemctl start kube-controller-manager \n# systemctl start kube-scheduler \n</code></pre><p>minion 节点：</p>\n<pre><code># yum install -y kubernetes  docker\n# systemctl start kubelet \n# systemctl start kube-proxy \n# systemctl start docker \n</code></pre><h2 id=\"2，kubernetes-版本升级\"><a href=\"#2，kubernetes-版本升级\" class=\"headerlink\" title=\"2，kubernetes 版本升级\"></a>2，kubernetes 版本升级</h2><p>以前一直以为公司会追求稳定性，在软件和系统的选取方便会优先考虑稳定的版本。但是来了公司才发现，某些软件出了新版本后，若有期待的功能并且在掌控范围内都会及时更新，所以也协助过导师更新了线下集群的 minion 节点。</p>\n<p>下面是 minion 节点的升级操作，master 节点的操作类似。首先需要下载 <a href=\"https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG.md#downloads-for-v160-alpha1\" target=\"_blank\" rel=\"noopener\">kubernetes-server-linux-amd64.tar.gz</a>  这个包，下载你所要更新到的版本。</p>\n<p><strong>升级步骤</strong>：</p>\n<ul>\n<li>1，先关掉 docker 服务。docker 关闭后，当前节点的 pod 随之会被调度到其他节点上</li>\n<li>2，备份二进制程序（kubectl,kube-proxy）</li>\n<li>3，将解压后的二进制程序覆盖以前的版本</li>\n<li>4，最后重新启动服务</li>\n</ul>\n<pre><code># systemctl stop docker\n# which kubectl kube-proxy \n/usr/bin/kubectl\n/usr/bin/kube-proxy\n\n# cp /usr/bin/{kubectl,kube-proxy} /tmp/\n# yes | cp bin/{kubectl,kube-proxy} /usr/bin/\n\n# systemctl status {kubectl,kube-proxy}\n\n# systemctl start docker \n</code></pre><h2 id=\"3，kubeconfig-使用\"><a href=\"#3，kubeconfig-使用\" class=\"headerlink\" title=\"3，kubeconfig 使用\"></a>3，kubeconfig 使用</h2><p>若你使用的 kubelet 版本为 1.4，使用 <code>systemctl status kubelet</code>  会看到这样一句话：</p>\n<pre><code>--api-servers option is deprecated for kubelet, so I am now trying to deploy with simply using --kubeconfig=/etc/kubernetes/node-kubeconfig.yaml\n</code></pre><p>使用 kuconfig 是为了将所有的命令行启动选项放在一个文件中方便使用。由于我们已经升级到了 1.5，所以也得升级此功能，首先需要写一个 kubeconfig 的 yaml 文件，其 <a href=\"http://kubernetes.io/docs/user-guide/kubeconfig-file/\" target=\"_blank\" rel=\"noopener\">官方文档</a> 有格式说明， 本人已将其翻译，翻译文档见下文。</p>\n<p><strong>kubeconfig</strong> 文件示例：</p>\n<pre><code>apiVersion: v1\nclusters:\n- cluster:\n    server: http://localhost:8080\n  name: local-server\ncontexts:\n- context:\n    cluster: local-server\n    namespace: the-right-prefix\n    user: myself\n  name: default-context\ncurrent-context: default-context\nkind: Config\npreferences: {}\nusers:\n- name: myself\n  user:\n    password: secret\n    username: admin\n</code></pre><hr>\n<pre><code># kubelet --kubeconfig=/etc/kubernetes/config --require-kubeconfig=true\n</code></pre><p>kubeconfig 参数：设置 kubelet 配置文件路径，这个配置文件用来告诉 kubelet 组件 api-server 组件的位置，默认路径是。</p>\n<p>require-kubeconfig 参数：这是一个布尔类型参数，可以设置成true 或者 false，如果设置成 true，那么表示启用 kubeconfig 参数，从 kubeconfig 参数设置的配置文件中查找 api-server 组件，如果设置成 false，那么表示使用 kubelet 另外一个参数 “api-servers” 来查找 api-server 组件位置。</p>\n<p>关于 kubeconfig 的一个 <strong>issue</strong>，<a href=\"https://github.com/kubernetes/kubernetes/issues/36745\" target=\"_blank\" rel=\"noopener\">Kubelet won’t read apiserver from kubeconfig</a>。</p>\n<p><strong>升级步骤</strong>，当然前提是你的 kubelet 版本已经到了 1.5：</p>\n<ul>\n<li>1，关闭 kubelet、kube-proxy 服务；</li>\n<li><p>2，注释掉 <code>/etc/kubernetes/kubelet</code> 文件中下面这一行:</p>\n<p>  <code>KUBELET_API_SERVER=&quot;--api-servers=http://127.0.0.1:8080&quot;</code></p>\n</li>\n</ul>\n<p>然后在 <strong>KUBELET_ARGS</strong> 中添加： </p>\n<pre><code>--kubeconfig=/etc/kubernetes/kubeconfig --require-kubeconfig=true\n</code></pre><p>这里的路径是你 yaml 文件放置的路径。 </p>\n<ul>\n<li>3，重新启动刚关掉的两个服务</li>\n</ul>\n<hr>\n<h2 id=\"4，以下为-kubeconfig-配置官方文档的翻译\"><a href=\"#4，以下为-kubeconfig-配置官方文档的翻译\" class=\"headerlink\" title=\"4，以下为 kubeconfig 配置官方文档的翻译\"></a>4，以下为 <a href=\"https://kubernetes.io/docs/user-guide/kubeconfig-file/\" target=\"_blank\" rel=\"noopener\">kubeconfig 配置官方文档</a>的翻译</h2><h3 id=\"kubernetes-中的验证对于不同的群体可以使用不同的方法\"><a href=\"#kubernetes-中的验证对于不同的群体可以使用不同的方法\" class=\"headerlink\" title=\"kubernetes 中的验证对于不同的群体可以使用不同的方法.\"></a>kubernetes 中的验证对于不同的群体可以使用不同的方法.</h3><ul>\n<li>运行 kubelet 可能有的一种认证方式（即证书）。</li>\n<li>用户可能有不同的认证方式（即 token）。</li>\n<li>管理员可以为每个用户提供一个证书列表。</li>\n<li>可能会有多个集群，但我们想在一个地方定义它们 - 使用户能够用自己的证书并重用相同的全局配置。 </li>\n</ul>\n<p>因此为了在多个集群之间轻松切换，对于多个用户，定义了一个 kubeconfig 文件。</p>\n<p>此文件包含一系列认证机制和与 nicknames 有关的群集连接信息。它还引入了认证信息元组（用户）和集群连接信息的概念，被称为上下文也与 nickname 相关联。</p>\n<p>如果明确指定，也可以允许使用多个 kubeconfig 文件。在运行时，它们被合并加载并覆盖从命令行指定的选项（参见下面的规则）。</p>\n<h3 id=\"相关讨论\"><a href=\"#相关讨论\" class=\"headerlink\" title=\"相关讨论\"></a>相关讨论</h3><pre><code>http://issue.k8s.io/1755\n</code></pre><h3 id=\"kubeconfig-文件的组件\"><a href=\"#kubeconfig-文件的组件\" class=\"headerlink\" title=\"kubeconfig 文件的组件\"></a>kubeconfig 文件的组件</h3><p>kubeconfig 文件示例：</p>\n<pre><code>current-context: federal-context\napiVersion: v1\nclusters:\n- cluster:\n    api-version: v1\n    server: http://cow.org:8080\n  name: cow-cluster\n- cluster:\n    certificate-authority: path/to/my/cafile\n    server: https://horse.org:4443\n  name: horse-cluster\n- cluster:\n    insecure-skip-tls-verify: true\n    server: https://pig.org:443\n  name: pig-cluster\ncontexts:\n- context:\n    cluster: horse-cluster\n    namespace: chisel-ns\n    user: green-user\n  name: federal-context\n- context:\n    cluster: pig-cluster\n    namespace: saw-ns\n    user: black-user\n  name: queen-anne-context\nkind: Config\npreferences:\n  colors: true\nusers:\n- name: blue-user\n  user:\n    token: blue-token\n- name: green-user\n  user:\n    client-certificate: path/to/my/client/cert\n    client-key: path/to/my/client/key\n</code></pre><h3 id=\"组件的解释\"><a href=\"#组件的解释\" class=\"headerlink\" title=\"组件的解释\"></a>组件的解释</h3><h4 id=\"cluster\"><a href=\"#cluster\" class=\"headerlink\" title=\"cluster\"></a>cluster</h4><pre><code>clusters:\n- cluster:\n    certificate-authority: path/to/my/cafile\n    server: https://horse.org:4443\n  name: horse-cluster\n- cluster:\n    insecure-skip-tls-verify: true\n    server: https://pig.org:443\n  name: pig-cluster\n</code></pre><p>cluster 包含 kubernetes 集群的 endpoint 数据。它包括 kubernetes apiserver 完全限定的 URL，以及集群的证书颁发机构或 insecure-skip-tls-verify：true，如果集群的服务证书未由系统信任的证书颁发机构签名。集群有一个名称（nickname），该名称用作此 kubeconfig 文件中的字典键。你可以使用 kubectl config set-cluster 添加或修改集群条目。</p>\n<h4 id=\"user\"><a href=\"#user\" class=\"headerlink\" title=\"user\"></a>user</h4><pre><code>users:\n- name: blue-user\n  user:\n    token: blue-token\n- name: green-user\n  user:\n    client-certificate: path/to/my/client/cert\n    client-key: path/to/my/client/key\n</code></pre><p>用户定义用于向 Kubernetes 集群进行身份验证的客户端凭证。在 kubeconfig 被加载/合并之后，用户具有在用户条目列表中充当其键的名称（nickname）。可用的凭证是客户端证书，客户端密钥，令牌和用户名/密码。用户名/密码和令牌是互斥的，但客户端证书和密钥可以与它们组合。你可以使用 kubectl config set-credentials 添加或修改用户条目。</p>\n<h3 id=\"context\"><a href=\"#context\" class=\"headerlink\" title=\"context\"></a>context</h3><pre><code>contexts:\n- context:\n    cluster: horse-cluster\n    namespace: chisel-ns\n    user: green-user\n  name: federal-context\n</code></pre><p>context 定义 cluster,user,namespace 元组的名称，用来向指定的集群使用提供的认证信息和命名空间向指定的集群发送请求。<br>三个都是可选的，仅指定 cluster，user，namespace 中的一个也是可用的，或者指定为 none。未指定的值或命名值，在加载的 kubeconfig 中没有对应的条目（例如，如果context 在上面的 kubeconfig 文件指定为 pink-user ）将被替换为默认值。有关覆盖/合并行为，请参阅下面的加载/合并规则。你可以使用 kubectl config set-context 添加或修改上下文条目。</p>\n<h4 id=\"current-context\"><a href=\"#current-context\" class=\"headerlink\" title=\"current-context\"></a>current-context</h4><pre><code>current-context: federal-context\n</code></pre><p>current-context 是 cluster,user,namespace 中的 nickname 或者 ‘key’，kubectl 在从此文件加载配置时将使用默认值。通过给 kubelett 传递 –context=CONTEXT, –cluster=CLUSTER, –user=USER, and/or –namespace=NAMESPACE 可以从命令行覆盖任何值。你可以使用 kubectl config use-context 更改当前上下文。</p>\n<h4 id=\"杂项\"><a href=\"#杂项\" class=\"headerlink\" title=\"杂项\"></a>杂项</h4><pre><code>apiVersion: v1\nkind: Config\npreferences:\n  colors: true\n</code></pre><p>apiVersion 和 kind 标识客户端要解析的版本和模式，不应手动编辑。<br>preferences 指定选项(和当前未使用的) kubectl preferences.</p>\n<h3 id=\"查看-kubeconfig-文件\"><a href=\"#查看-kubeconfig-文件\" class=\"headerlink\" title=\"查看 kubeconfig 文件\"></a>查看 kubeconfig 文件</h3><p>kubectl config view 会显示当前的 kubeconfig 配置。默认情况下，它会显示所有加载的 kubeconfig 配置， 你可以通过 –minify 选项来过滤与 current-context 相关的设置。请参见 kubectl config view 的其他选项。</p>\n<h3 id=\"创建你的-kubeconfig-文件\"><a href=\"#创建你的-kubeconfig-文件\" class=\"headerlink\" title=\"创建你的 kubeconfig 文件\"></a>创建你的 kubeconfig 文件</h3><p>注意，如果你通过 kube-up.sh 部署 k8s，则不需要创建 kubeconfig 文件，脚本将为你创建。</p>\n<p>在任何情况下，可以轻松地使用此文件作为模板来创建自己的 kubeconfig 文件。</p>\n<p>因此，让我们快速浏览上述文件的基础知识，以便可以根据需要轻松修改…</p>\n<p>以上文件可能对应于使用–token-auth-file = tokens.csv 选项启动的 api 服务器，其中 tokens.csv文件看起来像这样：</p>\n<pre><code>blue-user,blue-user,1\nmister-red,mister-red,2\n</code></pre><p>此外，由于不同用户使用不同的验证机制，api-server 可能已经启动其他的身份验证选项（有许多这样的选项，在制作 kubeconfig 文件之前确保你理解所关心的，因为没有人需要实现所有可能的认证方案）。</p>\n<ul>\n<li>由于 current-context 的用户是 “green-user”，因此任何使用此 kubeconfig 文件的客户端自然都能够成功登录 api-server，因为我们提供了 “green-user” 的客户端凭据。</li>\n<li>类似地，我们也可以选择改变 current-context 的值为 “blue-user”。</li>\n<li>在上述情况下，“green-user” 将必须通过提供证书登录，而 “blue-user” 只需提供 token。所有的这些信息将由我们处理通过</li>\n</ul>\n<h3 id=\"加载和合并规则\"><a href=\"#加载和合并规则\" class=\"headerlink\" title=\"加载和合并规则\"></a>加载和合并规则</h3><p>加载和合并 kubeconfig 文件的规则很简单，但有很多。最终配置按照以下顺序构建：</p>\n<p>1，从磁盘获取 kubeconfig。通过以下层次结构和合并规则完成：<br>如果设置了 CommandLineLocation（kubeconfig 命令行选项的值），则仅使用此文件，不合并。只允许此标志的一个实例。</p>\n<p>否则，如果 EnvVarLocation（$KUBECONFIG 的值）可用，将其用作应合并的文件列表。根据以下规则将文件合并在一起。将忽略空文件名。文件内容不能反序列化则产生错误。设置特定值或映射密钥的第一个文件将被使用，并且值或映射密钥永远不会更改。这意味着设置CurrentContext 的第一个文件将保留其 context。也意味着如果两个文件指定 “red-user”,，则仅使用来自第一个文件的 “red-user” 的值。来自第二个 “red-user” 文件的非冲突条目也将被丢弃。</p>\n<p>对于其他的，使用 HomeDirectoryLocation（~/.kube/config）也不会被合并。</p>\n<p>2，此链中第一个被匹配的 context 将被使用：</p>\n<ul>\n<li>1，命令行参数 - 命令行选项中 context 的值</li>\n<li>2，合并文件中的 current-context</li>\n<li>3，此段允许为空</li>\n</ul>\n<p>3，确定要使用的集群信息和用户。在此处，也可能没有 context。这个链中第一次使用的会被构建。（运行两次，一次为用户，一次为集群）：</p>\n<ul>\n<li>1，命令行参数 - user 是用户名，cluster 是集群名</li>\n<li>2，如果存在 context 则使用</li>\n<li>3，允许为空</li>\n</ul>\n<p>4，确定要使用的实际集群信息。在此处，也可能没有集群信息。基于链构建每个集群信息（首次使用的）：</p>\n<ul>\n<li>1，命令行参数 - server，api-version，certificate-authority 和 insecure-skip-tls-verify</li>\n<li>2，如果存在集群信息并且该属性的值存在，则使用它。</li>\n<li>3，如果没有 server 位置则出错。</li>\n</ul>\n<p>5，确定要使用的实际用户信息。用户构建使用与集群信息相同的规则，但每个用户只能具有一种认证方法：</p>\n<ul>\n<li>1，加载优先级为 1）命令行参数，2） kubeconfig 的用户字段</li>\n<li>2，命令行参数：客户端证书，客户端密钥，用户名，密码和 token。</li>\n<li>3，如果两者有冲突则失败</li>\n</ul>\n<p>6，对于仍然缺失的信息，使用默认值并尽可能提示输入身份验证信息。</p>\n<p>7，kubeconfig 文件中的所有文件引用都是相对于 kubeconfig 文件本身的位置解析的。当文件引用显示在命令行上时，它们被视为相对于当前工作目录。当路径保存在 ~/.kube/config 中时，相对路径和绝对路径被分别存储。</p>\n<p>kubeconfig 文件中的任何路径都是相对于 kubeconfig 文件本身的位置解析的。</p>\n<h3 id=\"通过-kubectl-config-操作-kubeconfig\"><a href=\"#通过-kubectl-config-操作-kubeconfig\" class=\"headerlink\" title=\"通过 kubectl config  操作 kubeconfig\"></a>通过 kubectl config <subcommand> 操作 kubeconfig</subcommand></h3><p>为了更容易地操作 kubeconfig 文件，可以使用 kubectl config 的子命令。请参见 kubectl/kubectl_config.md 获取帮助。</p>\n<p>例如：</p>\n<pre><code>$ kubectl config set-credentials myself --username=admin --password=secret\n$ kubectl config set-cluster local-server --server=http://localhost:8080\n$ kubectl config set-context default-context --cluster=local-server --user=myself\n$ kubectl config use-context default-context\n$ kubectl config set contexts.default-context.namespace the-right-prefix\n$ kubectl config view\n</code></pre><p>输出：</p>\n<pre><code>apiVersion: v1\nclusters:\n- cluster:\n    server: http://localhost:8080\n  name: local-server\ncontexts:\n- context:\n    cluster: local-server\n    namespace: the-right-prefix\n    user: myself\n  name: default-context\ncurrent-context: default-context\nkind: Config\npreferences: {}\nusers:\n- name: myself\n  user:\n    password: secret\n    username: admin\n</code></pre><p>一个 kubeconfig 文件类似这样：</p>\n<pre><code>apiVersion: v1\nclusters:\n- cluster:\n    server: http://localhost:8080\n  name: local-server\ncontexts:\n- context:\n    cluster: local-server\n    namespace: the-right-prefix\n    user: myself\n  name: default-context\ncurrent-context: default-context\nkind: Config\npreferences: {}\nusers:\n- name: myself\n  user:\n    password: secret\n    username: admin\n</code></pre><p>示例文件的命令操作：</p>\n<pre><code>$ kubectl config set preferences.colors true\n$ kubectl config set-cluster cow-cluster --server=http://cow.org:8080 --api-version=v1\n$ kubectl config set-cluster horse-cluster --server=https://horse.org:4443 --certificate-authority=path/to/my/cafile\n$ kubectl config set-cluster pig-cluster --server=https://pig.org:443 --insecure-skip-tls-verify=true\n$ kubectl config set-credentials blue-user --token=blue-token\n$ kubectl config set-credentials green-user --client-certificate=path/to/my/client/cert --client-key=path/to/my/client/key\n$ kubectl config set-context queen-anne-context --cluster=pig-cluster --user=black-user --namespace=saw-ns\n$ kubectl config set-context federal-context --cluster=horse-cluster --user=green-user --namespace=chisel-ns\n$ kubectl config use-context federal-context\n</code></pre><p>最后的总结：</p>\n<p>所以，看完这些，你就可以快速开始创建自己的 kubeconfig 文件了：</p>\n<ul>\n<li>仔细查看并了解 api-server 如何启动：了解你的安全策略后，然后才能设计 kubeconfig 文件以便于身份验证</li>\n<li>将上面的代码段替换为你集群的 api-server endpoint 的信息。</li>\n<li>确保 api-server 已启动，以至少向其提供一个用户（例如：green-user）凭证。当然，你必须查看 api-server 文档，以确定以目前最好的技术提供详细的身份验证信息。</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}